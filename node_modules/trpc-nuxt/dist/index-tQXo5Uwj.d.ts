import { FetchCreateContextFnOptions, FetchHandlerRequestOptions } from "@trpc/server/adapters/fetch";
import * as h30 from "h3";
import { H3Event } from "h3";
import { AnyTRPCRouter, inferRouterContext } from "@trpc/server";

//#region src/server/createTRPCNuxtHandler.d.ts
type MaybePromise<T> = T | Promise<T>;
type CreateContextFn<TRouter extends AnyTRPCRouter> = (event: H3Event, fetchCreateContextOptions: FetchCreateContextFnOptions) => MaybePromise<inferRouterContext<TRouter>>;
type TRPCNuxtHandlerOptions<TRouter extends AnyTRPCRouter> = Omit<FetchHandlerRequestOptions<TRouter>, 'endpoint' | 'req' | 'createContext'> & {
  /**
   * The tRPC API endpoint.
   * @default '/api/trpc'
   */
  endpoint?: string;
  /**
   * A function that returns the tRPC context.
   * @see https://trpc.io/docs/context
   */
  createContext?: CreateContextFn<TRouter>;
};
declare function createTRPCNuxtHandler<TRouter extends AnyTRPCRouter>(opts: TRPCNuxtHandlerOptions<TRouter>): h30.EventHandler<h30.EventHandlerRequest, Promise<Response | undefined>>;
//#endregion
//#region src/server/index.d.ts
/**
 * @deprecated Use createTRPCNuxtHandler instead. This will be removed in the next minor version.
 */
declare const createNuxtApiHandler: typeof createTRPCNuxtHandler;
//#endregion
export { createNuxtApiHandler, createTRPCNuxtHandler };