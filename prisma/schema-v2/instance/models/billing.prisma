model Transaction {
    id          String            @id @default(uuid()) @db.Uuid
    // publicId    String            @unique
    encounterId String            @unique @db.Uuid
    encounter   PatientEncounter  @relation(fields: [encounterId], references: [id], onDelete: Cascade)
    status      String
    items       TransactionItem[]
    payments    Payment[]
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt

    @@index([id])
}

model TransactionItem {
    id            String      @id @default(uuid()) @db.Uuid
    // publicId      String      @unique
    transactionId String      @db.Uuid
    transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
    name          String
    description   String?
    amount        Int
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt

    @@index([transactionId])
}

model PaymentPlan {
    id               String              @id @default(uuid()) @db.Uuid
    // publicId         String              @unique
    name             String
    description      String?
    cycle            String
    numberOfPayments Int
    instalments      PaymentInstalment[]
    createdAt        DateTime            @default(now())
    updatedAt        DateTime            @updatedAt
}

model Payment {
    id            String              @id @default(uuid()) @db.Uuid
    // publicId      String              @unique
    transactionId String              @db.Uuid
    transaction   Transaction         @relation(fields: [transactionId], references: [id], onDelete: Cascade)
    amount        Int
    instalments   PaymentInstalment[]
    createdAt     DateTime            @default(now())
    updatedAt     DateTime            @updatedAt
}

model PaymentInstalment {
    id               String      @id @default(uuid()) @db.Uuid
    // publicId         String      @unique
    paymentId        String      @db.Uuid
    payment          Payment     @relation(fields: [paymentId], references: [id], onDelete: Cascade)
    planId           String      @db.Uuid
    plan             PaymentPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
    instalmentNumber Int
    amountDue        Int
    amountPaid       Int
    createdAt        DateTime    @default(now())
    updatedAt        DateTime    @updatedAt
}
