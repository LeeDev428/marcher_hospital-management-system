model PatientEncounter {
    id               String         @id @default(uuid()) @db.Uuid
    encounterId      String         @unique @db.Uuid
    patientProfileId String         @db.Uuid
    patientProfile   PatientProfile @relation(fields: [patientProfileId], references: [id], onDelete: Cascade)
    transaction      Transaction?
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt

    @@index([patientProfileId])
}

enum OutpatientEncounterType {
    CONSULTATION
    FOLLOW_UP
    LABORATORY
    RADIOLOGY
    OTHER
}

model OutpatientEncounter {
    id               String                  @id @default(uuid()) @db.Uuid
    patientProfileId String                  @db.Uuid
    patientProfile   PatientProfile          @relation(fields: [patientProfileId], references: [id], onDelete: Cascade)
    date             String
    time             String
    chiefComplaint   String
    doctorDiagnosis  String
    type             OutpatientEncounterType
    createdAt        DateTime                @default(now())
    updatedAt        DateTime                @updatedAt

    @@index([id])
}

enum InpatientTriage {
    HIGH_PRIORITY
    MEDIUM_PRIORITY
    LOW_PRIORITY
    NON_URGENT
}

enum InpatientDisposition {
    ADMITTED
    DISCHARGED
    DISCONTINUED
    TRANSFERRED
    DECEASED
    OTHER
}

model InpatientEncounter {
    id                   String                    @id @default(uuid()) @db.Uuid
    patientProfileId     String                    @db.Uuid
    patientProfile       PatientProfile            @relation(fields: [patientProfileId], references: [id], onDelete: Cascade)
    date                 String
    time                 String
    chiefComplaint       String
    doctorDiagnosis      String
    triage               InpatientTriage
    disposition          InpatientDisposition      @default(ADMITTED)
    dispositionDate      String?
    dispositionTime      String?
    dispositionNote      String?
    charts               InpatientEncounterChart[]
    orders               InpatientEncounterOrder[]
    medicalRecordRequest MedicalRecordRequest[]
    createdAt            DateTime                  @default(now())
    updatedAt            DateTime                  @updatedAt

    @@index([id])
}

model InpatientEncounterChart {
    id          String             @id @default(uuid()) @db.Uuid
    encounterId String             @db.Uuid
    encounter   InpatientEncounter @relation(fields: [encounterId], references: [id], onDelete: Cascade)
    staffId     String             @db.Uuid
    chart       String
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt

    @@index([id, encounterId])
}

enum InpatientEncounterOrderType {
    PRESCRIPTION
    LABORATORY
    RADIOLOGY
    OPERATION
    OTHER
}

enum InpatientEncounterOrderStatus {
    PENDING
    COMPLETED
    CANCELLED
}

model InpatientEncounterOrder {
    id          String                        @id @default(uuid()) @db.Uuid
    encounterId String                        @db.Uuid
    encounter   InpatientEncounter            @relation(fields: [encounterId], references: [id], onDelete: Cascade)
    type        InpatientEncounterOrderType
    order       String
    status      InpatientEncounterOrderStatus
    createdAt   DateTime                      @default(now())
    updatedAt   DateTime                      @updatedAt

    @@index([id, encounterId])
}
