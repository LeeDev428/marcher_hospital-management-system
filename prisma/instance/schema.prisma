generator client {
    provider = "prisma-client-js"
    output   = "../generated/instance"
}

datasource db {
    provider = "postgresql"
    url      = env("INSTANCE_DATABASE_URL")
}

// User Authentication Model
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // Hashed password
  firstName String
  lastName  String
  phone     String?
  role      UserRole @default(PATIENT)
  status    UserStatus @default(ACTIVE)
  isEmailVerified Boolean @default(false)
  emailVerifiedAt DateTime?
  
  // Profile information
  avatar    String?
  dateOfBirth DateTime?
  gender    Gender?
  address   String?
  city      String?
  province  String?
  zipCode   String?
  
  // System fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?
  
  // Relationships
  refreshTokens RefreshToken[]
  patientProfile Patient?
  staffProfile   Staff?
  partnerProfile Partner?
  doctorProfile  Doctor?
  
  // Audit fields
  createdBy String?
  updatedBy String?
  
  @@map("users")
}

// Refresh Tokens for JWT
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

// Extended Patient Profile
model Patient {
  id             String    @id @default(cuid())
  userId         String    @unique
  patientNumber  String    @unique
  
  // Medical Information
  bloodType      BloodType?
  allergies      String?
  medicalHistory String?
  emergencyContact String?
  emergencyPhone String?
  
  // Insurance Information
  insuranceProvider String?
  insuranceNumber   String?
  
  // System fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("patients")
}

// Staff Profile
model Staff {
  id           String    @id @default(cuid())
  userId       String    @unique
  staffNumber  String    @unique
  department   String?
  position     String?
  
  // Employment details
  hireDate     DateTime?
  salary       Decimal?
  
  // System fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  doctorProfile Doctor?
  
  @@map("staff")
}

// Doctor Profile (extends Staff)
model Doctor {
  id                String     @id @default(cuid())
  userId            String     @unique
  staffId           String     @unique
  doctorNumber      String     @unique
  
  // Medical credentials
  medicalLicense    String
  specialization    String
  subSpecialization String?
  boardCertification String?
  
  // Professional details
  yearsOfExperience Int?
  education         String?
  hospitalAffiliation String?
  consultationFee   Decimal?
  
  // Availability
  isAvailable       Boolean    @default(true)
  workingHours      String?    // JSON string for schedule
  
  // System fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)
  
  @@map("doctors")
}

// Partner Profile (Hospital/Clinic)
model Partner {
  id              String    @id @default(cuid())
  userId          String    @unique
  institutionName String
  institutionType PartnerType
  licenseNumber   String?
  
  // Contact Information
  website         String?
  contactPerson   String?
  
  // System fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("partners")
}

// Appointments Model
model Appointment {
  id          String   @id @default(cuid())
  patientId   String
  doctorId    String
  
  // Appointment details
  scheduledAt DateTime
  duration    Int      // Duration in minutes
  type        AppointmentType
  status      AppointmentStatus @default(SCHEDULED)
  reason      String?
  notes       String?
  
  // System fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("appointments")
}

// User Roles
enum UserRole {
  ADMIN
  STAFF
  PATIENT
  PARTNER
}

// User Status
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_APPROVAL
}

// Gender Enum
enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

// Partner Type Enum
enum PartnerType {
  HOSPITAL
  CLINIC
  LABORATORY
  PHARMACY
  DIAGNOSTIC_CENTER
}

// Blood Type Enum
enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

// Appointment Types
enum AppointmentType {
  CONSULTATION
  FOLLOW_UP
  EMERGENCY
  PROCEDURE
  CHECKUP
}

// Appointment Status
enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}
