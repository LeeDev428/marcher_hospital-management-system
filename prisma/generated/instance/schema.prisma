generator client {
  provider = "prisma-client-js"
  output   = "../generated/instance"
}

datasource db {
  provider = "postgresql"
  url      = env("INSTANCE_DATABASE_URL")
}

// Enhanced User Model - Single table for all users
model User {
  id              String     @id @default(cuid())
  email           String     @unique
  password        String // Hashed password
  firstName       String
  lastName        String
  middleName      String?
  phone           String?
  role            UserRole   @default(PATIENT)
  status          UserStatus @default(ACTIVE)
  isEmailVerified Boolean    @default(false)
  emailVerifiedAt DateTime?

  // Profile information
  avatar      String?
  dateOfBirth DateTime?
  gender      Gender?
  address     String?
  city        String?
  province    String?
  zipCode     String?

  // Staff-specific fields (only used when role = STAFF)
  staffNumber    String?         @unique // Auto-generated for staff
  department     String? // Department they work in
  position       String? // Job position
  hireDate       DateTime? // When they were hired
  salary         Decimal? // Salary information
  employmentType EmploymentType? // Full-time, part-time, contract

  // System fields
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relationships
  refreshTokens    RefreshToken[]
  patientProfile   Patient?
  partnerProfile   Partner?
  staffCredentials StaffCredentials? // Professional credentials for staff
  appointments     Appointment[]
  medicalServices  MedicalService[] // Services offered by this staff member

  // Audit fields
  createdBy String?
  updatedBy String?

  @@map("users")
}

// Staff Credentials - For doctors, nurses, and other medical staff
model StaffCredentials {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Professional Type
  staffType StaffType // DOCTOR, NURSE, TECHNICIAN, etc.

  // License and Certifications
  licenseNumber      String?
  licenseExpiryDate  DateTime?
  specialization     String?
  subSpecialization  String?
  boardCertification String[] // Array of certifications

  // Education and Experience
  education         String?
  yearsOfExperience Int?

  // Medical staff specific fields
  consultationFee Decimal? // For doctors
  isAvailable     Boolean  @default(true)
  workingHours    Json? // Flexible schedule data

  // Hospital/Institution info
  hospitalAffiliation String?

  // System fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("staff_credentials")
}

// Patient Profile (simplified)
model Patient {
  id            String @id @default(cuid())
  userId        String @unique
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  patientNumber String @unique

  // Medical Information
  bloodType        BloodType?
  allergies        String?
  medicalHistory   String?
  emergencyContact String?
  emergencyPhone   String?

  // Insurance Information
  insuranceProvider String?
  insuranceNumber   String?

  // System fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("patients")
}

// Partner Profile (Hospital/Clinic)
model Partner {
  id              String      @id @default(cuid())
  userId          String      @unique
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  institutionName String
  institutionType PartnerType
  licenseNumber   String?

  // Contact Information
  website       String?
  contactPerson String?

  // System fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("partners")
}

// Refresh Tokens for JWT
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// Appointments Model
model Appointment {
  id        String @id @default(cuid())
  patientId String
  doctorId  String // References User.id where role = STAFF and staffType = DOCTOR
  doctor    User   @relation(fields: [doctorId], references: [id])

  // Appointment details
  date       String // Date in YYYY-MM-DD format
  time       String // Time in HH:MM format (24-hour)
  duration   Int? // Duration in minutes
  type       AppointmentType?
  status     AppointmentStatus @default(SCHEDULED)
  reason     String?
  notes      String?
  facilityId String? // Room assignment

  // System fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([doctorId])
  @@index([patientId])
  @@index([date])
  @@index([status])
  @@map("appointments")
}

// ENUMS

// User Roles
enum UserRole {
  ADMIN
  STAFF // Covers doctors, nurses, technicians, etc.
  PATIENT
  PARTNER
}

// Staff Types (for detailed classification)
enum StaffType {
  DOCTOR
  NURSE
  TECHNICIAN
  PHARMACIST
  RADIOLOGIST
  THERAPIST
  ADMINISTRATOR
  SECURITY
  MAINTENANCE
  OTHER
}

// Employment Types
enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  CONSULTANT
  INTERN
}

// User Status
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_APPROVAL
}

// Gender Enum
enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

// Partner Type Enum
enum PartnerType {
  HOSPITAL
  CLINIC
  LABORATORY
  PHARMACY
  DIAGNOSTIC_CENTER
}

// Blood Type Enum
enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

// Appointment Types
enum AppointmentType {
  CONSULTATION
  FOLLOW_UP
  EMERGENCY
  PROCEDURE
  CHECKUP
}

// Appointment Status
enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

// Day of Week for schedule
enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

// Staff Schedule - Weekly availability
model StaffSchedule {
  id          String    @id @default(cuid())
  staffId     String // User ID of the staff member
  day         DayOfWeek
  isAvailable Boolean   @default(false)
  startTime   String? // HH:mm format
  endTime     String? // HH:mm format

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([staffId, day])
  @@map("staff_schedules")
}

// Medical Services - Services offered by staff
model MedicalService {
  id          String           @id @default(cuid())
  staffId     String // User ID of the staff member offering this service
  staff       User             @relation(fields: [staffId], references: [id], onDelete: Cascade)
  name        String // Service name (e.g., "General Consultation", "Blood Pressure Check")
  type        ServiceType // Type of service
  category    ServiceCategory? // Optional category for grouping
  description String? // Detailed description of the service
  price       Decimal          @db.Decimal(10, 2) // Price in currency
  duration    Int // Duration in minutes
  isActive    Boolean          @default(true) // Can be disabled without deleting

  // Additional fields
  requirements String? // Any requirements/preparations needed
  notes        String? // Internal notes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([staffId])
  @@index([type])
  @@index([isActive])
  @@map("medical_services")
}

// Service Type Enum
enum ServiceType {
  CONSULTATION // General consultation
  FOLLOW_UP // Follow-up consultation
  MINOR_PROCEDURE // Minor procedures (injections, wound care, etc.)
  MAJOR_PROCEDURE // Major procedures (surgery, etc.)
  DIAGNOSTIC_TEST // Diagnostic tests
  VACCINATION // Vaccination services
  HEALTH_CHECKUP // General health checkup
  SPECIALIZED_CONSULTATION // Specialized consultation
  EMERGENCY_CARE // Emergency care
  PREVENTIVE_CARE // Preventive care
  THERAPY // Physical therapy, occupational therapy, etc.
  COUNSELING // Mental health counseling
  OTHER // Other services
}

// Service Category Enum (for better organization)
enum ServiceCategory {
  GENERAL_MEDICINE
  SURGERY
  PEDIATRICS
  OBSTETRICS_GYNECOLOGY
  ORTHOPEDICS
  CARDIOLOGY
  NEUROLOGY
  DERMATOLOGY
  OPHTHALMOLOGY
  ENT
  PSYCHIATRY
  RADIOLOGY
  LABORATORY
  NURSING
  THERAPY
  EMERGENCY
  OTHER
}
