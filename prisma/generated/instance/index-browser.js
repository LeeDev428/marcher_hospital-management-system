
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  facilityId: 'facilityId',
  date: 'date',
  time: 'time',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatientAppointmentScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  date: 'date',
  time: 'time',
  status: 'status',
  name: 'name',
  appointmentId: 'appointmentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  encounterId: 'encounterId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionItemScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  name: 'name',
  description: 'description',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  cycle: 'cycle',
  numberOfPayments: 'numberOfPayments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentInstalmentScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  planId: 'planId',
  instalmentNumber: 'instalmentNumber',
  amountDue: 'amountDue',
  amountPaid: 'amountPaid',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClinicScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClinicScheduleScalarFieldEnum = {
  id: 'id',
  clinicId: 'clinicId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatientEncounterScalarFieldEnum = {
  id: 'id',
  encounterId: 'encounterId',
  patientProfileId: 'patientProfileId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OutpatientEncounterScalarFieldEnum = {
  id: 'id',
  patientProfileId: 'patientProfileId',
  date: 'date',
  time: 'time',
  chiefComplaint: 'chiefComplaint',
  doctorDiagnosis: 'doctorDiagnosis',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InpatientEncounterScalarFieldEnum = {
  id: 'id',
  patientProfileId: 'patientProfileId',
  date: 'date',
  time: 'time',
  chiefComplaint: 'chiefComplaint',
  doctorDiagnosis: 'doctorDiagnosis',
  triage: 'triage',
  disposition: 'disposition',
  dispositionDate: 'dispositionDate',
  dispositionTime: 'dispositionTime',
  dispositionNote: 'dispositionNote',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InpatientEncounterChartScalarFieldEnum = {
  id: 'id',
  encounterId: 'encounterId',
  staffId: 'staffId',
  chart: 'chart',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InpatientEncounterOrderScalarFieldEnum = {
  id: 'id',
  encounterId: 'encounterId',
  type: 'type',
  order: 'order',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BuildingScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoomScalarFieldEnum = {
  id: 'id',
  buildingId: 'buildingId',
  type: 'type',
  identifier: 'identifier',
  description: 'description',
  capacity: 'capacity',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FacilityLogScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  user: 'user',
  role: 'role',
  action: 'action',
  roomIdentifier: 'roomIdentifier',
  type: 'type',
  oldStatus: 'oldStatus',
  newStatus: 'newStatus'
};

exports.Prisma.InsuranceProviderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  zip: 'zip',
  country: 'country',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InsuranceClaimScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  status: 'status',
  message: 'message',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InsuranceClaimItemScalarFieldEnum = {
  id: 'id',
  claimId: 'claimId',
  name: 'name',
  description: 'description',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LogScalarFieldEnum = {
  id: 'id',
  user: 'user',
  action: 'action',
  entity: 'entity',
  data: 'data',
  ipAddress: 'ipAddress',
  timestamp: 'timestamp'
};

exports.Prisma.PatientProfileScalarFieldEnum = {
  id: 'id',
  lastName: 'lastName',
  firstName: 'firstName',
  middleName: 'middleName',
  suffix: 'suffix',
  birthdate: 'birthdate',
  birthplace: 'birthplace',
  sex: 'sex',
  maritalStatus: 'maritalStatus',
  nationality: 'nationality',
  religion: 'religion',
  bloodType: 'bloodType',
  archived: 'archived',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  patientProfileId: 'patientProfileId',
  label: 'label',
  country: 'country',
  state: 'state',
  zipCode: 'zipCode',
  city: 'city',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  patientProfileId: 'patientProfileId',
  type: 'type',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmploymentScalarFieldEnum = {
  id: 'id',
  patientProfileId: 'patientProfileId',
  employer: 'employer',
  contactPerson: 'contactPerson',
  address: 'address',
  phone: 'phone',
  email: 'email',
  website: 'website',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmergencyContactScalarFieldEnum = {
  id: 'id',
  patientProfileId: 'patientProfileId',
  lastName: 'lastName',
  firstName: 'firstName',
  middleName: 'middleName',
  suffix: 'suffix',
  relationship: 'relationship',
  phone: 'phone',
  email: 'email',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConsentScalarFieldEnum = {
  id: 'id',
  patientProfileId: 'patientProfileId',
  documentUrl: 'documentUrl',
  signature: 'signature',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MedicalRecordRequestScalarFieldEnum = {
  id: 'id',
  patientProfileId: 'patientProfileId',
  inpatientEncounterId: 'inpatientEncounterId',
  type: 'type',
  status: 'status',
  fileUrl: 'fileUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PharmacySupplierScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  contact: 'contact',
  address: 'address',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PharmacyBrandScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PharmacyItemCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PharmacyItemScalarFieldEnum = {
  id: 'id',
  brandId: 'brandId',
  categoryId: 'categoryId',
  name: 'name',
  form: 'form',
  route: 'route',
  strength: 'strength',
  stock: 'stock',
  unit: 'unit',
  sku: 'sku',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  role: 'role',
  status: 'status',
  isEmailVerified: 'isEmailVerified',
  emailVerifiedAt: 'emailVerifiedAt',
  avatar: 'avatar',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  address: 'address',
  city: 'city',
  province: 'province',
  zipCode: 'zipCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  isRevoked: 'isRevoked'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  patientNumber: 'patientNumber',
  bloodType: 'bloodType',
  allergies: 'allergies',
  medicalHistory: 'medicalHistory',
  emergencyContact: 'emergencyContact',
  emergencyPhone: 'emergencyPhone',
  insuranceProvider: 'insuranceProvider',
  insuranceNumber: 'insuranceNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StaffScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  staffNumber: 'staffNumber',
  department: 'department',
  position: 'position',
  specialization: 'specialization',
  licenseNumber: 'licenseNumber',
  hiredDate: 'hiredDate',
  salary: 'salary',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DoctorScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  staffId: 'staffId',
  doctorNumber: 'doctorNumber',
  medicalLicense: 'medicalLicense',
  specialization: 'specialization',
  subSpecialization: 'subSpecialization',
  boardCertification: 'boardCertification',
  yearsOfExperience: 'yearsOfExperience',
  education: 'education',
  hospitalAffiliation: 'hospitalAffiliation',
  consultationFee: 'consultationFee',
  isAvailable: 'isAvailable',
  workingHours: 'workingHours',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PartnerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  institutionName: 'institutionName',
  institutionType: 'institutionType',
  licenseNumber: 'licenseNumber',
  website: 'website',
  contactPerson: 'contactPerson',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  PENDING: 'PENDING',
  SCHEDULED: 'SCHEDULED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED'
};

exports.OutpatientEncounterType = exports.$Enums.OutpatientEncounterType = {
  CONSULTATION: 'CONSULTATION',
  FOLLOW_UP: 'FOLLOW_UP',
  LABORATORY: 'LABORATORY',
  RADIOLOGY: 'RADIOLOGY',
  OTHER: 'OTHER'
};

exports.InpatientTriage = exports.$Enums.InpatientTriage = {
  HIGH_PRIORITY: 'HIGH_PRIORITY',
  MEDIUM_PRIORITY: 'MEDIUM_PRIORITY',
  LOW_PRIORITY: 'LOW_PRIORITY',
  NON_URGENT: 'NON_URGENT'
};

exports.InpatientDisposition = exports.$Enums.InpatientDisposition = {
  ADMITTED: 'ADMITTED',
  DISCHARGED: 'DISCHARGED',
  DISCONTINUED: 'DISCONTINUED',
  TRANSFERRED: 'TRANSFERRED',
  DECEASED: 'DECEASED',
  OTHER: 'OTHER'
};

exports.InpatientEncounterOrderType = exports.$Enums.InpatientEncounterOrderType = {
  PRESCRIPTION: 'PRESCRIPTION',
  LABORATORY: 'LABORATORY',
  RADIOLOGY: 'RADIOLOGY',
  OPERATION: 'OPERATION',
  OTHER: 'OTHER'
};

exports.InpatientEncounterOrderStatus = exports.$Enums.InpatientEncounterOrderStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.RoomType = exports.$Enums.RoomType = {
  WARD: 'WARD',
  CLINIC: 'CLINIC',
  LABORATORY: 'LABORATORY',
  PHARMACY: 'PHARMACY',
  OFFICE: 'OFFICE'
};

exports.RoomStatus = exports.$Enums.RoomStatus = {
  AVAILABLE: 'AVAILABLE',
  OCCUPIED: 'OCCUPIED',
  PREPARING: 'PREPARING'
};

exports.Sex = exports.$Enums.Sex = {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

exports.MaritalStatus = exports.$Enums.MaritalStatus = {
  SINGLE: 'SINGLE',
  MARRIED: 'MARRIED',
  WIDOWED: 'WIDOWED',
  DIVORCED: 'DIVORCED',
  SEPARATED: 'SEPARATED'
};

exports.BloodType = exports.$Enums.BloodType = {
  A_POSITIVE: 'A_POSITIVE',
  A_NEGATIVE: 'A_NEGATIVE',
  B_POSITIVE: 'B_POSITIVE',
  B_NEGATIVE: 'B_NEGATIVE',
  AB_POSITIVE: 'AB_POSITIVE',
  AB_NEGATIVE: 'AB_NEGATIVE',
  O_POSITIVE: 'O_POSITIVE',
  O_NEGATIVE: 'O_NEGATIVE'
};

exports.ContactType = exports.$Enums.ContactType = {
  HOME: 'HOME',
  WORK: 'WORK',
  MOBILE: 'MOBILE',
  EMAIL: 'EMAIL',
  FAX: 'FAX',
  OTHER: 'OTHER'
};

exports.Relationship = exports.$Enums.Relationship = {
  FATHER: 'FATHER',
  MOTHER: 'MOTHER',
  SPOUSE: 'SPOUSE',
  SON: 'SON',
  DAUGHTER: 'DAUGHTER',
  SIBLING: 'SIBLING',
  GRANDMOTHER: 'GRANDMOTHER',
  GRANDFATHER: 'GRANDFATHER',
  GRANDCHILD: 'GRANDCHILD',
  COUSIN: 'COUSIN',
  UNCLE: 'UNCLE',
  GUARDIAN: 'GUARDIAN',
  AUXILIARY: 'AUXILIARY',
  OTHER: 'OTHER'
};

exports.PharmacyItemForm = exports.$Enums.PharmacyItemForm = {
  TABLET: 'TABLET',
  CAPSULE: 'CAPSULE',
  SYRUP: 'SYRUP',
  OINTMENT: 'OINTMENT',
  CREAM: 'CREAM',
  INJECTION: 'INJECTION',
  DROPS: 'DROPS',
  INHALER: 'INHALER',
  MEDICAL_DEVICE: 'MEDICAL_DEVICE',
  SUPPLEMENTS: 'SUPPLEMENTS',
  COSMETICS: 'COSMETICS',
  MISCELLANEOUS: 'MISCELLANEOUS'
};

exports.PharmacyItemRoute = exports.$Enums.PharmacyItemRoute = {
  INJECTION: 'INJECTION',
  TOPICAL: 'TOPICAL',
  TRANSDERMAL: 'TRANSDERMAL',
  OCULAR: 'OCULAR',
  OTIC: 'OTIC',
  NASAL: 'NASAL',
  ORAL: 'ORAL',
  INHALATIONAL: 'INHALATIONAL',
  RECTAL: 'RECTAL',
  VAGINAL: 'VAGINAL'
};

exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  STAFF: 'STAFF',
  PATIENT: 'PATIENT',
  PARTNER: 'PARTNER'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  PENDING_APPROVAL: 'PENDING_APPROVAL'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
  PREFER_NOT_TO_SAY: 'PREFER_NOT_TO_SAY'
};

exports.PartnerType = exports.$Enums.PartnerType = {
  HOSPITAL: 'HOSPITAL',
  CLINIC: 'CLINIC',
  LABORATORY: 'LABORATORY',
  PHARMACY: 'PHARMACY',
  DIAGNOSTIC_CENTER: 'DIAGNOSTIC_CENTER'
};

exports.Prisma.ModelName = {
  Appointment: 'Appointment',
  PatientAppointment: 'PatientAppointment',
  Transaction: 'Transaction',
  TransactionItem: 'TransactionItem',
  PaymentPlan: 'PaymentPlan',
  Payment: 'Payment',
  PaymentInstalment: 'PaymentInstalment',
  Clinic: 'Clinic',
  ClinicSchedule: 'ClinicSchedule',
  PatientEncounter: 'PatientEncounter',
  OutpatientEncounter: 'OutpatientEncounter',
  InpatientEncounter: 'InpatientEncounter',
  InpatientEncounterChart: 'InpatientEncounterChart',
  InpatientEncounterOrder: 'InpatientEncounterOrder',
  Building: 'Building',
  Room: 'Room',
  FacilityLog: 'FacilityLog',
  InsuranceProvider: 'InsuranceProvider',
  InsuranceClaim: 'InsuranceClaim',
  InsuranceClaimItem: 'InsuranceClaimItem',
  Log: 'Log',
  PatientProfile: 'PatientProfile',
  Address: 'Address',
  Contact: 'Contact',
  Employment: 'Employment',
  EmergencyContact: 'EmergencyContact',
  Consent: 'Consent',
  MedicalRecordRequest: 'MedicalRecordRequest',
  PharmacySupplier: 'PharmacySupplier',
  PharmacyBrand: 'PharmacyBrand',
  PharmacyItemCategory: 'PharmacyItemCategory',
  PharmacyItem: 'PharmacyItem',
  User: 'User',
  RefreshToken: 'RefreshToken',
  Patient: 'Patient',
  Staff: 'Staff',
  Doctor: 'Doctor',
  Partner: 'Partner'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
