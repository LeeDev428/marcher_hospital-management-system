
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  middleName: 'middleName',
  phone: 'phone',
  role: 'role',
  status: 'status',
  isEmailVerified: 'isEmailVerified',
  emailVerifiedAt: 'emailVerifiedAt',
  avatar: 'avatar',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  address: 'address',
  city: 'city',
  province: 'province',
  zipCode: 'zipCode',
  staffNumber: 'staffNumber',
  department: 'department',
  position: 'position',
  hireDate: 'hireDate',
  salary: 'salary',
  employmentType: 'employmentType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.StaffCredentialsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  staffType: 'staffType',
  licenseNumber: 'licenseNumber',
  licenseExpiryDate: 'licenseExpiryDate',
  specialization: 'specialization',
  subSpecialization: 'subSpecialization',
  boardCertification: 'boardCertification',
  education: 'education',
  yearsOfExperience: 'yearsOfExperience',
  consultationFee: 'consultationFee',
  isAvailable: 'isAvailable',
  workingHours: 'workingHours',
  hospitalAffiliation: 'hospitalAffiliation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  patientNumber: 'patientNumber',
  bloodType: 'bloodType',
  allergies: 'allergies',
  medicalHistory: 'medicalHistory',
  emergencyContact: 'emergencyContact',
  emergencyPhone: 'emergencyPhone',
  insuranceProvider: 'insuranceProvider',
  insuranceNumber: 'insuranceNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PartnerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  institutionName: 'institutionName',
  institutionType: 'institutionType',
  licenseNumber: 'licenseNumber',
  website: 'website',
  contactPerson: 'contactPerson',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  isRevoked: 'isRevoked'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  scheduledAt: 'scheduledAt',
  duration: 'duration',
  type: 'type',
  status: 'status',
  reason: 'reason',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  STAFF: 'STAFF',
  PATIENT: 'PATIENT',
  PARTNER: 'PARTNER'
};

exports.StaffType = exports.$Enums.StaffType = {
  DOCTOR: 'DOCTOR',
  NURSE: 'NURSE',
  TECHNICIAN: 'TECHNICIAN',
  PHARMACIST: 'PHARMACIST',
  RADIOLOGIST: 'RADIOLOGIST',
  THERAPIST: 'THERAPIST',
  ADMINISTRATOR: 'ADMINISTRATOR',
  SECURITY: 'SECURITY',
  MAINTENANCE: 'MAINTENANCE',
  OTHER: 'OTHER'
};

exports.EmploymentType = exports.$Enums.EmploymentType = {
  FULL_TIME: 'FULL_TIME',
  PART_TIME: 'PART_TIME',
  CONTRACT: 'CONTRACT',
  CONSULTANT: 'CONSULTANT',
  INTERN: 'INTERN'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  PENDING_APPROVAL: 'PENDING_APPROVAL'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
  PREFER_NOT_TO_SAY: 'PREFER_NOT_TO_SAY'
};

exports.PartnerType = exports.$Enums.PartnerType = {
  HOSPITAL: 'HOSPITAL',
  CLINIC: 'CLINIC',
  LABORATORY: 'LABORATORY',
  PHARMACY: 'PHARMACY',
  DIAGNOSTIC_CENTER: 'DIAGNOSTIC_CENTER'
};

exports.BloodType = exports.$Enums.BloodType = {
  A_POSITIVE: 'A_POSITIVE',
  A_NEGATIVE: 'A_NEGATIVE',
  B_POSITIVE: 'B_POSITIVE',
  B_NEGATIVE: 'B_NEGATIVE',
  AB_POSITIVE: 'AB_POSITIVE',
  AB_NEGATIVE: 'AB_NEGATIVE',
  O_POSITIVE: 'O_POSITIVE',
  O_NEGATIVE: 'O_NEGATIVE'
};

exports.AppointmentType = exports.$Enums.AppointmentType = {
  CONSULTATION: 'CONSULTATION',
  FOLLOW_UP: 'FOLLOW_UP',
  EMERGENCY: 'EMERGENCY',
  PROCEDURE: 'PROCEDURE',
  CHECKUP: 'CHECKUP'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  SCHEDULED: 'SCHEDULED',
  CONFIRMED: 'CONFIRMED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW'
};

exports.Prisma.ModelName = {
  User: 'User',
  StaffCredentials: 'StaffCredentials',
  Patient: 'Patient',
  Partner: 'Partner',
  RefreshToken: 'RefreshToken',
  Appointment: 'Appointment'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "D:\\Programming\\Systems\\Web-Systems\\Nuxtjs-Nodejs-Expressjs\\marcher_hospital-management-system\\prisma\\generated\\instance",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "D:\\Programming\\Systems\\Web-Systems\\Nuxtjs-Nodejs-Expressjs\\marcher_hospital-management-system\\prisma\\instance\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../instance",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "INSTANCE_DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/instance\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"INSTANCE_DATABASE_URL\")\n}\n\n// Enhanced User Model - Single table for all users\nmodel User {\n  id              String     @id @default(cuid())\n  email           String     @unique\n  password        String // Hashed password\n  firstName       String\n  lastName        String\n  middleName      String?\n  phone           String?\n  role            UserRole   @default(PATIENT)\n  status          UserStatus @default(ACTIVE)\n  isEmailVerified Boolean    @default(false)\n  emailVerifiedAt DateTime?\n\n  // Profile information\n  avatar      String?\n  dateOfBirth DateTime?\n  gender      Gender?\n  address     String?\n  city        String?\n  province    String?\n  zipCode     String?\n\n  // Staff-specific fields (only used when role = STAFF)\n  staffNumber    String?         @unique // Auto-generated for staff\n  department     String? // Department they work in\n  position       String? // Job position\n  hireDate       DateTime? // When they were hired\n  salary         Decimal? // Salary information\n  employmentType EmploymentType? // Full-time, part-time, contract\n\n  // System fields\n  createdAt   DateTime  @default(now())\n  updatedAt   DateTime  @updatedAt\n  lastLoginAt DateTime?\n\n  // Relationships\n  refreshTokens    RefreshToken[]\n  patientProfile   Patient?\n  partnerProfile   Partner?\n  staffCredentials StaffCredentials? // Professional credentials for staff\n  appointments     Appointment[]\n\n  // Audit fields\n  createdBy String?\n  updatedBy String?\n\n  @@map(\"users\")\n}\n\n// Staff Credentials - For doctors, nurses, and other medical staff\nmodel StaffCredentials {\n  id     String @id @default(cuid())\n  userId String @unique\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  // Professional Type\n  staffType StaffType // DOCTOR, NURSE, TECHNICIAN, etc.\n\n  // License and Certifications\n  licenseNumber      String?\n  licenseExpiryDate  DateTime?\n  specialization     String?\n  subSpecialization  String?\n  boardCertification String[] // Array of certifications\n\n  // Education and Experience\n  education         String?\n  yearsOfExperience Int?\n\n  // Medical staff specific fields\n  consultationFee Decimal? // For doctors\n  isAvailable     Boolean  @default(true)\n  workingHours    Json? // Flexible schedule data\n\n  // Hospital/Institution info\n  hospitalAffiliation String?\n\n  // System fields\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"staff_credentials\")\n}\n\n// Patient Profile (simplified)\nmodel Patient {\n  id            String @id @default(cuid())\n  userId        String @unique\n  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n  patientNumber String @unique\n\n  // Medical Information\n  bloodType        BloodType?\n  allergies        String?\n  medicalHistory   String?\n  emergencyContact String?\n  emergencyPhone   String?\n\n  // Insurance Information\n  insuranceProvider String?\n  insuranceNumber   String?\n\n  // System fields\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"patients\")\n}\n\n// Partner Profile (Hospital/Clinic)\nmodel Partner {\n  id              String      @id @default(cuid())\n  userId          String      @unique\n  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)\n  institutionName String\n  institutionType PartnerType\n  licenseNumber   String?\n\n  // Contact Information\n  website       String?\n  contactPerson String?\n\n  // System fields\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"partners\")\n}\n\n// Refresh Tokens for JWT\nmodel RefreshToken {\n  id        String   @id @default(cuid())\n  token     String   @unique\n  userId    String\n  expiresAt DateTime\n  createdAt DateTime @default(now())\n  isRevoked Boolean  @default(false)\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"refresh_tokens\")\n}\n\n// Appointments Model (simplified)\nmodel Appointment {\n  id        String @id @default(cuid())\n  patientId String\n  doctorId  String // References User.id where role = STAFF and staffType = DOCTOR\n  doctor    User   @relation(fields: [doctorId], references: [id])\n\n  // Appointment details\n  scheduledAt DateTime\n  duration    Int // Duration in minutes\n  type        AppointmentType\n  status      AppointmentStatus @default(SCHEDULED)\n  reason      String?\n  notes       String?\n\n  // System fields\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"appointments\")\n}\n\n// ENUMS\n\n// User Roles\nenum UserRole {\n  ADMIN\n  STAFF // Covers doctors, nurses, technicians, etc.\n  PATIENT\n  PARTNER\n}\n\n// Staff Types (for detailed classification)\nenum StaffType {\n  DOCTOR\n  NURSE\n  TECHNICIAN\n  PHARMACIST\n  RADIOLOGIST\n  THERAPIST\n  ADMINISTRATOR\n  SECURITY\n  MAINTENANCE\n  OTHER\n}\n\n// Employment Types\nenum EmploymentType {\n  FULL_TIME\n  PART_TIME\n  CONTRACT\n  CONSULTANT\n  INTERN\n}\n\n// User Status\nenum UserStatus {\n  ACTIVE\n  INACTIVE\n  SUSPENDED\n  PENDING_APPROVAL\n}\n\n// Gender Enum\nenum Gender {\n  MALE\n  FEMALE\n  OTHER\n  PREFER_NOT_TO_SAY\n}\n\n// Partner Type Enum\nenum PartnerType {\n  HOSPITAL\n  CLINIC\n  LABORATORY\n  PHARMACY\n  DIAGNOSTIC_CENTER\n}\n\n// Blood Type Enum\nenum BloodType {\n  A_POSITIVE\n  A_NEGATIVE\n  B_POSITIVE\n  B_NEGATIVE\n  AB_POSITIVE\n  AB_NEGATIVE\n  O_POSITIVE\n  O_NEGATIVE\n}\n\n// Appointment Types\nenum AppointmentType {\n  CONSULTATION\n  FOLLOW_UP\n  EMERGENCY\n  PROCEDURE\n  CHECKUP\n}\n\n// Appointment Status\nenum AppointmentStatus {\n  SCHEDULED\n  CONFIRMED\n  IN_PROGRESS\n  COMPLETED\n  CANCELLED\n  NO_SHOW\n}\n",
  "inlineSchemaHash": "2127a0a31159e8866326d0e93d6bca596ec82f10e38fdf5958e0d27905ceda09",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"middleName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"UserStatus\"},{\"name\":\"isEmailVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"emailVerifiedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"avatar\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dateOfBirth\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"gender\",\"kind\":\"enum\",\"type\":\"Gender\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"province\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"zipCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"staffNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"department\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"position\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hireDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"salary\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"employmentType\",\"kind\":\"enum\",\"type\":\"EmploymentType\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastLoginAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"refreshTokens\",\"kind\":\"object\",\"type\":\"RefreshToken\",\"relationName\":\"RefreshTokenToUser\"},{\"name\":\"patientProfile\",\"kind\":\"object\",\"type\":\"Patient\",\"relationName\":\"PatientToUser\"},{\"name\":\"partnerProfile\",\"kind\":\"object\",\"type\":\"Partner\",\"relationName\":\"PartnerToUser\"},{\"name\":\"staffCredentials\",\"kind\":\"object\",\"type\":\"StaffCredentials\",\"relationName\":\"StaffCredentialsToUser\"},{\"name\":\"appointments\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToUser\"},{\"name\":\"createdBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"updatedBy\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":\"users\"},\"StaffCredentials\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"StaffCredentialsToUser\"},{\"name\":\"staffType\",\"kind\":\"enum\",\"type\":\"StaffType\"},{\"name\":\"licenseNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"licenseExpiryDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"specialization\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subSpecialization\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"boardCertification\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"education\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"yearsOfExperience\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"consultationFee\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"isAvailable\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"workingHours\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"hospitalAffiliation\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"staff_credentials\"},\"Patient\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PatientToUser\"},{\"name\":\"patientNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bloodType\",\"kind\":\"enum\",\"type\":\"BloodType\"},{\"name\":\"allergies\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"medicalHistory\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emergencyContact\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emergencyPhone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"insuranceProvider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"insuranceNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"patients\"},\"Partner\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PartnerToUser\"},{\"name\":\"institutionName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"institutionType\",\"kind\":\"enum\",\"type\":\"PartnerType\"},{\"name\":\"licenseNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"website\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contactPerson\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"partners\"},\"RefreshToken\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isRevoked\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"RefreshTokenToUser\"}],\"dbName\":\"refresh_tokens\"},\"Appointment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"patientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"doctorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"doctor\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AppointmentToUser\"},{\"name\":\"scheduledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"AppointmentType\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"AppointmentStatus\"},{\"name\":\"reason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"appointments\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    INSTANCE_DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['INSTANCE_DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.INSTANCE_DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

