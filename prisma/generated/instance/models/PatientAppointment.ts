
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PatientAppointment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PatientAppointment
 * 
 */
export type PatientAppointmentModel = runtime.Types.Result.DefaultSelection<Prisma.$PatientAppointmentPayload>

export type AggregatePatientAppointment = {
  _count: PatientAppointmentCountAggregateOutputType | null
  _min: PatientAppointmentMinAggregateOutputType | null
  _max: PatientAppointmentMaxAggregateOutputType | null
}

export type PatientAppointmentMinAggregateOutputType = {
  id: string | null
  patientId: string | null
  doctorId: string | null
  date: string | null
  time: string | null
  status: $Enums.AppointmentStatus | null
  name: string | null
  appointmentId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PatientAppointmentMaxAggregateOutputType = {
  id: string | null
  patientId: string | null
  doctorId: string | null
  date: string | null
  time: string | null
  status: $Enums.AppointmentStatus | null
  name: string | null
  appointmentId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PatientAppointmentCountAggregateOutputType = {
  id: number
  patientId: number
  doctorId: number
  date: number
  time: number
  status: number
  name: number
  appointmentId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PatientAppointmentMinAggregateInputType = {
  id?: true
  patientId?: true
  doctorId?: true
  date?: true
  time?: true
  status?: true
  name?: true
  appointmentId?: true
  createdAt?: true
  updatedAt?: true
}

export type PatientAppointmentMaxAggregateInputType = {
  id?: true
  patientId?: true
  doctorId?: true
  date?: true
  time?: true
  status?: true
  name?: true
  appointmentId?: true
  createdAt?: true
  updatedAt?: true
}

export type PatientAppointmentCountAggregateInputType = {
  id?: true
  patientId?: true
  doctorId?: true
  date?: true
  time?: true
  status?: true
  name?: true
  appointmentId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PatientAppointmentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PatientAppointment to aggregate.
   */
  where?: Prisma.PatientAppointmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PatientAppointments to fetch.
   */
  orderBy?: Prisma.PatientAppointmentOrderByWithRelationInput | Prisma.PatientAppointmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PatientAppointmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PatientAppointments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PatientAppointments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PatientAppointments
  **/
  _count?: true | PatientAppointmentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PatientAppointmentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PatientAppointmentMaxAggregateInputType
}

export type GetPatientAppointmentAggregateType<T extends PatientAppointmentAggregateArgs> = {
      [P in keyof T & keyof AggregatePatientAppointment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePatientAppointment[P]>
    : Prisma.GetScalarType<T[P], AggregatePatientAppointment[P]>
}




export type PatientAppointmentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PatientAppointmentWhereInput
  orderBy?: Prisma.PatientAppointmentOrderByWithAggregationInput | Prisma.PatientAppointmentOrderByWithAggregationInput[]
  by: Prisma.PatientAppointmentScalarFieldEnum[] | Prisma.PatientAppointmentScalarFieldEnum
  having?: Prisma.PatientAppointmentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PatientAppointmentCountAggregateInputType | true
  _min?: PatientAppointmentMinAggregateInputType
  _max?: PatientAppointmentMaxAggregateInputType
}

export type PatientAppointmentGroupByOutputType = {
  id: string
  patientId: string
  doctorId: string
  date: string
  time: string
  status: $Enums.AppointmentStatus
  name: string | null
  appointmentId: string | null
  createdAt: Date
  updatedAt: Date
  _count: PatientAppointmentCountAggregateOutputType | null
  _min: PatientAppointmentMinAggregateOutputType | null
  _max: PatientAppointmentMaxAggregateOutputType | null
}

type GetPatientAppointmentGroupByPayload<T extends PatientAppointmentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PatientAppointmentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PatientAppointmentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PatientAppointmentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PatientAppointmentGroupByOutputType[P]>
      }
    >
  > 



export type PatientAppointmentWhereInput = {
  AND?: Prisma.PatientAppointmentWhereInput | Prisma.PatientAppointmentWhereInput[]
  OR?: Prisma.PatientAppointmentWhereInput[]
  NOT?: Prisma.PatientAppointmentWhereInput | Prisma.PatientAppointmentWhereInput[]
  id?: Prisma.UuidFilter<"PatientAppointment"> | string
  patientId?: Prisma.UuidFilter<"PatientAppointment"> | string
  doctorId?: Prisma.StringFilter<"PatientAppointment"> | string
  date?: Prisma.StringFilter<"PatientAppointment"> | string
  time?: Prisma.StringFilter<"PatientAppointment"> | string
  status?: Prisma.EnumAppointmentStatusFilter<"PatientAppointment"> | $Enums.AppointmentStatus
  name?: Prisma.StringNullableFilter<"PatientAppointment"> | string | null
  appointmentId?: Prisma.UuidNullableFilter<"PatientAppointment"> | string | null
  createdAt?: Prisma.DateTimeFilter<"PatientAppointment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PatientAppointment"> | Date | string
  patient?: Prisma.XOR<Prisma.PatientProfileScalarRelationFilter, Prisma.PatientProfileWhereInput>
  appointment?: Prisma.XOR<Prisma.AppointmentNullableScalarRelationFilter, Prisma.AppointmentWhereInput> | null
}

export type PatientAppointmentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  patientId?: Prisma.SortOrder
  doctorId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  status?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  appointmentId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  patient?: Prisma.PatientProfileOrderByWithRelationInput
  appointment?: Prisma.AppointmentOrderByWithRelationInput
}

export type PatientAppointmentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  appointmentId?: string
  AND?: Prisma.PatientAppointmentWhereInput | Prisma.PatientAppointmentWhereInput[]
  OR?: Prisma.PatientAppointmentWhereInput[]
  NOT?: Prisma.PatientAppointmentWhereInput | Prisma.PatientAppointmentWhereInput[]
  patientId?: Prisma.UuidFilter<"PatientAppointment"> | string
  doctorId?: Prisma.StringFilter<"PatientAppointment"> | string
  date?: Prisma.StringFilter<"PatientAppointment"> | string
  time?: Prisma.StringFilter<"PatientAppointment"> | string
  status?: Prisma.EnumAppointmentStatusFilter<"PatientAppointment"> | $Enums.AppointmentStatus
  name?: Prisma.StringNullableFilter<"PatientAppointment"> | string | null
  createdAt?: Prisma.DateTimeFilter<"PatientAppointment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PatientAppointment"> | Date | string
  patient?: Prisma.XOR<Prisma.PatientProfileScalarRelationFilter, Prisma.PatientProfileWhereInput>
  appointment?: Prisma.XOR<Prisma.AppointmentNullableScalarRelationFilter, Prisma.AppointmentWhereInput> | null
}, "id" | "appointmentId">

export type PatientAppointmentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  patientId?: Prisma.SortOrder
  doctorId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  status?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  appointmentId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PatientAppointmentCountOrderByAggregateInput
  _max?: Prisma.PatientAppointmentMaxOrderByAggregateInput
  _min?: Prisma.PatientAppointmentMinOrderByAggregateInput
}

export type PatientAppointmentScalarWhereWithAggregatesInput = {
  AND?: Prisma.PatientAppointmentScalarWhereWithAggregatesInput | Prisma.PatientAppointmentScalarWhereWithAggregatesInput[]
  OR?: Prisma.PatientAppointmentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PatientAppointmentScalarWhereWithAggregatesInput | Prisma.PatientAppointmentScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"PatientAppointment"> | string
  patientId?: Prisma.UuidWithAggregatesFilter<"PatientAppointment"> | string
  doctorId?: Prisma.StringWithAggregatesFilter<"PatientAppointment"> | string
  date?: Prisma.StringWithAggregatesFilter<"PatientAppointment"> | string
  time?: Prisma.StringWithAggregatesFilter<"PatientAppointment"> | string
  status?: Prisma.EnumAppointmentStatusWithAggregatesFilter<"PatientAppointment"> | $Enums.AppointmentStatus
  name?: Prisma.StringNullableWithAggregatesFilter<"PatientAppointment"> | string | null
  appointmentId?: Prisma.UuidNullableWithAggregatesFilter<"PatientAppointment"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PatientAppointment"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PatientAppointment"> | Date | string
}

export type PatientAppointmentCreateInput = {
  id?: string
  doctorId: string
  date: string
  time: string
  status?: $Enums.AppointmentStatus
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  patient: Prisma.PatientProfileCreateNestedOneWithoutPatientAppointmentsInput
  appointment?: Prisma.AppointmentCreateNestedOneWithoutPatientAppointmentInput
}

export type PatientAppointmentUncheckedCreateInput = {
  id?: string
  patientId: string
  doctorId: string
  date: string
  time: string
  status?: $Enums.AppointmentStatus
  name?: string | null
  appointmentId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PatientAppointmentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  doctorId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  patient?: Prisma.PatientProfileUpdateOneRequiredWithoutPatientAppointmentsNestedInput
  appointment?: Prisma.AppointmentUpdateOneWithoutPatientAppointmentNestedInput
}

export type PatientAppointmentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  patientId?: Prisma.StringFieldUpdateOperationsInput | string
  doctorId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  appointmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PatientAppointmentCreateManyInput = {
  id?: string
  patientId: string
  doctorId: string
  date: string
  time: string
  status?: $Enums.AppointmentStatus
  name?: string | null
  appointmentId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PatientAppointmentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  doctorId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PatientAppointmentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  patientId?: Prisma.StringFieldUpdateOperationsInput | string
  doctorId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  appointmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PatientAppointmentNullableScalarRelationFilter = {
  is?: Prisma.PatientAppointmentWhereInput | null
  isNot?: Prisma.PatientAppointmentWhereInput | null
}

export type PatientAppointmentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  patientId?: Prisma.SortOrder
  doctorId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  status?: Prisma.SortOrder
  name?: Prisma.SortOrder
  appointmentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PatientAppointmentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  patientId?: Prisma.SortOrder
  doctorId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  status?: Prisma.SortOrder
  name?: Prisma.SortOrder
  appointmentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PatientAppointmentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  patientId?: Prisma.SortOrder
  doctorId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  status?: Prisma.SortOrder
  name?: Prisma.SortOrder
  appointmentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PatientAppointmentListRelationFilter = {
  every?: Prisma.PatientAppointmentWhereInput
  some?: Prisma.PatientAppointmentWhereInput
  none?: Prisma.PatientAppointmentWhereInput
}

export type PatientAppointmentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PatientAppointmentCreateNestedOneWithoutAppointmentInput = {
  create?: Prisma.XOR<Prisma.PatientAppointmentCreateWithoutAppointmentInput, Prisma.PatientAppointmentUncheckedCreateWithoutAppointmentInput>
  connectOrCreate?: Prisma.PatientAppointmentCreateOrConnectWithoutAppointmentInput
  connect?: Prisma.PatientAppointmentWhereUniqueInput
}

export type PatientAppointmentUncheckedCreateNestedOneWithoutAppointmentInput = {
  create?: Prisma.XOR<Prisma.PatientAppointmentCreateWithoutAppointmentInput, Prisma.PatientAppointmentUncheckedCreateWithoutAppointmentInput>
  connectOrCreate?: Prisma.PatientAppointmentCreateOrConnectWithoutAppointmentInput
  connect?: Prisma.PatientAppointmentWhereUniqueInput
}

export type PatientAppointmentUpdateOneWithoutAppointmentNestedInput = {
  create?: Prisma.XOR<Prisma.PatientAppointmentCreateWithoutAppointmentInput, Prisma.PatientAppointmentUncheckedCreateWithoutAppointmentInput>
  connectOrCreate?: Prisma.PatientAppointmentCreateOrConnectWithoutAppointmentInput
  upsert?: Prisma.PatientAppointmentUpsertWithoutAppointmentInput
  disconnect?: Prisma.PatientAppointmentWhereInput | boolean
  delete?: Prisma.PatientAppointmentWhereInput | boolean
  connect?: Prisma.PatientAppointmentWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PatientAppointmentUpdateToOneWithWhereWithoutAppointmentInput, Prisma.PatientAppointmentUpdateWithoutAppointmentInput>, Prisma.PatientAppointmentUncheckedUpdateWithoutAppointmentInput>
}

export type PatientAppointmentUncheckedUpdateOneWithoutAppointmentNestedInput = {
  create?: Prisma.XOR<Prisma.PatientAppointmentCreateWithoutAppointmentInput, Prisma.PatientAppointmentUncheckedCreateWithoutAppointmentInput>
  connectOrCreate?: Prisma.PatientAppointmentCreateOrConnectWithoutAppointmentInput
  upsert?: Prisma.PatientAppointmentUpsertWithoutAppointmentInput
  disconnect?: Prisma.PatientAppointmentWhereInput | boolean
  delete?: Prisma.PatientAppointmentWhereInput | boolean
  connect?: Prisma.PatientAppointmentWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PatientAppointmentUpdateToOneWithWhereWithoutAppointmentInput, Prisma.PatientAppointmentUpdateWithoutAppointmentInput>, Prisma.PatientAppointmentUncheckedUpdateWithoutAppointmentInput>
}

export type PatientAppointmentCreateNestedManyWithoutPatientInput = {
  create?: Prisma.XOR<Prisma.PatientAppointmentCreateWithoutPatientInput, Prisma.PatientAppointmentUncheckedCreateWithoutPatientInput> | Prisma.PatientAppointmentCreateWithoutPatientInput[] | Prisma.PatientAppointmentUncheckedCreateWithoutPatientInput[]
  connectOrCreate?: Prisma.PatientAppointmentCreateOrConnectWithoutPatientInput | Prisma.PatientAppointmentCreateOrConnectWithoutPatientInput[]
  createMany?: Prisma.PatientAppointmentCreateManyPatientInputEnvelope
  connect?: Prisma.PatientAppointmentWhereUniqueInput | Prisma.PatientAppointmentWhereUniqueInput[]
}

export type PatientAppointmentUncheckedCreateNestedManyWithoutPatientInput = {
  create?: Prisma.XOR<Prisma.PatientAppointmentCreateWithoutPatientInput, Prisma.PatientAppointmentUncheckedCreateWithoutPatientInput> | Prisma.PatientAppointmentCreateWithoutPatientInput[] | Prisma.PatientAppointmentUncheckedCreateWithoutPatientInput[]
  connectOrCreate?: Prisma.PatientAppointmentCreateOrConnectWithoutPatientInput | Prisma.PatientAppointmentCreateOrConnectWithoutPatientInput[]
  createMany?: Prisma.PatientAppointmentCreateManyPatientInputEnvelope
  connect?: Prisma.PatientAppointmentWhereUniqueInput | Prisma.PatientAppointmentWhereUniqueInput[]
}

export type PatientAppointmentUpdateManyWithoutPatientNestedInput = {
  create?: Prisma.XOR<Prisma.PatientAppointmentCreateWithoutPatientInput, Prisma.PatientAppointmentUncheckedCreateWithoutPatientInput> | Prisma.PatientAppointmentCreateWithoutPatientInput[] | Prisma.PatientAppointmentUncheckedCreateWithoutPatientInput[]
  connectOrCreate?: Prisma.PatientAppointmentCreateOrConnectWithoutPatientInput | Prisma.PatientAppointmentCreateOrConnectWithoutPatientInput[]
  upsert?: Prisma.PatientAppointmentUpsertWithWhereUniqueWithoutPatientInput | Prisma.PatientAppointmentUpsertWithWhereUniqueWithoutPatientInput[]
  createMany?: Prisma.PatientAppointmentCreateManyPatientInputEnvelope
  set?: Prisma.PatientAppointmentWhereUniqueInput | Prisma.PatientAppointmentWhereUniqueInput[]
  disconnect?: Prisma.PatientAppointmentWhereUniqueInput | Prisma.PatientAppointmentWhereUniqueInput[]
  delete?: Prisma.PatientAppointmentWhereUniqueInput | Prisma.PatientAppointmentWhereUniqueInput[]
  connect?: Prisma.PatientAppointmentWhereUniqueInput | Prisma.PatientAppointmentWhereUniqueInput[]
  update?: Prisma.PatientAppointmentUpdateWithWhereUniqueWithoutPatientInput | Prisma.PatientAppointmentUpdateWithWhereUniqueWithoutPatientInput[]
  updateMany?: Prisma.PatientAppointmentUpdateManyWithWhereWithoutPatientInput | Prisma.PatientAppointmentUpdateManyWithWhereWithoutPatientInput[]
  deleteMany?: Prisma.PatientAppointmentScalarWhereInput | Prisma.PatientAppointmentScalarWhereInput[]
}

export type PatientAppointmentUncheckedUpdateManyWithoutPatientNestedInput = {
  create?: Prisma.XOR<Prisma.PatientAppointmentCreateWithoutPatientInput, Prisma.PatientAppointmentUncheckedCreateWithoutPatientInput> | Prisma.PatientAppointmentCreateWithoutPatientInput[] | Prisma.PatientAppointmentUncheckedCreateWithoutPatientInput[]
  connectOrCreate?: Prisma.PatientAppointmentCreateOrConnectWithoutPatientInput | Prisma.PatientAppointmentCreateOrConnectWithoutPatientInput[]
  upsert?: Prisma.PatientAppointmentUpsertWithWhereUniqueWithoutPatientInput | Prisma.PatientAppointmentUpsertWithWhereUniqueWithoutPatientInput[]
  createMany?: Prisma.PatientAppointmentCreateManyPatientInputEnvelope
  set?: Prisma.PatientAppointmentWhereUniqueInput | Prisma.PatientAppointmentWhereUniqueInput[]
  disconnect?: Prisma.PatientAppointmentWhereUniqueInput | Prisma.PatientAppointmentWhereUniqueInput[]
  delete?: Prisma.PatientAppointmentWhereUniqueInput | Prisma.PatientAppointmentWhereUniqueInput[]
  connect?: Prisma.PatientAppointmentWhereUniqueInput | Prisma.PatientAppointmentWhereUniqueInput[]
  update?: Prisma.PatientAppointmentUpdateWithWhereUniqueWithoutPatientInput | Prisma.PatientAppointmentUpdateWithWhereUniqueWithoutPatientInput[]
  updateMany?: Prisma.PatientAppointmentUpdateManyWithWhereWithoutPatientInput | Prisma.PatientAppointmentUpdateManyWithWhereWithoutPatientInput[]
  deleteMany?: Prisma.PatientAppointmentScalarWhereInput | Prisma.PatientAppointmentScalarWhereInput[]
}

export type PatientAppointmentCreateWithoutAppointmentInput = {
  id?: string
  doctorId: string
  date: string
  time: string
  status?: $Enums.AppointmentStatus
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  patient: Prisma.PatientProfileCreateNestedOneWithoutPatientAppointmentsInput
}

export type PatientAppointmentUncheckedCreateWithoutAppointmentInput = {
  id?: string
  patientId: string
  doctorId: string
  date: string
  time: string
  status?: $Enums.AppointmentStatus
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PatientAppointmentCreateOrConnectWithoutAppointmentInput = {
  where: Prisma.PatientAppointmentWhereUniqueInput
  create: Prisma.XOR<Prisma.PatientAppointmentCreateWithoutAppointmentInput, Prisma.PatientAppointmentUncheckedCreateWithoutAppointmentInput>
}

export type PatientAppointmentUpsertWithoutAppointmentInput = {
  update: Prisma.XOR<Prisma.PatientAppointmentUpdateWithoutAppointmentInput, Prisma.PatientAppointmentUncheckedUpdateWithoutAppointmentInput>
  create: Prisma.XOR<Prisma.PatientAppointmentCreateWithoutAppointmentInput, Prisma.PatientAppointmentUncheckedCreateWithoutAppointmentInput>
  where?: Prisma.PatientAppointmentWhereInput
}

export type PatientAppointmentUpdateToOneWithWhereWithoutAppointmentInput = {
  where?: Prisma.PatientAppointmentWhereInput
  data: Prisma.XOR<Prisma.PatientAppointmentUpdateWithoutAppointmentInput, Prisma.PatientAppointmentUncheckedUpdateWithoutAppointmentInput>
}

export type PatientAppointmentUpdateWithoutAppointmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  doctorId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  patient?: Prisma.PatientProfileUpdateOneRequiredWithoutPatientAppointmentsNestedInput
}

export type PatientAppointmentUncheckedUpdateWithoutAppointmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  patientId?: Prisma.StringFieldUpdateOperationsInput | string
  doctorId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PatientAppointmentCreateWithoutPatientInput = {
  id?: string
  doctorId: string
  date: string
  time: string
  status?: $Enums.AppointmentStatus
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  appointment?: Prisma.AppointmentCreateNestedOneWithoutPatientAppointmentInput
}

export type PatientAppointmentUncheckedCreateWithoutPatientInput = {
  id?: string
  doctorId: string
  date: string
  time: string
  status?: $Enums.AppointmentStatus
  name?: string | null
  appointmentId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PatientAppointmentCreateOrConnectWithoutPatientInput = {
  where: Prisma.PatientAppointmentWhereUniqueInput
  create: Prisma.XOR<Prisma.PatientAppointmentCreateWithoutPatientInput, Prisma.PatientAppointmentUncheckedCreateWithoutPatientInput>
}

export type PatientAppointmentCreateManyPatientInputEnvelope = {
  data: Prisma.PatientAppointmentCreateManyPatientInput | Prisma.PatientAppointmentCreateManyPatientInput[]
  skipDuplicates?: boolean
}

export type PatientAppointmentUpsertWithWhereUniqueWithoutPatientInput = {
  where: Prisma.PatientAppointmentWhereUniqueInput
  update: Prisma.XOR<Prisma.PatientAppointmentUpdateWithoutPatientInput, Prisma.PatientAppointmentUncheckedUpdateWithoutPatientInput>
  create: Prisma.XOR<Prisma.PatientAppointmentCreateWithoutPatientInput, Prisma.PatientAppointmentUncheckedCreateWithoutPatientInput>
}

export type PatientAppointmentUpdateWithWhereUniqueWithoutPatientInput = {
  where: Prisma.PatientAppointmentWhereUniqueInput
  data: Prisma.XOR<Prisma.PatientAppointmentUpdateWithoutPatientInput, Prisma.PatientAppointmentUncheckedUpdateWithoutPatientInput>
}

export type PatientAppointmentUpdateManyWithWhereWithoutPatientInput = {
  where: Prisma.PatientAppointmentScalarWhereInput
  data: Prisma.XOR<Prisma.PatientAppointmentUpdateManyMutationInput, Prisma.PatientAppointmentUncheckedUpdateManyWithoutPatientInput>
}

export type PatientAppointmentScalarWhereInput = {
  AND?: Prisma.PatientAppointmentScalarWhereInput | Prisma.PatientAppointmentScalarWhereInput[]
  OR?: Prisma.PatientAppointmentScalarWhereInput[]
  NOT?: Prisma.PatientAppointmentScalarWhereInput | Prisma.PatientAppointmentScalarWhereInput[]
  id?: Prisma.UuidFilter<"PatientAppointment"> | string
  patientId?: Prisma.UuidFilter<"PatientAppointment"> | string
  doctorId?: Prisma.StringFilter<"PatientAppointment"> | string
  date?: Prisma.StringFilter<"PatientAppointment"> | string
  time?: Prisma.StringFilter<"PatientAppointment"> | string
  status?: Prisma.EnumAppointmentStatusFilter<"PatientAppointment"> | $Enums.AppointmentStatus
  name?: Prisma.StringNullableFilter<"PatientAppointment"> | string | null
  appointmentId?: Prisma.UuidNullableFilter<"PatientAppointment"> | string | null
  createdAt?: Prisma.DateTimeFilter<"PatientAppointment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PatientAppointment"> | Date | string
}

export type PatientAppointmentCreateManyPatientInput = {
  id?: string
  doctorId: string
  date: string
  time: string
  status?: $Enums.AppointmentStatus
  name?: string | null
  appointmentId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PatientAppointmentUpdateWithoutPatientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  doctorId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  appointment?: Prisma.AppointmentUpdateOneWithoutPatientAppointmentNestedInput
}

export type PatientAppointmentUncheckedUpdateWithoutPatientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  doctorId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  appointmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PatientAppointmentUncheckedUpdateManyWithoutPatientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  doctorId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  appointmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PatientAppointmentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  patientId?: boolean
  doctorId?: boolean
  date?: boolean
  time?: boolean
  status?: boolean
  name?: boolean
  appointmentId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patient?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
  appointment?: boolean | Prisma.PatientAppointment$appointmentArgs<ExtArgs>
}, ExtArgs["result"]["patientAppointment"]>

export type PatientAppointmentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  patientId?: boolean
  doctorId?: boolean
  date?: boolean
  time?: boolean
  status?: boolean
  name?: boolean
  appointmentId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patient?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
  appointment?: boolean | Prisma.PatientAppointment$appointmentArgs<ExtArgs>
}, ExtArgs["result"]["patientAppointment"]>

export type PatientAppointmentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  patientId?: boolean
  doctorId?: boolean
  date?: boolean
  time?: boolean
  status?: boolean
  name?: boolean
  appointmentId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patient?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
  appointment?: boolean | Prisma.PatientAppointment$appointmentArgs<ExtArgs>
}, ExtArgs["result"]["patientAppointment"]>

export type PatientAppointmentSelectScalar = {
  id?: boolean
  patientId?: boolean
  doctorId?: boolean
  date?: boolean
  time?: boolean
  status?: boolean
  name?: boolean
  appointmentId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PatientAppointmentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "patientId" | "doctorId" | "date" | "time" | "status" | "name" | "appointmentId" | "createdAt" | "updatedAt", ExtArgs["result"]["patientAppointment"]>
export type PatientAppointmentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patient?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
  appointment?: boolean | Prisma.PatientAppointment$appointmentArgs<ExtArgs>
}
export type PatientAppointmentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patient?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
  appointment?: boolean | Prisma.PatientAppointment$appointmentArgs<ExtArgs>
}
export type PatientAppointmentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patient?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
  appointment?: boolean | Prisma.PatientAppointment$appointmentArgs<ExtArgs>
}

export type $PatientAppointmentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PatientAppointment"
  objects: {
    patient: Prisma.$PatientProfilePayload<ExtArgs>
    appointment: Prisma.$AppointmentPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    patientId: string
    doctorId: string
    date: string
    time: string
    status: $Enums.AppointmentStatus
    name: string | null
    appointmentId: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["patientAppointment"]>
  composites: {}
}

export type PatientAppointmentGetPayload<S extends boolean | null | undefined | PatientAppointmentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PatientAppointmentPayload, S>

export type PatientAppointmentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PatientAppointmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PatientAppointmentCountAggregateInputType | true
  }

export interface PatientAppointmentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientAppointment'], meta: { name: 'PatientAppointment' } }
  /**
   * Find zero or one PatientAppointment that matches the filter.
   * @param {PatientAppointmentFindUniqueArgs} args - Arguments to find a PatientAppointment
   * @example
   * // Get one PatientAppointment
   * const patientAppointment = await prisma.patientAppointment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PatientAppointmentFindUniqueArgs>(args: Prisma.SelectSubset<T, PatientAppointmentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PatientAppointmentClient<runtime.Types.Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PatientAppointment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PatientAppointmentFindUniqueOrThrowArgs} args - Arguments to find a PatientAppointment
   * @example
   * // Get one PatientAppointment
   * const patientAppointment = await prisma.patientAppointment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PatientAppointmentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PatientAppointmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PatientAppointmentClient<runtime.Types.Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PatientAppointment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PatientAppointmentFindFirstArgs} args - Arguments to find a PatientAppointment
   * @example
   * // Get one PatientAppointment
   * const patientAppointment = await prisma.patientAppointment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PatientAppointmentFindFirstArgs>(args?: Prisma.SelectSubset<T, PatientAppointmentFindFirstArgs<ExtArgs>>): Prisma.Prisma__PatientAppointmentClient<runtime.Types.Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PatientAppointment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PatientAppointmentFindFirstOrThrowArgs} args - Arguments to find a PatientAppointment
   * @example
   * // Get one PatientAppointment
   * const patientAppointment = await prisma.patientAppointment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PatientAppointmentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PatientAppointmentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PatientAppointmentClient<runtime.Types.Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PatientAppointments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PatientAppointmentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PatientAppointments
   * const patientAppointments = await prisma.patientAppointment.findMany()
   * 
   * // Get first 10 PatientAppointments
   * const patientAppointments = await prisma.patientAppointment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const patientAppointmentWithIdOnly = await prisma.patientAppointment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PatientAppointmentFindManyArgs>(args?: Prisma.SelectSubset<T, PatientAppointmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PatientAppointment.
   * @param {PatientAppointmentCreateArgs} args - Arguments to create a PatientAppointment.
   * @example
   * // Create one PatientAppointment
   * const PatientAppointment = await prisma.patientAppointment.create({
   *   data: {
   *     // ... data to create a PatientAppointment
   *   }
   * })
   * 
   */
  create<T extends PatientAppointmentCreateArgs>(args: Prisma.SelectSubset<T, PatientAppointmentCreateArgs<ExtArgs>>): Prisma.Prisma__PatientAppointmentClient<runtime.Types.Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PatientAppointments.
   * @param {PatientAppointmentCreateManyArgs} args - Arguments to create many PatientAppointments.
   * @example
   * // Create many PatientAppointments
   * const patientAppointment = await prisma.patientAppointment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PatientAppointmentCreateManyArgs>(args?: Prisma.SelectSubset<T, PatientAppointmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PatientAppointments and returns the data saved in the database.
   * @param {PatientAppointmentCreateManyAndReturnArgs} args - Arguments to create many PatientAppointments.
   * @example
   * // Create many PatientAppointments
   * const patientAppointment = await prisma.patientAppointment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PatientAppointments and only return the `id`
   * const patientAppointmentWithIdOnly = await prisma.patientAppointment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PatientAppointmentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PatientAppointmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PatientAppointment.
   * @param {PatientAppointmentDeleteArgs} args - Arguments to delete one PatientAppointment.
   * @example
   * // Delete one PatientAppointment
   * const PatientAppointment = await prisma.patientAppointment.delete({
   *   where: {
   *     // ... filter to delete one PatientAppointment
   *   }
   * })
   * 
   */
  delete<T extends PatientAppointmentDeleteArgs>(args: Prisma.SelectSubset<T, PatientAppointmentDeleteArgs<ExtArgs>>): Prisma.Prisma__PatientAppointmentClient<runtime.Types.Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PatientAppointment.
   * @param {PatientAppointmentUpdateArgs} args - Arguments to update one PatientAppointment.
   * @example
   * // Update one PatientAppointment
   * const patientAppointment = await prisma.patientAppointment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PatientAppointmentUpdateArgs>(args: Prisma.SelectSubset<T, PatientAppointmentUpdateArgs<ExtArgs>>): Prisma.Prisma__PatientAppointmentClient<runtime.Types.Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PatientAppointments.
   * @param {PatientAppointmentDeleteManyArgs} args - Arguments to filter PatientAppointments to delete.
   * @example
   * // Delete a few PatientAppointments
   * const { count } = await prisma.patientAppointment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PatientAppointmentDeleteManyArgs>(args?: Prisma.SelectSubset<T, PatientAppointmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PatientAppointments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PatientAppointmentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PatientAppointments
   * const patientAppointment = await prisma.patientAppointment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PatientAppointmentUpdateManyArgs>(args: Prisma.SelectSubset<T, PatientAppointmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PatientAppointments and returns the data updated in the database.
   * @param {PatientAppointmentUpdateManyAndReturnArgs} args - Arguments to update many PatientAppointments.
   * @example
   * // Update many PatientAppointments
   * const patientAppointment = await prisma.patientAppointment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PatientAppointments and only return the `id`
   * const patientAppointmentWithIdOnly = await prisma.patientAppointment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PatientAppointmentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PatientAppointmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PatientAppointment.
   * @param {PatientAppointmentUpsertArgs} args - Arguments to update or create a PatientAppointment.
   * @example
   * // Update or create a PatientAppointment
   * const patientAppointment = await prisma.patientAppointment.upsert({
   *   create: {
   *     // ... data to create a PatientAppointment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PatientAppointment we want to update
   *   }
   * })
   */
  upsert<T extends PatientAppointmentUpsertArgs>(args: Prisma.SelectSubset<T, PatientAppointmentUpsertArgs<ExtArgs>>): Prisma.Prisma__PatientAppointmentClient<runtime.Types.Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PatientAppointments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PatientAppointmentCountArgs} args - Arguments to filter PatientAppointments to count.
   * @example
   * // Count the number of PatientAppointments
   * const count = await prisma.patientAppointment.count({
   *   where: {
   *     // ... the filter for the PatientAppointments we want to count
   *   }
   * })
  **/
  count<T extends PatientAppointmentCountArgs>(
    args?: Prisma.Subset<T, PatientAppointmentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PatientAppointmentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PatientAppointment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PatientAppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PatientAppointmentAggregateArgs>(args: Prisma.Subset<T, PatientAppointmentAggregateArgs>): Prisma.PrismaPromise<GetPatientAppointmentAggregateType<T>>

  /**
   * Group by PatientAppointment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PatientAppointmentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PatientAppointmentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PatientAppointmentGroupByArgs['orderBy'] }
      : { orderBy?: PatientAppointmentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PatientAppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PatientAppointment model
 */
readonly fields: PatientAppointmentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PatientAppointment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PatientAppointmentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  patient<T extends Prisma.PatientProfileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PatientProfileDefaultArgs<ExtArgs>>): Prisma.Prisma__PatientProfileClient<runtime.Types.Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  appointment<T extends Prisma.PatientAppointment$appointmentArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PatientAppointment$appointmentArgs<ExtArgs>>): Prisma.Prisma__AppointmentClient<runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PatientAppointment model
 */
export interface PatientAppointmentFieldRefs {
  readonly id: Prisma.FieldRef<"PatientAppointment", 'String'>
  readonly patientId: Prisma.FieldRef<"PatientAppointment", 'String'>
  readonly doctorId: Prisma.FieldRef<"PatientAppointment", 'String'>
  readonly date: Prisma.FieldRef<"PatientAppointment", 'String'>
  readonly time: Prisma.FieldRef<"PatientAppointment", 'String'>
  readonly status: Prisma.FieldRef<"PatientAppointment", 'AppointmentStatus'>
  readonly name: Prisma.FieldRef<"PatientAppointment", 'String'>
  readonly appointmentId: Prisma.FieldRef<"PatientAppointment", 'String'>
  readonly createdAt: Prisma.FieldRef<"PatientAppointment", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PatientAppointment", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PatientAppointment findUnique
 */
export type PatientAppointmentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientAppointment
   */
  select?: Prisma.PatientAppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PatientAppointment
   */
  omit?: Prisma.PatientAppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientAppointmentInclude<ExtArgs> | null
  /**
   * Filter, which PatientAppointment to fetch.
   */
  where: Prisma.PatientAppointmentWhereUniqueInput
}

/**
 * PatientAppointment findUniqueOrThrow
 */
export type PatientAppointmentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientAppointment
   */
  select?: Prisma.PatientAppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PatientAppointment
   */
  omit?: Prisma.PatientAppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientAppointmentInclude<ExtArgs> | null
  /**
   * Filter, which PatientAppointment to fetch.
   */
  where: Prisma.PatientAppointmentWhereUniqueInput
}

/**
 * PatientAppointment findFirst
 */
export type PatientAppointmentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientAppointment
   */
  select?: Prisma.PatientAppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PatientAppointment
   */
  omit?: Prisma.PatientAppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientAppointmentInclude<ExtArgs> | null
  /**
   * Filter, which PatientAppointment to fetch.
   */
  where?: Prisma.PatientAppointmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PatientAppointments to fetch.
   */
  orderBy?: Prisma.PatientAppointmentOrderByWithRelationInput | Prisma.PatientAppointmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PatientAppointments.
   */
  cursor?: Prisma.PatientAppointmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PatientAppointments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PatientAppointments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PatientAppointments.
   */
  distinct?: Prisma.PatientAppointmentScalarFieldEnum | Prisma.PatientAppointmentScalarFieldEnum[]
}

/**
 * PatientAppointment findFirstOrThrow
 */
export type PatientAppointmentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientAppointment
   */
  select?: Prisma.PatientAppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PatientAppointment
   */
  omit?: Prisma.PatientAppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientAppointmentInclude<ExtArgs> | null
  /**
   * Filter, which PatientAppointment to fetch.
   */
  where?: Prisma.PatientAppointmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PatientAppointments to fetch.
   */
  orderBy?: Prisma.PatientAppointmentOrderByWithRelationInput | Prisma.PatientAppointmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PatientAppointments.
   */
  cursor?: Prisma.PatientAppointmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PatientAppointments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PatientAppointments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PatientAppointments.
   */
  distinct?: Prisma.PatientAppointmentScalarFieldEnum | Prisma.PatientAppointmentScalarFieldEnum[]
}

/**
 * PatientAppointment findMany
 */
export type PatientAppointmentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientAppointment
   */
  select?: Prisma.PatientAppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PatientAppointment
   */
  omit?: Prisma.PatientAppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientAppointmentInclude<ExtArgs> | null
  /**
   * Filter, which PatientAppointments to fetch.
   */
  where?: Prisma.PatientAppointmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PatientAppointments to fetch.
   */
  orderBy?: Prisma.PatientAppointmentOrderByWithRelationInput | Prisma.PatientAppointmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PatientAppointments.
   */
  cursor?: Prisma.PatientAppointmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PatientAppointments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PatientAppointments.
   */
  skip?: number
  distinct?: Prisma.PatientAppointmentScalarFieldEnum | Prisma.PatientAppointmentScalarFieldEnum[]
}

/**
 * PatientAppointment create
 */
export type PatientAppointmentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientAppointment
   */
  select?: Prisma.PatientAppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PatientAppointment
   */
  omit?: Prisma.PatientAppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientAppointmentInclude<ExtArgs> | null
  /**
   * The data needed to create a PatientAppointment.
   */
  data: Prisma.XOR<Prisma.PatientAppointmentCreateInput, Prisma.PatientAppointmentUncheckedCreateInput>
}

/**
 * PatientAppointment createMany
 */
export type PatientAppointmentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PatientAppointments.
   */
  data: Prisma.PatientAppointmentCreateManyInput | Prisma.PatientAppointmentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PatientAppointment createManyAndReturn
 */
export type PatientAppointmentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientAppointment
   */
  select?: Prisma.PatientAppointmentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PatientAppointment
   */
  omit?: Prisma.PatientAppointmentOmit<ExtArgs> | null
  /**
   * The data used to create many PatientAppointments.
   */
  data: Prisma.PatientAppointmentCreateManyInput | Prisma.PatientAppointmentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientAppointmentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PatientAppointment update
 */
export type PatientAppointmentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientAppointment
   */
  select?: Prisma.PatientAppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PatientAppointment
   */
  omit?: Prisma.PatientAppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientAppointmentInclude<ExtArgs> | null
  /**
   * The data needed to update a PatientAppointment.
   */
  data: Prisma.XOR<Prisma.PatientAppointmentUpdateInput, Prisma.PatientAppointmentUncheckedUpdateInput>
  /**
   * Choose, which PatientAppointment to update.
   */
  where: Prisma.PatientAppointmentWhereUniqueInput
}

/**
 * PatientAppointment updateMany
 */
export type PatientAppointmentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PatientAppointments.
   */
  data: Prisma.XOR<Prisma.PatientAppointmentUpdateManyMutationInput, Prisma.PatientAppointmentUncheckedUpdateManyInput>
  /**
   * Filter which PatientAppointments to update
   */
  where?: Prisma.PatientAppointmentWhereInput
  /**
   * Limit how many PatientAppointments to update.
   */
  limit?: number
}

/**
 * PatientAppointment updateManyAndReturn
 */
export type PatientAppointmentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientAppointment
   */
  select?: Prisma.PatientAppointmentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PatientAppointment
   */
  omit?: Prisma.PatientAppointmentOmit<ExtArgs> | null
  /**
   * The data used to update PatientAppointments.
   */
  data: Prisma.XOR<Prisma.PatientAppointmentUpdateManyMutationInput, Prisma.PatientAppointmentUncheckedUpdateManyInput>
  /**
   * Filter which PatientAppointments to update
   */
  where?: Prisma.PatientAppointmentWhereInput
  /**
   * Limit how many PatientAppointments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientAppointmentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PatientAppointment upsert
 */
export type PatientAppointmentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientAppointment
   */
  select?: Prisma.PatientAppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PatientAppointment
   */
  omit?: Prisma.PatientAppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientAppointmentInclude<ExtArgs> | null
  /**
   * The filter to search for the PatientAppointment to update in case it exists.
   */
  where: Prisma.PatientAppointmentWhereUniqueInput
  /**
   * In case the PatientAppointment found by the `where` argument doesn't exist, create a new PatientAppointment with this data.
   */
  create: Prisma.XOR<Prisma.PatientAppointmentCreateInput, Prisma.PatientAppointmentUncheckedCreateInput>
  /**
   * In case the PatientAppointment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PatientAppointmentUpdateInput, Prisma.PatientAppointmentUncheckedUpdateInput>
}

/**
 * PatientAppointment delete
 */
export type PatientAppointmentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientAppointment
   */
  select?: Prisma.PatientAppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PatientAppointment
   */
  omit?: Prisma.PatientAppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientAppointmentInclude<ExtArgs> | null
  /**
   * Filter which PatientAppointment to delete.
   */
  where: Prisma.PatientAppointmentWhereUniqueInput
}

/**
 * PatientAppointment deleteMany
 */
export type PatientAppointmentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PatientAppointments to delete
   */
  where?: Prisma.PatientAppointmentWhereInput
  /**
   * Limit how many PatientAppointments to delete.
   */
  limit?: number
}

/**
 * PatientAppointment.appointment
 */
export type PatientAppointment$appointmentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointment
   */
  select?: Prisma.AppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointment
   */
  omit?: Prisma.AppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppointmentInclude<ExtArgs> | null
  where?: Prisma.AppointmentWhereInput
}

/**
 * PatientAppointment without action
 */
export type PatientAppointmentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientAppointment
   */
  select?: Prisma.PatientAppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PatientAppointment
   */
  omit?: Prisma.PatientAppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientAppointmentInclude<ExtArgs> | null
}
