
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MedicalRecordRequest` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MedicalRecordRequest
 * 
 */
export type MedicalRecordRequestModel = runtime.Types.Result.DefaultSelection<Prisma.$MedicalRecordRequestPayload>

export type AggregateMedicalRecordRequest = {
  _count: MedicalRecordRequestCountAggregateOutputType | null
  _min: MedicalRecordRequestMinAggregateOutputType | null
  _max: MedicalRecordRequestMaxAggregateOutputType | null
}

export type MedicalRecordRequestMinAggregateOutputType = {
  id: string | null
  patientProfileId: string | null
  inpatientEncounterId: string | null
  type: string | null
  status: string | null
  fileUrl: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MedicalRecordRequestMaxAggregateOutputType = {
  id: string | null
  patientProfileId: string | null
  inpatientEncounterId: string | null
  type: string | null
  status: string | null
  fileUrl: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MedicalRecordRequestCountAggregateOutputType = {
  id: number
  patientProfileId: number
  inpatientEncounterId: number
  type: number
  status: number
  fileUrl: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type MedicalRecordRequestMinAggregateInputType = {
  id?: true
  patientProfileId?: true
  inpatientEncounterId?: true
  type?: true
  status?: true
  fileUrl?: true
  createdAt?: true
  updatedAt?: true
}

export type MedicalRecordRequestMaxAggregateInputType = {
  id?: true
  patientProfileId?: true
  inpatientEncounterId?: true
  type?: true
  status?: true
  fileUrl?: true
  createdAt?: true
  updatedAt?: true
}

export type MedicalRecordRequestCountAggregateInputType = {
  id?: true
  patientProfileId?: true
  inpatientEncounterId?: true
  type?: true
  status?: true
  fileUrl?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MedicalRecordRequestAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MedicalRecordRequest to aggregate.
   */
  where?: Prisma.MedicalRecordRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MedicalRecordRequests to fetch.
   */
  orderBy?: Prisma.MedicalRecordRequestOrderByWithRelationInput | Prisma.MedicalRecordRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MedicalRecordRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MedicalRecordRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MedicalRecordRequests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MedicalRecordRequests
  **/
  _count?: true | MedicalRecordRequestCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MedicalRecordRequestMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MedicalRecordRequestMaxAggregateInputType
}

export type GetMedicalRecordRequestAggregateType<T extends MedicalRecordRequestAggregateArgs> = {
      [P in keyof T & keyof AggregateMedicalRecordRequest]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMedicalRecordRequest[P]>
    : Prisma.GetScalarType<T[P], AggregateMedicalRecordRequest[P]>
}




export type MedicalRecordRequestGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MedicalRecordRequestWhereInput
  orderBy?: Prisma.MedicalRecordRequestOrderByWithAggregationInput | Prisma.MedicalRecordRequestOrderByWithAggregationInput[]
  by: Prisma.MedicalRecordRequestScalarFieldEnum[] | Prisma.MedicalRecordRequestScalarFieldEnum
  having?: Prisma.MedicalRecordRequestScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MedicalRecordRequestCountAggregateInputType | true
  _min?: MedicalRecordRequestMinAggregateInputType
  _max?: MedicalRecordRequestMaxAggregateInputType
}

export type MedicalRecordRequestGroupByOutputType = {
  id: string
  patientProfileId: string
  inpatientEncounterId: string
  type: string
  status: string
  fileUrl: string
  createdAt: Date
  updatedAt: Date
  _count: MedicalRecordRequestCountAggregateOutputType | null
  _min: MedicalRecordRequestMinAggregateOutputType | null
  _max: MedicalRecordRequestMaxAggregateOutputType | null
}

type GetMedicalRecordRequestGroupByPayload<T extends MedicalRecordRequestGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MedicalRecordRequestGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MedicalRecordRequestGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MedicalRecordRequestGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MedicalRecordRequestGroupByOutputType[P]>
      }
    >
  > 



export type MedicalRecordRequestWhereInput = {
  AND?: Prisma.MedicalRecordRequestWhereInput | Prisma.MedicalRecordRequestWhereInput[]
  OR?: Prisma.MedicalRecordRequestWhereInput[]
  NOT?: Prisma.MedicalRecordRequestWhereInput | Prisma.MedicalRecordRequestWhereInput[]
  id?: Prisma.UuidFilter<"MedicalRecordRequest"> | string
  patientProfileId?: Prisma.UuidFilter<"MedicalRecordRequest"> | string
  inpatientEncounterId?: Prisma.UuidFilter<"MedicalRecordRequest"> | string
  type?: Prisma.StringFilter<"MedicalRecordRequest"> | string
  status?: Prisma.StringFilter<"MedicalRecordRequest"> | string
  fileUrl?: Prisma.StringFilter<"MedicalRecordRequest"> | string
  createdAt?: Prisma.DateTimeFilter<"MedicalRecordRequest"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MedicalRecordRequest"> | Date | string
  patientProfile?: Prisma.XOR<Prisma.PatientProfileScalarRelationFilter, Prisma.PatientProfileWhereInput>
  inpatientEncounter?: Prisma.XOR<Prisma.InpatientEncounterScalarRelationFilter, Prisma.InpatientEncounterWhereInput>
}

export type MedicalRecordRequestOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  inpatientEncounterId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  status?: Prisma.SortOrder
  fileUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  patientProfile?: Prisma.PatientProfileOrderByWithRelationInput
  inpatientEncounter?: Prisma.InpatientEncounterOrderByWithRelationInput
}

export type MedicalRecordRequestWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.MedicalRecordRequestWhereInput | Prisma.MedicalRecordRequestWhereInput[]
  OR?: Prisma.MedicalRecordRequestWhereInput[]
  NOT?: Prisma.MedicalRecordRequestWhereInput | Prisma.MedicalRecordRequestWhereInput[]
  patientProfileId?: Prisma.UuidFilter<"MedicalRecordRequest"> | string
  inpatientEncounterId?: Prisma.UuidFilter<"MedicalRecordRequest"> | string
  type?: Prisma.StringFilter<"MedicalRecordRequest"> | string
  status?: Prisma.StringFilter<"MedicalRecordRequest"> | string
  fileUrl?: Prisma.StringFilter<"MedicalRecordRequest"> | string
  createdAt?: Prisma.DateTimeFilter<"MedicalRecordRequest"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MedicalRecordRequest"> | Date | string
  patientProfile?: Prisma.XOR<Prisma.PatientProfileScalarRelationFilter, Prisma.PatientProfileWhereInput>
  inpatientEncounter?: Prisma.XOR<Prisma.InpatientEncounterScalarRelationFilter, Prisma.InpatientEncounterWhereInput>
}, "id">

export type MedicalRecordRequestOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  inpatientEncounterId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  status?: Prisma.SortOrder
  fileUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MedicalRecordRequestCountOrderByAggregateInput
  _max?: Prisma.MedicalRecordRequestMaxOrderByAggregateInput
  _min?: Prisma.MedicalRecordRequestMinOrderByAggregateInput
}

export type MedicalRecordRequestScalarWhereWithAggregatesInput = {
  AND?: Prisma.MedicalRecordRequestScalarWhereWithAggregatesInput | Prisma.MedicalRecordRequestScalarWhereWithAggregatesInput[]
  OR?: Prisma.MedicalRecordRequestScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MedicalRecordRequestScalarWhereWithAggregatesInput | Prisma.MedicalRecordRequestScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"MedicalRecordRequest"> | string
  patientProfileId?: Prisma.UuidWithAggregatesFilter<"MedicalRecordRequest"> | string
  inpatientEncounterId?: Prisma.UuidWithAggregatesFilter<"MedicalRecordRequest"> | string
  type?: Prisma.StringWithAggregatesFilter<"MedicalRecordRequest"> | string
  status?: Prisma.StringWithAggregatesFilter<"MedicalRecordRequest"> | string
  fileUrl?: Prisma.StringWithAggregatesFilter<"MedicalRecordRequest"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MedicalRecordRequest"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MedicalRecordRequest"> | Date | string
}

export type MedicalRecordRequestCreateInput = {
  id?: string
  type: string
  status: string
  fileUrl: string
  createdAt?: Date | string
  updatedAt?: Date | string
  patientProfile: Prisma.PatientProfileCreateNestedOneWithoutMedicalRecordRequestsInput
  inpatientEncounter: Prisma.InpatientEncounterCreateNestedOneWithoutMedicalRecordRequestInput
}

export type MedicalRecordRequestUncheckedCreateInput = {
  id?: string
  patientProfileId: string
  inpatientEncounterId: string
  type: string
  status: string
  fileUrl: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MedicalRecordRequestUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  patientProfile?: Prisma.PatientProfileUpdateOneRequiredWithoutMedicalRecordRequestsNestedInput
  inpatientEncounter?: Prisma.InpatientEncounterUpdateOneRequiredWithoutMedicalRecordRequestNestedInput
}

export type MedicalRecordRequestUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  patientProfileId?: Prisma.StringFieldUpdateOperationsInput | string
  inpatientEncounterId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MedicalRecordRequestCreateManyInput = {
  id?: string
  patientProfileId: string
  inpatientEncounterId: string
  type: string
  status: string
  fileUrl: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MedicalRecordRequestUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MedicalRecordRequestUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  patientProfileId?: Prisma.StringFieldUpdateOperationsInput | string
  inpatientEncounterId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MedicalRecordRequestListRelationFilter = {
  every?: Prisma.MedicalRecordRequestWhereInput
  some?: Prisma.MedicalRecordRequestWhereInput
  none?: Prisma.MedicalRecordRequestWhereInput
}

export type MedicalRecordRequestOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MedicalRecordRequestCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  inpatientEncounterId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  status?: Prisma.SortOrder
  fileUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MedicalRecordRequestMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  inpatientEncounterId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  status?: Prisma.SortOrder
  fileUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MedicalRecordRequestMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  inpatientEncounterId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  status?: Prisma.SortOrder
  fileUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MedicalRecordRequestCreateNestedManyWithoutInpatientEncounterInput = {
  create?: Prisma.XOR<Prisma.MedicalRecordRequestCreateWithoutInpatientEncounterInput, Prisma.MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput> | Prisma.MedicalRecordRequestCreateWithoutInpatientEncounterInput[] | Prisma.MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput[]
  connectOrCreate?: Prisma.MedicalRecordRequestCreateOrConnectWithoutInpatientEncounterInput | Prisma.MedicalRecordRequestCreateOrConnectWithoutInpatientEncounterInput[]
  createMany?: Prisma.MedicalRecordRequestCreateManyInpatientEncounterInputEnvelope
  connect?: Prisma.MedicalRecordRequestWhereUniqueInput | Prisma.MedicalRecordRequestWhereUniqueInput[]
}

export type MedicalRecordRequestUncheckedCreateNestedManyWithoutInpatientEncounterInput = {
  create?: Prisma.XOR<Prisma.MedicalRecordRequestCreateWithoutInpatientEncounterInput, Prisma.MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput> | Prisma.MedicalRecordRequestCreateWithoutInpatientEncounterInput[] | Prisma.MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput[]
  connectOrCreate?: Prisma.MedicalRecordRequestCreateOrConnectWithoutInpatientEncounterInput | Prisma.MedicalRecordRequestCreateOrConnectWithoutInpatientEncounterInput[]
  createMany?: Prisma.MedicalRecordRequestCreateManyInpatientEncounterInputEnvelope
  connect?: Prisma.MedicalRecordRequestWhereUniqueInput | Prisma.MedicalRecordRequestWhereUniqueInput[]
}

export type MedicalRecordRequestUpdateManyWithoutInpatientEncounterNestedInput = {
  create?: Prisma.XOR<Prisma.MedicalRecordRequestCreateWithoutInpatientEncounterInput, Prisma.MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput> | Prisma.MedicalRecordRequestCreateWithoutInpatientEncounterInput[] | Prisma.MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput[]
  connectOrCreate?: Prisma.MedicalRecordRequestCreateOrConnectWithoutInpatientEncounterInput | Prisma.MedicalRecordRequestCreateOrConnectWithoutInpatientEncounterInput[]
  upsert?: Prisma.MedicalRecordRequestUpsertWithWhereUniqueWithoutInpatientEncounterInput | Prisma.MedicalRecordRequestUpsertWithWhereUniqueWithoutInpatientEncounterInput[]
  createMany?: Prisma.MedicalRecordRequestCreateManyInpatientEncounterInputEnvelope
  set?: Prisma.MedicalRecordRequestWhereUniqueInput | Prisma.MedicalRecordRequestWhereUniqueInput[]
  disconnect?: Prisma.MedicalRecordRequestWhereUniqueInput | Prisma.MedicalRecordRequestWhereUniqueInput[]
  delete?: Prisma.MedicalRecordRequestWhereUniqueInput | Prisma.MedicalRecordRequestWhereUniqueInput[]
  connect?: Prisma.MedicalRecordRequestWhereUniqueInput | Prisma.MedicalRecordRequestWhereUniqueInput[]
  update?: Prisma.MedicalRecordRequestUpdateWithWhereUniqueWithoutInpatientEncounterInput | Prisma.MedicalRecordRequestUpdateWithWhereUniqueWithoutInpatientEncounterInput[]
  updateMany?: Prisma.MedicalRecordRequestUpdateManyWithWhereWithoutInpatientEncounterInput | Prisma.MedicalRecordRequestUpdateManyWithWhereWithoutInpatientEncounterInput[]
  deleteMany?: Prisma.MedicalRecordRequestScalarWhereInput | Prisma.MedicalRecordRequestScalarWhereInput[]
}

export type MedicalRecordRequestUncheckedUpdateManyWithoutInpatientEncounterNestedInput = {
  create?: Prisma.XOR<Prisma.MedicalRecordRequestCreateWithoutInpatientEncounterInput, Prisma.MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput> | Prisma.MedicalRecordRequestCreateWithoutInpatientEncounterInput[] | Prisma.MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput[]
  connectOrCreate?: Prisma.MedicalRecordRequestCreateOrConnectWithoutInpatientEncounterInput | Prisma.MedicalRecordRequestCreateOrConnectWithoutInpatientEncounterInput[]
  upsert?: Prisma.MedicalRecordRequestUpsertWithWhereUniqueWithoutInpatientEncounterInput | Prisma.MedicalRecordRequestUpsertWithWhereUniqueWithoutInpatientEncounterInput[]
  createMany?: Prisma.MedicalRecordRequestCreateManyInpatientEncounterInputEnvelope
  set?: Prisma.MedicalRecordRequestWhereUniqueInput | Prisma.MedicalRecordRequestWhereUniqueInput[]
  disconnect?: Prisma.MedicalRecordRequestWhereUniqueInput | Prisma.MedicalRecordRequestWhereUniqueInput[]
  delete?: Prisma.MedicalRecordRequestWhereUniqueInput | Prisma.MedicalRecordRequestWhereUniqueInput[]
  connect?: Prisma.MedicalRecordRequestWhereUniqueInput | Prisma.MedicalRecordRequestWhereUniqueInput[]
  update?: Prisma.MedicalRecordRequestUpdateWithWhereUniqueWithoutInpatientEncounterInput | Prisma.MedicalRecordRequestUpdateWithWhereUniqueWithoutInpatientEncounterInput[]
  updateMany?: Prisma.MedicalRecordRequestUpdateManyWithWhereWithoutInpatientEncounterInput | Prisma.MedicalRecordRequestUpdateManyWithWhereWithoutInpatientEncounterInput[]
  deleteMany?: Prisma.MedicalRecordRequestScalarWhereInput | Prisma.MedicalRecordRequestScalarWhereInput[]
}

export type MedicalRecordRequestCreateNestedManyWithoutPatientProfileInput = {
  create?: Prisma.XOR<Prisma.MedicalRecordRequestCreateWithoutPatientProfileInput, Prisma.MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput> | Prisma.MedicalRecordRequestCreateWithoutPatientProfileInput[] | Prisma.MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.MedicalRecordRequestCreateOrConnectWithoutPatientProfileInput | Prisma.MedicalRecordRequestCreateOrConnectWithoutPatientProfileInput[]
  createMany?: Prisma.MedicalRecordRequestCreateManyPatientProfileInputEnvelope
  connect?: Prisma.MedicalRecordRequestWhereUniqueInput | Prisma.MedicalRecordRequestWhereUniqueInput[]
}

export type MedicalRecordRequestUncheckedCreateNestedManyWithoutPatientProfileInput = {
  create?: Prisma.XOR<Prisma.MedicalRecordRequestCreateWithoutPatientProfileInput, Prisma.MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput> | Prisma.MedicalRecordRequestCreateWithoutPatientProfileInput[] | Prisma.MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.MedicalRecordRequestCreateOrConnectWithoutPatientProfileInput | Prisma.MedicalRecordRequestCreateOrConnectWithoutPatientProfileInput[]
  createMany?: Prisma.MedicalRecordRequestCreateManyPatientProfileInputEnvelope
  connect?: Prisma.MedicalRecordRequestWhereUniqueInput | Prisma.MedicalRecordRequestWhereUniqueInput[]
}

export type MedicalRecordRequestUpdateManyWithoutPatientProfileNestedInput = {
  create?: Prisma.XOR<Prisma.MedicalRecordRequestCreateWithoutPatientProfileInput, Prisma.MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput> | Prisma.MedicalRecordRequestCreateWithoutPatientProfileInput[] | Prisma.MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.MedicalRecordRequestCreateOrConnectWithoutPatientProfileInput | Prisma.MedicalRecordRequestCreateOrConnectWithoutPatientProfileInput[]
  upsert?: Prisma.MedicalRecordRequestUpsertWithWhereUniqueWithoutPatientProfileInput | Prisma.MedicalRecordRequestUpsertWithWhereUniqueWithoutPatientProfileInput[]
  createMany?: Prisma.MedicalRecordRequestCreateManyPatientProfileInputEnvelope
  set?: Prisma.MedicalRecordRequestWhereUniqueInput | Prisma.MedicalRecordRequestWhereUniqueInput[]
  disconnect?: Prisma.MedicalRecordRequestWhereUniqueInput | Prisma.MedicalRecordRequestWhereUniqueInput[]
  delete?: Prisma.MedicalRecordRequestWhereUniqueInput | Prisma.MedicalRecordRequestWhereUniqueInput[]
  connect?: Prisma.MedicalRecordRequestWhereUniqueInput | Prisma.MedicalRecordRequestWhereUniqueInput[]
  update?: Prisma.MedicalRecordRequestUpdateWithWhereUniqueWithoutPatientProfileInput | Prisma.MedicalRecordRequestUpdateWithWhereUniqueWithoutPatientProfileInput[]
  updateMany?: Prisma.MedicalRecordRequestUpdateManyWithWhereWithoutPatientProfileInput | Prisma.MedicalRecordRequestUpdateManyWithWhereWithoutPatientProfileInput[]
  deleteMany?: Prisma.MedicalRecordRequestScalarWhereInput | Prisma.MedicalRecordRequestScalarWhereInput[]
}

export type MedicalRecordRequestUncheckedUpdateManyWithoutPatientProfileNestedInput = {
  create?: Prisma.XOR<Prisma.MedicalRecordRequestCreateWithoutPatientProfileInput, Prisma.MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput> | Prisma.MedicalRecordRequestCreateWithoutPatientProfileInput[] | Prisma.MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.MedicalRecordRequestCreateOrConnectWithoutPatientProfileInput | Prisma.MedicalRecordRequestCreateOrConnectWithoutPatientProfileInput[]
  upsert?: Prisma.MedicalRecordRequestUpsertWithWhereUniqueWithoutPatientProfileInput | Prisma.MedicalRecordRequestUpsertWithWhereUniqueWithoutPatientProfileInput[]
  createMany?: Prisma.MedicalRecordRequestCreateManyPatientProfileInputEnvelope
  set?: Prisma.MedicalRecordRequestWhereUniqueInput | Prisma.MedicalRecordRequestWhereUniqueInput[]
  disconnect?: Prisma.MedicalRecordRequestWhereUniqueInput | Prisma.MedicalRecordRequestWhereUniqueInput[]
  delete?: Prisma.MedicalRecordRequestWhereUniqueInput | Prisma.MedicalRecordRequestWhereUniqueInput[]
  connect?: Prisma.MedicalRecordRequestWhereUniqueInput | Prisma.MedicalRecordRequestWhereUniqueInput[]
  update?: Prisma.MedicalRecordRequestUpdateWithWhereUniqueWithoutPatientProfileInput | Prisma.MedicalRecordRequestUpdateWithWhereUniqueWithoutPatientProfileInput[]
  updateMany?: Prisma.MedicalRecordRequestUpdateManyWithWhereWithoutPatientProfileInput | Prisma.MedicalRecordRequestUpdateManyWithWhereWithoutPatientProfileInput[]
  deleteMany?: Prisma.MedicalRecordRequestScalarWhereInput | Prisma.MedicalRecordRequestScalarWhereInput[]
}

export type MedicalRecordRequestCreateWithoutInpatientEncounterInput = {
  id?: string
  type: string
  status: string
  fileUrl: string
  createdAt?: Date | string
  updatedAt?: Date | string
  patientProfile: Prisma.PatientProfileCreateNestedOneWithoutMedicalRecordRequestsInput
}

export type MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput = {
  id?: string
  patientProfileId: string
  type: string
  status: string
  fileUrl: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MedicalRecordRequestCreateOrConnectWithoutInpatientEncounterInput = {
  where: Prisma.MedicalRecordRequestWhereUniqueInput
  create: Prisma.XOR<Prisma.MedicalRecordRequestCreateWithoutInpatientEncounterInput, Prisma.MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput>
}

export type MedicalRecordRequestCreateManyInpatientEncounterInputEnvelope = {
  data: Prisma.MedicalRecordRequestCreateManyInpatientEncounterInput | Prisma.MedicalRecordRequestCreateManyInpatientEncounterInput[]
  skipDuplicates?: boolean
}

export type MedicalRecordRequestUpsertWithWhereUniqueWithoutInpatientEncounterInput = {
  where: Prisma.MedicalRecordRequestWhereUniqueInput
  update: Prisma.XOR<Prisma.MedicalRecordRequestUpdateWithoutInpatientEncounterInput, Prisma.MedicalRecordRequestUncheckedUpdateWithoutInpatientEncounterInput>
  create: Prisma.XOR<Prisma.MedicalRecordRequestCreateWithoutInpatientEncounterInput, Prisma.MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput>
}

export type MedicalRecordRequestUpdateWithWhereUniqueWithoutInpatientEncounterInput = {
  where: Prisma.MedicalRecordRequestWhereUniqueInput
  data: Prisma.XOR<Prisma.MedicalRecordRequestUpdateWithoutInpatientEncounterInput, Prisma.MedicalRecordRequestUncheckedUpdateWithoutInpatientEncounterInput>
}

export type MedicalRecordRequestUpdateManyWithWhereWithoutInpatientEncounterInput = {
  where: Prisma.MedicalRecordRequestScalarWhereInput
  data: Prisma.XOR<Prisma.MedicalRecordRequestUpdateManyMutationInput, Prisma.MedicalRecordRequestUncheckedUpdateManyWithoutInpatientEncounterInput>
}

export type MedicalRecordRequestScalarWhereInput = {
  AND?: Prisma.MedicalRecordRequestScalarWhereInput | Prisma.MedicalRecordRequestScalarWhereInput[]
  OR?: Prisma.MedicalRecordRequestScalarWhereInput[]
  NOT?: Prisma.MedicalRecordRequestScalarWhereInput | Prisma.MedicalRecordRequestScalarWhereInput[]
  id?: Prisma.UuidFilter<"MedicalRecordRequest"> | string
  patientProfileId?: Prisma.UuidFilter<"MedicalRecordRequest"> | string
  inpatientEncounterId?: Prisma.UuidFilter<"MedicalRecordRequest"> | string
  type?: Prisma.StringFilter<"MedicalRecordRequest"> | string
  status?: Prisma.StringFilter<"MedicalRecordRequest"> | string
  fileUrl?: Prisma.StringFilter<"MedicalRecordRequest"> | string
  createdAt?: Prisma.DateTimeFilter<"MedicalRecordRequest"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MedicalRecordRequest"> | Date | string
}

export type MedicalRecordRequestCreateWithoutPatientProfileInput = {
  id?: string
  type: string
  status: string
  fileUrl: string
  createdAt?: Date | string
  updatedAt?: Date | string
  inpatientEncounter: Prisma.InpatientEncounterCreateNestedOneWithoutMedicalRecordRequestInput
}

export type MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput = {
  id?: string
  inpatientEncounterId: string
  type: string
  status: string
  fileUrl: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MedicalRecordRequestCreateOrConnectWithoutPatientProfileInput = {
  where: Prisma.MedicalRecordRequestWhereUniqueInput
  create: Prisma.XOR<Prisma.MedicalRecordRequestCreateWithoutPatientProfileInput, Prisma.MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput>
}

export type MedicalRecordRequestCreateManyPatientProfileInputEnvelope = {
  data: Prisma.MedicalRecordRequestCreateManyPatientProfileInput | Prisma.MedicalRecordRequestCreateManyPatientProfileInput[]
  skipDuplicates?: boolean
}

export type MedicalRecordRequestUpsertWithWhereUniqueWithoutPatientProfileInput = {
  where: Prisma.MedicalRecordRequestWhereUniqueInput
  update: Prisma.XOR<Prisma.MedicalRecordRequestUpdateWithoutPatientProfileInput, Prisma.MedicalRecordRequestUncheckedUpdateWithoutPatientProfileInput>
  create: Prisma.XOR<Prisma.MedicalRecordRequestCreateWithoutPatientProfileInput, Prisma.MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput>
}

export type MedicalRecordRequestUpdateWithWhereUniqueWithoutPatientProfileInput = {
  where: Prisma.MedicalRecordRequestWhereUniqueInput
  data: Prisma.XOR<Prisma.MedicalRecordRequestUpdateWithoutPatientProfileInput, Prisma.MedicalRecordRequestUncheckedUpdateWithoutPatientProfileInput>
}

export type MedicalRecordRequestUpdateManyWithWhereWithoutPatientProfileInput = {
  where: Prisma.MedicalRecordRequestScalarWhereInput
  data: Prisma.XOR<Prisma.MedicalRecordRequestUpdateManyMutationInput, Prisma.MedicalRecordRequestUncheckedUpdateManyWithoutPatientProfileInput>
}

export type MedicalRecordRequestCreateManyInpatientEncounterInput = {
  id?: string
  patientProfileId: string
  type: string
  status: string
  fileUrl: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MedicalRecordRequestUpdateWithoutInpatientEncounterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  patientProfile?: Prisma.PatientProfileUpdateOneRequiredWithoutMedicalRecordRequestsNestedInput
}

export type MedicalRecordRequestUncheckedUpdateWithoutInpatientEncounterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  patientProfileId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MedicalRecordRequestUncheckedUpdateManyWithoutInpatientEncounterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  patientProfileId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MedicalRecordRequestCreateManyPatientProfileInput = {
  id?: string
  inpatientEncounterId: string
  type: string
  status: string
  fileUrl: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MedicalRecordRequestUpdateWithoutPatientProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  inpatientEncounter?: Prisma.InpatientEncounterUpdateOneRequiredWithoutMedicalRecordRequestNestedInput
}

export type MedicalRecordRequestUncheckedUpdateWithoutPatientProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  inpatientEncounterId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MedicalRecordRequestUncheckedUpdateManyWithoutPatientProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  inpatientEncounterId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type MedicalRecordRequestSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  patientProfileId?: boolean
  inpatientEncounterId?: boolean
  type?: boolean
  status?: boolean
  fileUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
  inpatientEncounter?: boolean | Prisma.InpatientEncounterDefaultArgs<ExtArgs>
}, ExtArgs["result"]["medicalRecordRequest"]>

export type MedicalRecordRequestSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  patientProfileId?: boolean
  inpatientEncounterId?: boolean
  type?: boolean
  status?: boolean
  fileUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
  inpatientEncounter?: boolean | Prisma.InpatientEncounterDefaultArgs<ExtArgs>
}, ExtArgs["result"]["medicalRecordRequest"]>

export type MedicalRecordRequestSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  patientProfileId?: boolean
  inpatientEncounterId?: boolean
  type?: boolean
  status?: boolean
  fileUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
  inpatientEncounter?: boolean | Prisma.InpatientEncounterDefaultArgs<ExtArgs>
}, ExtArgs["result"]["medicalRecordRequest"]>

export type MedicalRecordRequestSelectScalar = {
  id?: boolean
  patientProfileId?: boolean
  inpatientEncounterId?: boolean
  type?: boolean
  status?: boolean
  fileUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MedicalRecordRequestOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "patientProfileId" | "inpatientEncounterId" | "type" | "status" | "fileUrl" | "createdAt" | "updatedAt", ExtArgs["result"]["medicalRecordRequest"]>
export type MedicalRecordRequestInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
  inpatientEncounter?: boolean | Prisma.InpatientEncounterDefaultArgs<ExtArgs>
}
export type MedicalRecordRequestIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
  inpatientEncounter?: boolean | Prisma.InpatientEncounterDefaultArgs<ExtArgs>
}
export type MedicalRecordRequestIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
  inpatientEncounter?: boolean | Prisma.InpatientEncounterDefaultArgs<ExtArgs>
}

export type $MedicalRecordRequestPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MedicalRecordRequest"
  objects: {
    patientProfile: Prisma.$PatientProfilePayload<ExtArgs>
    inpatientEncounter: Prisma.$InpatientEncounterPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    patientProfileId: string
    inpatientEncounterId: string
    type: string
    status: string
    fileUrl: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["medicalRecordRequest"]>
  composites: {}
}

export type MedicalRecordRequestGetPayload<S extends boolean | null | undefined | MedicalRecordRequestDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MedicalRecordRequestPayload, S>

export type MedicalRecordRequestCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MedicalRecordRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MedicalRecordRequestCountAggregateInputType | true
  }

export interface MedicalRecordRequestDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MedicalRecordRequest'], meta: { name: 'MedicalRecordRequest' } }
  /**
   * Find zero or one MedicalRecordRequest that matches the filter.
   * @param {MedicalRecordRequestFindUniqueArgs} args - Arguments to find a MedicalRecordRequest
   * @example
   * // Get one MedicalRecordRequest
   * const medicalRecordRequest = await prisma.medicalRecordRequest.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MedicalRecordRequestFindUniqueArgs>(args: Prisma.SelectSubset<T, MedicalRecordRequestFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MedicalRecordRequestClient<runtime.Types.Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MedicalRecordRequest that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MedicalRecordRequestFindUniqueOrThrowArgs} args - Arguments to find a MedicalRecordRequest
   * @example
   * // Get one MedicalRecordRequest
   * const medicalRecordRequest = await prisma.medicalRecordRequest.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MedicalRecordRequestFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MedicalRecordRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MedicalRecordRequestClient<runtime.Types.Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MedicalRecordRequest that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicalRecordRequestFindFirstArgs} args - Arguments to find a MedicalRecordRequest
   * @example
   * // Get one MedicalRecordRequest
   * const medicalRecordRequest = await prisma.medicalRecordRequest.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MedicalRecordRequestFindFirstArgs>(args?: Prisma.SelectSubset<T, MedicalRecordRequestFindFirstArgs<ExtArgs>>): Prisma.Prisma__MedicalRecordRequestClient<runtime.Types.Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MedicalRecordRequest that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicalRecordRequestFindFirstOrThrowArgs} args - Arguments to find a MedicalRecordRequest
   * @example
   * // Get one MedicalRecordRequest
   * const medicalRecordRequest = await prisma.medicalRecordRequest.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MedicalRecordRequestFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MedicalRecordRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MedicalRecordRequestClient<runtime.Types.Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MedicalRecordRequests that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicalRecordRequestFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MedicalRecordRequests
   * const medicalRecordRequests = await prisma.medicalRecordRequest.findMany()
   * 
   * // Get first 10 MedicalRecordRequests
   * const medicalRecordRequests = await prisma.medicalRecordRequest.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const medicalRecordRequestWithIdOnly = await prisma.medicalRecordRequest.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MedicalRecordRequestFindManyArgs>(args?: Prisma.SelectSubset<T, MedicalRecordRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MedicalRecordRequest.
   * @param {MedicalRecordRequestCreateArgs} args - Arguments to create a MedicalRecordRequest.
   * @example
   * // Create one MedicalRecordRequest
   * const MedicalRecordRequest = await prisma.medicalRecordRequest.create({
   *   data: {
   *     // ... data to create a MedicalRecordRequest
   *   }
   * })
   * 
   */
  create<T extends MedicalRecordRequestCreateArgs>(args: Prisma.SelectSubset<T, MedicalRecordRequestCreateArgs<ExtArgs>>): Prisma.Prisma__MedicalRecordRequestClient<runtime.Types.Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MedicalRecordRequests.
   * @param {MedicalRecordRequestCreateManyArgs} args - Arguments to create many MedicalRecordRequests.
   * @example
   * // Create many MedicalRecordRequests
   * const medicalRecordRequest = await prisma.medicalRecordRequest.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MedicalRecordRequestCreateManyArgs>(args?: Prisma.SelectSubset<T, MedicalRecordRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MedicalRecordRequests and returns the data saved in the database.
   * @param {MedicalRecordRequestCreateManyAndReturnArgs} args - Arguments to create many MedicalRecordRequests.
   * @example
   * // Create many MedicalRecordRequests
   * const medicalRecordRequest = await prisma.medicalRecordRequest.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MedicalRecordRequests and only return the `id`
   * const medicalRecordRequestWithIdOnly = await prisma.medicalRecordRequest.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MedicalRecordRequestCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MedicalRecordRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MedicalRecordRequest.
   * @param {MedicalRecordRequestDeleteArgs} args - Arguments to delete one MedicalRecordRequest.
   * @example
   * // Delete one MedicalRecordRequest
   * const MedicalRecordRequest = await prisma.medicalRecordRequest.delete({
   *   where: {
   *     // ... filter to delete one MedicalRecordRequest
   *   }
   * })
   * 
   */
  delete<T extends MedicalRecordRequestDeleteArgs>(args: Prisma.SelectSubset<T, MedicalRecordRequestDeleteArgs<ExtArgs>>): Prisma.Prisma__MedicalRecordRequestClient<runtime.Types.Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MedicalRecordRequest.
   * @param {MedicalRecordRequestUpdateArgs} args - Arguments to update one MedicalRecordRequest.
   * @example
   * // Update one MedicalRecordRequest
   * const medicalRecordRequest = await prisma.medicalRecordRequest.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MedicalRecordRequestUpdateArgs>(args: Prisma.SelectSubset<T, MedicalRecordRequestUpdateArgs<ExtArgs>>): Prisma.Prisma__MedicalRecordRequestClient<runtime.Types.Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MedicalRecordRequests.
   * @param {MedicalRecordRequestDeleteManyArgs} args - Arguments to filter MedicalRecordRequests to delete.
   * @example
   * // Delete a few MedicalRecordRequests
   * const { count } = await prisma.medicalRecordRequest.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MedicalRecordRequestDeleteManyArgs>(args?: Prisma.SelectSubset<T, MedicalRecordRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MedicalRecordRequests.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicalRecordRequestUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MedicalRecordRequests
   * const medicalRecordRequest = await prisma.medicalRecordRequest.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MedicalRecordRequestUpdateManyArgs>(args: Prisma.SelectSubset<T, MedicalRecordRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MedicalRecordRequests and returns the data updated in the database.
   * @param {MedicalRecordRequestUpdateManyAndReturnArgs} args - Arguments to update many MedicalRecordRequests.
   * @example
   * // Update many MedicalRecordRequests
   * const medicalRecordRequest = await prisma.medicalRecordRequest.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MedicalRecordRequests and only return the `id`
   * const medicalRecordRequestWithIdOnly = await prisma.medicalRecordRequest.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MedicalRecordRequestUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MedicalRecordRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MedicalRecordRequest.
   * @param {MedicalRecordRequestUpsertArgs} args - Arguments to update or create a MedicalRecordRequest.
   * @example
   * // Update or create a MedicalRecordRequest
   * const medicalRecordRequest = await prisma.medicalRecordRequest.upsert({
   *   create: {
   *     // ... data to create a MedicalRecordRequest
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MedicalRecordRequest we want to update
   *   }
   * })
   */
  upsert<T extends MedicalRecordRequestUpsertArgs>(args: Prisma.SelectSubset<T, MedicalRecordRequestUpsertArgs<ExtArgs>>): Prisma.Prisma__MedicalRecordRequestClient<runtime.Types.Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MedicalRecordRequests.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicalRecordRequestCountArgs} args - Arguments to filter MedicalRecordRequests to count.
   * @example
   * // Count the number of MedicalRecordRequests
   * const count = await prisma.medicalRecordRequest.count({
   *   where: {
   *     // ... the filter for the MedicalRecordRequests we want to count
   *   }
   * })
  **/
  count<T extends MedicalRecordRequestCountArgs>(
    args?: Prisma.Subset<T, MedicalRecordRequestCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MedicalRecordRequestCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MedicalRecordRequest.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicalRecordRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MedicalRecordRequestAggregateArgs>(args: Prisma.Subset<T, MedicalRecordRequestAggregateArgs>): Prisma.PrismaPromise<GetMedicalRecordRequestAggregateType<T>>

  /**
   * Group by MedicalRecordRequest.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicalRecordRequestGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MedicalRecordRequestGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MedicalRecordRequestGroupByArgs['orderBy'] }
      : { orderBy?: MedicalRecordRequestGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MedicalRecordRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicalRecordRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MedicalRecordRequest model
 */
readonly fields: MedicalRecordRequestFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MedicalRecordRequest.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MedicalRecordRequestClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  patientProfile<T extends Prisma.PatientProfileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PatientProfileDefaultArgs<ExtArgs>>): Prisma.Prisma__PatientProfileClient<runtime.Types.Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  inpatientEncounter<T extends Prisma.InpatientEncounterDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.InpatientEncounterDefaultArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MedicalRecordRequest model
 */
export interface MedicalRecordRequestFieldRefs {
  readonly id: Prisma.FieldRef<"MedicalRecordRequest", 'String'>
  readonly patientProfileId: Prisma.FieldRef<"MedicalRecordRequest", 'String'>
  readonly inpatientEncounterId: Prisma.FieldRef<"MedicalRecordRequest", 'String'>
  readonly type: Prisma.FieldRef<"MedicalRecordRequest", 'String'>
  readonly status: Prisma.FieldRef<"MedicalRecordRequest", 'String'>
  readonly fileUrl: Prisma.FieldRef<"MedicalRecordRequest", 'String'>
  readonly createdAt: Prisma.FieldRef<"MedicalRecordRequest", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"MedicalRecordRequest", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MedicalRecordRequest findUnique
 */
export type MedicalRecordRequestFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalRecordRequest
   */
  select?: Prisma.MedicalRecordRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalRecordRequest
   */
  omit?: Prisma.MedicalRecordRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalRecordRequestInclude<ExtArgs> | null
  /**
   * Filter, which MedicalRecordRequest to fetch.
   */
  where: Prisma.MedicalRecordRequestWhereUniqueInput
}

/**
 * MedicalRecordRequest findUniqueOrThrow
 */
export type MedicalRecordRequestFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalRecordRequest
   */
  select?: Prisma.MedicalRecordRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalRecordRequest
   */
  omit?: Prisma.MedicalRecordRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalRecordRequestInclude<ExtArgs> | null
  /**
   * Filter, which MedicalRecordRequest to fetch.
   */
  where: Prisma.MedicalRecordRequestWhereUniqueInput
}

/**
 * MedicalRecordRequest findFirst
 */
export type MedicalRecordRequestFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalRecordRequest
   */
  select?: Prisma.MedicalRecordRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalRecordRequest
   */
  omit?: Prisma.MedicalRecordRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalRecordRequestInclude<ExtArgs> | null
  /**
   * Filter, which MedicalRecordRequest to fetch.
   */
  where?: Prisma.MedicalRecordRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MedicalRecordRequests to fetch.
   */
  orderBy?: Prisma.MedicalRecordRequestOrderByWithRelationInput | Prisma.MedicalRecordRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MedicalRecordRequests.
   */
  cursor?: Prisma.MedicalRecordRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MedicalRecordRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MedicalRecordRequests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MedicalRecordRequests.
   */
  distinct?: Prisma.MedicalRecordRequestScalarFieldEnum | Prisma.MedicalRecordRequestScalarFieldEnum[]
}

/**
 * MedicalRecordRequest findFirstOrThrow
 */
export type MedicalRecordRequestFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalRecordRequest
   */
  select?: Prisma.MedicalRecordRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalRecordRequest
   */
  omit?: Prisma.MedicalRecordRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalRecordRequestInclude<ExtArgs> | null
  /**
   * Filter, which MedicalRecordRequest to fetch.
   */
  where?: Prisma.MedicalRecordRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MedicalRecordRequests to fetch.
   */
  orderBy?: Prisma.MedicalRecordRequestOrderByWithRelationInput | Prisma.MedicalRecordRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MedicalRecordRequests.
   */
  cursor?: Prisma.MedicalRecordRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MedicalRecordRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MedicalRecordRequests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MedicalRecordRequests.
   */
  distinct?: Prisma.MedicalRecordRequestScalarFieldEnum | Prisma.MedicalRecordRequestScalarFieldEnum[]
}

/**
 * MedicalRecordRequest findMany
 */
export type MedicalRecordRequestFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalRecordRequest
   */
  select?: Prisma.MedicalRecordRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalRecordRequest
   */
  omit?: Prisma.MedicalRecordRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalRecordRequestInclude<ExtArgs> | null
  /**
   * Filter, which MedicalRecordRequests to fetch.
   */
  where?: Prisma.MedicalRecordRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MedicalRecordRequests to fetch.
   */
  orderBy?: Prisma.MedicalRecordRequestOrderByWithRelationInput | Prisma.MedicalRecordRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MedicalRecordRequests.
   */
  cursor?: Prisma.MedicalRecordRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MedicalRecordRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MedicalRecordRequests.
   */
  skip?: number
  distinct?: Prisma.MedicalRecordRequestScalarFieldEnum | Prisma.MedicalRecordRequestScalarFieldEnum[]
}

/**
 * MedicalRecordRequest create
 */
export type MedicalRecordRequestCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalRecordRequest
   */
  select?: Prisma.MedicalRecordRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalRecordRequest
   */
  omit?: Prisma.MedicalRecordRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalRecordRequestInclude<ExtArgs> | null
  /**
   * The data needed to create a MedicalRecordRequest.
   */
  data: Prisma.XOR<Prisma.MedicalRecordRequestCreateInput, Prisma.MedicalRecordRequestUncheckedCreateInput>
}

/**
 * MedicalRecordRequest createMany
 */
export type MedicalRecordRequestCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MedicalRecordRequests.
   */
  data: Prisma.MedicalRecordRequestCreateManyInput | Prisma.MedicalRecordRequestCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MedicalRecordRequest createManyAndReturn
 */
export type MedicalRecordRequestCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalRecordRequest
   */
  select?: Prisma.MedicalRecordRequestSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalRecordRequest
   */
  omit?: Prisma.MedicalRecordRequestOmit<ExtArgs> | null
  /**
   * The data used to create many MedicalRecordRequests.
   */
  data: Prisma.MedicalRecordRequestCreateManyInput | Prisma.MedicalRecordRequestCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalRecordRequestIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MedicalRecordRequest update
 */
export type MedicalRecordRequestUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalRecordRequest
   */
  select?: Prisma.MedicalRecordRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalRecordRequest
   */
  omit?: Prisma.MedicalRecordRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalRecordRequestInclude<ExtArgs> | null
  /**
   * The data needed to update a MedicalRecordRequest.
   */
  data: Prisma.XOR<Prisma.MedicalRecordRequestUpdateInput, Prisma.MedicalRecordRequestUncheckedUpdateInput>
  /**
   * Choose, which MedicalRecordRequest to update.
   */
  where: Prisma.MedicalRecordRequestWhereUniqueInput
}

/**
 * MedicalRecordRequest updateMany
 */
export type MedicalRecordRequestUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MedicalRecordRequests.
   */
  data: Prisma.XOR<Prisma.MedicalRecordRequestUpdateManyMutationInput, Prisma.MedicalRecordRequestUncheckedUpdateManyInput>
  /**
   * Filter which MedicalRecordRequests to update
   */
  where?: Prisma.MedicalRecordRequestWhereInput
  /**
   * Limit how many MedicalRecordRequests to update.
   */
  limit?: number
}

/**
 * MedicalRecordRequest updateManyAndReturn
 */
export type MedicalRecordRequestUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalRecordRequest
   */
  select?: Prisma.MedicalRecordRequestSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalRecordRequest
   */
  omit?: Prisma.MedicalRecordRequestOmit<ExtArgs> | null
  /**
   * The data used to update MedicalRecordRequests.
   */
  data: Prisma.XOR<Prisma.MedicalRecordRequestUpdateManyMutationInput, Prisma.MedicalRecordRequestUncheckedUpdateManyInput>
  /**
   * Filter which MedicalRecordRequests to update
   */
  where?: Prisma.MedicalRecordRequestWhereInput
  /**
   * Limit how many MedicalRecordRequests to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalRecordRequestIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MedicalRecordRequest upsert
 */
export type MedicalRecordRequestUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalRecordRequest
   */
  select?: Prisma.MedicalRecordRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalRecordRequest
   */
  omit?: Prisma.MedicalRecordRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalRecordRequestInclude<ExtArgs> | null
  /**
   * The filter to search for the MedicalRecordRequest to update in case it exists.
   */
  where: Prisma.MedicalRecordRequestWhereUniqueInput
  /**
   * In case the MedicalRecordRequest found by the `where` argument doesn't exist, create a new MedicalRecordRequest with this data.
   */
  create: Prisma.XOR<Prisma.MedicalRecordRequestCreateInput, Prisma.MedicalRecordRequestUncheckedCreateInput>
  /**
   * In case the MedicalRecordRequest was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MedicalRecordRequestUpdateInput, Prisma.MedicalRecordRequestUncheckedUpdateInput>
}

/**
 * MedicalRecordRequest delete
 */
export type MedicalRecordRequestDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalRecordRequest
   */
  select?: Prisma.MedicalRecordRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalRecordRequest
   */
  omit?: Prisma.MedicalRecordRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalRecordRequestInclude<ExtArgs> | null
  /**
   * Filter which MedicalRecordRequest to delete.
   */
  where: Prisma.MedicalRecordRequestWhereUniqueInput
}

/**
 * MedicalRecordRequest deleteMany
 */
export type MedicalRecordRequestDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MedicalRecordRequests to delete
   */
  where?: Prisma.MedicalRecordRequestWhereInput
  /**
   * Limit how many MedicalRecordRequests to delete.
   */
  limit?: number
}

/**
 * MedicalRecordRequest without action
 */
export type MedicalRecordRequestDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalRecordRequest
   */
  select?: Prisma.MedicalRecordRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalRecordRequest
   */
  omit?: Prisma.MedicalRecordRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalRecordRequestInclude<ExtArgs> | null
}
