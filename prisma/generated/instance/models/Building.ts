
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Building` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Building
 * 
 */
export type BuildingModel = runtime.Types.Result.DefaultSelection<Prisma.$BuildingPayload>

export type AggregateBuilding = {
  _count: BuildingCountAggregateOutputType | null
  _min: BuildingMinAggregateOutputType | null
  _max: BuildingMaxAggregateOutputType | null
}

export type BuildingMinAggregateOutputType = {
  id: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BuildingMaxAggregateOutputType = {
  id: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BuildingCountAggregateOutputType = {
  id: number
  name: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type BuildingMinAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type BuildingMaxAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type BuildingCountAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type BuildingAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Building to aggregate.
   */
  where?: Prisma.BuildingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Buildings to fetch.
   */
  orderBy?: Prisma.BuildingOrderByWithRelationInput | Prisma.BuildingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BuildingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Buildings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Buildings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Buildings
  **/
  _count?: true | BuildingCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BuildingMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BuildingMaxAggregateInputType
}

export type GetBuildingAggregateType<T extends BuildingAggregateArgs> = {
      [P in keyof T & keyof AggregateBuilding]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBuilding[P]>
    : Prisma.GetScalarType<T[P], AggregateBuilding[P]>
}




export type BuildingGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BuildingWhereInput
  orderBy?: Prisma.BuildingOrderByWithAggregationInput | Prisma.BuildingOrderByWithAggregationInput[]
  by: Prisma.BuildingScalarFieldEnum[] | Prisma.BuildingScalarFieldEnum
  having?: Prisma.BuildingScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BuildingCountAggregateInputType | true
  _min?: BuildingMinAggregateInputType
  _max?: BuildingMaxAggregateInputType
}

export type BuildingGroupByOutputType = {
  id: string
  name: string
  createdAt: Date
  updatedAt: Date
  _count: BuildingCountAggregateOutputType | null
  _min: BuildingMinAggregateOutputType | null
  _max: BuildingMaxAggregateOutputType | null
}

type GetBuildingGroupByPayload<T extends BuildingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BuildingGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BuildingGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BuildingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BuildingGroupByOutputType[P]>
      }
    >
  >



export type BuildingWhereInput = {
  AND?: Prisma.BuildingWhereInput | Prisma.BuildingWhereInput[]
  OR?: Prisma.BuildingWhereInput[]
  NOT?: Prisma.BuildingWhereInput | Prisma.BuildingWhereInput[]
  id?: Prisma.UuidFilter<"Building"> | string
  name?: Prisma.StringFilter<"Building"> | string
  createdAt?: Prisma.DateTimeFilter<"Building"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Building"> | Date | string
  rooms?: Prisma.RoomListRelationFilter
}

export type BuildingOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  rooms?: Prisma.RoomOrderByRelationAggregateInput
}

export type BuildingWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.BuildingWhereInput | Prisma.BuildingWhereInput[]
  OR?: Prisma.BuildingWhereInput[]
  NOT?: Prisma.BuildingWhereInput | Prisma.BuildingWhereInput[]
  name?: Prisma.StringFilter<"Building"> | string
  createdAt?: Prisma.DateTimeFilter<"Building"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Building"> | Date | string
  rooms?: Prisma.RoomListRelationFilter
}, "id">

export type BuildingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.BuildingCountOrderByAggregateInput
  _max?: Prisma.BuildingMaxOrderByAggregateInput
  _min?: Prisma.BuildingMinOrderByAggregateInput
}

export type BuildingScalarWhereWithAggregatesInput = {
  AND?: Prisma.BuildingScalarWhereWithAggregatesInput | Prisma.BuildingScalarWhereWithAggregatesInput[]
  OR?: Prisma.BuildingScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BuildingScalarWhereWithAggregatesInput | Prisma.BuildingScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Building"> | string
  name?: Prisma.StringWithAggregatesFilter<"Building"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Building"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Building"> | Date | string
}

export type BuildingCreateInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  rooms?: Prisma.RoomCreateNestedManyWithoutBuildingInput
}

export type BuildingUncheckedCreateInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  rooms?: Prisma.RoomUncheckedCreateNestedManyWithoutBuildingInput
}

export type BuildingUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  rooms?: Prisma.RoomUpdateManyWithoutBuildingNestedInput
}

export type BuildingUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  rooms?: Prisma.RoomUncheckedUpdateManyWithoutBuildingNestedInput
}

export type BuildingCreateManyInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BuildingUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BuildingUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BuildingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BuildingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BuildingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BuildingScalarRelationFilter = {
  is?: Prisma.BuildingWhereInput
  isNot?: Prisma.BuildingWhereInput
}

export type BuildingCreateNestedOneWithoutRoomsInput = {
  create?: Prisma.XOR<Prisma.BuildingCreateWithoutRoomsInput, Prisma.BuildingUncheckedCreateWithoutRoomsInput>
  connectOrCreate?: Prisma.BuildingCreateOrConnectWithoutRoomsInput
  connect?: Prisma.BuildingWhereUniqueInput
}

export type BuildingUpdateOneRequiredWithoutRoomsNestedInput = {
  create?: Prisma.XOR<Prisma.BuildingCreateWithoutRoomsInput, Prisma.BuildingUncheckedCreateWithoutRoomsInput>
  connectOrCreate?: Prisma.BuildingCreateOrConnectWithoutRoomsInput
  upsert?: Prisma.BuildingUpsertWithoutRoomsInput
  connect?: Prisma.BuildingWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.BuildingUpdateToOneWithWhereWithoutRoomsInput, Prisma.BuildingUpdateWithoutRoomsInput>, Prisma.BuildingUncheckedUpdateWithoutRoomsInput>
}

export type BuildingCreateWithoutRoomsInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BuildingUncheckedCreateWithoutRoomsInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BuildingCreateOrConnectWithoutRoomsInput = {
  where: Prisma.BuildingWhereUniqueInput
  create: Prisma.XOR<Prisma.BuildingCreateWithoutRoomsInput, Prisma.BuildingUncheckedCreateWithoutRoomsInput>
}

export type BuildingUpsertWithoutRoomsInput = {
  update: Prisma.XOR<Prisma.BuildingUpdateWithoutRoomsInput, Prisma.BuildingUncheckedUpdateWithoutRoomsInput>
  create: Prisma.XOR<Prisma.BuildingCreateWithoutRoomsInput, Prisma.BuildingUncheckedCreateWithoutRoomsInput>
  where?: Prisma.BuildingWhereInput
}

export type BuildingUpdateToOneWithWhereWithoutRoomsInput = {
  where?: Prisma.BuildingWhereInput
  data: Prisma.XOR<Prisma.BuildingUpdateWithoutRoomsInput, Prisma.BuildingUncheckedUpdateWithoutRoomsInput>
}

export type BuildingUpdateWithoutRoomsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BuildingUncheckedUpdateWithoutRoomsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type BuildingCountOutputType
 */

export type BuildingCountOutputType = {
  rooms: number
}

export type BuildingCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  rooms?: boolean | BuildingCountOutputTypeCountRoomsArgs
}

/**
 * BuildingCountOutputType without action
 */
export type BuildingCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BuildingCountOutputType
   */
  select?: Prisma.BuildingCountOutputTypeSelect<ExtArgs> | null
}

/**
 * BuildingCountOutputType without action
 */
export type BuildingCountOutputTypeCountRoomsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RoomWhereInput
}


export type BuildingSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  rooms?: boolean | Prisma.Building$roomsArgs<ExtArgs>
  _count?: boolean | Prisma.BuildingCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["building"]>

export type BuildingSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["building"]>

export type BuildingSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["building"]>

export type BuildingSelectScalar = {
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type BuildingOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["building"]>
export type BuildingInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  rooms?: boolean | Prisma.Building$roomsArgs<ExtArgs>
  _count?: boolean | Prisma.BuildingCountOutputTypeDefaultArgs<ExtArgs>
}
export type BuildingIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type BuildingIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $BuildingPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Building"
  objects: {
    rooms: Prisma.$RoomPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["building"]>
  composites: {}
}

export type BuildingGetPayload<S extends boolean | null | undefined | BuildingDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BuildingPayload, S>

export type BuildingCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BuildingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BuildingCountAggregateInputType | true
  }

export interface BuildingDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Building'], meta: { name: 'Building' } }
  /**
   * Find zero or one Building that matches the filter.
   * @param {BuildingFindUniqueArgs} args - Arguments to find a Building
   * @example
   * // Get one Building
   * const building = await prisma.building.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BuildingFindUniqueArgs>(args: Prisma.SelectSubset<T, BuildingFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BuildingClient<runtime.Types.Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Building that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BuildingFindUniqueOrThrowArgs} args - Arguments to find a Building
   * @example
   * // Get one Building
   * const building = await prisma.building.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BuildingFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BuildingFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BuildingClient<runtime.Types.Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Building that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BuildingFindFirstArgs} args - Arguments to find a Building
   * @example
   * // Get one Building
   * const building = await prisma.building.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BuildingFindFirstArgs>(args?: Prisma.SelectSubset<T, BuildingFindFirstArgs<ExtArgs>>): Prisma.Prisma__BuildingClient<runtime.Types.Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Building that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BuildingFindFirstOrThrowArgs} args - Arguments to find a Building
   * @example
   * // Get one Building
   * const building = await prisma.building.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BuildingFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BuildingFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BuildingClient<runtime.Types.Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Buildings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BuildingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Buildings
   * const buildings = await prisma.building.findMany()
   * 
   * // Get first 10 Buildings
   * const buildings = await prisma.building.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const buildingWithIdOnly = await prisma.building.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BuildingFindManyArgs>(args?: Prisma.SelectSubset<T, BuildingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Building.
   * @param {BuildingCreateArgs} args - Arguments to create a Building.
   * @example
   * // Create one Building
   * const Building = await prisma.building.create({
   *   data: {
   *     // ... data to create a Building
   *   }
   * })
   * 
   */
  create<T extends BuildingCreateArgs>(args: Prisma.SelectSubset<T, BuildingCreateArgs<ExtArgs>>): Prisma.Prisma__BuildingClient<runtime.Types.Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Buildings.
   * @param {BuildingCreateManyArgs} args - Arguments to create many Buildings.
   * @example
   * // Create many Buildings
   * const building = await prisma.building.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BuildingCreateManyArgs>(args?: Prisma.SelectSubset<T, BuildingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Buildings and returns the data saved in the database.
   * @param {BuildingCreateManyAndReturnArgs} args - Arguments to create many Buildings.
   * @example
   * // Create many Buildings
   * const building = await prisma.building.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Buildings and only return the `id`
   * const buildingWithIdOnly = await prisma.building.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BuildingCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BuildingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Building.
   * @param {BuildingDeleteArgs} args - Arguments to delete one Building.
   * @example
   * // Delete one Building
   * const Building = await prisma.building.delete({
   *   where: {
   *     // ... filter to delete one Building
   *   }
   * })
   * 
   */
  delete<T extends BuildingDeleteArgs>(args: Prisma.SelectSubset<T, BuildingDeleteArgs<ExtArgs>>): Prisma.Prisma__BuildingClient<runtime.Types.Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Building.
   * @param {BuildingUpdateArgs} args - Arguments to update one Building.
   * @example
   * // Update one Building
   * const building = await prisma.building.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BuildingUpdateArgs>(args: Prisma.SelectSubset<T, BuildingUpdateArgs<ExtArgs>>): Prisma.Prisma__BuildingClient<runtime.Types.Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Buildings.
   * @param {BuildingDeleteManyArgs} args - Arguments to filter Buildings to delete.
   * @example
   * // Delete a few Buildings
   * const { count } = await prisma.building.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BuildingDeleteManyArgs>(args?: Prisma.SelectSubset<T, BuildingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Buildings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BuildingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Buildings
   * const building = await prisma.building.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BuildingUpdateManyArgs>(args: Prisma.SelectSubset<T, BuildingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Buildings and returns the data updated in the database.
   * @param {BuildingUpdateManyAndReturnArgs} args - Arguments to update many Buildings.
   * @example
   * // Update many Buildings
   * const building = await prisma.building.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Buildings and only return the `id`
   * const buildingWithIdOnly = await prisma.building.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BuildingUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BuildingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Building.
   * @param {BuildingUpsertArgs} args - Arguments to update or create a Building.
   * @example
   * // Update or create a Building
   * const building = await prisma.building.upsert({
   *   create: {
   *     // ... data to create a Building
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Building we want to update
   *   }
   * })
   */
  upsert<T extends BuildingUpsertArgs>(args: Prisma.SelectSubset<T, BuildingUpsertArgs<ExtArgs>>): Prisma.Prisma__BuildingClient<runtime.Types.Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Buildings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BuildingCountArgs} args - Arguments to filter Buildings to count.
   * @example
   * // Count the number of Buildings
   * const count = await prisma.building.count({
   *   where: {
   *     // ... the filter for the Buildings we want to count
   *   }
   * })
  **/
  count<T extends BuildingCountArgs>(
    args?: Prisma.Subset<T, BuildingCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BuildingCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Building.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BuildingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BuildingAggregateArgs>(args: Prisma.Subset<T, BuildingAggregateArgs>): Prisma.PrismaPromise<GetBuildingAggregateType<T>>

  /**
   * Group by Building.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BuildingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BuildingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BuildingGroupByArgs['orderBy'] }
      : { orderBy?: BuildingGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BuildingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuildingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Building model
 */
readonly fields: BuildingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Building.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BuildingClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  rooms<T extends Prisma.Building$roomsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Building$roomsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Building model
 */
export interface BuildingFieldRefs {
  readonly id: Prisma.FieldRef<"Building", 'String'>
  readonly name: Prisma.FieldRef<"Building", 'String'>
  readonly createdAt: Prisma.FieldRef<"Building", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Building", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Building findUnique
 */
export type BuildingFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Building
   */
  select?: Prisma.BuildingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Building
   */
  omit?: Prisma.BuildingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuildingInclude<ExtArgs> | null
  /**
   * Filter, which Building to fetch.
   */
  where: Prisma.BuildingWhereUniqueInput
}

/**
 * Building findUniqueOrThrow
 */
export type BuildingFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Building
   */
  select?: Prisma.BuildingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Building
   */
  omit?: Prisma.BuildingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuildingInclude<ExtArgs> | null
  /**
   * Filter, which Building to fetch.
   */
  where: Prisma.BuildingWhereUniqueInput
}

/**
 * Building findFirst
 */
export type BuildingFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Building
   */
  select?: Prisma.BuildingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Building
   */
  omit?: Prisma.BuildingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuildingInclude<ExtArgs> | null
  /**
   * Filter, which Building to fetch.
   */
  where?: Prisma.BuildingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Buildings to fetch.
   */
  orderBy?: Prisma.BuildingOrderByWithRelationInput | Prisma.BuildingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Buildings.
   */
  cursor?: Prisma.BuildingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Buildings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Buildings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Buildings.
   */
  distinct?: Prisma.BuildingScalarFieldEnum | Prisma.BuildingScalarFieldEnum[]
}

/**
 * Building findFirstOrThrow
 */
export type BuildingFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Building
   */
  select?: Prisma.BuildingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Building
   */
  omit?: Prisma.BuildingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuildingInclude<ExtArgs> | null
  /**
   * Filter, which Building to fetch.
   */
  where?: Prisma.BuildingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Buildings to fetch.
   */
  orderBy?: Prisma.BuildingOrderByWithRelationInput | Prisma.BuildingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Buildings.
   */
  cursor?: Prisma.BuildingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Buildings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Buildings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Buildings.
   */
  distinct?: Prisma.BuildingScalarFieldEnum | Prisma.BuildingScalarFieldEnum[]
}

/**
 * Building findMany
 */
export type BuildingFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Building
   */
  select?: Prisma.BuildingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Building
   */
  omit?: Prisma.BuildingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuildingInclude<ExtArgs> | null
  /**
   * Filter, which Buildings to fetch.
   */
  where?: Prisma.BuildingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Buildings to fetch.
   */
  orderBy?: Prisma.BuildingOrderByWithRelationInput | Prisma.BuildingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Buildings.
   */
  cursor?: Prisma.BuildingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Buildings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Buildings.
   */
  skip?: number
  distinct?: Prisma.BuildingScalarFieldEnum | Prisma.BuildingScalarFieldEnum[]
}

/**
 * Building create
 */
export type BuildingCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Building
   */
  select?: Prisma.BuildingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Building
   */
  omit?: Prisma.BuildingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuildingInclude<ExtArgs> | null
  /**
   * The data needed to create a Building.
   */
  data: Prisma.XOR<Prisma.BuildingCreateInput, Prisma.BuildingUncheckedCreateInput>
}

/**
 * Building createMany
 */
export type BuildingCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Buildings.
   */
  data: Prisma.BuildingCreateManyInput | Prisma.BuildingCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Building createManyAndReturn
 */
export type BuildingCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Building
   */
  select?: Prisma.BuildingSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Building
   */
  omit?: Prisma.BuildingOmit<ExtArgs> | null
  /**
   * The data used to create many Buildings.
   */
  data: Prisma.BuildingCreateManyInput | Prisma.BuildingCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Building update
 */
export type BuildingUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Building
   */
  select?: Prisma.BuildingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Building
   */
  omit?: Prisma.BuildingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuildingInclude<ExtArgs> | null
  /**
   * The data needed to update a Building.
   */
  data: Prisma.XOR<Prisma.BuildingUpdateInput, Prisma.BuildingUncheckedUpdateInput>
  /**
   * Choose, which Building to update.
   */
  where: Prisma.BuildingWhereUniqueInput
}

/**
 * Building updateMany
 */
export type BuildingUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Buildings.
   */
  data: Prisma.XOR<Prisma.BuildingUpdateManyMutationInput, Prisma.BuildingUncheckedUpdateManyInput>
  /**
   * Filter which Buildings to update
   */
  where?: Prisma.BuildingWhereInput
  /**
   * Limit how many Buildings to update.
   */
  limit?: number
}

/**
 * Building updateManyAndReturn
 */
export type BuildingUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Building
   */
  select?: Prisma.BuildingSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Building
   */
  omit?: Prisma.BuildingOmit<ExtArgs> | null
  /**
   * The data used to update Buildings.
   */
  data: Prisma.XOR<Prisma.BuildingUpdateManyMutationInput, Prisma.BuildingUncheckedUpdateManyInput>
  /**
   * Filter which Buildings to update
   */
  where?: Prisma.BuildingWhereInput
  /**
   * Limit how many Buildings to update.
   */
  limit?: number
}

/**
 * Building upsert
 */
export type BuildingUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Building
   */
  select?: Prisma.BuildingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Building
   */
  omit?: Prisma.BuildingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuildingInclude<ExtArgs> | null
  /**
   * The filter to search for the Building to update in case it exists.
   */
  where: Prisma.BuildingWhereUniqueInput
  /**
   * In case the Building found by the `where` argument doesn't exist, create a new Building with this data.
   */
  create: Prisma.XOR<Prisma.BuildingCreateInput, Prisma.BuildingUncheckedCreateInput>
  /**
   * In case the Building was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BuildingUpdateInput, Prisma.BuildingUncheckedUpdateInput>
}

/**
 * Building delete
 */
export type BuildingDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Building
   */
  select?: Prisma.BuildingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Building
   */
  omit?: Prisma.BuildingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuildingInclude<ExtArgs> | null
  /**
   * Filter which Building to delete.
   */
  where: Prisma.BuildingWhereUniqueInput
}

/**
 * Building deleteMany
 */
export type BuildingDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Buildings to delete
   */
  where?: Prisma.BuildingWhereInput
  /**
   * Limit how many Buildings to delete.
   */
  limit?: number
}

/**
 * Building.rooms
 */
export type Building$roomsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Room
   */
  select?: Prisma.RoomSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Room
   */
  omit?: Prisma.RoomOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RoomInclude<ExtArgs> | null
  where?: Prisma.RoomWhereInput
  orderBy?: Prisma.RoomOrderByWithRelationInput | Prisma.RoomOrderByWithRelationInput[]
  cursor?: Prisma.RoomWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.RoomScalarFieldEnum | Prisma.RoomScalarFieldEnum[]
}

/**
 * Building without action
 */
export type BuildingDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Building
   */
  select?: Prisma.BuildingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Building
   */
  omit?: Prisma.BuildingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BuildingInclude<ExtArgs> | null
}
