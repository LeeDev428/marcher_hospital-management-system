
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PharmacyItemCategory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PharmacyItemCategory
 * 
 */
export type PharmacyItemCategoryModel = runtime.Types.Result.DefaultSelection<Prisma.$PharmacyItemCategoryPayload>

export type AggregatePharmacyItemCategory = {
  _count: PharmacyItemCategoryCountAggregateOutputType | null
  _min: PharmacyItemCategoryMinAggregateOutputType | null
  _max: PharmacyItemCategoryMaxAggregateOutputType | null
}

export type PharmacyItemCategoryMinAggregateOutputType = {
  id: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PharmacyItemCategoryMaxAggregateOutputType = {
  id: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PharmacyItemCategoryCountAggregateOutputType = {
  id: number
  name: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PharmacyItemCategoryMinAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type PharmacyItemCategoryMaxAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type PharmacyItemCategoryCountAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PharmacyItemCategoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PharmacyItemCategory to aggregate.
   */
  where?: Prisma.PharmacyItemCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PharmacyItemCategories to fetch.
   */
  orderBy?: Prisma.PharmacyItemCategoryOrderByWithRelationInput | Prisma.PharmacyItemCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PharmacyItemCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PharmacyItemCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PharmacyItemCategories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PharmacyItemCategories
  **/
  _count?: true | PharmacyItemCategoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PharmacyItemCategoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PharmacyItemCategoryMaxAggregateInputType
}

export type GetPharmacyItemCategoryAggregateType<T extends PharmacyItemCategoryAggregateArgs> = {
      [P in keyof T & keyof AggregatePharmacyItemCategory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePharmacyItemCategory[P]>
    : Prisma.GetScalarType<T[P], AggregatePharmacyItemCategory[P]>
}




export type PharmacyItemCategoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PharmacyItemCategoryWhereInput
  orderBy?: Prisma.PharmacyItemCategoryOrderByWithAggregationInput | Prisma.PharmacyItemCategoryOrderByWithAggregationInput[]
  by: Prisma.PharmacyItemCategoryScalarFieldEnum[] | Prisma.PharmacyItemCategoryScalarFieldEnum
  having?: Prisma.PharmacyItemCategoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PharmacyItemCategoryCountAggregateInputType | true
  _min?: PharmacyItemCategoryMinAggregateInputType
  _max?: PharmacyItemCategoryMaxAggregateInputType
}

export type PharmacyItemCategoryGroupByOutputType = {
  id: string
  name: string
  createdAt: Date
  updatedAt: Date
  _count: PharmacyItemCategoryCountAggregateOutputType | null
  _min: PharmacyItemCategoryMinAggregateOutputType | null
  _max: PharmacyItemCategoryMaxAggregateOutputType | null
}

type GetPharmacyItemCategoryGroupByPayload<T extends PharmacyItemCategoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PharmacyItemCategoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PharmacyItemCategoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PharmacyItemCategoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PharmacyItemCategoryGroupByOutputType[P]>
      }
    >
  > 



export type PharmacyItemCategoryWhereInput = {
  AND?: Prisma.PharmacyItemCategoryWhereInput | Prisma.PharmacyItemCategoryWhereInput[]
  OR?: Prisma.PharmacyItemCategoryWhereInput[]
  NOT?: Prisma.PharmacyItemCategoryWhereInput | Prisma.PharmacyItemCategoryWhereInput[]
  id?: Prisma.UuidFilter<"PharmacyItemCategory"> | string
  name?: Prisma.StringFilter<"PharmacyItemCategory"> | string
  createdAt?: Prisma.DateTimeFilter<"PharmacyItemCategory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PharmacyItemCategory"> | Date | string
  items?: Prisma.PharmacyItemListRelationFilter
}

export type PharmacyItemCategoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  items?: Prisma.PharmacyItemOrderByRelationAggregateInput
}

export type PharmacyItemCategoryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PharmacyItemCategoryWhereInput | Prisma.PharmacyItemCategoryWhereInput[]
  OR?: Prisma.PharmacyItemCategoryWhereInput[]
  NOT?: Prisma.PharmacyItemCategoryWhereInput | Prisma.PharmacyItemCategoryWhereInput[]
  name?: Prisma.StringFilter<"PharmacyItemCategory"> | string
  createdAt?: Prisma.DateTimeFilter<"PharmacyItemCategory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PharmacyItemCategory"> | Date | string
  items?: Prisma.PharmacyItemListRelationFilter
}, "id">

export type PharmacyItemCategoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PharmacyItemCategoryCountOrderByAggregateInput
  _max?: Prisma.PharmacyItemCategoryMaxOrderByAggregateInput
  _min?: Prisma.PharmacyItemCategoryMinOrderByAggregateInput
}

export type PharmacyItemCategoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.PharmacyItemCategoryScalarWhereWithAggregatesInput | Prisma.PharmacyItemCategoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.PharmacyItemCategoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PharmacyItemCategoryScalarWhereWithAggregatesInput | Prisma.PharmacyItemCategoryScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"PharmacyItemCategory"> | string
  name?: Prisma.StringWithAggregatesFilter<"PharmacyItemCategory"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PharmacyItemCategory"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PharmacyItemCategory"> | Date | string
}

export type PharmacyItemCategoryCreateInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  items?: Prisma.PharmacyItemCreateNestedManyWithoutCategoryInput
}

export type PharmacyItemCategoryUncheckedCreateInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  items?: Prisma.PharmacyItemUncheckedCreateNestedManyWithoutCategoryInput
}

export type PharmacyItemCategoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  items?: Prisma.PharmacyItemUpdateManyWithoutCategoryNestedInput
}

export type PharmacyItemCategoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  items?: Prisma.PharmacyItemUncheckedUpdateManyWithoutCategoryNestedInput
}

export type PharmacyItemCategoryCreateManyInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PharmacyItemCategoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PharmacyItemCategoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PharmacyItemCategoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PharmacyItemCategoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PharmacyItemCategoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PharmacyItemCategoryScalarRelationFilter = {
  is?: Prisma.PharmacyItemCategoryWhereInput
  isNot?: Prisma.PharmacyItemCategoryWhereInput
}

export type PharmacyItemCategoryCreateNestedOneWithoutItemsInput = {
  create?: Prisma.XOR<Prisma.PharmacyItemCategoryCreateWithoutItemsInput, Prisma.PharmacyItemCategoryUncheckedCreateWithoutItemsInput>
  connectOrCreate?: Prisma.PharmacyItemCategoryCreateOrConnectWithoutItemsInput
  connect?: Prisma.PharmacyItemCategoryWhereUniqueInput
}

export type PharmacyItemCategoryUpdateOneRequiredWithoutItemsNestedInput = {
  create?: Prisma.XOR<Prisma.PharmacyItemCategoryCreateWithoutItemsInput, Prisma.PharmacyItemCategoryUncheckedCreateWithoutItemsInput>
  connectOrCreate?: Prisma.PharmacyItemCategoryCreateOrConnectWithoutItemsInput
  upsert?: Prisma.PharmacyItemCategoryUpsertWithoutItemsInput
  connect?: Prisma.PharmacyItemCategoryWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PharmacyItemCategoryUpdateToOneWithWhereWithoutItemsInput, Prisma.PharmacyItemCategoryUpdateWithoutItemsInput>, Prisma.PharmacyItemCategoryUncheckedUpdateWithoutItemsInput>
}

export type PharmacyItemCategoryCreateWithoutItemsInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PharmacyItemCategoryUncheckedCreateWithoutItemsInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PharmacyItemCategoryCreateOrConnectWithoutItemsInput = {
  where: Prisma.PharmacyItemCategoryWhereUniqueInput
  create: Prisma.XOR<Prisma.PharmacyItemCategoryCreateWithoutItemsInput, Prisma.PharmacyItemCategoryUncheckedCreateWithoutItemsInput>
}

export type PharmacyItemCategoryUpsertWithoutItemsInput = {
  update: Prisma.XOR<Prisma.PharmacyItemCategoryUpdateWithoutItemsInput, Prisma.PharmacyItemCategoryUncheckedUpdateWithoutItemsInput>
  create: Prisma.XOR<Prisma.PharmacyItemCategoryCreateWithoutItemsInput, Prisma.PharmacyItemCategoryUncheckedCreateWithoutItemsInput>
  where?: Prisma.PharmacyItemCategoryWhereInput
}

export type PharmacyItemCategoryUpdateToOneWithWhereWithoutItemsInput = {
  where?: Prisma.PharmacyItemCategoryWhereInput
  data: Prisma.XOR<Prisma.PharmacyItemCategoryUpdateWithoutItemsInput, Prisma.PharmacyItemCategoryUncheckedUpdateWithoutItemsInput>
}

export type PharmacyItemCategoryUpdateWithoutItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PharmacyItemCategoryUncheckedUpdateWithoutItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type PharmacyItemCategoryCountOutputType
 */

export type PharmacyItemCategoryCountOutputType = {
  items: number
}

export type PharmacyItemCategoryCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  items?: boolean | PharmacyItemCategoryCountOutputTypeCountItemsArgs
}

/**
 * PharmacyItemCategoryCountOutputType without action
 */
export type PharmacyItemCategoryCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItemCategoryCountOutputType
   */
  select?: Prisma.PharmacyItemCategoryCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PharmacyItemCategoryCountOutputType without action
 */
export type PharmacyItemCategoryCountOutputTypeCountItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PharmacyItemWhereInput
}


export type PharmacyItemCategorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  items?: boolean | Prisma.PharmacyItemCategory$itemsArgs<ExtArgs>
  _count?: boolean | Prisma.PharmacyItemCategoryCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pharmacyItemCategory"]>

export type PharmacyItemCategorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["pharmacyItemCategory"]>

export type PharmacyItemCategorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["pharmacyItemCategory"]>

export type PharmacyItemCategorySelectScalar = {
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PharmacyItemCategoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["pharmacyItemCategory"]>
export type PharmacyItemCategoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  items?: boolean | Prisma.PharmacyItemCategory$itemsArgs<ExtArgs>
  _count?: boolean | Prisma.PharmacyItemCategoryCountOutputTypeDefaultArgs<ExtArgs>
}
export type PharmacyItemCategoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type PharmacyItemCategoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $PharmacyItemCategoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PharmacyItemCategory"
  objects: {
    items: Prisma.$PharmacyItemPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["pharmacyItemCategory"]>
  composites: {}
}

export type PharmacyItemCategoryGetPayload<S extends boolean | null | undefined | PharmacyItemCategoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PharmacyItemCategoryPayload, S>

export type PharmacyItemCategoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PharmacyItemCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PharmacyItemCategoryCountAggregateInputType | true
  }

export interface PharmacyItemCategoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PharmacyItemCategory'], meta: { name: 'PharmacyItemCategory' } }
  /**
   * Find zero or one PharmacyItemCategory that matches the filter.
   * @param {PharmacyItemCategoryFindUniqueArgs} args - Arguments to find a PharmacyItemCategory
   * @example
   * // Get one PharmacyItemCategory
   * const pharmacyItemCategory = await prisma.pharmacyItemCategory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PharmacyItemCategoryFindUniqueArgs>(args: Prisma.SelectSubset<T, PharmacyItemCategoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PharmacyItemCategoryClient<runtime.Types.Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PharmacyItemCategory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PharmacyItemCategoryFindUniqueOrThrowArgs} args - Arguments to find a PharmacyItemCategory
   * @example
   * // Get one PharmacyItemCategory
   * const pharmacyItemCategory = await prisma.pharmacyItemCategory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PharmacyItemCategoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PharmacyItemCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PharmacyItemCategoryClient<runtime.Types.Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PharmacyItemCategory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacyItemCategoryFindFirstArgs} args - Arguments to find a PharmacyItemCategory
   * @example
   * // Get one PharmacyItemCategory
   * const pharmacyItemCategory = await prisma.pharmacyItemCategory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PharmacyItemCategoryFindFirstArgs>(args?: Prisma.SelectSubset<T, PharmacyItemCategoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__PharmacyItemCategoryClient<runtime.Types.Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PharmacyItemCategory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacyItemCategoryFindFirstOrThrowArgs} args - Arguments to find a PharmacyItemCategory
   * @example
   * // Get one PharmacyItemCategory
   * const pharmacyItemCategory = await prisma.pharmacyItemCategory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PharmacyItemCategoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PharmacyItemCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PharmacyItemCategoryClient<runtime.Types.Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PharmacyItemCategories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacyItemCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PharmacyItemCategories
   * const pharmacyItemCategories = await prisma.pharmacyItemCategory.findMany()
   * 
   * // Get first 10 PharmacyItemCategories
   * const pharmacyItemCategories = await prisma.pharmacyItemCategory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pharmacyItemCategoryWithIdOnly = await prisma.pharmacyItemCategory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PharmacyItemCategoryFindManyArgs>(args?: Prisma.SelectSubset<T, PharmacyItemCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PharmacyItemCategory.
   * @param {PharmacyItemCategoryCreateArgs} args - Arguments to create a PharmacyItemCategory.
   * @example
   * // Create one PharmacyItemCategory
   * const PharmacyItemCategory = await prisma.pharmacyItemCategory.create({
   *   data: {
   *     // ... data to create a PharmacyItemCategory
   *   }
   * })
   * 
   */
  create<T extends PharmacyItemCategoryCreateArgs>(args: Prisma.SelectSubset<T, PharmacyItemCategoryCreateArgs<ExtArgs>>): Prisma.Prisma__PharmacyItemCategoryClient<runtime.Types.Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PharmacyItemCategories.
   * @param {PharmacyItemCategoryCreateManyArgs} args - Arguments to create many PharmacyItemCategories.
   * @example
   * // Create many PharmacyItemCategories
   * const pharmacyItemCategory = await prisma.pharmacyItemCategory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PharmacyItemCategoryCreateManyArgs>(args?: Prisma.SelectSubset<T, PharmacyItemCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PharmacyItemCategories and returns the data saved in the database.
   * @param {PharmacyItemCategoryCreateManyAndReturnArgs} args - Arguments to create many PharmacyItemCategories.
   * @example
   * // Create many PharmacyItemCategories
   * const pharmacyItemCategory = await prisma.pharmacyItemCategory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PharmacyItemCategories and only return the `id`
   * const pharmacyItemCategoryWithIdOnly = await prisma.pharmacyItemCategory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PharmacyItemCategoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PharmacyItemCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PharmacyItemCategory.
   * @param {PharmacyItemCategoryDeleteArgs} args - Arguments to delete one PharmacyItemCategory.
   * @example
   * // Delete one PharmacyItemCategory
   * const PharmacyItemCategory = await prisma.pharmacyItemCategory.delete({
   *   where: {
   *     // ... filter to delete one PharmacyItemCategory
   *   }
   * })
   * 
   */
  delete<T extends PharmacyItemCategoryDeleteArgs>(args: Prisma.SelectSubset<T, PharmacyItemCategoryDeleteArgs<ExtArgs>>): Prisma.Prisma__PharmacyItemCategoryClient<runtime.Types.Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PharmacyItemCategory.
   * @param {PharmacyItemCategoryUpdateArgs} args - Arguments to update one PharmacyItemCategory.
   * @example
   * // Update one PharmacyItemCategory
   * const pharmacyItemCategory = await prisma.pharmacyItemCategory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PharmacyItemCategoryUpdateArgs>(args: Prisma.SelectSubset<T, PharmacyItemCategoryUpdateArgs<ExtArgs>>): Prisma.Prisma__PharmacyItemCategoryClient<runtime.Types.Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PharmacyItemCategories.
   * @param {PharmacyItemCategoryDeleteManyArgs} args - Arguments to filter PharmacyItemCategories to delete.
   * @example
   * // Delete a few PharmacyItemCategories
   * const { count } = await prisma.pharmacyItemCategory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PharmacyItemCategoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, PharmacyItemCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PharmacyItemCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacyItemCategoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PharmacyItemCategories
   * const pharmacyItemCategory = await prisma.pharmacyItemCategory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PharmacyItemCategoryUpdateManyArgs>(args: Prisma.SelectSubset<T, PharmacyItemCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PharmacyItemCategories and returns the data updated in the database.
   * @param {PharmacyItemCategoryUpdateManyAndReturnArgs} args - Arguments to update many PharmacyItemCategories.
   * @example
   * // Update many PharmacyItemCategories
   * const pharmacyItemCategory = await prisma.pharmacyItemCategory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PharmacyItemCategories and only return the `id`
   * const pharmacyItemCategoryWithIdOnly = await prisma.pharmacyItemCategory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PharmacyItemCategoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PharmacyItemCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PharmacyItemCategory.
   * @param {PharmacyItemCategoryUpsertArgs} args - Arguments to update or create a PharmacyItemCategory.
   * @example
   * // Update or create a PharmacyItemCategory
   * const pharmacyItemCategory = await prisma.pharmacyItemCategory.upsert({
   *   create: {
   *     // ... data to create a PharmacyItemCategory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PharmacyItemCategory we want to update
   *   }
   * })
   */
  upsert<T extends PharmacyItemCategoryUpsertArgs>(args: Prisma.SelectSubset<T, PharmacyItemCategoryUpsertArgs<ExtArgs>>): Prisma.Prisma__PharmacyItemCategoryClient<runtime.Types.Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PharmacyItemCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacyItemCategoryCountArgs} args - Arguments to filter PharmacyItemCategories to count.
   * @example
   * // Count the number of PharmacyItemCategories
   * const count = await prisma.pharmacyItemCategory.count({
   *   where: {
   *     // ... the filter for the PharmacyItemCategories we want to count
   *   }
   * })
  **/
  count<T extends PharmacyItemCategoryCountArgs>(
    args?: Prisma.Subset<T, PharmacyItemCategoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PharmacyItemCategoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PharmacyItemCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacyItemCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PharmacyItemCategoryAggregateArgs>(args: Prisma.Subset<T, PharmacyItemCategoryAggregateArgs>): Prisma.PrismaPromise<GetPharmacyItemCategoryAggregateType<T>>

  /**
   * Group by PharmacyItemCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacyItemCategoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PharmacyItemCategoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PharmacyItemCategoryGroupByArgs['orderBy'] }
      : { orderBy?: PharmacyItemCategoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PharmacyItemCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPharmacyItemCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PharmacyItemCategory model
 */
readonly fields: PharmacyItemCategoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PharmacyItemCategory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PharmacyItemCategoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  items<T extends Prisma.PharmacyItemCategory$itemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PharmacyItemCategory$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PharmacyItemCategory model
 */
export interface PharmacyItemCategoryFieldRefs {
  readonly id: Prisma.FieldRef<"PharmacyItemCategory", 'String'>
  readonly name: Prisma.FieldRef<"PharmacyItemCategory", 'String'>
  readonly createdAt: Prisma.FieldRef<"PharmacyItemCategory", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PharmacyItemCategory", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PharmacyItemCategory findUnique
 */
export type PharmacyItemCategoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItemCategory
   */
  select?: Prisma.PharmacyItemCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItemCategory
   */
  omit?: Prisma.PharmacyItemCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemCategoryInclude<ExtArgs> | null
  /**
   * Filter, which PharmacyItemCategory to fetch.
   */
  where: Prisma.PharmacyItemCategoryWhereUniqueInput
}

/**
 * PharmacyItemCategory findUniqueOrThrow
 */
export type PharmacyItemCategoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItemCategory
   */
  select?: Prisma.PharmacyItemCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItemCategory
   */
  omit?: Prisma.PharmacyItemCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemCategoryInclude<ExtArgs> | null
  /**
   * Filter, which PharmacyItemCategory to fetch.
   */
  where: Prisma.PharmacyItemCategoryWhereUniqueInput
}

/**
 * PharmacyItemCategory findFirst
 */
export type PharmacyItemCategoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItemCategory
   */
  select?: Prisma.PharmacyItemCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItemCategory
   */
  omit?: Prisma.PharmacyItemCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemCategoryInclude<ExtArgs> | null
  /**
   * Filter, which PharmacyItemCategory to fetch.
   */
  where?: Prisma.PharmacyItemCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PharmacyItemCategories to fetch.
   */
  orderBy?: Prisma.PharmacyItemCategoryOrderByWithRelationInput | Prisma.PharmacyItemCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PharmacyItemCategories.
   */
  cursor?: Prisma.PharmacyItemCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PharmacyItemCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PharmacyItemCategories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PharmacyItemCategories.
   */
  distinct?: Prisma.PharmacyItemCategoryScalarFieldEnum | Prisma.PharmacyItemCategoryScalarFieldEnum[]
}

/**
 * PharmacyItemCategory findFirstOrThrow
 */
export type PharmacyItemCategoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItemCategory
   */
  select?: Prisma.PharmacyItemCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItemCategory
   */
  omit?: Prisma.PharmacyItemCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemCategoryInclude<ExtArgs> | null
  /**
   * Filter, which PharmacyItemCategory to fetch.
   */
  where?: Prisma.PharmacyItemCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PharmacyItemCategories to fetch.
   */
  orderBy?: Prisma.PharmacyItemCategoryOrderByWithRelationInput | Prisma.PharmacyItemCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PharmacyItemCategories.
   */
  cursor?: Prisma.PharmacyItemCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PharmacyItemCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PharmacyItemCategories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PharmacyItemCategories.
   */
  distinct?: Prisma.PharmacyItemCategoryScalarFieldEnum | Prisma.PharmacyItemCategoryScalarFieldEnum[]
}

/**
 * PharmacyItemCategory findMany
 */
export type PharmacyItemCategoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItemCategory
   */
  select?: Prisma.PharmacyItemCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItemCategory
   */
  omit?: Prisma.PharmacyItemCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemCategoryInclude<ExtArgs> | null
  /**
   * Filter, which PharmacyItemCategories to fetch.
   */
  where?: Prisma.PharmacyItemCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PharmacyItemCategories to fetch.
   */
  orderBy?: Prisma.PharmacyItemCategoryOrderByWithRelationInput | Prisma.PharmacyItemCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PharmacyItemCategories.
   */
  cursor?: Prisma.PharmacyItemCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PharmacyItemCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PharmacyItemCategories.
   */
  skip?: number
  distinct?: Prisma.PharmacyItemCategoryScalarFieldEnum | Prisma.PharmacyItemCategoryScalarFieldEnum[]
}

/**
 * PharmacyItemCategory create
 */
export type PharmacyItemCategoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItemCategory
   */
  select?: Prisma.PharmacyItemCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItemCategory
   */
  omit?: Prisma.PharmacyItemCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemCategoryInclude<ExtArgs> | null
  /**
   * The data needed to create a PharmacyItemCategory.
   */
  data: Prisma.XOR<Prisma.PharmacyItemCategoryCreateInput, Prisma.PharmacyItemCategoryUncheckedCreateInput>
}

/**
 * PharmacyItemCategory createMany
 */
export type PharmacyItemCategoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PharmacyItemCategories.
   */
  data: Prisma.PharmacyItemCategoryCreateManyInput | Prisma.PharmacyItemCategoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PharmacyItemCategory createManyAndReturn
 */
export type PharmacyItemCategoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItemCategory
   */
  select?: Prisma.PharmacyItemCategorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItemCategory
   */
  omit?: Prisma.PharmacyItemCategoryOmit<ExtArgs> | null
  /**
   * The data used to create many PharmacyItemCategories.
   */
  data: Prisma.PharmacyItemCategoryCreateManyInput | Prisma.PharmacyItemCategoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PharmacyItemCategory update
 */
export type PharmacyItemCategoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItemCategory
   */
  select?: Prisma.PharmacyItemCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItemCategory
   */
  omit?: Prisma.PharmacyItemCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemCategoryInclude<ExtArgs> | null
  /**
   * The data needed to update a PharmacyItemCategory.
   */
  data: Prisma.XOR<Prisma.PharmacyItemCategoryUpdateInput, Prisma.PharmacyItemCategoryUncheckedUpdateInput>
  /**
   * Choose, which PharmacyItemCategory to update.
   */
  where: Prisma.PharmacyItemCategoryWhereUniqueInput
}

/**
 * PharmacyItemCategory updateMany
 */
export type PharmacyItemCategoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PharmacyItemCategories.
   */
  data: Prisma.XOR<Prisma.PharmacyItemCategoryUpdateManyMutationInput, Prisma.PharmacyItemCategoryUncheckedUpdateManyInput>
  /**
   * Filter which PharmacyItemCategories to update
   */
  where?: Prisma.PharmacyItemCategoryWhereInput
  /**
   * Limit how many PharmacyItemCategories to update.
   */
  limit?: number
}

/**
 * PharmacyItemCategory updateManyAndReturn
 */
export type PharmacyItemCategoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItemCategory
   */
  select?: Prisma.PharmacyItemCategorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItemCategory
   */
  omit?: Prisma.PharmacyItemCategoryOmit<ExtArgs> | null
  /**
   * The data used to update PharmacyItemCategories.
   */
  data: Prisma.XOR<Prisma.PharmacyItemCategoryUpdateManyMutationInput, Prisma.PharmacyItemCategoryUncheckedUpdateManyInput>
  /**
   * Filter which PharmacyItemCategories to update
   */
  where?: Prisma.PharmacyItemCategoryWhereInput
  /**
   * Limit how many PharmacyItemCategories to update.
   */
  limit?: number
}

/**
 * PharmacyItemCategory upsert
 */
export type PharmacyItemCategoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItemCategory
   */
  select?: Prisma.PharmacyItemCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItemCategory
   */
  omit?: Prisma.PharmacyItemCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemCategoryInclude<ExtArgs> | null
  /**
   * The filter to search for the PharmacyItemCategory to update in case it exists.
   */
  where: Prisma.PharmacyItemCategoryWhereUniqueInput
  /**
   * In case the PharmacyItemCategory found by the `where` argument doesn't exist, create a new PharmacyItemCategory with this data.
   */
  create: Prisma.XOR<Prisma.PharmacyItemCategoryCreateInput, Prisma.PharmacyItemCategoryUncheckedCreateInput>
  /**
   * In case the PharmacyItemCategory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PharmacyItemCategoryUpdateInput, Prisma.PharmacyItemCategoryUncheckedUpdateInput>
}

/**
 * PharmacyItemCategory delete
 */
export type PharmacyItemCategoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItemCategory
   */
  select?: Prisma.PharmacyItemCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItemCategory
   */
  omit?: Prisma.PharmacyItemCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemCategoryInclude<ExtArgs> | null
  /**
   * Filter which PharmacyItemCategory to delete.
   */
  where: Prisma.PharmacyItemCategoryWhereUniqueInput
}

/**
 * PharmacyItemCategory deleteMany
 */
export type PharmacyItemCategoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PharmacyItemCategories to delete
   */
  where?: Prisma.PharmacyItemCategoryWhereInput
  /**
   * Limit how many PharmacyItemCategories to delete.
   */
  limit?: number
}

/**
 * PharmacyItemCategory.items
 */
export type PharmacyItemCategory$itemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItem
   */
  select?: Prisma.PharmacyItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItem
   */
  omit?: Prisma.PharmacyItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemInclude<ExtArgs> | null
  where?: Prisma.PharmacyItemWhereInput
  orderBy?: Prisma.PharmacyItemOrderByWithRelationInput | Prisma.PharmacyItemOrderByWithRelationInput[]
  cursor?: Prisma.PharmacyItemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PharmacyItemScalarFieldEnum | Prisma.PharmacyItemScalarFieldEnum[]
}

/**
 * PharmacyItemCategory without action
 */
export type PharmacyItemCategoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItemCategory
   */
  select?: Prisma.PharmacyItemCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItemCategory
   */
  omit?: Prisma.PharmacyItemCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemCategoryInclude<ExtArgs> | null
}
