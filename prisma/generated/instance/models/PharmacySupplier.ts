
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PharmacySupplier` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PharmacySupplier
 * 
 */
export type PharmacySupplierModel = runtime.Types.Result.DefaultSelection<Prisma.$PharmacySupplierPayload>

export type AggregatePharmacySupplier = {
  _count: PharmacySupplierCountAggregateOutputType | null
  _min: PharmacySupplierMinAggregateOutputType | null
  _max: PharmacySupplierMaxAggregateOutputType | null
}

export type PharmacySupplierMinAggregateOutputType = {
  id: string | null
  name: string | null
  email: string | null
  contact: string | null
  address: string | null
  notes: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PharmacySupplierMaxAggregateOutputType = {
  id: string | null
  name: string | null
  email: string | null
  contact: string | null
  address: string | null
  notes: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PharmacySupplierCountAggregateOutputType = {
  id: number
  name: number
  email: number
  contact: number
  address: number
  notes: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PharmacySupplierMinAggregateInputType = {
  id?: true
  name?: true
  email?: true
  contact?: true
  address?: true
  notes?: true
  createdAt?: true
  updatedAt?: true
}

export type PharmacySupplierMaxAggregateInputType = {
  id?: true
  name?: true
  email?: true
  contact?: true
  address?: true
  notes?: true
  createdAt?: true
  updatedAt?: true
}

export type PharmacySupplierCountAggregateInputType = {
  id?: true
  name?: true
  email?: true
  contact?: true
  address?: true
  notes?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PharmacySupplierAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PharmacySupplier to aggregate.
   */
  where?: Prisma.PharmacySupplierWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PharmacySuppliers to fetch.
   */
  orderBy?: Prisma.PharmacySupplierOrderByWithRelationInput | Prisma.PharmacySupplierOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PharmacySupplierWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PharmacySuppliers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PharmacySuppliers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PharmacySuppliers
  **/
  _count?: true | PharmacySupplierCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PharmacySupplierMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PharmacySupplierMaxAggregateInputType
}

export type GetPharmacySupplierAggregateType<T extends PharmacySupplierAggregateArgs> = {
      [P in keyof T & keyof AggregatePharmacySupplier]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePharmacySupplier[P]>
    : Prisma.GetScalarType<T[P], AggregatePharmacySupplier[P]>
}




export type PharmacySupplierGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PharmacySupplierWhereInput
  orderBy?: Prisma.PharmacySupplierOrderByWithAggregationInput | Prisma.PharmacySupplierOrderByWithAggregationInput[]
  by: Prisma.PharmacySupplierScalarFieldEnum[] | Prisma.PharmacySupplierScalarFieldEnum
  having?: Prisma.PharmacySupplierScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PharmacySupplierCountAggregateInputType | true
  _min?: PharmacySupplierMinAggregateInputType
  _max?: PharmacySupplierMaxAggregateInputType
}

export type PharmacySupplierGroupByOutputType = {
  id: string
  name: string
  email: string | null
  contact: string | null
  address: string | null
  notes: string | null
  createdAt: Date
  updatedAt: Date
  _count: PharmacySupplierCountAggregateOutputType | null
  _min: PharmacySupplierMinAggregateOutputType | null
  _max: PharmacySupplierMaxAggregateOutputType | null
}

type GetPharmacySupplierGroupByPayload<T extends PharmacySupplierGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PharmacySupplierGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PharmacySupplierGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PharmacySupplierGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PharmacySupplierGroupByOutputType[P]>
      }
    >
  >



export type PharmacySupplierWhereInput = {
  AND?: Prisma.PharmacySupplierWhereInput | Prisma.PharmacySupplierWhereInput[]
  OR?: Prisma.PharmacySupplierWhereInput[]
  NOT?: Prisma.PharmacySupplierWhereInput | Prisma.PharmacySupplierWhereInput[]
  id?: Prisma.UuidFilter<"PharmacySupplier"> | string
  name?: Prisma.StringFilter<"PharmacySupplier"> | string
  email?: Prisma.StringNullableFilter<"PharmacySupplier"> | string | null
  contact?: Prisma.StringNullableFilter<"PharmacySupplier"> | string | null
  address?: Prisma.StringNullableFilter<"PharmacySupplier"> | string | null
  notes?: Prisma.StringNullableFilter<"PharmacySupplier"> | string | null
  createdAt?: Prisma.DateTimeFilter<"PharmacySupplier"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PharmacySupplier"> | Date | string
}

export type PharmacySupplierOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrderInput | Prisma.SortOrder
  contact?: Prisma.SortOrderInput | Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PharmacySupplierWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PharmacySupplierWhereInput | Prisma.PharmacySupplierWhereInput[]
  OR?: Prisma.PharmacySupplierWhereInput[]
  NOT?: Prisma.PharmacySupplierWhereInput | Prisma.PharmacySupplierWhereInput[]
  name?: Prisma.StringFilter<"PharmacySupplier"> | string
  email?: Prisma.StringNullableFilter<"PharmacySupplier"> | string | null
  contact?: Prisma.StringNullableFilter<"PharmacySupplier"> | string | null
  address?: Prisma.StringNullableFilter<"PharmacySupplier"> | string | null
  notes?: Prisma.StringNullableFilter<"PharmacySupplier"> | string | null
  createdAt?: Prisma.DateTimeFilter<"PharmacySupplier"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PharmacySupplier"> | Date | string
}, "id">

export type PharmacySupplierOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrderInput | Prisma.SortOrder
  contact?: Prisma.SortOrderInput | Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PharmacySupplierCountOrderByAggregateInput
  _max?: Prisma.PharmacySupplierMaxOrderByAggregateInput
  _min?: Prisma.PharmacySupplierMinOrderByAggregateInput
}

export type PharmacySupplierScalarWhereWithAggregatesInput = {
  AND?: Prisma.PharmacySupplierScalarWhereWithAggregatesInput | Prisma.PharmacySupplierScalarWhereWithAggregatesInput[]
  OR?: Prisma.PharmacySupplierScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PharmacySupplierScalarWhereWithAggregatesInput | Prisma.PharmacySupplierScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"PharmacySupplier"> | string
  name?: Prisma.StringWithAggregatesFilter<"PharmacySupplier"> | string
  email?: Prisma.StringNullableWithAggregatesFilter<"PharmacySupplier"> | string | null
  contact?: Prisma.StringNullableWithAggregatesFilter<"PharmacySupplier"> | string | null
  address?: Prisma.StringNullableWithAggregatesFilter<"PharmacySupplier"> | string | null
  notes?: Prisma.StringNullableWithAggregatesFilter<"PharmacySupplier"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PharmacySupplier"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PharmacySupplier"> | Date | string
}

export type PharmacySupplierCreateInput = {
  id?: string
  name: string
  email?: string | null
  contact?: string | null
  address?: string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PharmacySupplierUncheckedCreateInput = {
  id?: string
  name: string
  email?: string | null
  contact?: string | null
  address?: string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PharmacySupplierUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contact?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PharmacySupplierUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contact?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PharmacySupplierCreateManyInput = {
  id?: string
  name: string
  email?: string | null
  contact?: string | null
  address?: string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PharmacySupplierUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contact?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PharmacySupplierUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contact?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PharmacySupplierCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  contact?: Prisma.SortOrder
  address?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PharmacySupplierMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  contact?: Prisma.SortOrder
  address?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PharmacySupplierMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  contact?: Prisma.SortOrder
  address?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}



export type PharmacySupplierSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  contact?: boolean
  address?: boolean
  notes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["pharmacySupplier"]>

export type PharmacySupplierSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  contact?: boolean
  address?: boolean
  notes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["pharmacySupplier"]>

export type PharmacySupplierSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  contact?: boolean
  address?: boolean
  notes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["pharmacySupplier"]>

export type PharmacySupplierSelectScalar = {
  id?: boolean
  name?: boolean
  email?: boolean
  contact?: boolean
  address?: boolean
  notes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PharmacySupplierOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "email" | "contact" | "address" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["pharmacySupplier"]>

export type $PharmacySupplierPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PharmacySupplier"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    email: string | null
    contact: string | null
    address: string | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["pharmacySupplier"]>
  composites: {}
}

export type PharmacySupplierGetPayload<S extends boolean | null | undefined | PharmacySupplierDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PharmacySupplierPayload, S>

export type PharmacySupplierCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PharmacySupplierFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PharmacySupplierCountAggregateInputType | true
  }

export interface PharmacySupplierDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PharmacySupplier'], meta: { name: 'PharmacySupplier' } }
  /**
   * Find zero or one PharmacySupplier that matches the filter.
   * @param {PharmacySupplierFindUniqueArgs} args - Arguments to find a PharmacySupplier
   * @example
   * // Get one PharmacySupplier
   * const pharmacySupplier = await prisma.pharmacySupplier.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PharmacySupplierFindUniqueArgs>(args: Prisma.SelectSubset<T, PharmacySupplierFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PharmacySupplierClient<runtime.Types.Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PharmacySupplier that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PharmacySupplierFindUniqueOrThrowArgs} args - Arguments to find a PharmacySupplier
   * @example
   * // Get one PharmacySupplier
   * const pharmacySupplier = await prisma.pharmacySupplier.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PharmacySupplierFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PharmacySupplierFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PharmacySupplierClient<runtime.Types.Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PharmacySupplier that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacySupplierFindFirstArgs} args - Arguments to find a PharmacySupplier
   * @example
   * // Get one PharmacySupplier
   * const pharmacySupplier = await prisma.pharmacySupplier.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PharmacySupplierFindFirstArgs>(args?: Prisma.SelectSubset<T, PharmacySupplierFindFirstArgs<ExtArgs>>): Prisma.Prisma__PharmacySupplierClient<runtime.Types.Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PharmacySupplier that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacySupplierFindFirstOrThrowArgs} args - Arguments to find a PharmacySupplier
   * @example
   * // Get one PharmacySupplier
   * const pharmacySupplier = await prisma.pharmacySupplier.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PharmacySupplierFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PharmacySupplierFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PharmacySupplierClient<runtime.Types.Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PharmacySuppliers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacySupplierFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PharmacySuppliers
   * const pharmacySuppliers = await prisma.pharmacySupplier.findMany()
   * 
   * // Get first 10 PharmacySuppliers
   * const pharmacySuppliers = await prisma.pharmacySupplier.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pharmacySupplierWithIdOnly = await prisma.pharmacySupplier.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PharmacySupplierFindManyArgs>(args?: Prisma.SelectSubset<T, PharmacySupplierFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PharmacySupplier.
   * @param {PharmacySupplierCreateArgs} args - Arguments to create a PharmacySupplier.
   * @example
   * // Create one PharmacySupplier
   * const PharmacySupplier = await prisma.pharmacySupplier.create({
   *   data: {
   *     // ... data to create a PharmacySupplier
   *   }
   * })
   * 
   */
  create<T extends PharmacySupplierCreateArgs>(args: Prisma.SelectSubset<T, PharmacySupplierCreateArgs<ExtArgs>>): Prisma.Prisma__PharmacySupplierClient<runtime.Types.Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PharmacySuppliers.
   * @param {PharmacySupplierCreateManyArgs} args - Arguments to create many PharmacySuppliers.
   * @example
   * // Create many PharmacySuppliers
   * const pharmacySupplier = await prisma.pharmacySupplier.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PharmacySupplierCreateManyArgs>(args?: Prisma.SelectSubset<T, PharmacySupplierCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PharmacySuppliers and returns the data saved in the database.
   * @param {PharmacySupplierCreateManyAndReturnArgs} args - Arguments to create many PharmacySuppliers.
   * @example
   * // Create many PharmacySuppliers
   * const pharmacySupplier = await prisma.pharmacySupplier.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PharmacySuppliers and only return the `id`
   * const pharmacySupplierWithIdOnly = await prisma.pharmacySupplier.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PharmacySupplierCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PharmacySupplierCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PharmacySupplier.
   * @param {PharmacySupplierDeleteArgs} args - Arguments to delete one PharmacySupplier.
   * @example
   * // Delete one PharmacySupplier
   * const PharmacySupplier = await prisma.pharmacySupplier.delete({
   *   where: {
   *     // ... filter to delete one PharmacySupplier
   *   }
   * })
   * 
   */
  delete<T extends PharmacySupplierDeleteArgs>(args: Prisma.SelectSubset<T, PharmacySupplierDeleteArgs<ExtArgs>>): Prisma.Prisma__PharmacySupplierClient<runtime.Types.Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PharmacySupplier.
   * @param {PharmacySupplierUpdateArgs} args - Arguments to update one PharmacySupplier.
   * @example
   * // Update one PharmacySupplier
   * const pharmacySupplier = await prisma.pharmacySupplier.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PharmacySupplierUpdateArgs>(args: Prisma.SelectSubset<T, PharmacySupplierUpdateArgs<ExtArgs>>): Prisma.Prisma__PharmacySupplierClient<runtime.Types.Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PharmacySuppliers.
   * @param {PharmacySupplierDeleteManyArgs} args - Arguments to filter PharmacySuppliers to delete.
   * @example
   * // Delete a few PharmacySuppliers
   * const { count } = await prisma.pharmacySupplier.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PharmacySupplierDeleteManyArgs>(args?: Prisma.SelectSubset<T, PharmacySupplierDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PharmacySuppliers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacySupplierUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PharmacySuppliers
   * const pharmacySupplier = await prisma.pharmacySupplier.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PharmacySupplierUpdateManyArgs>(args: Prisma.SelectSubset<T, PharmacySupplierUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PharmacySuppliers and returns the data updated in the database.
   * @param {PharmacySupplierUpdateManyAndReturnArgs} args - Arguments to update many PharmacySuppliers.
   * @example
   * // Update many PharmacySuppliers
   * const pharmacySupplier = await prisma.pharmacySupplier.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PharmacySuppliers and only return the `id`
   * const pharmacySupplierWithIdOnly = await prisma.pharmacySupplier.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PharmacySupplierUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PharmacySupplierUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PharmacySupplier.
   * @param {PharmacySupplierUpsertArgs} args - Arguments to update or create a PharmacySupplier.
   * @example
   * // Update or create a PharmacySupplier
   * const pharmacySupplier = await prisma.pharmacySupplier.upsert({
   *   create: {
   *     // ... data to create a PharmacySupplier
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PharmacySupplier we want to update
   *   }
   * })
   */
  upsert<T extends PharmacySupplierUpsertArgs>(args: Prisma.SelectSubset<T, PharmacySupplierUpsertArgs<ExtArgs>>): Prisma.Prisma__PharmacySupplierClient<runtime.Types.Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PharmacySuppliers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacySupplierCountArgs} args - Arguments to filter PharmacySuppliers to count.
   * @example
   * // Count the number of PharmacySuppliers
   * const count = await prisma.pharmacySupplier.count({
   *   where: {
   *     // ... the filter for the PharmacySuppliers we want to count
   *   }
   * })
  **/
  count<T extends PharmacySupplierCountArgs>(
    args?: Prisma.Subset<T, PharmacySupplierCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PharmacySupplierCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PharmacySupplier.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacySupplierAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PharmacySupplierAggregateArgs>(args: Prisma.Subset<T, PharmacySupplierAggregateArgs>): Prisma.PrismaPromise<GetPharmacySupplierAggregateType<T>>

  /**
   * Group by PharmacySupplier.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacySupplierGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PharmacySupplierGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PharmacySupplierGroupByArgs['orderBy'] }
      : { orderBy?: PharmacySupplierGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PharmacySupplierGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPharmacySupplierGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PharmacySupplier model
 */
readonly fields: PharmacySupplierFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PharmacySupplier.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PharmacySupplierClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PharmacySupplier model
 */
export interface PharmacySupplierFieldRefs {
  readonly id: Prisma.FieldRef<"PharmacySupplier", 'String'>
  readonly name: Prisma.FieldRef<"PharmacySupplier", 'String'>
  readonly email: Prisma.FieldRef<"PharmacySupplier", 'String'>
  readonly contact: Prisma.FieldRef<"PharmacySupplier", 'String'>
  readonly address: Prisma.FieldRef<"PharmacySupplier", 'String'>
  readonly notes: Prisma.FieldRef<"PharmacySupplier", 'String'>
  readonly createdAt: Prisma.FieldRef<"PharmacySupplier", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PharmacySupplier", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PharmacySupplier findUnique
 */
export type PharmacySupplierFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacySupplier
   */
  select?: Prisma.PharmacySupplierSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacySupplier
   */
  omit?: Prisma.PharmacySupplierOmit<ExtArgs> | null
  /**
   * Filter, which PharmacySupplier to fetch.
   */
  where: Prisma.PharmacySupplierWhereUniqueInput
}

/**
 * PharmacySupplier findUniqueOrThrow
 */
export type PharmacySupplierFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacySupplier
   */
  select?: Prisma.PharmacySupplierSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacySupplier
   */
  omit?: Prisma.PharmacySupplierOmit<ExtArgs> | null
  /**
   * Filter, which PharmacySupplier to fetch.
   */
  where: Prisma.PharmacySupplierWhereUniqueInput
}

/**
 * PharmacySupplier findFirst
 */
export type PharmacySupplierFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacySupplier
   */
  select?: Prisma.PharmacySupplierSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacySupplier
   */
  omit?: Prisma.PharmacySupplierOmit<ExtArgs> | null
  /**
   * Filter, which PharmacySupplier to fetch.
   */
  where?: Prisma.PharmacySupplierWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PharmacySuppliers to fetch.
   */
  orderBy?: Prisma.PharmacySupplierOrderByWithRelationInput | Prisma.PharmacySupplierOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PharmacySuppliers.
   */
  cursor?: Prisma.PharmacySupplierWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PharmacySuppliers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PharmacySuppliers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PharmacySuppliers.
   */
  distinct?: Prisma.PharmacySupplierScalarFieldEnum | Prisma.PharmacySupplierScalarFieldEnum[]
}

/**
 * PharmacySupplier findFirstOrThrow
 */
export type PharmacySupplierFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacySupplier
   */
  select?: Prisma.PharmacySupplierSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacySupplier
   */
  omit?: Prisma.PharmacySupplierOmit<ExtArgs> | null
  /**
   * Filter, which PharmacySupplier to fetch.
   */
  where?: Prisma.PharmacySupplierWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PharmacySuppliers to fetch.
   */
  orderBy?: Prisma.PharmacySupplierOrderByWithRelationInput | Prisma.PharmacySupplierOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PharmacySuppliers.
   */
  cursor?: Prisma.PharmacySupplierWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PharmacySuppliers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PharmacySuppliers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PharmacySuppliers.
   */
  distinct?: Prisma.PharmacySupplierScalarFieldEnum | Prisma.PharmacySupplierScalarFieldEnum[]
}

/**
 * PharmacySupplier findMany
 */
export type PharmacySupplierFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacySupplier
   */
  select?: Prisma.PharmacySupplierSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacySupplier
   */
  omit?: Prisma.PharmacySupplierOmit<ExtArgs> | null
  /**
   * Filter, which PharmacySuppliers to fetch.
   */
  where?: Prisma.PharmacySupplierWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PharmacySuppliers to fetch.
   */
  orderBy?: Prisma.PharmacySupplierOrderByWithRelationInput | Prisma.PharmacySupplierOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PharmacySuppliers.
   */
  cursor?: Prisma.PharmacySupplierWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PharmacySuppliers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PharmacySuppliers.
   */
  skip?: number
  distinct?: Prisma.PharmacySupplierScalarFieldEnum | Prisma.PharmacySupplierScalarFieldEnum[]
}

/**
 * PharmacySupplier create
 */
export type PharmacySupplierCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacySupplier
   */
  select?: Prisma.PharmacySupplierSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacySupplier
   */
  omit?: Prisma.PharmacySupplierOmit<ExtArgs> | null
  /**
   * The data needed to create a PharmacySupplier.
   */
  data: Prisma.XOR<Prisma.PharmacySupplierCreateInput, Prisma.PharmacySupplierUncheckedCreateInput>
}

/**
 * PharmacySupplier createMany
 */
export type PharmacySupplierCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PharmacySuppliers.
   */
  data: Prisma.PharmacySupplierCreateManyInput | Prisma.PharmacySupplierCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PharmacySupplier createManyAndReturn
 */
export type PharmacySupplierCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacySupplier
   */
  select?: Prisma.PharmacySupplierSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacySupplier
   */
  omit?: Prisma.PharmacySupplierOmit<ExtArgs> | null
  /**
   * The data used to create many PharmacySuppliers.
   */
  data: Prisma.PharmacySupplierCreateManyInput | Prisma.PharmacySupplierCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PharmacySupplier update
 */
export type PharmacySupplierUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacySupplier
   */
  select?: Prisma.PharmacySupplierSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacySupplier
   */
  omit?: Prisma.PharmacySupplierOmit<ExtArgs> | null
  /**
   * The data needed to update a PharmacySupplier.
   */
  data: Prisma.XOR<Prisma.PharmacySupplierUpdateInput, Prisma.PharmacySupplierUncheckedUpdateInput>
  /**
   * Choose, which PharmacySupplier to update.
   */
  where: Prisma.PharmacySupplierWhereUniqueInput
}

/**
 * PharmacySupplier updateMany
 */
export type PharmacySupplierUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PharmacySuppliers.
   */
  data: Prisma.XOR<Prisma.PharmacySupplierUpdateManyMutationInput, Prisma.PharmacySupplierUncheckedUpdateManyInput>
  /**
   * Filter which PharmacySuppliers to update
   */
  where?: Prisma.PharmacySupplierWhereInput
  /**
   * Limit how many PharmacySuppliers to update.
   */
  limit?: number
}

/**
 * PharmacySupplier updateManyAndReturn
 */
export type PharmacySupplierUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacySupplier
   */
  select?: Prisma.PharmacySupplierSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacySupplier
   */
  omit?: Prisma.PharmacySupplierOmit<ExtArgs> | null
  /**
   * The data used to update PharmacySuppliers.
   */
  data: Prisma.XOR<Prisma.PharmacySupplierUpdateManyMutationInput, Prisma.PharmacySupplierUncheckedUpdateManyInput>
  /**
   * Filter which PharmacySuppliers to update
   */
  where?: Prisma.PharmacySupplierWhereInput
  /**
   * Limit how many PharmacySuppliers to update.
   */
  limit?: number
}

/**
 * PharmacySupplier upsert
 */
export type PharmacySupplierUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacySupplier
   */
  select?: Prisma.PharmacySupplierSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacySupplier
   */
  omit?: Prisma.PharmacySupplierOmit<ExtArgs> | null
  /**
   * The filter to search for the PharmacySupplier to update in case it exists.
   */
  where: Prisma.PharmacySupplierWhereUniqueInput
  /**
   * In case the PharmacySupplier found by the `where` argument doesn't exist, create a new PharmacySupplier with this data.
   */
  create: Prisma.XOR<Prisma.PharmacySupplierCreateInput, Prisma.PharmacySupplierUncheckedCreateInput>
  /**
   * In case the PharmacySupplier was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PharmacySupplierUpdateInput, Prisma.PharmacySupplierUncheckedUpdateInput>
}

/**
 * PharmacySupplier delete
 */
export type PharmacySupplierDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacySupplier
   */
  select?: Prisma.PharmacySupplierSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacySupplier
   */
  omit?: Prisma.PharmacySupplierOmit<ExtArgs> | null
  /**
   * Filter which PharmacySupplier to delete.
   */
  where: Prisma.PharmacySupplierWhereUniqueInput
}

/**
 * PharmacySupplier deleteMany
 */
export type PharmacySupplierDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PharmacySuppliers to delete
   */
  where?: Prisma.PharmacySupplierWhereInput
  /**
   * Limit how many PharmacySuppliers to delete.
   */
  limit?: number
}

/**
 * PharmacySupplier without action
 */
export type PharmacySupplierDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacySupplier
   */
  select?: Prisma.PharmacySupplierSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacySupplier
   */
  omit?: Prisma.PharmacySupplierOmit<ExtArgs> | null
}
