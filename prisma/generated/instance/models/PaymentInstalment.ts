
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PaymentInstalment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PaymentInstalment
 * 
 */
export type PaymentInstalmentModel = runtime.Types.Result.DefaultSelection<Prisma.$PaymentInstalmentPayload>

export type AggregatePaymentInstalment = {
  _count: PaymentInstalmentCountAggregateOutputType | null
  _avg: PaymentInstalmentAvgAggregateOutputType | null
  _sum: PaymentInstalmentSumAggregateOutputType | null
  _min: PaymentInstalmentMinAggregateOutputType | null
  _max: PaymentInstalmentMaxAggregateOutputType | null
}

export type PaymentInstalmentAvgAggregateOutputType = {
  instalmentNumber: number | null
  amountDue: number | null
  amountPaid: number | null
}

export type PaymentInstalmentSumAggregateOutputType = {
  instalmentNumber: number | null
  amountDue: number | null
  amountPaid: number | null
}

export type PaymentInstalmentMinAggregateOutputType = {
  id: string | null
  paymentId: string | null
  planId: string | null
  instalmentNumber: number | null
  amountDue: number | null
  amountPaid: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PaymentInstalmentMaxAggregateOutputType = {
  id: string | null
  paymentId: string | null
  planId: string | null
  instalmentNumber: number | null
  amountDue: number | null
  amountPaid: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PaymentInstalmentCountAggregateOutputType = {
  id: number
  paymentId: number
  planId: number
  instalmentNumber: number
  amountDue: number
  amountPaid: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PaymentInstalmentAvgAggregateInputType = {
  instalmentNumber?: true
  amountDue?: true
  amountPaid?: true
}

export type PaymentInstalmentSumAggregateInputType = {
  instalmentNumber?: true
  amountDue?: true
  amountPaid?: true
}

export type PaymentInstalmentMinAggregateInputType = {
  id?: true
  paymentId?: true
  planId?: true
  instalmentNumber?: true
  amountDue?: true
  amountPaid?: true
  createdAt?: true
  updatedAt?: true
}

export type PaymentInstalmentMaxAggregateInputType = {
  id?: true
  paymentId?: true
  planId?: true
  instalmentNumber?: true
  amountDue?: true
  amountPaid?: true
  createdAt?: true
  updatedAt?: true
}

export type PaymentInstalmentCountAggregateInputType = {
  id?: true
  paymentId?: true
  planId?: true
  instalmentNumber?: true
  amountDue?: true
  amountPaid?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PaymentInstalmentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PaymentInstalment to aggregate.
   */
  where?: Prisma.PaymentInstalmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentInstalments to fetch.
   */
  orderBy?: Prisma.PaymentInstalmentOrderByWithRelationInput | Prisma.PaymentInstalmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PaymentInstalmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentInstalments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentInstalments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PaymentInstalments
  **/
  _count?: true | PaymentInstalmentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PaymentInstalmentAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PaymentInstalmentSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PaymentInstalmentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PaymentInstalmentMaxAggregateInputType
}

export type GetPaymentInstalmentAggregateType<T extends PaymentInstalmentAggregateArgs> = {
      [P in keyof T & keyof AggregatePaymentInstalment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePaymentInstalment[P]>
    : Prisma.GetScalarType<T[P], AggregatePaymentInstalment[P]>
}




export type PaymentInstalmentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PaymentInstalmentWhereInput
  orderBy?: Prisma.PaymentInstalmentOrderByWithAggregationInput | Prisma.PaymentInstalmentOrderByWithAggregationInput[]
  by: Prisma.PaymentInstalmentScalarFieldEnum[] | Prisma.PaymentInstalmentScalarFieldEnum
  having?: Prisma.PaymentInstalmentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PaymentInstalmentCountAggregateInputType | true
  _avg?: PaymentInstalmentAvgAggregateInputType
  _sum?: PaymentInstalmentSumAggregateInputType
  _min?: PaymentInstalmentMinAggregateInputType
  _max?: PaymentInstalmentMaxAggregateInputType
}

export type PaymentInstalmentGroupByOutputType = {
  id: string
  paymentId: string
  planId: string
  instalmentNumber: number
  amountDue: number
  amountPaid: number
  createdAt: Date
  updatedAt: Date
  _count: PaymentInstalmentCountAggregateOutputType | null
  _avg: PaymentInstalmentAvgAggregateOutputType | null
  _sum: PaymentInstalmentSumAggregateOutputType | null
  _min: PaymentInstalmentMinAggregateOutputType | null
  _max: PaymentInstalmentMaxAggregateOutputType | null
}

type GetPaymentInstalmentGroupByPayload<T extends PaymentInstalmentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PaymentInstalmentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PaymentInstalmentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PaymentInstalmentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PaymentInstalmentGroupByOutputType[P]>
      }
    >
  >



export type PaymentInstalmentWhereInput = {
  AND?: Prisma.PaymentInstalmentWhereInput | Prisma.PaymentInstalmentWhereInput[]
  OR?: Prisma.PaymentInstalmentWhereInput[]
  NOT?: Prisma.PaymentInstalmentWhereInput | Prisma.PaymentInstalmentWhereInput[]
  id?: Prisma.UuidFilter<"PaymentInstalment"> | string
  paymentId?: Prisma.UuidFilter<"PaymentInstalment"> | string
  planId?: Prisma.UuidFilter<"PaymentInstalment"> | string
  instalmentNumber?: Prisma.IntFilter<"PaymentInstalment"> | number
  amountDue?: Prisma.IntFilter<"PaymentInstalment"> | number
  amountPaid?: Prisma.IntFilter<"PaymentInstalment"> | number
  createdAt?: Prisma.DateTimeFilter<"PaymentInstalment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PaymentInstalment"> | Date | string
  payment?: Prisma.XOR<Prisma.PaymentScalarRelationFilter, Prisma.PaymentWhereInput>
  plan?: Prisma.XOR<Prisma.PaymentPlanScalarRelationFilter, Prisma.PaymentPlanWhereInput>
}

export type PaymentInstalmentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  paymentId?: Prisma.SortOrder
  planId?: Prisma.SortOrder
  instalmentNumber?: Prisma.SortOrder
  amountDue?: Prisma.SortOrder
  amountPaid?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  payment?: Prisma.PaymentOrderByWithRelationInput
  plan?: Prisma.PaymentPlanOrderByWithRelationInput
}

export type PaymentInstalmentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PaymentInstalmentWhereInput | Prisma.PaymentInstalmentWhereInput[]
  OR?: Prisma.PaymentInstalmentWhereInput[]
  NOT?: Prisma.PaymentInstalmentWhereInput | Prisma.PaymentInstalmentWhereInput[]
  paymentId?: Prisma.UuidFilter<"PaymentInstalment"> | string
  planId?: Prisma.UuidFilter<"PaymentInstalment"> | string
  instalmentNumber?: Prisma.IntFilter<"PaymentInstalment"> | number
  amountDue?: Prisma.IntFilter<"PaymentInstalment"> | number
  amountPaid?: Prisma.IntFilter<"PaymentInstalment"> | number
  createdAt?: Prisma.DateTimeFilter<"PaymentInstalment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PaymentInstalment"> | Date | string
  payment?: Prisma.XOR<Prisma.PaymentScalarRelationFilter, Prisma.PaymentWhereInput>
  plan?: Prisma.XOR<Prisma.PaymentPlanScalarRelationFilter, Prisma.PaymentPlanWhereInput>
}, "id">

export type PaymentInstalmentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  paymentId?: Prisma.SortOrder
  planId?: Prisma.SortOrder
  instalmentNumber?: Prisma.SortOrder
  amountDue?: Prisma.SortOrder
  amountPaid?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PaymentInstalmentCountOrderByAggregateInput
  _avg?: Prisma.PaymentInstalmentAvgOrderByAggregateInput
  _max?: Prisma.PaymentInstalmentMaxOrderByAggregateInput
  _min?: Prisma.PaymentInstalmentMinOrderByAggregateInput
  _sum?: Prisma.PaymentInstalmentSumOrderByAggregateInput
}

export type PaymentInstalmentScalarWhereWithAggregatesInput = {
  AND?: Prisma.PaymentInstalmentScalarWhereWithAggregatesInput | Prisma.PaymentInstalmentScalarWhereWithAggregatesInput[]
  OR?: Prisma.PaymentInstalmentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PaymentInstalmentScalarWhereWithAggregatesInput | Prisma.PaymentInstalmentScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"PaymentInstalment"> | string
  paymentId?: Prisma.UuidWithAggregatesFilter<"PaymentInstalment"> | string
  planId?: Prisma.UuidWithAggregatesFilter<"PaymentInstalment"> | string
  instalmentNumber?: Prisma.IntWithAggregatesFilter<"PaymentInstalment"> | number
  amountDue?: Prisma.IntWithAggregatesFilter<"PaymentInstalment"> | number
  amountPaid?: Prisma.IntWithAggregatesFilter<"PaymentInstalment"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PaymentInstalment"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PaymentInstalment"> | Date | string
}

export type PaymentInstalmentCreateInput = {
  id?: string
  instalmentNumber: number
  amountDue: number
  amountPaid: number
  createdAt?: Date | string
  updatedAt?: Date | string
  payment: Prisma.PaymentCreateNestedOneWithoutInstalmentsInput
  plan: Prisma.PaymentPlanCreateNestedOneWithoutInstalmentsInput
}

export type PaymentInstalmentUncheckedCreateInput = {
  id?: string
  paymentId: string
  planId: string
  instalmentNumber: number
  amountDue: number
  amountPaid: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PaymentInstalmentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  instalmentNumber?: Prisma.IntFieldUpdateOperationsInput | number
  amountDue?: Prisma.IntFieldUpdateOperationsInput | number
  amountPaid?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  payment?: Prisma.PaymentUpdateOneRequiredWithoutInstalmentsNestedInput
  plan?: Prisma.PaymentPlanUpdateOneRequiredWithoutInstalmentsNestedInput
}

export type PaymentInstalmentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  paymentId?: Prisma.StringFieldUpdateOperationsInput | string
  planId?: Prisma.StringFieldUpdateOperationsInput | string
  instalmentNumber?: Prisma.IntFieldUpdateOperationsInput | number
  amountDue?: Prisma.IntFieldUpdateOperationsInput | number
  amountPaid?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentInstalmentCreateManyInput = {
  id?: string
  paymentId: string
  planId: string
  instalmentNumber: number
  amountDue: number
  amountPaid: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PaymentInstalmentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  instalmentNumber?: Prisma.IntFieldUpdateOperationsInput | number
  amountDue?: Prisma.IntFieldUpdateOperationsInput | number
  amountPaid?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentInstalmentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  paymentId?: Prisma.StringFieldUpdateOperationsInput | string
  planId?: Prisma.StringFieldUpdateOperationsInput | string
  instalmentNumber?: Prisma.IntFieldUpdateOperationsInput | number
  amountDue?: Prisma.IntFieldUpdateOperationsInput | number
  amountPaid?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentInstalmentListRelationFilter = {
  every?: Prisma.PaymentInstalmentWhereInput
  some?: Prisma.PaymentInstalmentWhereInput
  none?: Prisma.PaymentInstalmentWhereInput
}

export type PaymentInstalmentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PaymentInstalmentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  paymentId?: Prisma.SortOrder
  planId?: Prisma.SortOrder
  instalmentNumber?: Prisma.SortOrder
  amountDue?: Prisma.SortOrder
  amountPaid?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PaymentInstalmentAvgOrderByAggregateInput = {
  instalmentNumber?: Prisma.SortOrder
  amountDue?: Prisma.SortOrder
  amountPaid?: Prisma.SortOrder
}

export type PaymentInstalmentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  paymentId?: Prisma.SortOrder
  planId?: Prisma.SortOrder
  instalmentNumber?: Prisma.SortOrder
  amountDue?: Prisma.SortOrder
  amountPaid?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PaymentInstalmentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  paymentId?: Prisma.SortOrder
  planId?: Prisma.SortOrder
  instalmentNumber?: Prisma.SortOrder
  amountDue?: Prisma.SortOrder
  amountPaid?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PaymentInstalmentSumOrderByAggregateInput = {
  instalmentNumber?: Prisma.SortOrder
  amountDue?: Prisma.SortOrder
  amountPaid?: Prisma.SortOrder
}

export type PaymentInstalmentCreateNestedManyWithoutPlanInput = {
  create?: Prisma.XOR<Prisma.PaymentInstalmentCreateWithoutPlanInput, Prisma.PaymentInstalmentUncheckedCreateWithoutPlanInput> | Prisma.PaymentInstalmentCreateWithoutPlanInput[] | Prisma.PaymentInstalmentUncheckedCreateWithoutPlanInput[]
  connectOrCreate?: Prisma.PaymentInstalmentCreateOrConnectWithoutPlanInput | Prisma.PaymentInstalmentCreateOrConnectWithoutPlanInput[]
  createMany?: Prisma.PaymentInstalmentCreateManyPlanInputEnvelope
  connect?: Prisma.PaymentInstalmentWhereUniqueInput | Prisma.PaymentInstalmentWhereUniqueInput[]
}

export type PaymentInstalmentUncheckedCreateNestedManyWithoutPlanInput = {
  create?: Prisma.XOR<Prisma.PaymentInstalmentCreateWithoutPlanInput, Prisma.PaymentInstalmentUncheckedCreateWithoutPlanInput> | Prisma.PaymentInstalmentCreateWithoutPlanInput[] | Prisma.PaymentInstalmentUncheckedCreateWithoutPlanInput[]
  connectOrCreate?: Prisma.PaymentInstalmentCreateOrConnectWithoutPlanInput | Prisma.PaymentInstalmentCreateOrConnectWithoutPlanInput[]
  createMany?: Prisma.PaymentInstalmentCreateManyPlanInputEnvelope
  connect?: Prisma.PaymentInstalmentWhereUniqueInput | Prisma.PaymentInstalmentWhereUniqueInput[]
}

export type PaymentInstalmentUpdateManyWithoutPlanNestedInput = {
  create?: Prisma.XOR<Prisma.PaymentInstalmentCreateWithoutPlanInput, Prisma.PaymentInstalmentUncheckedCreateWithoutPlanInput> | Prisma.PaymentInstalmentCreateWithoutPlanInput[] | Prisma.PaymentInstalmentUncheckedCreateWithoutPlanInput[]
  connectOrCreate?: Prisma.PaymentInstalmentCreateOrConnectWithoutPlanInput | Prisma.PaymentInstalmentCreateOrConnectWithoutPlanInput[]
  upsert?: Prisma.PaymentInstalmentUpsertWithWhereUniqueWithoutPlanInput | Prisma.PaymentInstalmentUpsertWithWhereUniqueWithoutPlanInput[]
  createMany?: Prisma.PaymentInstalmentCreateManyPlanInputEnvelope
  set?: Prisma.PaymentInstalmentWhereUniqueInput | Prisma.PaymentInstalmentWhereUniqueInput[]
  disconnect?: Prisma.PaymentInstalmentWhereUniqueInput | Prisma.PaymentInstalmentWhereUniqueInput[]
  delete?: Prisma.PaymentInstalmentWhereUniqueInput | Prisma.PaymentInstalmentWhereUniqueInput[]
  connect?: Prisma.PaymentInstalmentWhereUniqueInput | Prisma.PaymentInstalmentWhereUniqueInput[]
  update?: Prisma.PaymentInstalmentUpdateWithWhereUniqueWithoutPlanInput | Prisma.PaymentInstalmentUpdateWithWhereUniqueWithoutPlanInput[]
  updateMany?: Prisma.PaymentInstalmentUpdateManyWithWhereWithoutPlanInput | Prisma.PaymentInstalmentUpdateManyWithWhereWithoutPlanInput[]
  deleteMany?: Prisma.PaymentInstalmentScalarWhereInput | Prisma.PaymentInstalmentScalarWhereInput[]
}

export type PaymentInstalmentUncheckedUpdateManyWithoutPlanNestedInput = {
  create?: Prisma.XOR<Prisma.PaymentInstalmentCreateWithoutPlanInput, Prisma.PaymentInstalmentUncheckedCreateWithoutPlanInput> | Prisma.PaymentInstalmentCreateWithoutPlanInput[] | Prisma.PaymentInstalmentUncheckedCreateWithoutPlanInput[]
  connectOrCreate?: Prisma.PaymentInstalmentCreateOrConnectWithoutPlanInput | Prisma.PaymentInstalmentCreateOrConnectWithoutPlanInput[]
  upsert?: Prisma.PaymentInstalmentUpsertWithWhereUniqueWithoutPlanInput | Prisma.PaymentInstalmentUpsertWithWhereUniqueWithoutPlanInput[]
  createMany?: Prisma.PaymentInstalmentCreateManyPlanInputEnvelope
  set?: Prisma.PaymentInstalmentWhereUniqueInput | Prisma.PaymentInstalmentWhereUniqueInput[]
  disconnect?: Prisma.PaymentInstalmentWhereUniqueInput | Prisma.PaymentInstalmentWhereUniqueInput[]
  delete?: Prisma.PaymentInstalmentWhereUniqueInput | Prisma.PaymentInstalmentWhereUniqueInput[]
  connect?: Prisma.PaymentInstalmentWhereUniqueInput | Prisma.PaymentInstalmentWhereUniqueInput[]
  update?: Prisma.PaymentInstalmentUpdateWithWhereUniqueWithoutPlanInput | Prisma.PaymentInstalmentUpdateWithWhereUniqueWithoutPlanInput[]
  updateMany?: Prisma.PaymentInstalmentUpdateManyWithWhereWithoutPlanInput | Prisma.PaymentInstalmentUpdateManyWithWhereWithoutPlanInput[]
  deleteMany?: Prisma.PaymentInstalmentScalarWhereInput | Prisma.PaymentInstalmentScalarWhereInput[]
}

export type PaymentInstalmentCreateNestedManyWithoutPaymentInput = {
  create?: Prisma.XOR<Prisma.PaymentInstalmentCreateWithoutPaymentInput, Prisma.PaymentInstalmentUncheckedCreateWithoutPaymentInput> | Prisma.PaymentInstalmentCreateWithoutPaymentInput[] | Prisma.PaymentInstalmentUncheckedCreateWithoutPaymentInput[]
  connectOrCreate?: Prisma.PaymentInstalmentCreateOrConnectWithoutPaymentInput | Prisma.PaymentInstalmentCreateOrConnectWithoutPaymentInput[]
  createMany?: Prisma.PaymentInstalmentCreateManyPaymentInputEnvelope
  connect?: Prisma.PaymentInstalmentWhereUniqueInput | Prisma.PaymentInstalmentWhereUniqueInput[]
}

export type PaymentInstalmentUncheckedCreateNestedManyWithoutPaymentInput = {
  create?: Prisma.XOR<Prisma.PaymentInstalmentCreateWithoutPaymentInput, Prisma.PaymentInstalmentUncheckedCreateWithoutPaymentInput> | Prisma.PaymentInstalmentCreateWithoutPaymentInput[] | Prisma.PaymentInstalmentUncheckedCreateWithoutPaymentInput[]
  connectOrCreate?: Prisma.PaymentInstalmentCreateOrConnectWithoutPaymentInput | Prisma.PaymentInstalmentCreateOrConnectWithoutPaymentInput[]
  createMany?: Prisma.PaymentInstalmentCreateManyPaymentInputEnvelope
  connect?: Prisma.PaymentInstalmentWhereUniqueInput | Prisma.PaymentInstalmentWhereUniqueInput[]
}

export type PaymentInstalmentUpdateManyWithoutPaymentNestedInput = {
  create?: Prisma.XOR<Prisma.PaymentInstalmentCreateWithoutPaymentInput, Prisma.PaymentInstalmentUncheckedCreateWithoutPaymentInput> | Prisma.PaymentInstalmentCreateWithoutPaymentInput[] | Prisma.PaymentInstalmentUncheckedCreateWithoutPaymentInput[]
  connectOrCreate?: Prisma.PaymentInstalmentCreateOrConnectWithoutPaymentInput | Prisma.PaymentInstalmentCreateOrConnectWithoutPaymentInput[]
  upsert?: Prisma.PaymentInstalmentUpsertWithWhereUniqueWithoutPaymentInput | Prisma.PaymentInstalmentUpsertWithWhereUniqueWithoutPaymentInput[]
  createMany?: Prisma.PaymentInstalmentCreateManyPaymentInputEnvelope
  set?: Prisma.PaymentInstalmentWhereUniqueInput | Prisma.PaymentInstalmentWhereUniqueInput[]
  disconnect?: Prisma.PaymentInstalmentWhereUniqueInput | Prisma.PaymentInstalmentWhereUniqueInput[]
  delete?: Prisma.PaymentInstalmentWhereUniqueInput | Prisma.PaymentInstalmentWhereUniqueInput[]
  connect?: Prisma.PaymentInstalmentWhereUniqueInput | Prisma.PaymentInstalmentWhereUniqueInput[]
  update?: Prisma.PaymentInstalmentUpdateWithWhereUniqueWithoutPaymentInput | Prisma.PaymentInstalmentUpdateWithWhereUniqueWithoutPaymentInput[]
  updateMany?: Prisma.PaymentInstalmentUpdateManyWithWhereWithoutPaymentInput | Prisma.PaymentInstalmentUpdateManyWithWhereWithoutPaymentInput[]
  deleteMany?: Prisma.PaymentInstalmentScalarWhereInput | Prisma.PaymentInstalmentScalarWhereInput[]
}

export type PaymentInstalmentUncheckedUpdateManyWithoutPaymentNestedInput = {
  create?: Prisma.XOR<Prisma.PaymentInstalmentCreateWithoutPaymentInput, Prisma.PaymentInstalmentUncheckedCreateWithoutPaymentInput> | Prisma.PaymentInstalmentCreateWithoutPaymentInput[] | Prisma.PaymentInstalmentUncheckedCreateWithoutPaymentInput[]
  connectOrCreate?: Prisma.PaymentInstalmentCreateOrConnectWithoutPaymentInput | Prisma.PaymentInstalmentCreateOrConnectWithoutPaymentInput[]
  upsert?: Prisma.PaymentInstalmentUpsertWithWhereUniqueWithoutPaymentInput | Prisma.PaymentInstalmentUpsertWithWhereUniqueWithoutPaymentInput[]
  createMany?: Prisma.PaymentInstalmentCreateManyPaymentInputEnvelope
  set?: Prisma.PaymentInstalmentWhereUniqueInput | Prisma.PaymentInstalmentWhereUniqueInput[]
  disconnect?: Prisma.PaymentInstalmentWhereUniqueInput | Prisma.PaymentInstalmentWhereUniqueInput[]
  delete?: Prisma.PaymentInstalmentWhereUniqueInput | Prisma.PaymentInstalmentWhereUniqueInput[]
  connect?: Prisma.PaymentInstalmentWhereUniqueInput | Prisma.PaymentInstalmentWhereUniqueInput[]
  update?: Prisma.PaymentInstalmentUpdateWithWhereUniqueWithoutPaymentInput | Prisma.PaymentInstalmentUpdateWithWhereUniqueWithoutPaymentInput[]
  updateMany?: Prisma.PaymentInstalmentUpdateManyWithWhereWithoutPaymentInput | Prisma.PaymentInstalmentUpdateManyWithWhereWithoutPaymentInput[]
  deleteMany?: Prisma.PaymentInstalmentScalarWhereInput | Prisma.PaymentInstalmentScalarWhereInput[]
}

export type PaymentInstalmentCreateWithoutPlanInput = {
  id?: string
  instalmentNumber: number
  amountDue: number
  amountPaid: number
  createdAt?: Date | string
  updatedAt?: Date | string
  payment: Prisma.PaymentCreateNestedOneWithoutInstalmentsInput
}

export type PaymentInstalmentUncheckedCreateWithoutPlanInput = {
  id?: string
  paymentId: string
  instalmentNumber: number
  amountDue: number
  amountPaid: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PaymentInstalmentCreateOrConnectWithoutPlanInput = {
  where: Prisma.PaymentInstalmentWhereUniqueInput
  create: Prisma.XOR<Prisma.PaymentInstalmentCreateWithoutPlanInput, Prisma.PaymentInstalmentUncheckedCreateWithoutPlanInput>
}

export type PaymentInstalmentCreateManyPlanInputEnvelope = {
  data: Prisma.PaymentInstalmentCreateManyPlanInput | Prisma.PaymentInstalmentCreateManyPlanInput[]
  skipDuplicates?: boolean
}

export type PaymentInstalmentUpsertWithWhereUniqueWithoutPlanInput = {
  where: Prisma.PaymentInstalmentWhereUniqueInput
  update: Prisma.XOR<Prisma.PaymentInstalmentUpdateWithoutPlanInput, Prisma.PaymentInstalmentUncheckedUpdateWithoutPlanInput>
  create: Prisma.XOR<Prisma.PaymentInstalmentCreateWithoutPlanInput, Prisma.PaymentInstalmentUncheckedCreateWithoutPlanInput>
}

export type PaymentInstalmentUpdateWithWhereUniqueWithoutPlanInput = {
  where: Prisma.PaymentInstalmentWhereUniqueInput
  data: Prisma.XOR<Prisma.PaymentInstalmentUpdateWithoutPlanInput, Prisma.PaymentInstalmentUncheckedUpdateWithoutPlanInput>
}

export type PaymentInstalmentUpdateManyWithWhereWithoutPlanInput = {
  where: Prisma.PaymentInstalmentScalarWhereInput
  data: Prisma.XOR<Prisma.PaymentInstalmentUpdateManyMutationInput, Prisma.PaymentInstalmentUncheckedUpdateManyWithoutPlanInput>
}

export type PaymentInstalmentScalarWhereInput = {
  AND?: Prisma.PaymentInstalmentScalarWhereInput | Prisma.PaymentInstalmentScalarWhereInput[]
  OR?: Prisma.PaymentInstalmentScalarWhereInput[]
  NOT?: Prisma.PaymentInstalmentScalarWhereInput | Prisma.PaymentInstalmentScalarWhereInput[]
  id?: Prisma.UuidFilter<"PaymentInstalment"> | string
  paymentId?: Prisma.UuidFilter<"PaymentInstalment"> | string
  planId?: Prisma.UuidFilter<"PaymentInstalment"> | string
  instalmentNumber?: Prisma.IntFilter<"PaymentInstalment"> | number
  amountDue?: Prisma.IntFilter<"PaymentInstalment"> | number
  amountPaid?: Prisma.IntFilter<"PaymentInstalment"> | number
  createdAt?: Prisma.DateTimeFilter<"PaymentInstalment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PaymentInstalment"> | Date | string
}

export type PaymentInstalmentCreateWithoutPaymentInput = {
  id?: string
  instalmentNumber: number
  amountDue: number
  amountPaid: number
  createdAt?: Date | string
  updatedAt?: Date | string
  plan: Prisma.PaymentPlanCreateNestedOneWithoutInstalmentsInput
}

export type PaymentInstalmentUncheckedCreateWithoutPaymentInput = {
  id?: string
  planId: string
  instalmentNumber: number
  amountDue: number
  amountPaid: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PaymentInstalmentCreateOrConnectWithoutPaymentInput = {
  where: Prisma.PaymentInstalmentWhereUniqueInput
  create: Prisma.XOR<Prisma.PaymentInstalmentCreateWithoutPaymentInput, Prisma.PaymentInstalmentUncheckedCreateWithoutPaymentInput>
}

export type PaymentInstalmentCreateManyPaymentInputEnvelope = {
  data: Prisma.PaymentInstalmentCreateManyPaymentInput | Prisma.PaymentInstalmentCreateManyPaymentInput[]
  skipDuplicates?: boolean
}

export type PaymentInstalmentUpsertWithWhereUniqueWithoutPaymentInput = {
  where: Prisma.PaymentInstalmentWhereUniqueInput
  update: Prisma.XOR<Prisma.PaymentInstalmentUpdateWithoutPaymentInput, Prisma.PaymentInstalmentUncheckedUpdateWithoutPaymentInput>
  create: Prisma.XOR<Prisma.PaymentInstalmentCreateWithoutPaymentInput, Prisma.PaymentInstalmentUncheckedCreateWithoutPaymentInput>
}

export type PaymentInstalmentUpdateWithWhereUniqueWithoutPaymentInput = {
  where: Prisma.PaymentInstalmentWhereUniqueInput
  data: Prisma.XOR<Prisma.PaymentInstalmentUpdateWithoutPaymentInput, Prisma.PaymentInstalmentUncheckedUpdateWithoutPaymentInput>
}

export type PaymentInstalmentUpdateManyWithWhereWithoutPaymentInput = {
  where: Prisma.PaymentInstalmentScalarWhereInput
  data: Prisma.XOR<Prisma.PaymentInstalmentUpdateManyMutationInput, Prisma.PaymentInstalmentUncheckedUpdateManyWithoutPaymentInput>
}

export type PaymentInstalmentCreateManyPlanInput = {
  id?: string
  paymentId: string
  instalmentNumber: number
  amountDue: number
  amountPaid: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PaymentInstalmentUpdateWithoutPlanInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  instalmentNumber?: Prisma.IntFieldUpdateOperationsInput | number
  amountDue?: Prisma.IntFieldUpdateOperationsInput | number
  amountPaid?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  payment?: Prisma.PaymentUpdateOneRequiredWithoutInstalmentsNestedInput
}

export type PaymentInstalmentUncheckedUpdateWithoutPlanInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  paymentId?: Prisma.StringFieldUpdateOperationsInput | string
  instalmentNumber?: Prisma.IntFieldUpdateOperationsInput | number
  amountDue?: Prisma.IntFieldUpdateOperationsInput | number
  amountPaid?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentInstalmentUncheckedUpdateManyWithoutPlanInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  paymentId?: Prisma.StringFieldUpdateOperationsInput | string
  instalmentNumber?: Prisma.IntFieldUpdateOperationsInput | number
  amountDue?: Prisma.IntFieldUpdateOperationsInput | number
  amountPaid?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentInstalmentCreateManyPaymentInput = {
  id?: string
  planId: string
  instalmentNumber: number
  amountDue: number
  amountPaid: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PaymentInstalmentUpdateWithoutPaymentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  instalmentNumber?: Prisma.IntFieldUpdateOperationsInput | number
  amountDue?: Prisma.IntFieldUpdateOperationsInput | number
  amountPaid?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  plan?: Prisma.PaymentPlanUpdateOneRequiredWithoutInstalmentsNestedInput
}

export type PaymentInstalmentUncheckedUpdateWithoutPaymentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  planId?: Prisma.StringFieldUpdateOperationsInput | string
  instalmentNumber?: Prisma.IntFieldUpdateOperationsInput | number
  amountDue?: Prisma.IntFieldUpdateOperationsInput | number
  amountPaid?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentInstalmentUncheckedUpdateManyWithoutPaymentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  planId?: Prisma.StringFieldUpdateOperationsInput | string
  instalmentNumber?: Prisma.IntFieldUpdateOperationsInput | number
  amountDue?: Prisma.IntFieldUpdateOperationsInput | number
  amountPaid?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PaymentInstalmentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  paymentId?: boolean
  planId?: boolean
  instalmentNumber?: boolean
  amountDue?: boolean
  amountPaid?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>
  plan?: boolean | Prisma.PaymentPlanDefaultArgs<ExtArgs>
}, ExtArgs["result"]["paymentInstalment"]>

export type PaymentInstalmentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  paymentId?: boolean
  planId?: boolean
  instalmentNumber?: boolean
  amountDue?: boolean
  amountPaid?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>
  plan?: boolean | Prisma.PaymentPlanDefaultArgs<ExtArgs>
}, ExtArgs["result"]["paymentInstalment"]>

export type PaymentInstalmentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  paymentId?: boolean
  planId?: boolean
  instalmentNumber?: boolean
  amountDue?: boolean
  amountPaid?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>
  plan?: boolean | Prisma.PaymentPlanDefaultArgs<ExtArgs>
}, ExtArgs["result"]["paymentInstalment"]>

export type PaymentInstalmentSelectScalar = {
  id?: boolean
  paymentId?: boolean
  planId?: boolean
  instalmentNumber?: boolean
  amountDue?: boolean
  amountPaid?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PaymentInstalmentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "paymentId" | "planId" | "instalmentNumber" | "amountDue" | "amountPaid" | "createdAt" | "updatedAt", ExtArgs["result"]["paymentInstalment"]>
export type PaymentInstalmentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>
  plan?: boolean | Prisma.PaymentPlanDefaultArgs<ExtArgs>
}
export type PaymentInstalmentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>
  plan?: boolean | Prisma.PaymentPlanDefaultArgs<ExtArgs>
}
export type PaymentInstalmentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>
  plan?: boolean | Prisma.PaymentPlanDefaultArgs<ExtArgs>
}

export type $PaymentInstalmentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PaymentInstalment"
  objects: {
    payment: Prisma.$PaymentPayload<ExtArgs>
    plan: Prisma.$PaymentPlanPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    paymentId: string
    planId: string
    instalmentNumber: number
    amountDue: number
    amountPaid: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["paymentInstalment"]>
  composites: {}
}

export type PaymentInstalmentGetPayload<S extends boolean | null | undefined | PaymentInstalmentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PaymentInstalmentPayload, S>

export type PaymentInstalmentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PaymentInstalmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PaymentInstalmentCountAggregateInputType | true
  }

export interface PaymentInstalmentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentInstalment'], meta: { name: 'PaymentInstalment' } }
  /**
   * Find zero or one PaymentInstalment that matches the filter.
   * @param {PaymentInstalmentFindUniqueArgs} args - Arguments to find a PaymentInstalment
   * @example
   * // Get one PaymentInstalment
   * const paymentInstalment = await prisma.paymentInstalment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PaymentInstalmentFindUniqueArgs>(args: Prisma.SelectSubset<T, PaymentInstalmentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PaymentInstalmentClient<runtime.Types.Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PaymentInstalment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PaymentInstalmentFindUniqueOrThrowArgs} args - Arguments to find a PaymentInstalment
   * @example
   * // Get one PaymentInstalment
   * const paymentInstalment = await prisma.paymentInstalment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PaymentInstalmentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PaymentInstalmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PaymentInstalmentClient<runtime.Types.Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PaymentInstalment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentInstalmentFindFirstArgs} args - Arguments to find a PaymentInstalment
   * @example
   * // Get one PaymentInstalment
   * const paymentInstalment = await prisma.paymentInstalment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PaymentInstalmentFindFirstArgs>(args?: Prisma.SelectSubset<T, PaymentInstalmentFindFirstArgs<ExtArgs>>): Prisma.Prisma__PaymentInstalmentClient<runtime.Types.Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PaymentInstalment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentInstalmentFindFirstOrThrowArgs} args - Arguments to find a PaymentInstalment
   * @example
   * // Get one PaymentInstalment
   * const paymentInstalment = await prisma.paymentInstalment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PaymentInstalmentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PaymentInstalmentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PaymentInstalmentClient<runtime.Types.Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PaymentInstalments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentInstalmentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PaymentInstalments
   * const paymentInstalments = await prisma.paymentInstalment.findMany()
   * 
   * // Get first 10 PaymentInstalments
   * const paymentInstalments = await prisma.paymentInstalment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const paymentInstalmentWithIdOnly = await prisma.paymentInstalment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PaymentInstalmentFindManyArgs>(args?: Prisma.SelectSubset<T, PaymentInstalmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PaymentInstalment.
   * @param {PaymentInstalmentCreateArgs} args - Arguments to create a PaymentInstalment.
   * @example
   * // Create one PaymentInstalment
   * const PaymentInstalment = await prisma.paymentInstalment.create({
   *   data: {
   *     // ... data to create a PaymentInstalment
   *   }
   * })
   * 
   */
  create<T extends PaymentInstalmentCreateArgs>(args: Prisma.SelectSubset<T, PaymentInstalmentCreateArgs<ExtArgs>>): Prisma.Prisma__PaymentInstalmentClient<runtime.Types.Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PaymentInstalments.
   * @param {PaymentInstalmentCreateManyArgs} args - Arguments to create many PaymentInstalments.
   * @example
   * // Create many PaymentInstalments
   * const paymentInstalment = await prisma.paymentInstalment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PaymentInstalmentCreateManyArgs>(args?: Prisma.SelectSubset<T, PaymentInstalmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PaymentInstalments and returns the data saved in the database.
   * @param {PaymentInstalmentCreateManyAndReturnArgs} args - Arguments to create many PaymentInstalments.
   * @example
   * // Create many PaymentInstalments
   * const paymentInstalment = await prisma.paymentInstalment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PaymentInstalments and only return the `id`
   * const paymentInstalmentWithIdOnly = await prisma.paymentInstalment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PaymentInstalmentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PaymentInstalmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PaymentInstalment.
   * @param {PaymentInstalmentDeleteArgs} args - Arguments to delete one PaymentInstalment.
   * @example
   * // Delete one PaymentInstalment
   * const PaymentInstalment = await prisma.paymentInstalment.delete({
   *   where: {
   *     // ... filter to delete one PaymentInstalment
   *   }
   * })
   * 
   */
  delete<T extends PaymentInstalmentDeleteArgs>(args: Prisma.SelectSubset<T, PaymentInstalmentDeleteArgs<ExtArgs>>): Prisma.Prisma__PaymentInstalmentClient<runtime.Types.Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PaymentInstalment.
   * @param {PaymentInstalmentUpdateArgs} args - Arguments to update one PaymentInstalment.
   * @example
   * // Update one PaymentInstalment
   * const paymentInstalment = await prisma.paymentInstalment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PaymentInstalmentUpdateArgs>(args: Prisma.SelectSubset<T, PaymentInstalmentUpdateArgs<ExtArgs>>): Prisma.Prisma__PaymentInstalmentClient<runtime.Types.Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PaymentInstalments.
   * @param {PaymentInstalmentDeleteManyArgs} args - Arguments to filter PaymentInstalments to delete.
   * @example
   * // Delete a few PaymentInstalments
   * const { count } = await prisma.paymentInstalment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PaymentInstalmentDeleteManyArgs>(args?: Prisma.SelectSubset<T, PaymentInstalmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PaymentInstalments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentInstalmentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PaymentInstalments
   * const paymentInstalment = await prisma.paymentInstalment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PaymentInstalmentUpdateManyArgs>(args: Prisma.SelectSubset<T, PaymentInstalmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PaymentInstalments and returns the data updated in the database.
   * @param {PaymentInstalmentUpdateManyAndReturnArgs} args - Arguments to update many PaymentInstalments.
   * @example
   * // Update many PaymentInstalments
   * const paymentInstalment = await prisma.paymentInstalment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PaymentInstalments and only return the `id`
   * const paymentInstalmentWithIdOnly = await prisma.paymentInstalment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PaymentInstalmentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PaymentInstalmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PaymentInstalment.
   * @param {PaymentInstalmentUpsertArgs} args - Arguments to update or create a PaymentInstalment.
   * @example
   * // Update or create a PaymentInstalment
   * const paymentInstalment = await prisma.paymentInstalment.upsert({
   *   create: {
   *     // ... data to create a PaymentInstalment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PaymentInstalment we want to update
   *   }
   * })
   */
  upsert<T extends PaymentInstalmentUpsertArgs>(args: Prisma.SelectSubset<T, PaymentInstalmentUpsertArgs<ExtArgs>>): Prisma.Prisma__PaymentInstalmentClient<runtime.Types.Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PaymentInstalments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentInstalmentCountArgs} args - Arguments to filter PaymentInstalments to count.
   * @example
   * // Count the number of PaymentInstalments
   * const count = await prisma.paymentInstalment.count({
   *   where: {
   *     // ... the filter for the PaymentInstalments we want to count
   *   }
   * })
  **/
  count<T extends PaymentInstalmentCountArgs>(
    args?: Prisma.Subset<T, PaymentInstalmentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PaymentInstalmentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PaymentInstalment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentInstalmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PaymentInstalmentAggregateArgs>(args: Prisma.Subset<T, PaymentInstalmentAggregateArgs>): Prisma.PrismaPromise<GetPaymentInstalmentAggregateType<T>>

  /**
   * Group by PaymentInstalment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentInstalmentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PaymentInstalmentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PaymentInstalmentGroupByArgs['orderBy'] }
      : { orderBy?: PaymentInstalmentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PaymentInstalmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentInstalmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PaymentInstalment model
 */
readonly fields: PaymentInstalmentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PaymentInstalment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PaymentInstalmentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  payment<T extends Prisma.PaymentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PaymentDefaultArgs<ExtArgs>>): Prisma.Prisma__PaymentClient<runtime.Types.Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  plan<T extends Prisma.PaymentPlanDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PaymentPlanDefaultArgs<ExtArgs>>): Prisma.Prisma__PaymentPlanClient<runtime.Types.Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PaymentInstalment model
 */
export interface PaymentInstalmentFieldRefs {
  readonly id: Prisma.FieldRef<"PaymentInstalment", 'String'>
  readonly paymentId: Prisma.FieldRef<"PaymentInstalment", 'String'>
  readonly planId: Prisma.FieldRef<"PaymentInstalment", 'String'>
  readonly instalmentNumber: Prisma.FieldRef<"PaymentInstalment", 'Int'>
  readonly amountDue: Prisma.FieldRef<"PaymentInstalment", 'Int'>
  readonly amountPaid: Prisma.FieldRef<"PaymentInstalment", 'Int'>
  readonly createdAt: Prisma.FieldRef<"PaymentInstalment", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PaymentInstalment", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PaymentInstalment findUnique
 */
export type PaymentInstalmentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentInstalment
   */
  select?: Prisma.PaymentInstalmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentInstalment
   */
  omit?: Prisma.PaymentInstalmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentInstalmentInclude<ExtArgs> | null
  /**
   * Filter, which PaymentInstalment to fetch.
   */
  where: Prisma.PaymentInstalmentWhereUniqueInput
}

/**
 * PaymentInstalment findUniqueOrThrow
 */
export type PaymentInstalmentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentInstalment
   */
  select?: Prisma.PaymentInstalmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentInstalment
   */
  omit?: Prisma.PaymentInstalmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentInstalmentInclude<ExtArgs> | null
  /**
   * Filter, which PaymentInstalment to fetch.
   */
  where: Prisma.PaymentInstalmentWhereUniqueInput
}

/**
 * PaymentInstalment findFirst
 */
export type PaymentInstalmentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentInstalment
   */
  select?: Prisma.PaymentInstalmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentInstalment
   */
  omit?: Prisma.PaymentInstalmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentInstalmentInclude<ExtArgs> | null
  /**
   * Filter, which PaymentInstalment to fetch.
   */
  where?: Prisma.PaymentInstalmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentInstalments to fetch.
   */
  orderBy?: Prisma.PaymentInstalmentOrderByWithRelationInput | Prisma.PaymentInstalmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PaymentInstalments.
   */
  cursor?: Prisma.PaymentInstalmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentInstalments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentInstalments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PaymentInstalments.
   */
  distinct?: Prisma.PaymentInstalmentScalarFieldEnum | Prisma.PaymentInstalmentScalarFieldEnum[]
}

/**
 * PaymentInstalment findFirstOrThrow
 */
export type PaymentInstalmentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentInstalment
   */
  select?: Prisma.PaymentInstalmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentInstalment
   */
  omit?: Prisma.PaymentInstalmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentInstalmentInclude<ExtArgs> | null
  /**
   * Filter, which PaymentInstalment to fetch.
   */
  where?: Prisma.PaymentInstalmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentInstalments to fetch.
   */
  orderBy?: Prisma.PaymentInstalmentOrderByWithRelationInput | Prisma.PaymentInstalmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PaymentInstalments.
   */
  cursor?: Prisma.PaymentInstalmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentInstalments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentInstalments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PaymentInstalments.
   */
  distinct?: Prisma.PaymentInstalmentScalarFieldEnum | Prisma.PaymentInstalmentScalarFieldEnum[]
}

/**
 * PaymentInstalment findMany
 */
export type PaymentInstalmentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentInstalment
   */
  select?: Prisma.PaymentInstalmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentInstalment
   */
  omit?: Prisma.PaymentInstalmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentInstalmentInclude<ExtArgs> | null
  /**
   * Filter, which PaymentInstalments to fetch.
   */
  where?: Prisma.PaymentInstalmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentInstalments to fetch.
   */
  orderBy?: Prisma.PaymentInstalmentOrderByWithRelationInput | Prisma.PaymentInstalmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PaymentInstalments.
   */
  cursor?: Prisma.PaymentInstalmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentInstalments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentInstalments.
   */
  skip?: number
  distinct?: Prisma.PaymentInstalmentScalarFieldEnum | Prisma.PaymentInstalmentScalarFieldEnum[]
}

/**
 * PaymentInstalment create
 */
export type PaymentInstalmentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentInstalment
   */
  select?: Prisma.PaymentInstalmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentInstalment
   */
  omit?: Prisma.PaymentInstalmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentInstalmentInclude<ExtArgs> | null
  /**
   * The data needed to create a PaymentInstalment.
   */
  data: Prisma.XOR<Prisma.PaymentInstalmentCreateInput, Prisma.PaymentInstalmentUncheckedCreateInput>
}

/**
 * PaymentInstalment createMany
 */
export type PaymentInstalmentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PaymentInstalments.
   */
  data: Prisma.PaymentInstalmentCreateManyInput | Prisma.PaymentInstalmentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PaymentInstalment createManyAndReturn
 */
export type PaymentInstalmentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentInstalment
   */
  select?: Prisma.PaymentInstalmentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentInstalment
   */
  omit?: Prisma.PaymentInstalmentOmit<ExtArgs> | null
  /**
   * The data used to create many PaymentInstalments.
   */
  data: Prisma.PaymentInstalmentCreateManyInput | Prisma.PaymentInstalmentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentInstalmentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PaymentInstalment update
 */
export type PaymentInstalmentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentInstalment
   */
  select?: Prisma.PaymentInstalmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentInstalment
   */
  omit?: Prisma.PaymentInstalmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentInstalmentInclude<ExtArgs> | null
  /**
   * The data needed to update a PaymentInstalment.
   */
  data: Prisma.XOR<Prisma.PaymentInstalmentUpdateInput, Prisma.PaymentInstalmentUncheckedUpdateInput>
  /**
   * Choose, which PaymentInstalment to update.
   */
  where: Prisma.PaymentInstalmentWhereUniqueInput
}

/**
 * PaymentInstalment updateMany
 */
export type PaymentInstalmentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PaymentInstalments.
   */
  data: Prisma.XOR<Prisma.PaymentInstalmentUpdateManyMutationInput, Prisma.PaymentInstalmentUncheckedUpdateManyInput>
  /**
   * Filter which PaymentInstalments to update
   */
  where?: Prisma.PaymentInstalmentWhereInput
  /**
   * Limit how many PaymentInstalments to update.
   */
  limit?: number
}

/**
 * PaymentInstalment updateManyAndReturn
 */
export type PaymentInstalmentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentInstalment
   */
  select?: Prisma.PaymentInstalmentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentInstalment
   */
  omit?: Prisma.PaymentInstalmentOmit<ExtArgs> | null
  /**
   * The data used to update PaymentInstalments.
   */
  data: Prisma.XOR<Prisma.PaymentInstalmentUpdateManyMutationInput, Prisma.PaymentInstalmentUncheckedUpdateManyInput>
  /**
   * Filter which PaymentInstalments to update
   */
  where?: Prisma.PaymentInstalmentWhereInput
  /**
   * Limit how many PaymentInstalments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentInstalmentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PaymentInstalment upsert
 */
export type PaymentInstalmentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentInstalment
   */
  select?: Prisma.PaymentInstalmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentInstalment
   */
  omit?: Prisma.PaymentInstalmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentInstalmentInclude<ExtArgs> | null
  /**
   * The filter to search for the PaymentInstalment to update in case it exists.
   */
  where: Prisma.PaymentInstalmentWhereUniqueInput
  /**
   * In case the PaymentInstalment found by the `where` argument doesn't exist, create a new PaymentInstalment with this data.
   */
  create: Prisma.XOR<Prisma.PaymentInstalmentCreateInput, Prisma.PaymentInstalmentUncheckedCreateInput>
  /**
   * In case the PaymentInstalment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PaymentInstalmentUpdateInput, Prisma.PaymentInstalmentUncheckedUpdateInput>
}

/**
 * PaymentInstalment delete
 */
export type PaymentInstalmentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentInstalment
   */
  select?: Prisma.PaymentInstalmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentInstalment
   */
  omit?: Prisma.PaymentInstalmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentInstalmentInclude<ExtArgs> | null
  /**
   * Filter which PaymentInstalment to delete.
   */
  where: Prisma.PaymentInstalmentWhereUniqueInput
}

/**
 * PaymentInstalment deleteMany
 */
export type PaymentInstalmentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PaymentInstalments to delete
   */
  where?: Prisma.PaymentInstalmentWhereInput
  /**
   * Limit how many PaymentInstalments to delete.
   */
  limit?: number
}

/**
 * PaymentInstalment without action
 */
export type PaymentInstalmentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentInstalment
   */
  select?: Prisma.PaymentInstalmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentInstalment
   */
  omit?: Prisma.PaymentInstalmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentInstalmentInclude<ExtArgs> | null
}
