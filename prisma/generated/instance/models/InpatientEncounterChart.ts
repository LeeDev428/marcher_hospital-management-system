
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `InpatientEncounterChart` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model InpatientEncounterChart
 * 
 */
export type InpatientEncounterChartModel = runtime.Types.Result.DefaultSelection<Prisma.$InpatientEncounterChartPayload>

export type AggregateInpatientEncounterChart = {
  _count: InpatientEncounterChartCountAggregateOutputType | null
  _min: InpatientEncounterChartMinAggregateOutputType | null
  _max: InpatientEncounterChartMaxAggregateOutputType | null
}

export type InpatientEncounterChartMinAggregateOutputType = {
  id: string | null
  encounterId: string | null
  staffId: string | null
  chart: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InpatientEncounterChartMaxAggregateOutputType = {
  id: string | null
  encounterId: string | null
  staffId: string | null
  chart: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InpatientEncounterChartCountAggregateOutputType = {
  id: number
  encounterId: number
  staffId: number
  chart: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type InpatientEncounterChartMinAggregateInputType = {
  id?: true
  encounterId?: true
  staffId?: true
  chart?: true
  createdAt?: true
  updatedAt?: true
}

export type InpatientEncounterChartMaxAggregateInputType = {
  id?: true
  encounterId?: true
  staffId?: true
  chart?: true
  createdAt?: true
  updatedAt?: true
}

export type InpatientEncounterChartCountAggregateInputType = {
  id?: true
  encounterId?: true
  staffId?: true
  chart?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type InpatientEncounterChartAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InpatientEncounterChart to aggregate.
   */
  where?: Prisma.InpatientEncounterChartWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InpatientEncounterCharts to fetch.
   */
  orderBy?: Prisma.InpatientEncounterChartOrderByWithRelationInput | Prisma.InpatientEncounterChartOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.InpatientEncounterChartWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InpatientEncounterCharts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InpatientEncounterCharts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned InpatientEncounterCharts
  **/
  _count?: true | InpatientEncounterChartCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: InpatientEncounterChartMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: InpatientEncounterChartMaxAggregateInputType
}

export type GetInpatientEncounterChartAggregateType<T extends InpatientEncounterChartAggregateArgs> = {
      [P in keyof T & keyof AggregateInpatientEncounterChart]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInpatientEncounterChart[P]>
    : Prisma.GetScalarType<T[P], AggregateInpatientEncounterChart[P]>
}




export type InpatientEncounterChartGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InpatientEncounterChartWhereInput
  orderBy?: Prisma.InpatientEncounterChartOrderByWithAggregationInput | Prisma.InpatientEncounterChartOrderByWithAggregationInput[]
  by: Prisma.InpatientEncounterChartScalarFieldEnum[] | Prisma.InpatientEncounterChartScalarFieldEnum
  having?: Prisma.InpatientEncounterChartScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: InpatientEncounterChartCountAggregateInputType | true
  _min?: InpatientEncounterChartMinAggregateInputType
  _max?: InpatientEncounterChartMaxAggregateInputType
}

export type InpatientEncounterChartGroupByOutputType = {
  id: string
  encounterId: string
  staffId: string
  chart: string
  createdAt: Date
  updatedAt: Date
  _count: InpatientEncounterChartCountAggregateOutputType | null
  _min: InpatientEncounterChartMinAggregateOutputType | null
  _max: InpatientEncounterChartMaxAggregateOutputType | null
}

type GetInpatientEncounterChartGroupByPayload<T extends InpatientEncounterChartGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InpatientEncounterChartGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof InpatientEncounterChartGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InpatientEncounterChartGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InpatientEncounterChartGroupByOutputType[P]>
      }
    >
  >



export type InpatientEncounterChartWhereInput = {
  AND?: Prisma.InpatientEncounterChartWhereInput | Prisma.InpatientEncounterChartWhereInput[]
  OR?: Prisma.InpatientEncounterChartWhereInput[]
  NOT?: Prisma.InpatientEncounterChartWhereInput | Prisma.InpatientEncounterChartWhereInput[]
  id?: Prisma.UuidFilter<"InpatientEncounterChart"> | string
  encounterId?: Prisma.UuidFilter<"InpatientEncounterChart"> | string
  staffId?: Prisma.UuidFilter<"InpatientEncounterChart"> | string
  chart?: Prisma.StringFilter<"InpatientEncounterChart"> | string
  createdAt?: Prisma.DateTimeFilter<"InpatientEncounterChart"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InpatientEncounterChart"> | Date | string
  encounter?: Prisma.XOR<Prisma.InpatientEncounterScalarRelationFilter, Prisma.InpatientEncounterWhereInput>
}

export type InpatientEncounterChartOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  encounterId?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  chart?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  encounter?: Prisma.InpatientEncounterOrderByWithRelationInput
}

export type InpatientEncounterChartWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.InpatientEncounterChartWhereInput | Prisma.InpatientEncounterChartWhereInput[]
  OR?: Prisma.InpatientEncounterChartWhereInput[]
  NOT?: Prisma.InpatientEncounterChartWhereInput | Prisma.InpatientEncounterChartWhereInput[]
  encounterId?: Prisma.UuidFilter<"InpatientEncounterChart"> | string
  staffId?: Prisma.UuidFilter<"InpatientEncounterChart"> | string
  chart?: Prisma.StringFilter<"InpatientEncounterChart"> | string
  createdAt?: Prisma.DateTimeFilter<"InpatientEncounterChart"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InpatientEncounterChart"> | Date | string
  encounter?: Prisma.XOR<Prisma.InpatientEncounterScalarRelationFilter, Prisma.InpatientEncounterWhereInput>
}, "id">

export type InpatientEncounterChartOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  encounterId?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  chart?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.InpatientEncounterChartCountOrderByAggregateInput
  _max?: Prisma.InpatientEncounterChartMaxOrderByAggregateInput
  _min?: Prisma.InpatientEncounterChartMinOrderByAggregateInput
}

export type InpatientEncounterChartScalarWhereWithAggregatesInput = {
  AND?: Prisma.InpatientEncounterChartScalarWhereWithAggregatesInput | Prisma.InpatientEncounterChartScalarWhereWithAggregatesInput[]
  OR?: Prisma.InpatientEncounterChartScalarWhereWithAggregatesInput[]
  NOT?: Prisma.InpatientEncounterChartScalarWhereWithAggregatesInput | Prisma.InpatientEncounterChartScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"InpatientEncounterChart"> | string
  encounterId?: Prisma.UuidWithAggregatesFilter<"InpatientEncounterChart"> | string
  staffId?: Prisma.UuidWithAggregatesFilter<"InpatientEncounterChart"> | string
  chart?: Prisma.StringWithAggregatesFilter<"InpatientEncounterChart"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"InpatientEncounterChart"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"InpatientEncounterChart"> | Date | string
}

export type InpatientEncounterChartCreateInput = {
  id?: string
  staffId: string
  chart: string
  createdAt?: Date | string
  updatedAt?: Date | string
  encounter: Prisma.InpatientEncounterCreateNestedOneWithoutChartsInput
}

export type InpatientEncounterChartUncheckedCreateInput = {
  id?: string
  encounterId: string
  staffId: string
  chart: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InpatientEncounterChartUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
  chart?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  encounter?: Prisma.InpatientEncounterUpdateOneRequiredWithoutChartsNestedInput
}

export type InpatientEncounterChartUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  encounterId?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
  chart?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InpatientEncounterChartCreateManyInput = {
  id?: string
  encounterId: string
  staffId: string
  chart: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InpatientEncounterChartUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
  chart?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InpatientEncounterChartUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  encounterId?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
  chart?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InpatientEncounterChartListRelationFilter = {
  every?: Prisma.InpatientEncounterChartWhereInput
  some?: Prisma.InpatientEncounterChartWhereInput
  none?: Prisma.InpatientEncounterChartWhereInput
}

export type InpatientEncounterChartOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type InpatientEncounterChartCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  encounterId?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  chart?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InpatientEncounterChartMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  encounterId?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  chart?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InpatientEncounterChartMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  encounterId?: Prisma.SortOrder
  staffId?: Prisma.SortOrder
  chart?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InpatientEncounterChartCreateNestedManyWithoutEncounterInput = {
  create?: Prisma.XOR<Prisma.InpatientEncounterChartCreateWithoutEncounterInput, Prisma.InpatientEncounterChartUncheckedCreateWithoutEncounterInput> | Prisma.InpatientEncounterChartCreateWithoutEncounterInput[] | Prisma.InpatientEncounterChartUncheckedCreateWithoutEncounterInput[]
  connectOrCreate?: Prisma.InpatientEncounterChartCreateOrConnectWithoutEncounterInput | Prisma.InpatientEncounterChartCreateOrConnectWithoutEncounterInput[]
  createMany?: Prisma.InpatientEncounterChartCreateManyEncounterInputEnvelope
  connect?: Prisma.InpatientEncounterChartWhereUniqueInput | Prisma.InpatientEncounterChartWhereUniqueInput[]
}

export type InpatientEncounterChartUncheckedCreateNestedManyWithoutEncounterInput = {
  create?: Prisma.XOR<Prisma.InpatientEncounterChartCreateWithoutEncounterInput, Prisma.InpatientEncounterChartUncheckedCreateWithoutEncounterInput> | Prisma.InpatientEncounterChartCreateWithoutEncounterInput[] | Prisma.InpatientEncounterChartUncheckedCreateWithoutEncounterInput[]
  connectOrCreate?: Prisma.InpatientEncounterChartCreateOrConnectWithoutEncounterInput | Prisma.InpatientEncounterChartCreateOrConnectWithoutEncounterInput[]
  createMany?: Prisma.InpatientEncounterChartCreateManyEncounterInputEnvelope
  connect?: Prisma.InpatientEncounterChartWhereUniqueInput | Prisma.InpatientEncounterChartWhereUniqueInput[]
}

export type InpatientEncounterChartUpdateManyWithoutEncounterNestedInput = {
  create?: Prisma.XOR<Prisma.InpatientEncounterChartCreateWithoutEncounterInput, Prisma.InpatientEncounterChartUncheckedCreateWithoutEncounterInput> | Prisma.InpatientEncounterChartCreateWithoutEncounterInput[] | Prisma.InpatientEncounterChartUncheckedCreateWithoutEncounterInput[]
  connectOrCreate?: Prisma.InpatientEncounterChartCreateOrConnectWithoutEncounterInput | Prisma.InpatientEncounterChartCreateOrConnectWithoutEncounterInput[]
  upsert?: Prisma.InpatientEncounterChartUpsertWithWhereUniqueWithoutEncounterInput | Prisma.InpatientEncounterChartUpsertWithWhereUniqueWithoutEncounterInput[]
  createMany?: Prisma.InpatientEncounterChartCreateManyEncounterInputEnvelope
  set?: Prisma.InpatientEncounterChartWhereUniqueInput | Prisma.InpatientEncounterChartWhereUniqueInput[]
  disconnect?: Prisma.InpatientEncounterChartWhereUniqueInput | Prisma.InpatientEncounterChartWhereUniqueInput[]
  delete?: Prisma.InpatientEncounterChartWhereUniqueInput | Prisma.InpatientEncounterChartWhereUniqueInput[]
  connect?: Prisma.InpatientEncounterChartWhereUniqueInput | Prisma.InpatientEncounterChartWhereUniqueInput[]
  update?: Prisma.InpatientEncounterChartUpdateWithWhereUniqueWithoutEncounterInput | Prisma.InpatientEncounterChartUpdateWithWhereUniqueWithoutEncounterInput[]
  updateMany?: Prisma.InpatientEncounterChartUpdateManyWithWhereWithoutEncounterInput | Prisma.InpatientEncounterChartUpdateManyWithWhereWithoutEncounterInput[]
  deleteMany?: Prisma.InpatientEncounterChartScalarWhereInput | Prisma.InpatientEncounterChartScalarWhereInput[]
}

export type InpatientEncounterChartUncheckedUpdateManyWithoutEncounterNestedInput = {
  create?: Prisma.XOR<Prisma.InpatientEncounterChartCreateWithoutEncounterInput, Prisma.InpatientEncounterChartUncheckedCreateWithoutEncounterInput> | Prisma.InpatientEncounterChartCreateWithoutEncounterInput[] | Prisma.InpatientEncounterChartUncheckedCreateWithoutEncounterInput[]
  connectOrCreate?: Prisma.InpatientEncounterChartCreateOrConnectWithoutEncounterInput | Prisma.InpatientEncounterChartCreateOrConnectWithoutEncounterInput[]
  upsert?: Prisma.InpatientEncounterChartUpsertWithWhereUniqueWithoutEncounterInput | Prisma.InpatientEncounterChartUpsertWithWhereUniqueWithoutEncounterInput[]
  createMany?: Prisma.InpatientEncounterChartCreateManyEncounterInputEnvelope
  set?: Prisma.InpatientEncounterChartWhereUniqueInput | Prisma.InpatientEncounterChartWhereUniqueInput[]
  disconnect?: Prisma.InpatientEncounterChartWhereUniqueInput | Prisma.InpatientEncounterChartWhereUniqueInput[]
  delete?: Prisma.InpatientEncounterChartWhereUniqueInput | Prisma.InpatientEncounterChartWhereUniqueInput[]
  connect?: Prisma.InpatientEncounterChartWhereUniqueInput | Prisma.InpatientEncounterChartWhereUniqueInput[]
  update?: Prisma.InpatientEncounterChartUpdateWithWhereUniqueWithoutEncounterInput | Prisma.InpatientEncounterChartUpdateWithWhereUniqueWithoutEncounterInput[]
  updateMany?: Prisma.InpatientEncounterChartUpdateManyWithWhereWithoutEncounterInput | Prisma.InpatientEncounterChartUpdateManyWithWhereWithoutEncounterInput[]
  deleteMany?: Prisma.InpatientEncounterChartScalarWhereInput | Prisma.InpatientEncounterChartScalarWhereInput[]
}

export type InpatientEncounterChartCreateWithoutEncounterInput = {
  id?: string
  staffId: string
  chart: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InpatientEncounterChartUncheckedCreateWithoutEncounterInput = {
  id?: string
  staffId: string
  chart: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InpatientEncounterChartCreateOrConnectWithoutEncounterInput = {
  where: Prisma.InpatientEncounterChartWhereUniqueInput
  create: Prisma.XOR<Prisma.InpatientEncounterChartCreateWithoutEncounterInput, Prisma.InpatientEncounterChartUncheckedCreateWithoutEncounterInput>
}

export type InpatientEncounterChartCreateManyEncounterInputEnvelope = {
  data: Prisma.InpatientEncounterChartCreateManyEncounterInput | Prisma.InpatientEncounterChartCreateManyEncounterInput[]
  skipDuplicates?: boolean
}

export type InpatientEncounterChartUpsertWithWhereUniqueWithoutEncounterInput = {
  where: Prisma.InpatientEncounterChartWhereUniqueInput
  update: Prisma.XOR<Prisma.InpatientEncounterChartUpdateWithoutEncounterInput, Prisma.InpatientEncounterChartUncheckedUpdateWithoutEncounterInput>
  create: Prisma.XOR<Prisma.InpatientEncounterChartCreateWithoutEncounterInput, Prisma.InpatientEncounterChartUncheckedCreateWithoutEncounterInput>
}

export type InpatientEncounterChartUpdateWithWhereUniqueWithoutEncounterInput = {
  where: Prisma.InpatientEncounterChartWhereUniqueInput
  data: Prisma.XOR<Prisma.InpatientEncounterChartUpdateWithoutEncounterInput, Prisma.InpatientEncounterChartUncheckedUpdateWithoutEncounterInput>
}

export type InpatientEncounterChartUpdateManyWithWhereWithoutEncounterInput = {
  where: Prisma.InpatientEncounterChartScalarWhereInput
  data: Prisma.XOR<Prisma.InpatientEncounterChartUpdateManyMutationInput, Prisma.InpatientEncounterChartUncheckedUpdateManyWithoutEncounterInput>
}

export type InpatientEncounterChartScalarWhereInput = {
  AND?: Prisma.InpatientEncounterChartScalarWhereInput | Prisma.InpatientEncounterChartScalarWhereInput[]
  OR?: Prisma.InpatientEncounterChartScalarWhereInput[]
  NOT?: Prisma.InpatientEncounterChartScalarWhereInput | Prisma.InpatientEncounterChartScalarWhereInput[]
  id?: Prisma.UuidFilter<"InpatientEncounterChart"> | string
  encounterId?: Prisma.UuidFilter<"InpatientEncounterChart"> | string
  staffId?: Prisma.UuidFilter<"InpatientEncounterChart"> | string
  chart?: Prisma.StringFilter<"InpatientEncounterChart"> | string
  createdAt?: Prisma.DateTimeFilter<"InpatientEncounterChart"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InpatientEncounterChart"> | Date | string
}

export type InpatientEncounterChartCreateManyEncounterInput = {
  id?: string
  staffId: string
  chart: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InpatientEncounterChartUpdateWithoutEncounterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
  chart?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InpatientEncounterChartUncheckedUpdateWithoutEncounterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
  chart?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InpatientEncounterChartUncheckedUpdateManyWithoutEncounterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  staffId?: Prisma.StringFieldUpdateOperationsInput | string
  chart?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type InpatientEncounterChartSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  encounterId?: boolean
  staffId?: boolean
  chart?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  encounter?: boolean | Prisma.InpatientEncounterDefaultArgs<ExtArgs>
}, ExtArgs["result"]["inpatientEncounterChart"]>

export type InpatientEncounterChartSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  encounterId?: boolean
  staffId?: boolean
  chart?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  encounter?: boolean | Prisma.InpatientEncounterDefaultArgs<ExtArgs>
}, ExtArgs["result"]["inpatientEncounterChart"]>

export type InpatientEncounterChartSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  encounterId?: boolean
  staffId?: boolean
  chart?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  encounter?: boolean | Prisma.InpatientEncounterDefaultArgs<ExtArgs>
}, ExtArgs["result"]["inpatientEncounterChart"]>

export type InpatientEncounterChartSelectScalar = {
  id?: boolean
  encounterId?: boolean
  staffId?: boolean
  chart?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type InpatientEncounterChartOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "encounterId" | "staffId" | "chart" | "createdAt" | "updatedAt", ExtArgs["result"]["inpatientEncounterChart"]>
export type InpatientEncounterChartInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  encounter?: boolean | Prisma.InpatientEncounterDefaultArgs<ExtArgs>
}
export type InpatientEncounterChartIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  encounter?: boolean | Prisma.InpatientEncounterDefaultArgs<ExtArgs>
}
export type InpatientEncounterChartIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  encounter?: boolean | Prisma.InpatientEncounterDefaultArgs<ExtArgs>
}

export type $InpatientEncounterChartPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "InpatientEncounterChart"
  objects: {
    encounter: Prisma.$InpatientEncounterPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    encounterId: string
    staffId: string
    chart: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["inpatientEncounterChart"]>
  composites: {}
}

export type InpatientEncounterChartGetPayload<S extends boolean | null | undefined | InpatientEncounterChartDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$InpatientEncounterChartPayload, S>

export type InpatientEncounterChartCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<InpatientEncounterChartFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: InpatientEncounterChartCountAggregateInputType | true
  }

export interface InpatientEncounterChartDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InpatientEncounterChart'], meta: { name: 'InpatientEncounterChart' } }
  /**
   * Find zero or one InpatientEncounterChart that matches the filter.
   * @param {InpatientEncounterChartFindUniqueArgs} args - Arguments to find a InpatientEncounterChart
   * @example
   * // Get one InpatientEncounterChart
   * const inpatientEncounterChart = await prisma.inpatientEncounterChart.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InpatientEncounterChartFindUniqueArgs>(args: Prisma.SelectSubset<T, InpatientEncounterChartFindUniqueArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterChartClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one InpatientEncounterChart that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InpatientEncounterChartFindUniqueOrThrowArgs} args - Arguments to find a InpatientEncounterChart
   * @example
   * // Get one InpatientEncounterChart
   * const inpatientEncounterChart = await prisma.inpatientEncounterChart.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InpatientEncounterChartFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, InpatientEncounterChartFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterChartClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InpatientEncounterChart that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InpatientEncounterChartFindFirstArgs} args - Arguments to find a InpatientEncounterChart
   * @example
   * // Get one InpatientEncounterChart
   * const inpatientEncounterChart = await prisma.inpatientEncounterChart.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InpatientEncounterChartFindFirstArgs>(args?: Prisma.SelectSubset<T, InpatientEncounterChartFindFirstArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterChartClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InpatientEncounterChart that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InpatientEncounterChartFindFirstOrThrowArgs} args - Arguments to find a InpatientEncounterChart
   * @example
   * // Get one InpatientEncounterChart
   * const inpatientEncounterChart = await prisma.inpatientEncounterChart.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InpatientEncounterChartFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, InpatientEncounterChartFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterChartClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more InpatientEncounterCharts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InpatientEncounterChartFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all InpatientEncounterCharts
   * const inpatientEncounterCharts = await prisma.inpatientEncounterChart.findMany()
   * 
   * // Get first 10 InpatientEncounterCharts
   * const inpatientEncounterCharts = await prisma.inpatientEncounterChart.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const inpatientEncounterChartWithIdOnly = await prisma.inpatientEncounterChart.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends InpatientEncounterChartFindManyArgs>(args?: Prisma.SelectSubset<T, InpatientEncounterChartFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a InpatientEncounterChart.
   * @param {InpatientEncounterChartCreateArgs} args - Arguments to create a InpatientEncounterChart.
   * @example
   * // Create one InpatientEncounterChart
   * const InpatientEncounterChart = await prisma.inpatientEncounterChart.create({
   *   data: {
   *     // ... data to create a InpatientEncounterChart
   *   }
   * })
   * 
   */
  create<T extends InpatientEncounterChartCreateArgs>(args: Prisma.SelectSubset<T, InpatientEncounterChartCreateArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterChartClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many InpatientEncounterCharts.
   * @param {InpatientEncounterChartCreateManyArgs} args - Arguments to create many InpatientEncounterCharts.
   * @example
   * // Create many InpatientEncounterCharts
   * const inpatientEncounterChart = await prisma.inpatientEncounterChart.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends InpatientEncounterChartCreateManyArgs>(args?: Prisma.SelectSubset<T, InpatientEncounterChartCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many InpatientEncounterCharts and returns the data saved in the database.
   * @param {InpatientEncounterChartCreateManyAndReturnArgs} args - Arguments to create many InpatientEncounterCharts.
   * @example
   * // Create many InpatientEncounterCharts
   * const inpatientEncounterChart = await prisma.inpatientEncounterChart.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many InpatientEncounterCharts and only return the `id`
   * const inpatientEncounterChartWithIdOnly = await prisma.inpatientEncounterChart.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends InpatientEncounterChartCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, InpatientEncounterChartCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a InpatientEncounterChart.
   * @param {InpatientEncounterChartDeleteArgs} args - Arguments to delete one InpatientEncounterChart.
   * @example
   * // Delete one InpatientEncounterChart
   * const InpatientEncounterChart = await prisma.inpatientEncounterChart.delete({
   *   where: {
   *     // ... filter to delete one InpatientEncounterChart
   *   }
   * })
   * 
   */
  delete<T extends InpatientEncounterChartDeleteArgs>(args: Prisma.SelectSubset<T, InpatientEncounterChartDeleteArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterChartClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one InpatientEncounterChart.
   * @param {InpatientEncounterChartUpdateArgs} args - Arguments to update one InpatientEncounterChart.
   * @example
   * // Update one InpatientEncounterChart
   * const inpatientEncounterChart = await prisma.inpatientEncounterChart.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends InpatientEncounterChartUpdateArgs>(args: Prisma.SelectSubset<T, InpatientEncounterChartUpdateArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterChartClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more InpatientEncounterCharts.
   * @param {InpatientEncounterChartDeleteManyArgs} args - Arguments to filter InpatientEncounterCharts to delete.
   * @example
   * // Delete a few InpatientEncounterCharts
   * const { count } = await prisma.inpatientEncounterChart.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends InpatientEncounterChartDeleteManyArgs>(args?: Prisma.SelectSubset<T, InpatientEncounterChartDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InpatientEncounterCharts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InpatientEncounterChartUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many InpatientEncounterCharts
   * const inpatientEncounterChart = await prisma.inpatientEncounterChart.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends InpatientEncounterChartUpdateManyArgs>(args: Prisma.SelectSubset<T, InpatientEncounterChartUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InpatientEncounterCharts and returns the data updated in the database.
   * @param {InpatientEncounterChartUpdateManyAndReturnArgs} args - Arguments to update many InpatientEncounterCharts.
   * @example
   * // Update many InpatientEncounterCharts
   * const inpatientEncounterChart = await prisma.inpatientEncounterChart.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more InpatientEncounterCharts and only return the `id`
   * const inpatientEncounterChartWithIdOnly = await prisma.inpatientEncounterChart.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends InpatientEncounterChartUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, InpatientEncounterChartUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one InpatientEncounterChart.
   * @param {InpatientEncounterChartUpsertArgs} args - Arguments to update or create a InpatientEncounterChart.
   * @example
   * // Update or create a InpatientEncounterChart
   * const inpatientEncounterChart = await prisma.inpatientEncounterChart.upsert({
   *   create: {
   *     // ... data to create a InpatientEncounterChart
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the InpatientEncounterChart we want to update
   *   }
   * })
   */
  upsert<T extends InpatientEncounterChartUpsertArgs>(args: Prisma.SelectSubset<T, InpatientEncounterChartUpsertArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterChartClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of InpatientEncounterCharts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InpatientEncounterChartCountArgs} args - Arguments to filter InpatientEncounterCharts to count.
   * @example
   * // Count the number of InpatientEncounterCharts
   * const count = await prisma.inpatientEncounterChart.count({
   *   where: {
   *     // ... the filter for the InpatientEncounterCharts we want to count
   *   }
   * })
  **/
  count<T extends InpatientEncounterChartCountArgs>(
    args?: Prisma.Subset<T, InpatientEncounterChartCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], InpatientEncounterChartCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a InpatientEncounterChart.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InpatientEncounterChartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends InpatientEncounterChartAggregateArgs>(args: Prisma.Subset<T, InpatientEncounterChartAggregateArgs>): Prisma.PrismaPromise<GetInpatientEncounterChartAggregateType<T>>

  /**
   * Group by InpatientEncounterChart.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InpatientEncounterChartGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends InpatientEncounterChartGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InpatientEncounterChartGroupByArgs['orderBy'] }
      : { orderBy?: InpatientEncounterChartGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, InpatientEncounterChartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInpatientEncounterChartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the InpatientEncounterChart model
 */
readonly fields: InpatientEncounterChartFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for InpatientEncounterChart.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InpatientEncounterChartClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  encounter<T extends Prisma.InpatientEncounterDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.InpatientEncounterDefaultArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the InpatientEncounterChart model
 */
export interface InpatientEncounterChartFieldRefs {
  readonly id: Prisma.FieldRef<"InpatientEncounterChart", 'String'>
  readonly encounterId: Prisma.FieldRef<"InpatientEncounterChart", 'String'>
  readonly staffId: Prisma.FieldRef<"InpatientEncounterChart", 'String'>
  readonly chart: Prisma.FieldRef<"InpatientEncounterChart", 'String'>
  readonly createdAt: Prisma.FieldRef<"InpatientEncounterChart", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"InpatientEncounterChart", 'DateTime'>
}
    

// Custom InputTypes
/**
 * InpatientEncounterChart findUnique
 */
export type InpatientEncounterChartFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterChart
   */
  select?: Prisma.InpatientEncounterChartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterChart
   */
  omit?: Prisma.InpatientEncounterChartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterChartInclude<ExtArgs> | null
  /**
   * Filter, which InpatientEncounterChart to fetch.
   */
  where: Prisma.InpatientEncounterChartWhereUniqueInput
}

/**
 * InpatientEncounterChart findUniqueOrThrow
 */
export type InpatientEncounterChartFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterChart
   */
  select?: Prisma.InpatientEncounterChartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterChart
   */
  omit?: Prisma.InpatientEncounterChartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterChartInclude<ExtArgs> | null
  /**
   * Filter, which InpatientEncounterChart to fetch.
   */
  where: Prisma.InpatientEncounterChartWhereUniqueInput
}

/**
 * InpatientEncounterChart findFirst
 */
export type InpatientEncounterChartFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterChart
   */
  select?: Prisma.InpatientEncounterChartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterChart
   */
  omit?: Prisma.InpatientEncounterChartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterChartInclude<ExtArgs> | null
  /**
   * Filter, which InpatientEncounterChart to fetch.
   */
  where?: Prisma.InpatientEncounterChartWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InpatientEncounterCharts to fetch.
   */
  orderBy?: Prisma.InpatientEncounterChartOrderByWithRelationInput | Prisma.InpatientEncounterChartOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InpatientEncounterCharts.
   */
  cursor?: Prisma.InpatientEncounterChartWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InpatientEncounterCharts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InpatientEncounterCharts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InpatientEncounterCharts.
   */
  distinct?: Prisma.InpatientEncounterChartScalarFieldEnum | Prisma.InpatientEncounterChartScalarFieldEnum[]
}

/**
 * InpatientEncounterChart findFirstOrThrow
 */
export type InpatientEncounterChartFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterChart
   */
  select?: Prisma.InpatientEncounterChartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterChart
   */
  omit?: Prisma.InpatientEncounterChartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterChartInclude<ExtArgs> | null
  /**
   * Filter, which InpatientEncounterChart to fetch.
   */
  where?: Prisma.InpatientEncounterChartWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InpatientEncounterCharts to fetch.
   */
  orderBy?: Prisma.InpatientEncounterChartOrderByWithRelationInput | Prisma.InpatientEncounterChartOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InpatientEncounterCharts.
   */
  cursor?: Prisma.InpatientEncounterChartWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InpatientEncounterCharts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InpatientEncounterCharts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InpatientEncounterCharts.
   */
  distinct?: Prisma.InpatientEncounterChartScalarFieldEnum | Prisma.InpatientEncounterChartScalarFieldEnum[]
}

/**
 * InpatientEncounterChart findMany
 */
export type InpatientEncounterChartFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterChart
   */
  select?: Prisma.InpatientEncounterChartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterChart
   */
  omit?: Prisma.InpatientEncounterChartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterChartInclude<ExtArgs> | null
  /**
   * Filter, which InpatientEncounterCharts to fetch.
   */
  where?: Prisma.InpatientEncounterChartWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InpatientEncounterCharts to fetch.
   */
  orderBy?: Prisma.InpatientEncounterChartOrderByWithRelationInput | Prisma.InpatientEncounterChartOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing InpatientEncounterCharts.
   */
  cursor?: Prisma.InpatientEncounterChartWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InpatientEncounterCharts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InpatientEncounterCharts.
   */
  skip?: number
  distinct?: Prisma.InpatientEncounterChartScalarFieldEnum | Prisma.InpatientEncounterChartScalarFieldEnum[]
}

/**
 * InpatientEncounterChart create
 */
export type InpatientEncounterChartCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterChart
   */
  select?: Prisma.InpatientEncounterChartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterChart
   */
  omit?: Prisma.InpatientEncounterChartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterChartInclude<ExtArgs> | null
  /**
   * The data needed to create a InpatientEncounterChart.
   */
  data: Prisma.XOR<Prisma.InpatientEncounterChartCreateInput, Prisma.InpatientEncounterChartUncheckedCreateInput>
}

/**
 * InpatientEncounterChart createMany
 */
export type InpatientEncounterChartCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many InpatientEncounterCharts.
   */
  data: Prisma.InpatientEncounterChartCreateManyInput | Prisma.InpatientEncounterChartCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * InpatientEncounterChart createManyAndReturn
 */
export type InpatientEncounterChartCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterChart
   */
  select?: Prisma.InpatientEncounterChartSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterChart
   */
  omit?: Prisma.InpatientEncounterChartOmit<ExtArgs> | null
  /**
   * The data used to create many InpatientEncounterCharts.
   */
  data: Prisma.InpatientEncounterChartCreateManyInput | Prisma.InpatientEncounterChartCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterChartIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * InpatientEncounterChart update
 */
export type InpatientEncounterChartUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterChart
   */
  select?: Prisma.InpatientEncounterChartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterChart
   */
  omit?: Prisma.InpatientEncounterChartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterChartInclude<ExtArgs> | null
  /**
   * The data needed to update a InpatientEncounterChart.
   */
  data: Prisma.XOR<Prisma.InpatientEncounterChartUpdateInput, Prisma.InpatientEncounterChartUncheckedUpdateInput>
  /**
   * Choose, which InpatientEncounterChart to update.
   */
  where: Prisma.InpatientEncounterChartWhereUniqueInput
}

/**
 * InpatientEncounterChart updateMany
 */
export type InpatientEncounterChartUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update InpatientEncounterCharts.
   */
  data: Prisma.XOR<Prisma.InpatientEncounterChartUpdateManyMutationInput, Prisma.InpatientEncounterChartUncheckedUpdateManyInput>
  /**
   * Filter which InpatientEncounterCharts to update
   */
  where?: Prisma.InpatientEncounterChartWhereInput
  /**
   * Limit how many InpatientEncounterCharts to update.
   */
  limit?: number
}

/**
 * InpatientEncounterChart updateManyAndReturn
 */
export type InpatientEncounterChartUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterChart
   */
  select?: Prisma.InpatientEncounterChartSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterChart
   */
  omit?: Prisma.InpatientEncounterChartOmit<ExtArgs> | null
  /**
   * The data used to update InpatientEncounterCharts.
   */
  data: Prisma.XOR<Prisma.InpatientEncounterChartUpdateManyMutationInput, Prisma.InpatientEncounterChartUncheckedUpdateManyInput>
  /**
   * Filter which InpatientEncounterCharts to update
   */
  where?: Prisma.InpatientEncounterChartWhereInput
  /**
   * Limit how many InpatientEncounterCharts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterChartIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * InpatientEncounterChart upsert
 */
export type InpatientEncounterChartUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterChart
   */
  select?: Prisma.InpatientEncounterChartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterChart
   */
  omit?: Prisma.InpatientEncounterChartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterChartInclude<ExtArgs> | null
  /**
   * The filter to search for the InpatientEncounterChart to update in case it exists.
   */
  where: Prisma.InpatientEncounterChartWhereUniqueInput
  /**
   * In case the InpatientEncounterChart found by the `where` argument doesn't exist, create a new InpatientEncounterChart with this data.
   */
  create: Prisma.XOR<Prisma.InpatientEncounterChartCreateInput, Prisma.InpatientEncounterChartUncheckedCreateInput>
  /**
   * In case the InpatientEncounterChart was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.InpatientEncounterChartUpdateInput, Prisma.InpatientEncounterChartUncheckedUpdateInput>
}

/**
 * InpatientEncounterChart delete
 */
export type InpatientEncounterChartDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterChart
   */
  select?: Prisma.InpatientEncounterChartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterChart
   */
  omit?: Prisma.InpatientEncounterChartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterChartInclude<ExtArgs> | null
  /**
   * Filter which InpatientEncounterChart to delete.
   */
  where: Prisma.InpatientEncounterChartWhereUniqueInput
}

/**
 * InpatientEncounterChart deleteMany
 */
export type InpatientEncounterChartDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InpatientEncounterCharts to delete
   */
  where?: Prisma.InpatientEncounterChartWhereInput
  /**
   * Limit how many InpatientEncounterCharts to delete.
   */
  limit?: number
}

/**
 * InpatientEncounterChart without action
 */
export type InpatientEncounterChartDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterChart
   */
  select?: Prisma.InpatientEncounterChartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterChart
   */
  omit?: Prisma.InpatientEncounterChartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterChartInclude<ExtArgs> | null
}
