
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PharmacyBrand` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PharmacyBrand
 * 
 */
export type PharmacyBrandModel = runtime.Types.Result.DefaultSelection<Prisma.$PharmacyBrandPayload>

export type AggregatePharmacyBrand = {
  _count: PharmacyBrandCountAggregateOutputType | null
  _min: PharmacyBrandMinAggregateOutputType | null
  _max: PharmacyBrandMaxAggregateOutputType | null
}

export type PharmacyBrandMinAggregateOutputType = {
  id: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PharmacyBrandMaxAggregateOutputType = {
  id: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PharmacyBrandCountAggregateOutputType = {
  id: number
  name: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PharmacyBrandMinAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type PharmacyBrandMaxAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type PharmacyBrandCountAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PharmacyBrandAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PharmacyBrand to aggregate.
   */
  where?: Prisma.PharmacyBrandWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PharmacyBrands to fetch.
   */
  orderBy?: Prisma.PharmacyBrandOrderByWithRelationInput | Prisma.PharmacyBrandOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PharmacyBrandWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PharmacyBrands from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PharmacyBrands.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PharmacyBrands
  **/
  _count?: true | PharmacyBrandCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PharmacyBrandMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PharmacyBrandMaxAggregateInputType
}

export type GetPharmacyBrandAggregateType<T extends PharmacyBrandAggregateArgs> = {
      [P in keyof T & keyof AggregatePharmacyBrand]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePharmacyBrand[P]>
    : Prisma.GetScalarType<T[P], AggregatePharmacyBrand[P]>
}




export type PharmacyBrandGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PharmacyBrandWhereInput
  orderBy?: Prisma.PharmacyBrandOrderByWithAggregationInput | Prisma.PharmacyBrandOrderByWithAggregationInput[]
  by: Prisma.PharmacyBrandScalarFieldEnum[] | Prisma.PharmacyBrandScalarFieldEnum
  having?: Prisma.PharmacyBrandScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PharmacyBrandCountAggregateInputType | true
  _min?: PharmacyBrandMinAggregateInputType
  _max?: PharmacyBrandMaxAggregateInputType
}

export type PharmacyBrandGroupByOutputType = {
  id: string
  name: string
  createdAt: Date
  updatedAt: Date
  _count: PharmacyBrandCountAggregateOutputType | null
  _min: PharmacyBrandMinAggregateOutputType | null
  _max: PharmacyBrandMaxAggregateOutputType | null
}

type GetPharmacyBrandGroupByPayload<T extends PharmacyBrandGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PharmacyBrandGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PharmacyBrandGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PharmacyBrandGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PharmacyBrandGroupByOutputType[P]>
      }
    >
  >



export type PharmacyBrandWhereInput = {
  AND?: Prisma.PharmacyBrandWhereInput | Prisma.PharmacyBrandWhereInput[]
  OR?: Prisma.PharmacyBrandWhereInput[]
  NOT?: Prisma.PharmacyBrandWhereInput | Prisma.PharmacyBrandWhereInput[]
  id?: Prisma.UuidFilter<"PharmacyBrand"> | string
  name?: Prisma.StringFilter<"PharmacyBrand"> | string
  createdAt?: Prisma.DateTimeFilter<"PharmacyBrand"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PharmacyBrand"> | Date | string
  items?: Prisma.PharmacyItemListRelationFilter
}

export type PharmacyBrandOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  items?: Prisma.PharmacyItemOrderByRelationAggregateInput
}

export type PharmacyBrandWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PharmacyBrandWhereInput | Prisma.PharmacyBrandWhereInput[]
  OR?: Prisma.PharmacyBrandWhereInput[]
  NOT?: Prisma.PharmacyBrandWhereInput | Prisma.PharmacyBrandWhereInput[]
  name?: Prisma.StringFilter<"PharmacyBrand"> | string
  createdAt?: Prisma.DateTimeFilter<"PharmacyBrand"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PharmacyBrand"> | Date | string
  items?: Prisma.PharmacyItemListRelationFilter
}, "id">

export type PharmacyBrandOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PharmacyBrandCountOrderByAggregateInput
  _max?: Prisma.PharmacyBrandMaxOrderByAggregateInput
  _min?: Prisma.PharmacyBrandMinOrderByAggregateInput
}

export type PharmacyBrandScalarWhereWithAggregatesInput = {
  AND?: Prisma.PharmacyBrandScalarWhereWithAggregatesInput | Prisma.PharmacyBrandScalarWhereWithAggregatesInput[]
  OR?: Prisma.PharmacyBrandScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PharmacyBrandScalarWhereWithAggregatesInput | Prisma.PharmacyBrandScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"PharmacyBrand"> | string
  name?: Prisma.StringWithAggregatesFilter<"PharmacyBrand"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PharmacyBrand"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PharmacyBrand"> | Date | string
}

export type PharmacyBrandCreateInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  items?: Prisma.PharmacyItemCreateNestedManyWithoutBrandInput
}

export type PharmacyBrandUncheckedCreateInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  items?: Prisma.PharmacyItemUncheckedCreateNestedManyWithoutBrandInput
}

export type PharmacyBrandUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  items?: Prisma.PharmacyItemUpdateManyWithoutBrandNestedInput
}

export type PharmacyBrandUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  items?: Prisma.PharmacyItemUncheckedUpdateManyWithoutBrandNestedInput
}

export type PharmacyBrandCreateManyInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PharmacyBrandUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PharmacyBrandUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PharmacyBrandCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PharmacyBrandMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PharmacyBrandMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PharmacyBrandScalarRelationFilter = {
  is?: Prisma.PharmacyBrandWhereInput
  isNot?: Prisma.PharmacyBrandWhereInput
}

export type PharmacyBrandCreateNestedOneWithoutItemsInput = {
  create?: Prisma.XOR<Prisma.PharmacyBrandCreateWithoutItemsInput, Prisma.PharmacyBrandUncheckedCreateWithoutItemsInput>
  connectOrCreate?: Prisma.PharmacyBrandCreateOrConnectWithoutItemsInput
  connect?: Prisma.PharmacyBrandWhereUniqueInput
}

export type PharmacyBrandUpdateOneRequiredWithoutItemsNestedInput = {
  create?: Prisma.XOR<Prisma.PharmacyBrandCreateWithoutItemsInput, Prisma.PharmacyBrandUncheckedCreateWithoutItemsInput>
  connectOrCreate?: Prisma.PharmacyBrandCreateOrConnectWithoutItemsInput
  upsert?: Prisma.PharmacyBrandUpsertWithoutItemsInput
  connect?: Prisma.PharmacyBrandWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PharmacyBrandUpdateToOneWithWhereWithoutItemsInput, Prisma.PharmacyBrandUpdateWithoutItemsInput>, Prisma.PharmacyBrandUncheckedUpdateWithoutItemsInput>
}

export type PharmacyBrandCreateWithoutItemsInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PharmacyBrandUncheckedCreateWithoutItemsInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PharmacyBrandCreateOrConnectWithoutItemsInput = {
  where: Prisma.PharmacyBrandWhereUniqueInput
  create: Prisma.XOR<Prisma.PharmacyBrandCreateWithoutItemsInput, Prisma.PharmacyBrandUncheckedCreateWithoutItemsInput>
}

export type PharmacyBrandUpsertWithoutItemsInput = {
  update: Prisma.XOR<Prisma.PharmacyBrandUpdateWithoutItemsInput, Prisma.PharmacyBrandUncheckedUpdateWithoutItemsInput>
  create: Prisma.XOR<Prisma.PharmacyBrandCreateWithoutItemsInput, Prisma.PharmacyBrandUncheckedCreateWithoutItemsInput>
  where?: Prisma.PharmacyBrandWhereInput
}

export type PharmacyBrandUpdateToOneWithWhereWithoutItemsInput = {
  where?: Prisma.PharmacyBrandWhereInput
  data: Prisma.XOR<Prisma.PharmacyBrandUpdateWithoutItemsInput, Prisma.PharmacyBrandUncheckedUpdateWithoutItemsInput>
}

export type PharmacyBrandUpdateWithoutItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PharmacyBrandUncheckedUpdateWithoutItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type PharmacyBrandCountOutputType
 */

export type PharmacyBrandCountOutputType = {
  items: number
}

export type PharmacyBrandCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  items?: boolean | PharmacyBrandCountOutputTypeCountItemsArgs
}

/**
 * PharmacyBrandCountOutputType without action
 */
export type PharmacyBrandCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyBrandCountOutputType
   */
  select?: Prisma.PharmacyBrandCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PharmacyBrandCountOutputType without action
 */
export type PharmacyBrandCountOutputTypeCountItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PharmacyItemWhereInput
}


export type PharmacyBrandSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  items?: boolean | Prisma.PharmacyBrand$itemsArgs<ExtArgs>
  _count?: boolean | Prisma.PharmacyBrandCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pharmacyBrand"]>

export type PharmacyBrandSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["pharmacyBrand"]>

export type PharmacyBrandSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["pharmacyBrand"]>

export type PharmacyBrandSelectScalar = {
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PharmacyBrandOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["pharmacyBrand"]>
export type PharmacyBrandInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  items?: boolean | Prisma.PharmacyBrand$itemsArgs<ExtArgs>
  _count?: boolean | Prisma.PharmacyBrandCountOutputTypeDefaultArgs<ExtArgs>
}
export type PharmacyBrandIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type PharmacyBrandIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $PharmacyBrandPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PharmacyBrand"
  objects: {
    items: Prisma.$PharmacyItemPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["pharmacyBrand"]>
  composites: {}
}

export type PharmacyBrandGetPayload<S extends boolean | null | undefined | PharmacyBrandDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PharmacyBrandPayload, S>

export type PharmacyBrandCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PharmacyBrandFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PharmacyBrandCountAggregateInputType | true
  }

export interface PharmacyBrandDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PharmacyBrand'], meta: { name: 'PharmacyBrand' } }
  /**
   * Find zero or one PharmacyBrand that matches the filter.
   * @param {PharmacyBrandFindUniqueArgs} args - Arguments to find a PharmacyBrand
   * @example
   * // Get one PharmacyBrand
   * const pharmacyBrand = await prisma.pharmacyBrand.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PharmacyBrandFindUniqueArgs>(args: Prisma.SelectSubset<T, PharmacyBrandFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PharmacyBrandClient<runtime.Types.Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PharmacyBrand that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PharmacyBrandFindUniqueOrThrowArgs} args - Arguments to find a PharmacyBrand
   * @example
   * // Get one PharmacyBrand
   * const pharmacyBrand = await prisma.pharmacyBrand.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PharmacyBrandFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PharmacyBrandFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PharmacyBrandClient<runtime.Types.Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PharmacyBrand that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacyBrandFindFirstArgs} args - Arguments to find a PharmacyBrand
   * @example
   * // Get one PharmacyBrand
   * const pharmacyBrand = await prisma.pharmacyBrand.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PharmacyBrandFindFirstArgs>(args?: Prisma.SelectSubset<T, PharmacyBrandFindFirstArgs<ExtArgs>>): Prisma.Prisma__PharmacyBrandClient<runtime.Types.Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PharmacyBrand that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacyBrandFindFirstOrThrowArgs} args - Arguments to find a PharmacyBrand
   * @example
   * // Get one PharmacyBrand
   * const pharmacyBrand = await prisma.pharmacyBrand.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PharmacyBrandFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PharmacyBrandFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PharmacyBrandClient<runtime.Types.Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PharmacyBrands that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacyBrandFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PharmacyBrands
   * const pharmacyBrands = await prisma.pharmacyBrand.findMany()
   * 
   * // Get first 10 PharmacyBrands
   * const pharmacyBrands = await prisma.pharmacyBrand.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pharmacyBrandWithIdOnly = await prisma.pharmacyBrand.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PharmacyBrandFindManyArgs>(args?: Prisma.SelectSubset<T, PharmacyBrandFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PharmacyBrand.
   * @param {PharmacyBrandCreateArgs} args - Arguments to create a PharmacyBrand.
   * @example
   * // Create one PharmacyBrand
   * const PharmacyBrand = await prisma.pharmacyBrand.create({
   *   data: {
   *     // ... data to create a PharmacyBrand
   *   }
   * })
   * 
   */
  create<T extends PharmacyBrandCreateArgs>(args: Prisma.SelectSubset<T, PharmacyBrandCreateArgs<ExtArgs>>): Prisma.Prisma__PharmacyBrandClient<runtime.Types.Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PharmacyBrands.
   * @param {PharmacyBrandCreateManyArgs} args - Arguments to create many PharmacyBrands.
   * @example
   * // Create many PharmacyBrands
   * const pharmacyBrand = await prisma.pharmacyBrand.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PharmacyBrandCreateManyArgs>(args?: Prisma.SelectSubset<T, PharmacyBrandCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PharmacyBrands and returns the data saved in the database.
   * @param {PharmacyBrandCreateManyAndReturnArgs} args - Arguments to create many PharmacyBrands.
   * @example
   * // Create many PharmacyBrands
   * const pharmacyBrand = await prisma.pharmacyBrand.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PharmacyBrands and only return the `id`
   * const pharmacyBrandWithIdOnly = await prisma.pharmacyBrand.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PharmacyBrandCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PharmacyBrandCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PharmacyBrand.
   * @param {PharmacyBrandDeleteArgs} args - Arguments to delete one PharmacyBrand.
   * @example
   * // Delete one PharmacyBrand
   * const PharmacyBrand = await prisma.pharmacyBrand.delete({
   *   where: {
   *     // ... filter to delete one PharmacyBrand
   *   }
   * })
   * 
   */
  delete<T extends PharmacyBrandDeleteArgs>(args: Prisma.SelectSubset<T, PharmacyBrandDeleteArgs<ExtArgs>>): Prisma.Prisma__PharmacyBrandClient<runtime.Types.Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PharmacyBrand.
   * @param {PharmacyBrandUpdateArgs} args - Arguments to update one PharmacyBrand.
   * @example
   * // Update one PharmacyBrand
   * const pharmacyBrand = await prisma.pharmacyBrand.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PharmacyBrandUpdateArgs>(args: Prisma.SelectSubset<T, PharmacyBrandUpdateArgs<ExtArgs>>): Prisma.Prisma__PharmacyBrandClient<runtime.Types.Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PharmacyBrands.
   * @param {PharmacyBrandDeleteManyArgs} args - Arguments to filter PharmacyBrands to delete.
   * @example
   * // Delete a few PharmacyBrands
   * const { count } = await prisma.pharmacyBrand.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PharmacyBrandDeleteManyArgs>(args?: Prisma.SelectSubset<T, PharmacyBrandDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PharmacyBrands.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacyBrandUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PharmacyBrands
   * const pharmacyBrand = await prisma.pharmacyBrand.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PharmacyBrandUpdateManyArgs>(args: Prisma.SelectSubset<T, PharmacyBrandUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PharmacyBrands and returns the data updated in the database.
   * @param {PharmacyBrandUpdateManyAndReturnArgs} args - Arguments to update many PharmacyBrands.
   * @example
   * // Update many PharmacyBrands
   * const pharmacyBrand = await prisma.pharmacyBrand.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PharmacyBrands and only return the `id`
   * const pharmacyBrandWithIdOnly = await prisma.pharmacyBrand.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PharmacyBrandUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PharmacyBrandUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PharmacyBrand.
   * @param {PharmacyBrandUpsertArgs} args - Arguments to update or create a PharmacyBrand.
   * @example
   * // Update or create a PharmacyBrand
   * const pharmacyBrand = await prisma.pharmacyBrand.upsert({
   *   create: {
   *     // ... data to create a PharmacyBrand
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PharmacyBrand we want to update
   *   }
   * })
   */
  upsert<T extends PharmacyBrandUpsertArgs>(args: Prisma.SelectSubset<T, PharmacyBrandUpsertArgs<ExtArgs>>): Prisma.Prisma__PharmacyBrandClient<runtime.Types.Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PharmacyBrands.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacyBrandCountArgs} args - Arguments to filter PharmacyBrands to count.
   * @example
   * // Count the number of PharmacyBrands
   * const count = await prisma.pharmacyBrand.count({
   *   where: {
   *     // ... the filter for the PharmacyBrands we want to count
   *   }
   * })
  **/
  count<T extends PharmacyBrandCountArgs>(
    args?: Prisma.Subset<T, PharmacyBrandCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PharmacyBrandCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PharmacyBrand.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacyBrandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PharmacyBrandAggregateArgs>(args: Prisma.Subset<T, PharmacyBrandAggregateArgs>): Prisma.PrismaPromise<GetPharmacyBrandAggregateType<T>>

  /**
   * Group by PharmacyBrand.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacyBrandGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PharmacyBrandGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PharmacyBrandGroupByArgs['orderBy'] }
      : { orderBy?: PharmacyBrandGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PharmacyBrandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPharmacyBrandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PharmacyBrand model
 */
readonly fields: PharmacyBrandFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PharmacyBrand.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PharmacyBrandClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  items<T extends Prisma.PharmacyBrand$itemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PharmacyBrand$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PharmacyBrand model
 */
export interface PharmacyBrandFieldRefs {
  readonly id: Prisma.FieldRef<"PharmacyBrand", 'String'>
  readonly name: Prisma.FieldRef<"PharmacyBrand", 'String'>
  readonly createdAt: Prisma.FieldRef<"PharmacyBrand", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PharmacyBrand", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PharmacyBrand findUnique
 */
export type PharmacyBrandFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyBrand
   */
  select?: Prisma.PharmacyBrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyBrand
   */
  omit?: Prisma.PharmacyBrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyBrandInclude<ExtArgs> | null
  /**
   * Filter, which PharmacyBrand to fetch.
   */
  where: Prisma.PharmacyBrandWhereUniqueInput
}

/**
 * PharmacyBrand findUniqueOrThrow
 */
export type PharmacyBrandFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyBrand
   */
  select?: Prisma.PharmacyBrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyBrand
   */
  omit?: Prisma.PharmacyBrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyBrandInclude<ExtArgs> | null
  /**
   * Filter, which PharmacyBrand to fetch.
   */
  where: Prisma.PharmacyBrandWhereUniqueInput
}

/**
 * PharmacyBrand findFirst
 */
export type PharmacyBrandFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyBrand
   */
  select?: Prisma.PharmacyBrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyBrand
   */
  omit?: Prisma.PharmacyBrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyBrandInclude<ExtArgs> | null
  /**
   * Filter, which PharmacyBrand to fetch.
   */
  where?: Prisma.PharmacyBrandWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PharmacyBrands to fetch.
   */
  orderBy?: Prisma.PharmacyBrandOrderByWithRelationInput | Prisma.PharmacyBrandOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PharmacyBrands.
   */
  cursor?: Prisma.PharmacyBrandWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PharmacyBrands from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PharmacyBrands.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PharmacyBrands.
   */
  distinct?: Prisma.PharmacyBrandScalarFieldEnum | Prisma.PharmacyBrandScalarFieldEnum[]
}

/**
 * PharmacyBrand findFirstOrThrow
 */
export type PharmacyBrandFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyBrand
   */
  select?: Prisma.PharmacyBrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyBrand
   */
  omit?: Prisma.PharmacyBrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyBrandInclude<ExtArgs> | null
  /**
   * Filter, which PharmacyBrand to fetch.
   */
  where?: Prisma.PharmacyBrandWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PharmacyBrands to fetch.
   */
  orderBy?: Prisma.PharmacyBrandOrderByWithRelationInput | Prisma.PharmacyBrandOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PharmacyBrands.
   */
  cursor?: Prisma.PharmacyBrandWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PharmacyBrands from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PharmacyBrands.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PharmacyBrands.
   */
  distinct?: Prisma.PharmacyBrandScalarFieldEnum | Prisma.PharmacyBrandScalarFieldEnum[]
}

/**
 * PharmacyBrand findMany
 */
export type PharmacyBrandFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyBrand
   */
  select?: Prisma.PharmacyBrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyBrand
   */
  omit?: Prisma.PharmacyBrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyBrandInclude<ExtArgs> | null
  /**
   * Filter, which PharmacyBrands to fetch.
   */
  where?: Prisma.PharmacyBrandWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PharmacyBrands to fetch.
   */
  orderBy?: Prisma.PharmacyBrandOrderByWithRelationInput | Prisma.PharmacyBrandOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PharmacyBrands.
   */
  cursor?: Prisma.PharmacyBrandWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PharmacyBrands from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PharmacyBrands.
   */
  skip?: number
  distinct?: Prisma.PharmacyBrandScalarFieldEnum | Prisma.PharmacyBrandScalarFieldEnum[]
}

/**
 * PharmacyBrand create
 */
export type PharmacyBrandCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyBrand
   */
  select?: Prisma.PharmacyBrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyBrand
   */
  omit?: Prisma.PharmacyBrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyBrandInclude<ExtArgs> | null
  /**
   * The data needed to create a PharmacyBrand.
   */
  data: Prisma.XOR<Prisma.PharmacyBrandCreateInput, Prisma.PharmacyBrandUncheckedCreateInput>
}

/**
 * PharmacyBrand createMany
 */
export type PharmacyBrandCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PharmacyBrands.
   */
  data: Prisma.PharmacyBrandCreateManyInput | Prisma.PharmacyBrandCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PharmacyBrand createManyAndReturn
 */
export type PharmacyBrandCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyBrand
   */
  select?: Prisma.PharmacyBrandSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyBrand
   */
  omit?: Prisma.PharmacyBrandOmit<ExtArgs> | null
  /**
   * The data used to create many PharmacyBrands.
   */
  data: Prisma.PharmacyBrandCreateManyInput | Prisma.PharmacyBrandCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PharmacyBrand update
 */
export type PharmacyBrandUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyBrand
   */
  select?: Prisma.PharmacyBrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyBrand
   */
  omit?: Prisma.PharmacyBrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyBrandInclude<ExtArgs> | null
  /**
   * The data needed to update a PharmacyBrand.
   */
  data: Prisma.XOR<Prisma.PharmacyBrandUpdateInput, Prisma.PharmacyBrandUncheckedUpdateInput>
  /**
   * Choose, which PharmacyBrand to update.
   */
  where: Prisma.PharmacyBrandWhereUniqueInput
}

/**
 * PharmacyBrand updateMany
 */
export type PharmacyBrandUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PharmacyBrands.
   */
  data: Prisma.XOR<Prisma.PharmacyBrandUpdateManyMutationInput, Prisma.PharmacyBrandUncheckedUpdateManyInput>
  /**
   * Filter which PharmacyBrands to update
   */
  where?: Prisma.PharmacyBrandWhereInput
  /**
   * Limit how many PharmacyBrands to update.
   */
  limit?: number
}

/**
 * PharmacyBrand updateManyAndReturn
 */
export type PharmacyBrandUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyBrand
   */
  select?: Prisma.PharmacyBrandSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyBrand
   */
  omit?: Prisma.PharmacyBrandOmit<ExtArgs> | null
  /**
   * The data used to update PharmacyBrands.
   */
  data: Prisma.XOR<Prisma.PharmacyBrandUpdateManyMutationInput, Prisma.PharmacyBrandUncheckedUpdateManyInput>
  /**
   * Filter which PharmacyBrands to update
   */
  where?: Prisma.PharmacyBrandWhereInput
  /**
   * Limit how many PharmacyBrands to update.
   */
  limit?: number
}

/**
 * PharmacyBrand upsert
 */
export type PharmacyBrandUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyBrand
   */
  select?: Prisma.PharmacyBrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyBrand
   */
  omit?: Prisma.PharmacyBrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyBrandInclude<ExtArgs> | null
  /**
   * The filter to search for the PharmacyBrand to update in case it exists.
   */
  where: Prisma.PharmacyBrandWhereUniqueInput
  /**
   * In case the PharmacyBrand found by the `where` argument doesn't exist, create a new PharmacyBrand with this data.
   */
  create: Prisma.XOR<Prisma.PharmacyBrandCreateInput, Prisma.PharmacyBrandUncheckedCreateInput>
  /**
   * In case the PharmacyBrand was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PharmacyBrandUpdateInput, Prisma.PharmacyBrandUncheckedUpdateInput>
}

/**
 * PharmacyBrand delete
 */
export type PharmacyBrandDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyBrand
   */
  select?: Prisma.PharmacyBrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyBrand
   */
  omit?: Prisma.PharmacyBrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyBrandInclude<ExtArgs> | null
  /**
   * Filter which PharmacyBrand to delete.
   */
  where: Prisma.PharmacyBrandWhereUniqueInput
}

/**
 * PharmacyBrand deleteMany
 */
export type PharmacyBrandDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PharmacyBrands to delete
   */
  where?: Prisma.PharmacyBrandWhereInput
  /**
   * Limit how many PharmacyBrands to delete.
   */
  limit?: number
}

/**
 * PharmacyBrand.items
 */
export type PharmacyBrand$itemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItem
   */
  select?: Prisma.PharmacyItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItem
   */
  omit?: Prisma.PharmacyItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemInclude<ExtArgs> | null
  where?: Prisma.PharmacyItemWhereInput
  orderBy?: Prisma.PharmacyItemOrderByWithRelationInput | Prisma.PharmacyItemOrderByWithRelationInput[]
  cursor?: Prisma.PharmacyItemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PharmacyItemScalarFieldEnum | Prisma.PharmacyItemScalarFieldEnum[]
}

/**
 * PharmacyBrand without action
 */
export type PharmacyBrandDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyBrand
   */
  select?: Prisma.PharmacyBrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyBrand
   */
  omit?: Prisma.PharmacyBrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyBrandInclude<ExtArgs> | null
}
