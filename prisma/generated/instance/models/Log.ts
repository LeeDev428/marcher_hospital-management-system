
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Log` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Log
 * 
 */
export type LogModel = runtime.Types.Result.DefaultSelection<Prisma.$LogPayload>

export type AggregateLog = {
  _count: LogCountAggregateOutputType | null
  _min: LogMinAggregateOutputType | null
  _max: LogMaxAggregateOutputType | null
}

export type LogMinAggregateOutputType = {
  id: string | null
  user: string | null
  action: string | null
  entity: string | null
  ipAddress: string | null
  timestamp: Date | null
}

export type LogMaxAggregateOutputType = {
  id: string | null
  user: string | null
  action: string | null
  entity: string | null
  ipAddress: string | null
  timestamp: Date | null
}

export type LogCountAggregateOutputType = {
  id: number
  user: number
  action: number
  entity: number
  data: number
  ipAddress: number
  timestamp: number
  _all: number
}


export type LogMinAggregateInputType = {
  id?: true
  user?: true
  action?: true
  entity?: true
  ipAddress?: true
  timestamp?: true
}

export type LogMaxAggregateInputType = {
  id?: true
  user?: true
  action?: true
  entity?: true
  ipAddress?: true
  timestamp?: true
}

export type LogCountAggregateInputType = {
  id?: true
  user?: true
  action?: true
  entity?: true
  data?: true
  ipAddress?: true
  timestamp?: true
  _all?: true
}

export type LogAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Log to aggregate.
   */
  where?: Prisma.LogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Logs to fetch.
   */
  orderBy?: Prisma.LogOrderByWithRelationInput | Prisma.LogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Logs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Logs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Logs
  **/
  _count?: true | LogCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LogMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LogMaxAggregateInputType
}

export type GetLogAggregateType<T extends LogAggregateArgs> = {
      [P in keyof T & keyof AggregateLog]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLog[P]>
    : Prisma.GetScalarType<T[P], AggregateLog[P]>
}




export type LogGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LogWhereInput
  orderBy?: Prisma.LogOrderByWithAggregationInput | Prisma.LogOrderByWithAggregationInput[]
  by: Prisma.LogScalarFieldEnum[] | Prisma.LogScalarFieldEnum
  having?: Prisma.LogScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LogCountAggregateInputType | true
  _min?: LogMinAggregateInputType
  _max?: LogMaxAggregateInputType
}

export type LogGroupByOutputType = {
  id: string
  user: string
  action: string
  entity: string
  data: runtime.JsonValue
  ipAddress: string
  timestamp: Date
  _count: LogCountAggregateOutputType | null
  _min: LogMinAggregateOutputType | null
  _max: LogMaxAggregateOutputType | null
}

type GetLogGroupByPayload<T extends LogGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LogGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LogGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LogGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LogGroupByOutputType[P]>
      }
    >
  >



export type LogWhereInput = {
  AND?: Prisma.LogWhereInput | Prisma.LogWhereInput[]
  OR?: Prisma.LogWhereInput[]
  NOT?: Prisma.LogWhereInput | Prisma.LogWhereInput[]
  id?: Prisma.UuidFilter<"Log"> | string
  user?: Prisma.StringFilter<"Log"> | string
  action?: Prisma.StringFilter<"Log"> | string
  entity?: Prisma.StringFilter<"Log"> | string
  data?: Prisma.JsonFilter<"Log">
  ipAddress?: Prisma.StringFilter<"Log"> | string
  timestamp?: Prisma.DateTimeFilter<"Log"> | Date | string
}

export type LogOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  user?: Prisma.SortOrder
  action?: Prisma.SortOrder
  entity?: Prisma.SortOrder
  data?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type LogWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.LogWhereInput | Prisma.LogWhereInput[]
  OR?: Prisma.LogWhereInput[]
  NOT?: Prisma.LogWhereInput | Prisma.LogWhereInput[]
  user?: Prisma.StringFilter<"Log"> | string
  action?: Prisma.StringFilter<"Log"> | string
  entity?: Prisma.StringFilter<"Log"> | string
  data?: Prisma.JsonFilter<"Log">
  ipAddress?: Prisma.StringFilter<"Log"> | string
  timestamp?: Prisma.DateTimeFilter<"Log"> | Date | string
}, "id">

export type LogOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  user?: Prisma.SortOrder
  action?: Prisma.SortOrder
  entity?: Prisma.SortOrder
  data?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  _count?: Prisma.LogCountOrderByAggregateInput
  _max?: Prisma.LogMaxOrderByAggregateInput
  _min?: Prisma.LogMinOrderByAggregateInput
}

export type LogScalarWhereWithAggregatesInput = {
  AND?: Prisma.LogScalarWhereWithAggregatesInput | Prisma.LogScalarWhereWithAggregatesInput[]
  OR?: Prisma.LogScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LogScalarWhereWithAggregatesInput | Prisma.LogScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Log"> | string
  user?: Prisma.StringWithAggregatesFilter<"Log"> | string
  action?: Prisma.StringWithAggregatesFilter<"Log"> | string
  entity?: Prisma.StringWithAggregatesFilter<"Log"> | string
  data?: Prisma.JsonWithAggregatesFilter<"Log">
  ipAddress?: Prisma.StringWithAggregatesFilter<"Log"> | string
  timestamp?: Prisma.DateTimeWithAggregatesFilter<"Log"> | Date | string
}

export type LogCreateInput = {
  id?: string
  user: string
  action: string
  entity: string
  data: Prisma.JsonNullValueInput | runtime.InputJsonValue
  ipAddress: string
  timestamp?: Date | string
}

export type LogUncheckedCreateInput = {
  id?: string
  user: string
  action: string
  entity: string
  data: Prisma.JsonNullValueInput | runtime.InputJsonValue
  ipAddress: string
  timestamp?: Date | string
}

export type LogUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user?: Prisma.StringFieldUpdateOperationsInput | string
  action?: Prisma.StringFieldUpdateOperationsInput | string
  entity?: Prisma.StringFieldUpdateOperationsInput | string
  data?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  ipAddress?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LogUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user?: Prisma.StringFieldUpdateOperationsInput | string
  action?: Prisma.StringFieldUpdateOperationsInput | string
  entity?: Prisma.StringFieldUpdateOperationsInput | string
  data?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  ipAddress?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LogCreateManyInput = {
  id?: string
  user: string
  action: string
  entity: string
  data: Prisma.JsonNullValueInput | runtime.InputJsonValue
  ipAddress: string
  timestamp?: Date | string
}

export type LogUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user?: Prisma.StringFieldUpdateOperationsInput | string
  action?: Prisma.StringFieldUpdateOperationsInput | string
  entity?: Prisma.StringFieldUpdateOperationsInput | string
  data?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  ipAddress?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LogUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user?: Prisma.StringFieldUpdateOperationsInput | string
  action?: Prisma.StringFieldUpdateOperationsInput | string
  entity?: Prisma.StringFieldUpdateOperationsInput | string
  data?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  ipAddress?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LogCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user?: Prisma.SortOrder
  action?: Prisma.SortOrder
  entity?: Prisma.SortOrder
  data?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type LogMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user?: Prisma.SortOrder
  action?: Prisma.SortOrder
  entity?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type LogMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user?: Prisma.SortOrder
  action?: Prisma.SortOrder
  entity?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}



export type LogSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user?: boolean
  action?: boolean
  entity?: boolean
  data?: boolean
  ipAddress?: boolean
  timestamp?: boolean
}, ExtArgs["result"]["log"]>

export type LogSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user?: boolean
  action?: boolean
  entity?: boolean
  data?: boolean
  ipAddress?: boolean
  timestamp?: boolean
}, ExtArgs["result"]["log"]>

export type LogSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user?: boolean
  action?: boolean
  entity?: boolean
  data?: boolean
  ipAddress?: boolean
  timestamp?: boolean
}, ExtArgs["result"]["log"]>

export type LogSelectScalar = {
  id?: boolean
  user?: boolean
  action?: boolean
  entity?: boolean
  data?: boolean
  ipAddress?: boolean
  timestamp?: boolean
}

export type LogOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "user" | "action" | "entity" | "data" | "ipAddress" | "timestamp", ExtArgs["result"]["log"]>

export type $LogPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Log"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    user: string
    action: string
    entity: string
    data: runtime.JsonValue
    ipAddress: string
    timestamp: Date
  }, ExtArgs["result"]["log"]>
  composites: {}
}

export type LogGetPayload<S extends boolean | null | undefined | LogDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LogPayload, S>

export type LogCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LogCountAggregateInputType | true
  }

export interface LogDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Log'], meta: { name: 'Log' } }
  /**
   * Find zero or one Log that matches the filter.
   * @param {LogFindUniqueArgs} args - Arguments to find a Log
   * @example
   * // Get one Log
   * const log = await prisma.log.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LogFindUniqueArgs>(args: Prisma.SelectSubset<T, LogFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LogClient<runtime.Types.Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Log that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LogFindUniqueOrThrowArgs} args - Arguments to find a Log
   * @example
   * // Get one Log
   * const log = await prisma.log.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LogFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LogFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LogClient<runtime.Types.Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Log that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LogFindFirstArgs} args - Arguments to find a Log
   * @example
   * // Get one Log
   * const log = await prisma.log.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LogFindFirstArgs>(args?: Prisma.SelectSubset<T, LogFindFirstArgs<ExtArgs>>): Prisma.Prisma__LogClient<runtime.Types.Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Log that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LogFindFirstOrThrowArgs} args - Arguments to find a Log
   * @example
   * // Get one Log
   * const log = await prisma.log.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LogFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LogFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LogClient<runtime.Types.Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Logs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LogFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Logs
   * const logs = await prisma.log.findMany()
   * 
   * // Get first 10 Logs
   * const logs = await prisma.log.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const logWithIdOnly = await prisma.log.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends LogFindManyArgs>(args?: Prisma.SelectSubset<T, LogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Log.
   * @param {LogCreateArgs} args - Arguments to create a Log.
   * @example
   * // Create one Log
   * const Log = await prisma.log.create({
   *   data: {
   *     // ... data to create a Log
   *   }
   * })
   * 
   */
  create<T extends LogCreateArgs>(args: Prisma.SelectSubset<T, LogCreateArgs<ExtArgs>>): Prisma.Prisma__LogClient<runtime.Types.Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Logs.
   * @param {LogCreateManyArgs} args - Arguments to create many Logs.
   * @example
   * // Create many Logs
   * const log = await prisma.log.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LogCreateManyArgs>(args?: Prisma.SelectSubset<T, LogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Logs and returns the data saved in the database.
   * @param {LogCreateManyAndReturnArgs} args - Arguments to create many Logs.
   * @example
   * // Create many Logs
   * const log = await prisma.log.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Logs and only return the `id`
   * const logWithIdOnly = await prisma.log.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends LogCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, LogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Log.
   * @param {LogDeleteArgs} args - Arguments to delete one Log.
   * @example
   * // Delete one Log
   * const Log = await prisma.log.delete({
   *   where: {
   *     // ... filter to delete one Log
   *   }
   * })
   * 
   */
  delete<T extends LogDeleteArgs>(args: Prisma.SelectSubset<T, LogDeleteArgs<ExtArgs>>): Prisma.Prisma__LogClient<runtime.Types.Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Log.
   * @param {LogUpdateArgs} args - Arguments to update one Log.
   * @example
   * // Update one Log
   * const log = await prisma.log.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LogUpdateArgs>(args: Prisma.SelectSubset<T, LogUpdateArgs<ExtArgs>>): Prisma.Prisma__LogClient<runtime.Types.Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Logs.
   * @param {LogDeleteManyArgs} args - Arguments to filter Logs to delete.
   * @example
   * // Delete a few Logs
   * const { count } = await prisma.log.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LogDeleteManyArgs>(args?: Prisma.SelectSubset<T, LogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Logs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LogUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Logs
   * const log = await prisma.log.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LogUpdateManyArgs>(args: Prisma.SelectSubset<T, LogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Logs and returns the data updated in the database.
   * @param {LogUpdateManyAndReturnArgs} args - Arguments to update many Logs.
   * @example
   * // Update many Logs
   * const log = await prisma.log.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Logs and only return the `id`
   * const logWithIdOnly = await prisma.log.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends LogUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, LogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Log.
   * @param {LogUpsertArgs} args - Arguments to update or create a Log.
   * @example
   * // Update or create a Log
   * const log = await prisma.log.upsert({
   *   create: {
   *     // ... data to create a Log
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Log we want to update
   *   }
   * })
   */
  upsert<T extends LogUpsertArgs>(args: Prisma.SelectSubset<T, LogUpsertArgs<ExtArgs>>): Prisma.Prisma__LogClient<runtime.Types.Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Logs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LogCountArgs} args - Arguments to filter Logs to count.
   * @example
   * // Count the number of Logs
   * const count = await prisma.log.count({
   *   where: {
   *     // ... the filter for the Logs we want to count
   *   }
   * })
  **/
  count<T extends LogCountArgs>(
    args?: Prisma.Subset<T, LogCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LogCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Log.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LogAggregateArgs>(args: Prisma.Subset<T, LogAggregateArgs>): Prisma.PrismaPromise<GetLogAggregateType<T>>

  /**
   * Group by Log.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LogGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LogGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LogGroupByArgs['orderBy'] }
      : { orderBy?: LogGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Log model
 */
readonly fields: LogFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Log.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LogClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Log model
 */
export interface LogFieldRefs {
  readonly id: Prisma.FieldRef<"Log", 'String'>
  readonly user: Prisma.FieldRef<"Log", 'String'>
  readonly action: Prisma.FieldRef<"Log", 'String'>
  readonly entity: Prisma.FieldRef<"Log", 'String'>
  readonly data: Prisma.FieldRef<"Log", 'Json'>
  readonly ipAddress: Prisma.FieldRef<"Log", 'String'>
  readonly timestamp: Prisma.FieldRef<"Log", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Log findUnique
 */
export type LogFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Log
   */
  select?: Prisma.LogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Log
   */
  omit?: Prisma.LogOmit<ExtArgs> | null
  /**
   * Filter, which Log to fetch.
   */
  where: Prisma.LogWhereUniqueInput
}

/**
 * Log findUniqueOrThrow
 */
export type LogFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Log
   */
  select?: Prisma.LogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Log
   */
  omit?: Prisma.LogOmit<ExtArgs> | null
  /**
   * Filter, which Log to fetch.
   */
  where: Prisma.LogWhereUniqueInput
}

/**
 * Log findFirst
 */
export type LogFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Log
   */
  select?: Prisma.LogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Log
   */
  omit?: Prisma.LogOmit<ExtArgs> | null
  /**
   * Filter, which Log to fetch.
   */
  where?: Prisma.LogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Logs to fetch.
   */
  orderBy?: Prisma.LogOrderByWithRelationInput | Prisma.LogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Logs.
   */
  cursor?: Prisma.LogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Logs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Logs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Logs.
   */
  distinct?: Prisma.LogScalarFieldEnum | Prisma.LogScalarFieldEnum[]
}

/**
 * Log findFirstOrThrow
 */
export type LogFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Log
   */
  select?: Prisma.LogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Log
   */
  omit?: Prisma.LogOmit<ExtArgs> | null
  /**
   * Filter, which Log to fetch.
   */
  where?: Prisma.LogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Logs to fetch.
   */
  orderBy?: Prisma.LogOrderByWithRelationInput | Prisma.LogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Logs.
   */
  cursor?: Prisma.LogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Logs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Logs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Logs.
   */
  distinct?: Prisma.LogScalarFieldEnum | Prisma.LogScalarFieldEnum[]
}

/**
 * Log findMany
 */
export type LogFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Log
   */
  select?: Prisma.LogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Log
   */
  omit?: Prisma.LogOmit<ExtArgs> | null
  /**
   * Filter, which Logs to fetch.
   */
  where?: Prisma.LogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Logs to fetch.
   */
  orderBy?: Prisma.LogOrderByWithRelationInput | Prisma.LogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Logs.
   */
  cursor?: Prisma.LogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Logs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Logs.
   */
  skip?: number
  distinct?: Prisma.LogScalarFieldEnum | Prisma.LogScalarFieldEnum[]
}

/**
 * Log create
 */
export type LogCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Log
   */
  select?: Prisma.LogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Log
   */
  omit?: Prisma.LogOmit<ExtArgs> | null
  /**
   * The data needed to create a Log.
   */
  data: Prisma.XOR<Prisma.LogCreateInput, Prisma.LogUncheckedCreateInput>
}

/**
 * Log createMany
 */
export type LogCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Logs.
   */
  data: Prisma.LogCreateManyInput | Prisma.LogCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Log createManyAndReturn
 */
export type LogCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Log
   */
  select?: Prisma.LogSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Log
   */
  omit?: Prisma.LogOmit<ExtArgs> | null
  /**
   * The data used to create many Logs.
   */
  data: Prisma.LogCreateManyInput | Prisma.LogCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Log update
 */
export type LogUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Log
   */
  select?: Prisma.LogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Log
   */
  omit?: Prisma.LogOmit<ExtArgs> | null
  /**
   * The data needed to update a Log.
   */
  data: Prisma.XOR<Prisma.LogUpdateInput, Prisma.LogUncheckedUpdateInput>
  /**
   * Choose, which Log to update.
   */
  where: Prisma.LogWhereUniqueInput
}

/**
 * Log updateMany
 */
export type LogUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Logs.
   */
  data: Prisma.XOR<Prisma.LogUpdateManyMutationInput, Prisma.LogUncheckedUpdateManyInput>
  /**
   * Filter which Logs to update
   */
  where?: Prisma.LogWhereInput
  /**
   * Limit how many Logs to update.
   */
  limit?: number
}

/**
 * Log updateManyAndReturn
 */
export type LogUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Log
   */
  select?: Prisma.LogSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Log
   */
  omit?: Prisma.LogOmit<ExtArgs> | null
  /**
   * The data used to update Logs.
   */
  data: Prisma.XOR<Prisma.LogUpdateManyMutationInput, Prisma.LogUncheckedUpdateManyInput>
  /**
   * Filter which Logs to update
   */
  where?: Prisma.LogWhereInput
  /**
   * Limit how many Logs to update.
   */
  limit?: number
}

/**
 * Log upsert
 */
export type LogUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Log
   */
  select?: Prisma.LogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Log
   */
  omit?: Prisma.LogOmit<ExtArgs> | null
  /**
   * The filter to search for the Log to update in case it exists.
   */
  where: Prisma.LogWhereUniqueInput
  /**
   * In case the Log found by the `where` argument doesn't exist, create a new Log with this data.
   */
  create: Prisma.XOR<Prisma.LogCreateInput, Prisma.LogUncheckedCreateInput>
  /**
   * In case the Log was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LogUpdateInput, Prisma.LogUncheckedUpdateInput>
}

/**
 * Log delete
 */
export type LogDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Log
   */
  select?: Prisma.LogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Log
   */
  omit?: Prisma.LogOmit<ExtArgs> | null
  /**
   * Filter which Log to delete.
   */
  where: Prisma.LogWhereUniqueInput
}

/**
 * Log deleteMany
 */
export type LogDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Logs to delete
   */
  where?: Prisma.LogWhereInput
  /**
   * Limit how many Logs to delete.
   */
  limit?: number
}

/**
 * Log without action
 */
export type LogDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Log
   */
  select?: Prisma.LogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Log
   */
  omit?: Prisma.LogOmit<ExtArgs> | null
}
