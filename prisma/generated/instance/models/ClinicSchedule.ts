
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ClinicSchedule` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ClinicSchedule
 * 
 */
export type ClinicScheduleModel = runtime.Types.Result.DefaultSelection<Prisma.$ClinicSchedulePayload>

export type AggregateClinicSchedule = {
  _count: ClinicScheduleCountAggregateOutputType | null
  _min: ClinicScheduleMinAggregateOutputType | null
  _max: ClinicScheduleMaxAggregateOutputType | null
}

export type ClinicScheduleMinAggregateOutputType = {
  id: string | null
  clinicId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ClinicScheduleMaxAggregateOutputType = {
  id: string | null
  clinicId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ClinicScheduleCountAggregateOutputType = {
  id: number
  clinicId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ClinicScheduleMinAggregateInputType = {
  id?: true
  clinicId?: true
  createdAt?: true
  updatedAt?: true
}

export type ClinicScheduleMaxAggregateInputType = {
  id?: true
  clinicId?: true
  createdAt?: true
  updatedAt?: true
}

export type ClinicScheduleCountAggregateInputType = {
  id?: true
  clinicId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ClinicScheduleAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ClinicSchedule to aggregate.
   */
  where?: Prisma.ClinicScheduleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ClinicSchedules to fetch.
   */
  orderBy?: Prisma.ClinicScheduleOrderByWithRelationInput | Prisma.ClinicScheduleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ClinicScheduleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ClinicSchedules from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ClinicSchedules.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ClinicSchedules
  **/
  _count?: true | ClinicScheduleCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ClinicScheduleMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ClinicScheduleMaxAggregateInputType
}

export type GetClinicScheduleAggregateType<T extends ClinicScheduleAggregateArgs> = {
      [P in keyof T & keyof AggregateClinicSchedule]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateClinicSchedule[P]>
    : Prisma.GetScalarType<T[P], AggregateClinicSchedule[P]>
}




export type ClinicScheduleGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ClinicScheduleWhereInput
  orderBy?: Prisma.ClinicScheduleOrderByWithAggregationInput | Prisma.ClinicScheduleOrderByWithAggregationInput[]
  by: Prisma.ClinicScheduleScalarFieldEnum[] | Prisma.ClinicScheduleScalarFieldEnum
  having?: Prisma.ClinicScheduleScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ClinicScheduleCountAggregateInputType | true
  _min?: ClinicScheduleMinAggregateInputType
  _max?: ClinicScheduleMaxAggregateInputType
}

export type ClinicScheduleGroupByOutputType = {
  id: string
  clinicId: string
  createdAt: Date
  updatedAt: Date
  _count: ClinicScheduleCountAggregateOutputType | null
  _min: ClinicScheduleMinAggregateOutputType | null
  _max: ClinicScheduleMaxAggregateOutputType | null
}

type GetClinicScheduleGroupByPayload<T extends ClinicScheduleGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ClinicScheduleGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ClinicScheduleGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ClinicScheduleGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ClinicScheduleGroupByOutputType[P]>
      }
    >
  >



export type ClinicScheduleWhereInput = {
  AND?: Prisma.ClinicScheduleWhereInput | Prisma.ClinicScheduleWhereInput[]
  OR?: Prisma.ClinicScheduleWhereInput[]
  NOT?: Prisma.ClinicScheduleWhereInput | Prisma.ClinicScheduleWhereInput[]
  id?: Prisma.UuidFilter<"ClinicSchedule"> | string
  clinicId?: Prisma.UuidFilter<"ClinicSchedule"> | string
  createdAt?: Prisma.DateTimeFilter<"ClinicSchedule"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ClinicSchedule"> | Date | string
  clinic?: Prisma.XOR<Prisma.ClinicScalarRelationFilter, Prisma.ClinicWhereInput>
}

export type ClinicScheduleOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  clinicId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  clinic?: Prisma.ClinicOrderByWithRelationInput
}

export type ClinicScheduleWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ClinicScheduleWhereInput | Prisma.ClinicScheduleWhereInput[]
  OR?: Prisma.ClinicScheduleWhereInput[]
  NOT?: Prisma.ClinicScheduleWhereInput | Prisma.ClinicScheduleWhereInput[]
  clinicId?: Prisma.UuidFilter<"ClinicSchedule"> | string
  createdAt?: Prisma.DateTimeFilter<"ClinicSchedule"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ClinicSchedule"> | Date | string
  clinic?: Prisma.XOR<Prisma.ClinicScalarRelationFilter, Prisma.ClinicWhereInput>
}, "id">

export type ClinicScheduleOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  clinicId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ClinicScheduleCountOrderByAggregateInput
  _max?: Prisma.ClinicScheduleMaxOrderByAggregateInput
  _min?: Prisma.ClinicScheduleMinOrderByAggregateInput
}

export type ClinicScheduleScalarWhereWithAggregatesInput = {
  AND?: Prisma.ClinicScheduleScalarWhereWithAggregatesInput | Prisma.ClinicScheduleScalarWhereWithAggregatesInput[]
  OR?: Prisma.ClinicScheduleScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ClinicScheduleScalarWhereWithAggregatesInput | Prisma.ClinicScheduleScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"ClinicSchedule"> | string
  clinicId?: Prisma.UuidWithAggregatesFilter<"ClinicSchedule"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ClinicSchedule"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ClinicSchedule"> | Date | string
}

export type ClinicScheduleCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  clinic: Prisma.ClinicCreateNestedOneWithoutSchedulesInput
}

export type ClinicScheduleUncheckedCreateInput = {
  id?: string
  clinicId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ClinicScheduleUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clinic?: Prisma.ClinicUpdateOneRequiredWithoutSchedulesNestedInput
}

export type ClinicScheduleUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clinicId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ClinicScheduleCreateManyInput = {
  id?: string
  clinicId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ClinicScheduleUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ClinicScheduleUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clinicId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ClinicScheduleListRelationFilter = {
  every?: Prisma.ClinicScheduleWhereInput
  some?: Prisma.ClinicScheduleWhereInput
  none?: Prisma.ClinicScheduleWhereInput
}

export type ClinicScheduleOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ClinicScheduleCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  clinicId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ClinicScheduleMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  clinicId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ClinicScheduleMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  clinicId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ClinicScheduleCreateNestedManyWithoutClinicInput = {
  create?: Prisma.XOR<Prisma.ClinicScheduleCreateWithoutClinicInput, Prisma.ClinicScheduleUncheckedCreateWithoutClinicInput> | Prisma.ClinicScheduleCreateWithoutClinicInput[] | Prisma.ClinicScheduleUncheckedCreateWithoutClinicInput[]
  connectOrCreate?: Prisma.ClinicScheduleCreateOrConnectWithoutClinicInput | Prisma.ClinicScheduleCreateOrConnectWithoutClinicInput[]
  createMany?: Prisma.ClinicScheduleCreateManyClinicInputEnvelope
  connect?: Prisma.ClinicScheduleWhereUniqueInput | Prisma.ClinicScheduleWhereUniqueInput[]
}

export type ClinicScheduleUncheckedCreateNestedManyWithoutClinicInput = {
  create?: Prisma.XOR<Prisma.ClinicScheduleCreateWithoutClinicInput, Prisma.ClinicScheduleUncheckedCreateWithoutClinicInput> | Prisma.ClinicScheduleCreateWithoutClinicInput[] | Prisma.ClinicScheduleUncheckedCreateWithoutClinicInput[]
  connectOrCreate?: Prisma.ClinicScheduleCreateOrConnectWithoutClinicInput | Prisma.ClinicScheduleCreateOrConnectWithoutClinicInput[]
  createMany?: Prisma.ClinicScheduleCreateManyClinicInputEnvelope
  connect?: Prisma.ClinicScheduleWhereUniqueInput | Prisma.ClinicScheduleWhereUniqueInput[]
}

export type ClinicScheduleUpdateManyWithoutClinicNestedInput = {
  create?: Prisma.XOR<Prisma.ClinicScheduleCreateWithoutClinicInput, Prisma.ClinicScheduleUncheckedCreateWithoutClinicInput> | Prisma.ClinicScheduleCreateWithoutClinicInput[] | Prisma.ClinicScheduleUncheckedCreateWithoutClinicInput[]
  connectOrCreate?: Prisma.ClinicScheduleCreateOrConnectWithoutClinicInput | Prisma.ClinicScheduleCreateOrConnectWithoutClinicInput[]
  upsert?: Prisma.ClinicScheduleUpsertWithWhereUniqueWithoutClinicInput | Prisma.ClinicScheduleUpsertWithWhereUniqueWithoutClinicInput[]
  createMany?: Prisma.ClinicScheduleCreateManyClinicInputEnvelope
  set?: Prisma.ClinicScheduleWhereUniqueInput | Prisma.ClinicScheduleWhereUniqueInput[]
  disconnect?: Prisma.ClinicScheduleWhereUniqueInput | Prisma.ClinicScheduleWhereUniqueInput[]
  delete?: Prisma.ClinicScheduleWhereUniqueInput | Prisma.ClinicScheduleWhereUniqueInput[]
  connect?: Prisma.ClinicScheduleWhereUniqueInput | Prisma.ClinicScheduleWhereUniqueInput[]
  update?: Prisma.ClinicScheduleUpdateWithWhereUniqueWithoutClinicInput | Prisma.ClinicScheduleUpdateWithWhereUniqueWithoutClinicInput[]
  updateMany?: Prisma.ClinicScheduleUpdateManyWithWhereWithoutClinicInput | Prisma.ClinicScheduleUpdateManyWithWhereWithoutClinicInput[]
  deleteMany?: Prisma.ClinicScheduleScalarWhereInput | Prisma.ClinicScheduleScalarWhereInput[]
}

export type ClinicScheduleUncheckedUpdateManyWithoutClinicNestedInput = {
  create?: Prisma.XOR<Prisma.ClinicScheduleCreateWithoutClinicInput, Prisma.ClinicScheduleUncheckedCreateWithoutClinicInput> | Prisma.ClinicScheduleCreateWithoutClinicInput[] | Prisma.ClinicScheduleUncheckedCreateWithoutClinicInput[]
  connectOrCreate?: Prisma.ClinicScheduleCreateOrConnectWithoutClinicInput | Prisma.ClinicScheduleCreateOrConnectWithoutClinicInput[]
  upsert?: Prisma.ClinicScheduleUpsertWithWhereUniqueWithoutClinicInput | Prisma.ClinicScheduleUpsertWithWhereUniqueWithoutClinicInput[]
  createMany?: Prisma.ClinicScheduleCreateManyClinicInputEnvelope
  set?: Prisma.ClinicScheduleWhereUniqueInput | Prisma.ClinicScheduleWhereUniqueInput[]
  disconnect?: Prisma.ClinicScheduleWhereUniqueInput | Prisma.ClinicScheduleWhereUniqueInput[]
  delete?: Prisma.ClinicScheduleWhereUniqueInput | Prisma.ClinicScheduleWhereUniqueInput[]
  connect?: Prisma.ClinicScheduleWhereUniqueInput | Prisma.ClinicScheduleWhereUniqueInput[]
  update?: Prisma.ClinicScheduleUpdateWithWhereUniqueWithoutClinicInput | Prisma.ClinicScheduleUpdateWithWhereUniqueWithoutClinicInput[]
  updateMany?: Prisma.ClinicScheduleUpdateManyWithWhereWithoutClinicInput | Prisma.ClinicScheduleUpdateManyWithWhereWithoutClinicInput[]
  deleteMany?: Prisma.ClinicScheduleScalarWhereInput | Prisma.ClinicScheduleScalarWhereInput[]
}

export type ClinicScheduleCreateWithoutClinicInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ClinicScheduleUncheckedCreateWithoutClinicInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ClinicScheduleCreateOrConnectWithoutClinicInput = {
  where: Prisma.ClinicScheduleWhereUniqueInput
  create: Prisma.XOR<Prisma.ClinicScheduleCreateWithoutClinicInput, Prisma.ClinicScheduleUncheckedCreateWithoutClinicInput>
}

export type ClinicScheduleCreateManyClinicInputEnvelope = {
  data: Prisma.ClinicScheduleCreateManyClinicInput | Prisma.ClinicScheduleCreateManyClinicInput[]
  skipDuplicates?: boolean
}

export type ClinicScheduleUpsertWithWhereUniqueWithoutClinicInput = {
  where: Prisma.ClinicScheduleWhereUniqueInput
  update: Prisma.XOR<Prisma.ClinicScheduleUpdateWithoutClinicInput, Prisma.ClinicScheduleUncheckedUpdateWithoutClinicInput>
  create: Prisma.XOR<Prisma.ClinicScheduleCreateWithoutClinicInput, Prisma.ClinicScheduleUncheckedCreateWithoutClinicInput>
}

export type ClinicScheduleUpdateWithWhereUniqueWithoutClinicInput = {
  where: Prisma.ClinicScheduleWhereUniqueInput
  data: Prisma.XOR<Prisma.ClinicScheduleUpdateWithoutClinicInput, Prisma.ClinicScheduleUncheckedUpdateWithoutClinicInput>
}

export type ClinicScheduleUpdateManyWithWhereWithoutClinicInput = {
  where: Prisma.ClinicScheduleScalarWhereInput
  data: Prisma.XOR<Prisma.ClinicScheduleUpdateManyMutationInput, Prisma.ClinicScheduleUncheckedUpdateManyWithoutClinicInput>
}

export type ClinicScheduleScalarWhereInput = {
  AND?: Prisma.ClinicScheduleScalarWhereInput | Prisma.ClinicScheduleScalarWhereInput[]
  OR?: Prisma.ClinicScheduleScalarWhereInput[]
  NOT?: Prisma.ClinicScheduleScalarWhereInput | Prisma.ClinicScheduleScalarWhereInput[]
  id?: Prisma.UuidFilter<"ClinicSchedule"> | string
  clinicId?: Prisma.UuidFilter<"ClinicSchedule"> | string
  createdAt?: Prisma.DateTimeFilter<"ClinicSchedule"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ClinicSchedule"> | Date | string
}

export type ClinicScheduleCreateManyClinicInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ClinicScheduleUpdateWithoutClinicInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ClinicScheduleUncheckedUpdateWithoutClinicInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ClinicScheduleUncheckedUpdateManyWithoutClinicInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ClinicScheduleSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  clinicId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  clinic?: boolean | Prisma.ClinicDefaultArgs<ExtArgs>
}, ExtArgs["result"]["clinicSchedule"]>

export type ClinicScheduleSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  clinicId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  clinic?: boolean | Prisma.ClinicDefaultArgs<ExtArgs>
}, ExtArgs["result"]["clinicSchedule"]>

export type ClinicScheduleSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  clinicId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  clinic?: boolean | Prisma.ClinicDefaultArgs<ExtArgs>
}, ExtArgs["result"]["clinicSchedule"]>

export type ClinicScheduleSelectScalar = {
  id?: boolean
  clinicId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ClinicScheduleOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "clinicId" | "createdAt" | "updatedAt", ExtArgs["result"]["clinicSchedule"]>
export type ClinicScheduleInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  clinic?: boolean | Prisma.ClinicDefaultArgs<ExtArgs>
}
export type ClinicScheduleIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  clinic?: boolean | Prisma.ClinicDefaultArgs<ExtArgs>
}
export type ClinicScheduleIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  clinic?: boolean | Prisma.ClinicDefaultArgs<ExtArgs>
}

export type $ClinicSchedulePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ClinicSchedule"
  objects: {
    clinic: Prisma.$ClinicPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    clinicId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["clinicSchedule"]>
  composites: {}
}

export type ClinicScheduleGetPayload<S extends boolean | null | undefined | ClinicScheduleDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ClinicSchedulePayload, S>

export type ClinicScheduleCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ClinicScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ClinicScheduleCountAggregateInputType | true
  }

export interface ClinicScheduleDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClinicSchedule'], meta: { name: 'ClinicSchedule' } }
  /**
   * Find zero or one ClinicSchedule that matches the filter.
   * @param {ClinicScheduleFindUniqueArgs} args - Arguments to find a ClinicSchedule
   * @example
   * // Get one ClinicSchedule
   * const clinicSchedule = await prisma.clinicSchedule.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ClinicScheduleFindUniqueArgs>(args: Prisma.SelectSubset<T, ClinicScheduleFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ClinicScheduleClient<runtime.Types.Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ClinicSchedule that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ClinicScheduleFindUniqueOrThrowArgs} args - Arguments to find a ClinicSchedule
   * @example
   * // Get one ClinicSchedule
   * const clinicSchedule = await prisma.clinicSchedule.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ClinicScheduleFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ClinicScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ClinicScheduleClient<runtime.Types.Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ClinicSchedule that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClinicScheduleFindFirstArgs} args - Arguments to find a ClinicSchedule
   * @example
   * // Get one ClinicSchedule
   * const clinicSchedule = await prisma.clinicSchedule.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ClinicScheduleFindFirstArgs>(args?: Prisma.SelectSubset<T, ClinicScheduleFindFirstArgs<ExtArgs>>): Prisma.Prisma__ClinicScheduleClient<runtime.Types.Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ClinicSchedule that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClinicScheduleFindFirstOrThrowArgs} args - Arguments to find a ClinicSchedule
   * @example
   * // Get one ClinicSchedule
   * const clinicSchedule = await prisma.clinicSchedule.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ClinicScheduleFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ClinicScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ClinicScheduleClient<runtime.Types.Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ClinicSchedules that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClinicScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ClinicSchedules
   * const clinicSchedules = await prisma.clinicSchedule.findMany()
   * 
   * // Get first 10 ClinicSchedules
   * const clinicSchedules = await prisma.clinicSchedule.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const clinicScheduleWithIdOnly = await prisma.clinicSchedule.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ClinicScheduleFindManyArgs>(args?: Prisma.SelectSubset<T, ClinicScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ClinicSchedule.
   * @param {ClinicScheduleCreateArgs} args - Arguments to create a ClinicSchedule.
   * @example
   * // Create one ClinicSchedule
   * const ClinicSchedule = await prisma.clinicSchedule.create({
   *   data: {
   *     // ... data to create a ClinicSchedule
   *   }
   * })
   * 
   */
  create<T extends ClinicScheduleCreateArgs>(args: Prisma.SelectSubset<T, ClinicScheduleCreateArgs<ExtArgs>>): Prisma.Prisma__ClinicScheduleClient<runtime.Types.Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ClinicSchedules.
   * @param {ClinicScheduleCreateManyArgs} args - Arguments to create many ClinicSchedules.
   * @example
   * // Create many ClinicSchedules
   * const clinicSchedule = await prisma.clinicSchedule.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ClinicScheduleCreateManyArgs>(args?: Prisma.SelectSubset<T, ClinicScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ClinicSchedules and returns the data saved in the database.
   * @param {ClinicScheduleCreateManyAndReturnArgs} args - Arguments to create many ClinicSchedules.
   * @example
   * // Create many ClinicSchedules
   * const clinicSchedule = await prisma.clinicSchedule.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ClinicSchedules and only return the `id`
   * const clinicScheduleWithIdOnly = await prisma.clinicSchedule.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ClinicScheduleCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ClinicScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ClinicSchedule.
   * @param {ClinicScheduleDeleteArgs} args - Arguments to delete one ClinicSchedule.
   * @example
   * // Delete one ClinicSchedule
   * const ClinicSchedule = await prisma.clinicSchedule.delete({
   *   where: {
   *     // ... filter to delete one ClinicSchedule
   *   }
   * })
   * 
   */
  delete<T extends ClinicScheduleDeleteArgs>(args: Prisma.SelectSubset<T, ClinicScheduleDeleteArgs<ExtArgs>>): Prisma.Prisma__ClinicScheduleClient<runtime.Types.Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ClinicSchedule.
   * @param {ClinicScheduleUpdateArgs} args - Arguments to update one ClinicSchedule.
   * @example
   * // Update one ClinicSchedule
   * const clinicSchedule = await prisma.clinicSchedule.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ClinicScheduleUpdateArgs>(args: Prisma.SelectSubset<T, ClinicScheduleUpdateArgs<ExtArgs>>): Prisma.Prisma__ClinicScheduleClient<runtime.Types.Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ClinicSchedules.
   * @param {ClinicScheduleDeleteManyArgs} args - Arguments to filter ClinicSchedules to delete.
   * @example
   * // Delete a few ClinicSchedules
   * const { count } = await prisma.clinicSchedule.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ClinicScheduleDeleteManyArgs>(args?: Prisma.SelectSubset<T, ClinicScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ClinicSchedules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClinicScheduleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ClinicSchedules
   * const clinicSchedule = await prisma.clinicSchedule.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ClinicScheduleUpdateManyArgs>(args: Prisma.SelectSubset<T, ClinicScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ClinicSchedules and returns the data updated in the database.
   * @param {ClinicScheduleUpdateManyAndReturnArgs} args - Arguments to update many ClinicSchedules.
   * @example
   * // Update many ClinicSchedules
   * const clinicSchedule = await prisma.clinicSchedule.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ClinicSchedules and only return the `id`
   * const clinicScheduleWithIdOnly = await prisma.clinicSchedule.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ClinicScheduleUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ClinicScheduleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ClinicSchedule.
   * @param {ClinicScheduleUpsertArgs} args - Arguments to update or create a ClinicSchedule.
   * @example
   * // Update or create a ClinicSchedule
   * const clinicSchedule = await prisma.clinicSchedule.upsert({
   *   create: {
   *     // ... data to create a ClinicSchedule
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ClinicSchedule we want to update
   *   }
   * })
   */
  upsert<T extends ClinicScheduleUpsertArgs>(args: Prisma.SelectSubset<T, ClinicScheduleUpsertArgs<ExtArgs>>): Prisma.Prisma__ClinicScheduleClient<runtime.Types.Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ClinicSchedules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClinicScheduleCountArgs} args - Arguments to filter ClinicSchedules to count.
   * @example
   * // Count the number of ClinicSchedules
   * const count = await prisma.clinicSchedule.count({
   *   where: {
   *     // ... the filter for the ClinicSchedules we want to count
   *   }
   * })
  **/
  count<T extends ClinicScheduleCountArgs>(
    args?: Prisma.Subset<T, ClinicScheduleCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ClinicScheduleCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ClinicSchedule.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClinicScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ClinicScheduleAggregateArgs>(args: Prisma.Subset<T, ClinicScheduleAggregateArgs>): Prisma.PrismaPromise<GetClinicScheduleAggregateType<T>>

  /**
   * Group by ClinicSchedule.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClinicScheduleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ClinicScheduleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ClinicScheduleGroupByArgs['orderBy'] }
      : { orderBy?: ClinicScheduleGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ClinicScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClinicScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ClinicSchedule model
 */
readonly fields: ClinicScheduleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ClinicSchedule.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ClinicScheduleClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  clinic<T extends Prisma.ClinicDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ClinicDefaultArgs<ExtArgs>>): Prisma.Prisma__ClinicClient<runtime.Types.Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ClinicSchedule model
 */
export interface ClinicScheduleFieldRefs {
  readonly id: Prisma.FieldRef<"ClinicSchedule", 'String'>
  readonly clinicId: Prisma.FieldRef<"ClinicSchedule", 'String'>
  readonly createdAt: Prisma.FieldRef<"ClinicSchedule", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ClinicSchedule", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ClinicSchedule findUnique
 */
export type ClinicScheduleFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClinicSchedule
   */
  select?: Prisma.ClinicScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClinicSchedule
   */
  omit?: Prisma.ClinicScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicScheduleInclude<ExtArgs> | null
  /**
   * Filter, which ClinicSchedule to fetch.
   */
  where: Prisma.ClinicScheduleWhereUniqueInput
}

/**
 * ClinicSchedule findUniqueOrThrow
 */
export type ClinicScheduleFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClinicSchedule
   */
  select?: Prisma.ClinicScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClinicSchedule
   */
  omit?: Prisma.ClinicScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicScheduleInclude<ExtArgs> | null
  /**
   * Filter, which ClinicSchedule to fetch.
   */
  where: Prisma.ClinicScheduleWhereUniqueInput
}

/**
 * ClinicSchedule findFirst
 */
export type ClinicScheduleFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClinicSchedule
   */
  select?: Prisma.ClinicScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClinicSchedule
   */
  omit?: Prisma.ClinicScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicScheduleInclude<ExtArgs> | null
  /**
   * Filter, which ClinicSchedule to fetch.
   */
  where?: Prisma.ClinicScheduleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ClinicSchedules to fetch.
   */
  orderBy?: Prisma.ClinicScheduleOrderByWithRelationInput | Prisma.ClinicScheduleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ClinicSchedules.
   */
  cursor?: Prisma.ClinicScheduleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ClinicSchedules from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ClinicSchedules.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ClinicSchedules.
   */
  distinct?: Prisma.ClinicScheduleScalarFieldEnum | Prisma.ClinicScheduleScalarFieldEnum[]
}

/**
 * ClinicSchedule findFirstOrThrow
 */
export type ClinicScheduleFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClinicSchedule
   */
  select?: Prisma.ClinicScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClinicSchedule
   */
  omit?: Prisma.ClinicScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicScheduleInclude<ExtArgs> | null
  /**
   * Filter, which ClinicSchedule to fetch.
   */
  where?: Prisma.ClinicScheduleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ClinicSchedules to fetch.
   */
  orderBy?: Prisma.ClinicScheduleOrderByWithRelationInput | Prisma.ClinicScheduleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ClinicSchedules.
   */
  cursor?: Prisma.ClinicScheduleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ClinicSchedules from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ClinicSchedules.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ClinicSchedules.
   */
  distinct?: Prisma.ClinicScheduleScalarFieldEnum | Prisma.ClinicScheduleScalarFieldEnum[]
}

/**
 * ClinicSchedule findMany
 */
export type ClinicScheduleFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClinicSchedule
   */
  select?: Prisma.ClinicScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClinicSchedule
   */
  omit?: Prisma.ClinicScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicScheduleInclude<ExtArgs> | null
  /**
   * Filter, which ClinicSchedules to fetch.
   */
  where?: Prisma.ClinicScheduleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ClinicSchedules to fetch.
   */
  orderBy?: Prisma.ClinicScheduleOrderByWithRelationInput | Prisma.ClinicScheduleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ClinicSchedules.
   */
  cursor?: Prisma.ClinicScheduleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ClinicSchedules from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ClinicSchedules.
   */
  skip?: number
  distinct?: Prisma.ClinicScheduleScalarFieldEnum | Prisma.ClinicScheduleScalarFieldEnum[]
}

/**
 * ClinicSchedule create
 */
export type ClinicScheduleCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClinicSchedule
   */
  select?: Prisma.ClinicScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClinicSchedule
   */
  omit?: Prisma.ClinicScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicScheduleInclude<ExtArgs> | null
  /**
   * The data needed to create a ClinicSchedule.
   */
  data: Prisma.XOR<Prisma.ClinicScheduleCreateInput, Prisma.ClinicScheduleUncheckedCreateInput>
}

/**
 * ClinicSchedule createMany
 */
export type ClinicScheduleCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ClinicSchedules.
   */
  data: Prisma.ClinicScheduleCreateManyInput | Prisma.ClinicScheduleCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ClinicSchedule createManyAndReturn
 */
export type ClinicScheduleCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClinicSchedule
   */
  select?: Prisma.ClinicScheduleSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ClinicSchedule
   */
  omit?: Prisma.ClinicScheduleOmit<ExtArgs> | null
  /**
   * The data used to create many ClinicSchedules.
   */
  data: Prisma.ClinicScheduleCreateManyInput | Prisma.ClinicScheduleCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicScheduleIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ClinicSchedule update
 */
export type ClinicScheduleUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClinicSchedule
   */
  select?: Prisma.ClinicScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClinicSchedule
   */
  omit?: Prisma.ClinicScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicScheduleInclude<ExtArgs> | null
  /**
   * The data needed to update a ClinicSchedule.
   */
  data: Prisma.XOR<Prisma.ClinicScheduleUpdateInput, Prisma.ClinicScheduleUncheckedUpdateInput>
  /**
   * Choose, which ClinicSchedule to update.
   */
  where: Prisma.ClinicScheduleWhereUniqueInput
}

/**
 * ClinicSchedule updateMany
 */
export type ClinicScheduleUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ClinicSchedules.
   */
  data: Prisma.XOR<Prisma.ClinicScheduleUpdateManyMutationInput, Prisma.ClinicScheduleUncheckedUpdateManyInput>
  /**
   * Filter which ClinicSchedules to update
   */
  where?: Prisma.ClinicScheduleWhereInput
  /**
   * Limit how many ClinicSchedules to update.
   */
  limit?: number
}

/**
 * ClinicSchedule updateManyAndReturn
 */
export type ClinicScheduleUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClinicSchedule
   */
  select?: Prisma.ClinicScheduleSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ClinicSchedule
   */
  omit?: Prisma.ClinicScheduleOmit<ExtArgs> | null
  /**
   * The data used to update ClinicSchedules.
   */
  data: Prisma.XOR<Prisma.ClinicScheduleUpdateManyMutationInput, Prisma.ClinicScheduleUncheckedUpdateManyInput>
  /**
   * Filter which ClinicSchedules to update
   */
  where?: Prisma.ClinicScheduleWhereInput
  /**
   * Limit how many ClinicSchedules to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicScheduleIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ClinicSchedule upsert
 */
export type ClinicScheduleUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClinicSchedule
   */
  select?: Prisma.ClinicScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClinicSchedule
   */
  omit?: Prisma.ClinicScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicScheduleInclude<ExtArgs> | null
  /**
   * The filter to search for the ClinicSchedule to update in case it exists.
   */
  where: Prisma.ClinicScheduleWhereUniqueInput
  /**
   * In case the ClinicSchedule found by the `where` argument doesn't exist, create a new ClinicSchedule with this data.
   */
  create: Prisma.XOR<Prisma.ClinicScheduleCreateInput, Prisma.ClinicScheduleUncheckedCreateInput>
  /**
   * In case the ClinicSchedule was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ClinicScheduleUpdateInput, Prisma.ClinicScheduleUncheckedUpdateInput>
}

/**
 * ClinicSchedule delete
 */
export type ClinicScheduleDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClinicSchedule
   */
  select?: Prisma.ClinicScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClinicSchedule
   */
  omit?: Prisma.ClinicScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicScheduleInclude<ExtArgs> | null
  /**
   * Filter which ClinicSchedule to delete.
   */
  where: Prisma.ClinicScheduleWhereUniqueInput
}

/**
 * ClinicSchedule deleteMany
 */
export type ClinicScheduleDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ClinicSchedules to delete
   */
  where?: Prisma.ClinicScheduleWhereInput
  /**
   * Limit how many ClinicSchedules to delete.
   */
  limit?: number
}

/**
 * ClinicSchedule without action
 */
export type ClinicScheduleDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClinicSchedule
   */
  select?: Prisma.ClinicScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClinicSchedule
   */
  omit?: Prisma.ClinicScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicScheduleInclude<ExtArgs> | null
}
