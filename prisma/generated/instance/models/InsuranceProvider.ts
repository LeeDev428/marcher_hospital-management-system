
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `InsuranceProvider` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model InsuranceProvider
 * 
 */
export type InsuranceProviderModel = runtime.Types.Result.DefaultSelection<Prisma.$InsuranceProviderPayload>

export type AggregateInsuranceProvider = {
  _count: InsuranceProviderCountAggregateOutputType | null
  _min: InsuranceProviderMinAggregateOutputType | null
  _max: InsuranceProviderMaxAggregateOutputType | null
}

export type InsuranceProviderMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  email: string | null
  phone: string | null
  address: string | null
  city: string | null
  state: string | null
  zip: string | null
  country: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InsuranceProviderMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  email: string | null
  phone: string | null
  address: string | null
  city: string | null
  state: string | null
  zip: string | null
  country: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InsuranceProviderCountAggregateOutputType = {
  id: number
  name: number
  description: number
  email: number
  phone: number
  address: number
  city: number
  state: number
  zip: number
  country: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type InsuranceProviderMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  email?: true
  phone?: true
  address?: true
  city?: true
  state?: true
  zip?: true
  country?: true
  createdAt?: true
  updatedAt?: true
}

export type InsuranceProviderMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  email?: true
  phone?: true
  address?: true
  city?: true
  state?: true
  zip?: true
  country?: true
  createdAt?: true
  updatedAt?: true
}

export type InsuranceProviderCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  email?: true
  phone?: true
  address?: true
  city?: true
  state?: true
  zip?: true
  country?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type InsuranceProviderAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InsuranceProvider to aggregate.
   */
  where?: Prisma.InsuranceProviderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InsuranceProviders to fetch.
   */
  orderBy?: Prisma.InsuranceProviderOrderByWithRelationInput | Prisma.InsuranceProviderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.InsuranceProviderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InsuranceProviders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InsuranceProviders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned InsuranceProviders
  **/
  _count?: true | InsuranceProviderCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: InsuranceProviderMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: InsuranceProviderMaxAggregateInputType
}

export type GetInsuranceProviderAggregateType<T extends InsuranceProviderAggregateArgs> = {
      [P in keyof T & keyof AggregateInsuranceProvider]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInsuranceProvider[P]>
    : Prisma.GetScalarType<T[P], AggregateInsuranceProvider[P]>
}




export type InsuranceProviderGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InsuranceProviderWhereInput
  orderBy?: Prisma.InsuranceProviderOrderByWithAggregationInput | Prisma.InsuranceProviderOrderByWithAggregationInput[]
  by: Prisma.InsuranceProviderScalarFieldEnum[] | Prisma.InsuranceProviderScalarFieldEnum
  having?: Prisma.InsuranceProviderScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: InsuranceProviderCountAggregateInputType | true
  _min?: InsuranceProviderMinAggregateInputType
  _max?: InsuranceProviderMaxAggregateInputType
}

export type InsuranceProviderGroupByOutputType = {
  id: string
  name: string
  description: string | null
  email: string | null
  phone: string | null
  address: string | null
  city: string | null
  state: string | null
  zip: string | null
  country: string | null
  createdAt: Date
  updatedAt: Date
  _count: InsuranceProviderCountAggregateOutputType | null
  _min: InsuranceProviderMinAggregateOutputType | null
  _max: InsuranceProviderMaxAggregateOutputType | null
}

type GetInsuranceProviderGroupByPayload<T extends InsuranceProviderGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InsuranceProviderGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof InsuranceProviderGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InsuranceProviderGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InsuranceProviderGroupByOutputType[P]>
      }
    >
  > 



export type InsuranceProviderWhereInput = {
  AND?: Prisma.InsuranceProviderWhereInput | Prisma.InsuranceProviderWhereInput[]
  OR?: Prisma.InsuranceProviderWhereInput[]
  NOT?: Prisma.InsuranceProviderWhereInput | Prisma.InsuranceProviderWhereInput[]
  id?: Prisma.UuidFilter<"InsuranceProvider"> | string
  name?: Prisma.StringFilter<"InsuranceProvider"> | string
  description?: Prisma.StringNullableFilter<"InsuranceProvider"> | string | null
  email?: Prisma.StringNullableFilter<"InsuranceProvider"> | string | null
  phone?: Prisma.StringNullableFilter<"InsuranceProvider"> | string | null
  address?: Prisma.StringNullableFilter<"InsuranceProvider"> | string | null
  city?: Prisma.StringNullableFilter<"InsuranceProvider"> | string | null
  state?: Prisma.StringNullableFilter<"InsuranceProvider"> | string | null
  zip?: Prisma.StringNullableFilter<"InsuranceProvider"> | string | null
  country?: Prisma.StringNullableFilter<"InsuranceProvider"> | string | null
  createdAt?: Prisma.DateTimeFilter<"InsuranceProvider"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InsuranceProvider"> | Date | string
  claims?: Prisma.InsuranceClaimListRelationFilter
}

export type InsuranceProviderOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  email?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  city?: Prisma.SortOrderInput | Prisma.SortOrder
  state?: Prisma.SortOrderInput | Prisma.SortOrder
  zip?: Prisma.SortOrderInput | Prisma.SortOrder
  country?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  claims?: Prisma.InsuranceClaimOrderByRelationAggregateInput
}

export type InsuranceProviderWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.InsuranceProviderWhereInput | Prisma.InsuranceProviderWhereInput[]
  OR?: Prisma.InsuranceProviderWhereInput[]
  NOT?: Prisma.InsuranceProviderWhereInput | Prisma.InsuranceProviderWhereInput[]
  description?: Prisma.StringNullableFilter<"InsuranceProvider"> | string | null
  email?: Prisma.StringNullableFilter<"InsuranceProvider"> | string | null
  phone?: Prisma.StringNullableFilter<"InsuranceProvider"> | string | null
  address?: Prisma.StringNullableFilter<"InsuranceProvider"> | string | null
  city?: Prisma.StringNullableFilter<"InsuranceProvider"> | string | null
  state?: Prisma.StringNullableFilter<"InsuranceProvider"> | string | null
  zip?: Prisma.StringNullableFilter<"InsuranceProvider"> | string | null
  country?: Prisma.StringNullableFilter<"InsuranceProvider"> | string | null
  createdAt?: Prisma.DateTimeFilter<"InsuranceProvider"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InsuranceProvider"> | Date | string
  claims?: Prisma.InsuranceClaimListRelationFilter
}, "id" | "name">

export type InsuranceProviderOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  email?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  city?: Prisma.SortOrderInput | Prisma.SortOrder
  state?: Prisma.SortOrderInput | Prisma.SortOrder
  zip?: Prisma.SortOrderInput | Prisma.SortOrder
  country?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.InsuranceProviderCountOrderByAggregateInput
  _max?: Prisma.InsuranceProviderMaxOrderByAggregateInput
  _min?: Prisma.InsuranceProviderMinOrderByAggregateInput
}

export type InsuranceProviderScalarWhereWithAggregatesInput = {
  AND?: Prisma.InsuranceProviderScalarWhereWithAggregatesInput | Prisma.InsuranceProviderScalarWhereWithAggregatesInput[]
  OR?: Prisma.InsuranceProviderScalarWhereWithAggregatesInput[]
  NOT?: Prisma.InsuranceProviderScalarWhereWithAggregatesInput | Prisma.InsuranceProviderScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"InsuranceProvider"> | string
  name?: Prisma.StringWithAggregatesFilter<"InsuranceProvider"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"InsuranceProvider"> | string | null
  email?: Prisma.StringNullableWithAggregatesFilter<"InsuranceProvider"> | string | null
  phone?: Prisma.StringNullableWithAggregatesFilter<"InsuranceProvider"> | string | null
  address?: Prisma.StringNullableWithAggregatesFilter<"InsuranceProvider"> | string | null
  city?: Prisma.StringNullableWithAggregatesFilter<"InsuranceProvider"> | string | null
  state?: Prisma.StringNullableWithAggregatesFilter<"InsuranceProvider"> | string | null
  zip?: Prisma.StringNullableWithAggregatesFilter<"InsuranceProvider"> | string | null
  country?: Prisma.StringNullableWithAggregatesFilter<"InsuranceProvider"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"InsuranceProvider"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"InsuranceProvider"> | Date | string
}

export type InsuranceProviderCreateInput = {
  id?: string
  name: string
  description?: string | null
  email?: string | null
  phone?: string | null
  address?: string | null
  city?: string | null
  state?: string | null
  zip?: string | null
  country?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  claims?: Prisma.InsuranceClaimCreateNestedManyWithoutProviderInput
}

export type InsuranceProviderUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  email?: string | null
  phone?: string | null
  address?: string | null
  city?: string | null
  state?: string | null
  zip?: string | null
  country?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  claims?: Prisma.InsuranceClaimUncheckedCreateNestedManyWithoutProviderInput
}

export type InsuranceProviderUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  claims?: Prisma.InsuranceClaimUpdateManyWithoutProviderNestedInput
}

export type InsuranceProviderUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  claims?: Prisma.InsuranceClaimUncheckedUpdateManyWithoutProviderNestedInput
}

export type InsuranceProviderCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  email?: string | null
  phone?: string | null
  address?: string | null
  city?: string | null
  state?: string | null
  zip?: string | null
  country?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InsuranceProviderUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InsuranceProviderUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InsuranceProviderCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrder
  state?: Prisma.SortOrder
  zip?: Prisma.SortOrder
  country?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InsuranceProviderMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrder
  state?: Prisma.SortOrder
  zip?: Prisma.SortOrder
  country?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InsuranceProviderMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrder
  state?: Prisma.SortOrder
  zip?: Prisma.SortOrder
  country?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InsuranceProviderScalarRelationFilter = {
  is?: Prisma.InsuranceProviderWhereInput
  isNot?: Prisma.InsuranceProviderWhereInput
}

export type InsuranceProviderCreateNestedOneWithoutClaimsInput = {
  create?: Prisma.XOR<Prisma.InsuranceProviderCreateWithoutClaimsInput, Prisma.InsuranceProviderUncheckedCreateWithoutClaimsInput>
  connectOrCreate?: Prisma.InsuranceProviderCreateOrConnectWithoutClaimsInput
  connect?: Prisma.InsuranceProviderWhereUniqueInput
}

export type InsuranceProviderUpdateOneRequiredWithoutClaimsNestedInput = {
  create?: Prisma.XOR<Prisma.InsuranceProviderCreateWithoutClaimsInput, Prisma.InsuranceProviderUncheckedCreateWithoutClaimsInput>
  connectOrCreate?: Prisma.InsuranceProviderCreateOrConnectWithoutClaimsInput
  upsert?: Prisma.InsuranceProviderUpsertWithoutClaimsInput
  connect?: Prisma.InsuranceProviderWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.InsuranceProviderUpdateToOneWithWhereWithoutClaimsInput, Prisma.InsuranceProviderUpdateWithoutClaimsInput>, Prisma.InsuranceProviderUncheckedUpdateWithoutClaimsInput>
}

export type InsuranceProviderCreateWithoutClaimsInput = {
  id?: string
  name: string
  description?: string | null
  email?: string | null
  phone?: string | null
  address?: string | null
  city?: string | null
  state?: string | null
  zip?: string | null
  country?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InsuranceProviderUncheckedCreateWithoutClaimsInput = {
  id?: string
  name: string
  description?: string | null
  email?: string | null
  phone?: string | null
  address?: string | null
  city?: string | null
  state?: string | null
  zip?: string | null
  country?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InsuranceProviderCreateOrConnectWithoutClaimsInput = {
  where: Prisma.InsuranceProviderWhereUniqueInput
  create: Prisma.XOR<Prisma.InsuranceProviderCreateWithoutClaimsInput, Prisma.InsuranceProviderUncheckedCreateWithoutClaimsInput>
}

export type InsuranceProviderUpsertWithoutClaimsInput = {
  update: Prisma.XOR<Prisma.InsuranceProviderUpdateWithoutClaimsInput, Prisma.InsuranceProviderUncheckedUpdateWithoutClaimsInput>
  create: Prisma.XOR<Prisma.InsuranceProviderCreateWithoutClaimsInput, Prisma.InsuranceProviderUncheckedCreateWithoutClaimsInput>
  where?: Prisma.InsuranceProviderWhereInput
}

export type InsuranceProviderUpdateToOneWithWhereWithoutClaimsInput = {
  where?: Prisma.InsuranceProviderWhereInput
  data: Prisma.XOR<Prisma.InsuranceProviderUpdateWithoutClaimsInput, Prisma.InsuranceProviderUncheckedUpdateWithoutClaimsInput>
}

export type InsuranceProviderUpdateWithoutClaimsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InsuranceProviderUncheckedUpdateWithoutClaimsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  state?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  zip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  country?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type InsuranceProviderCountOutputType
 */

export type InsuranceProviderCountOutputType = {
  claims: number
}

export type InsuranceProviderCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  claims?: boolean | InsuranceProviderCountOutputTypeCountClaimsArgs
}

/**
 * InsuranceProviderCountOutputType without action
 */
export type InsuranceProviderCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceProviderCountOutputType
   */
  select?: Prisma.InsuranceProviderCountOutputTypeSelect<ExtArgs> | null
}

/**
 * InsuranceProviderCountOutputType without action
 */
export type InsuranceProviderCountOutputTypeCountClaimsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InsuranceClaimWhereInput
}


export type InsuranceProviderSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  email?: boolean
  phone?: boolean
  address?: boolean
  city?: boolean
  state?: boolean
  zip?: boolean
  country?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  claims?: boolean | Prisma.InsuranceProvider$claimsArgs<ExtArgs>
  _count?: boolean | Prisma.InsuranceProviderCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["insuranceProvider"]>

export type InsuranceProviderSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  email?: boolean
  phone?: boolean
  address?: boolean
  city?: boolean
  state?: boolean
  zip?: boolean
  country?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["insuranceProvider"]>

export type InsuranceProviderSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  email?: boolean
  phone?: boolean
  address?: boolean
  city?: boolean
  state?: boolean
  zip?: boolean
  country?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["insuranceProvider"]>

export type InsuranceProviderSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  email?: boolean
  phone?: boolean
  address?: boolean
  city?: boolean
  state?: boolean
  zip?: boolean
  country?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type InsuranceProviderOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "email" | "phone" | "address" | "city" | "state" | "zip" | "country" | "createdAt" | "updatedAt", ExtArgs["result"]["insuranceProvider"]>
export type InsuranceProviderInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  claims?: boolean | Prisma.InsuranceProvider$claimsArgs<ExtArgs>
  _count?: boolean | Prisma.InsuranceProviderCountOutputTypeDefaultArgs<ExtArgs>
}
export type InsuranceProviderIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type InsuranceProviderIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $InsuranceProviderPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "InsuranceProvider"
  objects: {
    claims: Prisma.$InsuranceClaimPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    email: string | null
    phone: string | null
    address: string | null
    city: string | null
    state: string | null
    zip: string | null
    country: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["insuranceProvider"]>
  composites: {}
}

export type InsuranceProviderGetPayload<S extends boolean | null | undefined | InsuranceProviderDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$InsuranceProviderPayload, S>

export type InsuranceProviderCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<InsuranceProviderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: InsuranceProviderCountAggregateInputType | true
  }

export interface InsuranceProviderDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InsuranceProvider'], meta: { name: 'InsuranceProvider' } }
  /**
   * Find zero or one InsuranceProvider that matches the filter.
   * @param {InsuranceProviderFindUniqueArgs} args - Arguments to find a InsuranceProvider
   * @example
   * // Get one InsuranceProvider
   * const insuranceProvider = await prisma.insuranceProvider.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InsuranceProviderFindUniqueArgs>(args: Prisma.SelectSubset<T, InsuranceProviderFindUniqueArgs<ExtArgs>>): Prisma.Prisma__InsuranceProviderClient<runtime.Types.Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one InsuranceProvider that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InsuranceProviderFindUniqueOrThrowArgs} args - Arguments to find a InsuranceProvider
   * @example
   * // Get one InsuranceProvider
   * const insuranceProvider = await prisma.insuranceProvider.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InsuranceProviderFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, InsuranceProviderFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__InsuranceProviderClient<runtime.Types.Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InsuranceProvider that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InsuranceProviderFindFirstArgs} args - Arguments to find a InsuranceProvider
   * @example
   * // Get one InsuranceProvider
   * const insuranceProvider = await prisma.insuranceProvider.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InsuranceProviderFindFirstArgs>(args?: Prisma.SelectSubset<T, InsuranceProviderFindFirstArgs<ExtArgs>>): Prisma.Prisma__InsuranceProviderClient<runtime.Types.Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InsuranceProvider that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InsuranceProviderFindFirstOrThrowArgs} args - Arguments to find a InsuranceProvider
   * @example
   * // Get one InsuranceProvider
   * const insuranceProvider = await prisma.insuranceProvider.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InsuranceProviderFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, InsuranceProviderFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__InsuranceProviderClient<runtime.Types.Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more InsuranceProviders that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InsuranceProviderFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all InsuranceProviders
   * const insuranceProviders = await prisma.insuranceProvider.findMany()
   * 
   * // Get first 10 InsuranceProviders
   * const insuranceProviders = await prisma.insuranceProvider.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const insuranceProviderWithIdOnly = await prisma.insuranceProvider.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends InsuranceProviderFindManyArgs>(args?: Prisma.SelectSubset<T, InsuranceProviderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a InsuranceProvider.
   * @param {InsuranceProviderCreateArgs} args - Arguments to create a InsuranceProvider.
   * @example
   * // Create one InsuranceProvider
   * const InsuranceProvider = await prisma.insuranceProvider.create({
   *   data: {
   *     // ... data to create a InsuranceProvider
   *   }
   * })
   * 
   */
  create<T extends InsuranceProviderCreateArgs>(args: Prisma.SelectSubset<T, InsuranceProviderCreateArgs<ExtArgs>>): Prisma.Prisma__InsuranceProviderClient<runtime.Types.Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many InsuranceProviders.
   * @param {InsuranceProviderCreateManyArgs} args - Arguments to create many InsuranceProviders.
   * @example
   * // Create many InsuranceProviders
   * const insuranceProvider = await prisma.insuranceProvider.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends InsuranceProviderCreateManyArgs>(args?: Prisma.SelectSubset<T, InsuranceProviderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many InsuranceProviders and returns the data saved in the database.
   * @param {InsuranceProviderCreateManyAndReturnArgs} args - Arguments to create many InsuranceProviders.
   * @example
   * // Create many InsuranceProviders
   * const insuranceProvider = await prisma.insuranceProvider.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many InsuranceProviders and only return the `id`
   * const insuranceProviderWithIdOnly = await prisma.insuranceProvider.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends InsuranceProviderCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, InsuranceProviderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a InsuranceProvider.
   * @param {InsuranceProviderDeleteArgs} args - Arguments to delete one InsuranceProvider.
   * @example
   * // Delete one InsuranceProvider
   * const InsuranceProvider = await prisma.insuranceProvider.delete({
   *   where: {
   *     // ... filter to delete one InsuranceProvider
   *   }
   * })
   * 
   */
  delete<T extends InsuranceProviderDeleteArgs>(args: Prisma.SelectSubset<T, InsuranceProviderDeleteArgs<ExtArgs>>): Prisma.Prisma__InsuranceProviderClient<runtime.Types.Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one InsuranceProvider.
   * @param {InsuranceProviderUpdateArgs} args - Arguments to update one InsuranceProvider.
   * @example
   * // Update one InsuranceProvider
   * const insuranceProvider = await prisma.insuranceProvider.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends InsuranceProviderUpdateArgs>(args: Prisma.SelectSubset<T, InsuranceProviderUpdateArgs<ExtArgs>>): Prisma.Prisma__InsuranceProviderClient<runtime.Types.Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more InsuranceProviders.
   * @param {InsuranceProviderDeleteManyArgs} args - Arguments to filter InsuranceProviders to delete.
   * @example
   * // Delete a few InsuranceProviders
   * const { count } = await prisma.insuranceProvider.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends InsuranceProviderDeleteManyArgs>(args?: Prisma.SelectSubset<T, InsuranceProviderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InsuranceProviders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InsuranceProviderUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many InsuranceProviders
   * const insuranceProvider = await prisma.insuranceProvider.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends InsuranceProviderUpdateManyArgs>(args: Prisma.SelectSubset<T, InsuranceProviderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InsuranceProviders and returns the data updated in the database.
   * @param {InsuranceProviderUpdateManyAndReturnArgs} args - Arguments to update many InsuranceProviders.
   * @example
   * // Update many InsuranceProviders
   * const insuranceProvider = await prisma.insuranceProvider.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more InsuranceProviders and only return the `id`
   * const insuranceProviderWithIdOnly = await prisma.insuranceProvider.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends InsuranceProviderUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, InsuranceProviderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one InsuranceProvider.
   * @param {InsuranceProviderUpsertArgs} args - Arguments to update or create a InsuranceProvider.
   * @example
   * // Update or create a InsuranceProvider
   * const insuranceProvider = await prisma.insuranceProvider.upsert({
   *   create: {
   *     // ... data to create a InsuranceProvider
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the InsuranceProvider we want to update
   *   }
   * })
   */
  upsert<T extends InsuranceProviderUpsertArgs>(args: Prisma.SelectSubset<T, InsuranceProviderUpsertArgs<ExtArgs>>): Prisma.Prisma__InsuranceProviderClient<runtime.Types.Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of InsuranceProviders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InsuranceProviderCountArgs} args - Arguments to filter InsuranceProviders to count.
   * @example
   * // Count the number of InsuranceProviders
   * const count = await prisma.insuranceProvider.count({
   *   where: {
   *     // ... the filter for the InsuranceProviders we want to count
   *   }
   * })
  **/
  count<T extends InsuranceProviderCountArgs>(
    args?: Prisma.Subset<T, InsuranceProviderCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], InsuranceProviderCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a InsuranceProvider.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InsuranceProviderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends InsuranceProviderAggregateArgs>(args: Prisma.Subset<T, InsuranceProviderAggregateArgs>): Prisma.PrismaPromise<GetInsuranceProviderAggregateType<T>>

  /**
   * Group by InsuranceProvider.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InsuranceProviderGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends InsuranceProviderGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InsuranceProviderGroupByArgs['orderBy'] }
      : { orderBy?: InsuranceProviderGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, InsuranceProviderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInsuranceProviderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the InsuranceProvider model
 */
readonly fields: InsuranceProviderFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for InsuranceProvider.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InsuranceProviderClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  claims<T extends Prisma.InsuranceProvider$claimsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.InsuranceProvider$claimsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the InsuranceProvider model
 */
export interface InsuranceProviderFieldRefs {
  readonly id: Prisma.FieldRef<"InsuranceProvider", 'String'>
  readonly name: Prisma.FieldRef<"InsuranceProvider", 'String'>
  readonly description: Prisma.FieldRef<"InsuranceProvider", 'String'>
  readonly email: Prisma.FieldRef<"InsuranceProvider", 'String'>
  readonly phone: Prisma.FieldRef<"InsuranceProvider", 'String'>
  readonly address: Prisma.FieldRef<"InsuranceProvider", 'String'>
  readonly city: Prisma.FieldRef<"InsuranceProvider", 'String'>
  readonly state: Prisma.FieldRef<"InsuranceProvider", 'String'>
  readonly zip: Prisma.FieldRef<"InsuranceProvider", 'String'>
  readonly country: Prisma.FieldRef<"InsuranceProvider", 'String'>
  readonly createdAt: Prisma.FieldRef<"InsuranceProvider", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"InsuranceProvider", 'DateTime'>
}
    

// Custom InputTypes
/**
 * InsuranceProvider findUnique
 */
export type InsuranceProviderFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceProvider
   */
  select?: Prisma.InsuranceProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceProvider
   */
  omit?: Prisma.InsuranceProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceProviderInclude<ExtArgs> | null
  /**
   * Filter, which InsuranceProvider to fetch.
   */
  where: Prisma.InsuranceProviderWhereUniqueInput
}

/**
 * InsuranceProvider findUniqueOrThrow
 */
export type InsuranceProviderFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceProvider
   */
  select?: Prisma.InsuranceProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceProvider
   */
  omit?: Prisma.InsuranceProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceProviderInclude<ExtArgs> | null
  /**
   * Filter, which InsuranceProvider to fetch.
   */
  where: Prisma.InsuranceProviderWhereUniqueInput
}

/**
 * InsuranceProvider findFirst
 */
export type InsuranceProviderFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceProvider
   */
  select?: Prisma.InsuranceProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceProvider
   */
  omit?: Prisma.InsuranceProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceProviderInclude<ExtArgs> | null
  /**
   * Filter, which InsuranceProvider to fetch.
   */
  where?: Prisma.InsuranceProviderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InsuranceProviders to fetch.
   */
  orderBy?: Prisma.InsuranceProviderOrderByWithRelationInput | Prisma.InsuranceProviderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InsuranceProviders.
   */
  cursor?: Prisma.InsuranceProviderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InsuranceProviders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InsuranceProviders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InsuranceProviders.
   */
  distinct?: Prisma.InsuranceProviderScalarFieldEnum | Prisma.InsuranceProviderScalarFieldEnum[]
}

/**
 * InsuranceProvider findFirstOrThrow
 */
export type InsuranceProviderFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceProvider
   */
  select?: Prisma.InsuranceProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceProvider
   */
  omit?: Prisma.InsuranceProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceProviderInclude<ExtArgs> | null
  /**
   * Filter, which InsuranceProvider to fetch.
   */
  where?: Prisma.InsuranceProviderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InsuranceProviders to fetch.
   */
  orderBy?: Prisma.InsuranceProviderOrderByWithRelationInput | Prisma.InsuranceProviderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InsuranceProviders.
   */
  cursor?: Prisma.InsuranceProviderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InsuranceProviders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InsuranceProviders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InsuranceProviders.
   */
  distinct?: Prisma.InsuranceProviderScalarFieldEnum | Prisma.InsuranceProviderScalarFieldEnum[]
}

/**
 * InsuranceProvider findMany
 */
export type InsuranceProviderFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceProvider
   */
  select?: Prisma.InsuranceProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceProvider
   */
  omit?: Prisma.InsuranceProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceProviderInclude<ExtArgs> | null
  /**
   * Filter, which InsuranceProviders to fetch.
   */
  where?: Prisma.InsuranceProviderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InsuranceProviders to fetch.
   */
  orderBy?: Prisma.InsuranceProviderOrderByWithRelationInput | Prisma.InsuranceProviderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing InsuranceProviders.
   */
  cursor?: Prisma.InsuranceProviderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InsuranceProviders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InsuranceProviders.
   */
  skip?: number
  distinct?: Prisma.InsuranceProviderScalarFieldEnum | Prisma.InsuranceProviderScalarFieldEnum[]
}

/**
 * InsuranceProvider create
 */
export type InsuranceProviderCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceProvider
   */
  select?: Prisma.InsuranceProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceProvider
   */
  omit?: Prisma.InsuranceProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceProviderInclude<ExtArgs> | null
  /**
   * The data needed to create a InsuranceProvider.
   */
  data: Prisma.XOR<Prisma.InsuranceProviderCreateInput, Prisma.InsuranceProviderUncheckedCreateInput>
}

/**
 * InsuranceProvider createMany
 */
export type InsuranceProviderCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many InsuranceProviders.
   */
  data: Prisma.InsuranceProviderCreateManyInput | Prisma.InsuranceProviderCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * InsuranceProvider createManyAndReturn
 */
export type InsuranceProviderCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceProvider
   */
  select?: Prisma.InsuranceProviderSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceProvider
   */
  omit?: Prisma.InsuranceProviderOmit<ExtArgs> | null
  /**
   * The data used to create many InsuranceProviders.
   */
  data: Prisma.InsuranceProviderCreateManyInput | Prisma.InsuranceProviderCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * InsuranceProvider update
 */
export type InsuranceProviderUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceProvider
   */
  select?: Prisma.InsuranceProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceProvider
   */
  omit?: Prisma.InsuranceProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceProviderInclude<ExtArgs> | null
  /**
   * The data needed to update a InsuranceProvider.
   */
  data: Prisma.XOR<Prisma.InsuranceProviderUpdateInput, Prisma.InsuranceProviderUncheckedUpdateInput>
  /**
   * Choose, which InsuranceProvider to update.
   */
  where: Prisma.InsuranceProviderWhereUniqueInput
}

/**
 * InsuranceProvider updateMany
 */
export type InsuranceProviderUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update InsuranceProviders.
   */
  data: Prisma.XOR<Prisma.InsuranceProviderUpdateManyMutationInput, Prisma.InsuranceProviderUncheckedUpdateManyInput>
  /**
   * Filter which InsuranceProviders to update
   */
  where?: Prisma.InsuranceProviderWhereInput
  /**
   * Limit how many InsuranceProviders to update.
   */
  limit?: number
}

/**
 * InsuranceProvider updateManyAndReturn
 */
export type InsuranceProviderUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceProvider
   */
  select?: Prisma.InsuranceProviderSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceProvider
   */
  omit?: Prisma.InsuranceProviderOmit<ExtArgs> | null
  /**
   * The data used to update InsuranceProviders.
   */
  data: Prisma.XOR<Prisma.InsuranceProviderUpdateManyMutationInput, Prisma.InsuranceProviderUncheckedUpdateManyInput>
  /**
   * Filter which InsuranceProviders to update
   */
  where?: Prisma.InsuranceProviderWhereInput
  /**
   * Limit how many InsuranceProviders to update.
   */
  limit?: number
}

/**
 * InsuranceProvider upsert
 */
export type InsuranceProviderUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceProvider
   */
  select?: Prisma.InsuranceProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceProvider
   */
  omit?: Prisma.InsuranceProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceProviderInclude<ExtArgs> | null
  /**
   * The filter to search for the InsuranceProvider to update in case it exists.
   */
  where: Prisma.InsuranceProviderWhereUniqueInput
  /**
   * In case the InsuranceProvider found by the `where` argument doesn't exist, create a new InsuranceProvider with this data.
   */
  create: Prisma.XOR<Prisma.InsuranceProviderCreateInput, Prisma.InsuranceProviderUncheckedCreateInput>
  /**
   * In case the InsuranceProvider was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.InsuranceProviderUpdateInput, Prisma.InsuranceProviderUncheckedUpdateInput>
}

/**
 * InsuranceProvider delete
 */
export type InsuranceProviderDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceProvider
   */
  select?: Prisma.InsuranceProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceProvider
   */
  omit?: Prisma.InsuranceProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceProviderInclude<ExtArgs> | null
  /**
   * Filter which InsuranceProvider to delete.
   */
  where: Prisma.InsuranceProviderWhereUniqueInput
}

/**
 * InsuranceProvider deleteMany
 */
export type InsuranceProviderDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InsuranceProviders to delete
   */
  where?: Prisma.InsuranceProviderWhereInput
  /**
   * Limit how many InsuranceProviders to delete.
   */
  limit?: number
}

/**
 * InsuranceProvider.claims
 */
export type InsuranceProvider$claimsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceClaim
   */
  select?: Prisma.InsuranceClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceClaim
   */
  omit?: Prisma.InsuranceClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceClaimInclude<ExtArgs> | null
  where?: Prisma.InsuranceClaimWhereInput
  orderBy?: Prisma.InsuranceClaimOrderByWithRelationInput | Prisma.InsuranceClaimOrderByWithRelationInput[]
  cursor?: Prisma.InsuranceClaimWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.InsuranceClaimScalarFieldEnum | Prisma.InsuranceClaimScalarFieldEnum[]
}

/**
 * InsuranceProvider without action
 */
export type InsuranceProviderDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceProvider
   */
  select?: Prisma.InsuranceProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceProvider
   */
  omit?: Prisma.InsuranceProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceProviderInclude<ExtArgs> | null
}
