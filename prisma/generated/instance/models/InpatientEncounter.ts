
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `InpatientEncounter` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model InpatientEncounter
 * 
 */
export type InpatientEncounterModel = runtime.Types.Result.DefaultSelection<Prisma.$InpatientEncounterPayload>

export type AggregateInpatientEncounter = {
  _count: InpatientEncounterCountAggregateOutputType | null
  _min: InpatientEncounterMinAggregateOutputType | null
  _max: InpatientEncounterMaxAggregateOutputType | null
}

export type InpatientEncounterMinAggregateOutputType = {
  id: string | null
  patientProfileId: string | null
  date: string | null
  time: string | null
  chiefComplaint: string | null
  doctorDiagnosis: string | null
  triage: $Enums.InpatientTriage | null
  disposition: $Enums.InpatientDisposition | null
  dispositionDate: string | null
  dispositionTime: string | null
  dispositionNote: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InpatientEncounterMaxAggregateOutputType = {
  id: string | null
  patientProfileId: string | null
  date: string | null
  time: string | null
  chiefComplaint: string | null
  doctorDiagnosis: string | null
  triage: $Enums.InpatientTriage | null
  disposition: $Enums.InpatientDisposition | null
  dispositionDate: string | null
  dispositionTime: string | null
  dispositionNote: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InpatientEncounterCountAggregateOutputType = {
  id: number
  patientProfileId: number
  date: number
  time: number
  chiefComplaint: number
  doctorDiagnosis: number
  triage: number
  disposition: number
  dispositionDate: number
  dispositionTime: number
  dispositionNote: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type InpatientEncounterMinAggregateInputType = {
  id?: true
  patientProfileId?: true
  date?: true
  time?: true
  chiefComplaint?: true
  doctorDiagnosis?: true
  triage?: true
  disposition?: true
  dispositionDate?: true
  dispositionTime?: true
  dispositionNote?: true
  createdAt?: true
  updatedAt?: true
}

export type InpatientEncounterMaxAggregateInputType = {
  id?: true
  patientProfileId?: true
  date?: true
  time?: true
  chiefComplaint?: true
  doctorDiagnosis?: true
  triage?: true
  disposition?: true
  dispositionDate?: true
  dispositionTime?: true
  dispositionNote?: true
  createdAt?: true
  updatedAt?: true
}

export type InpatientEncounterCountAggregateInputType = {
  id?: true
  patientProfileId?: true
  date?: true
  time?: true
  chiefComplaint?: true
  doctorDiagnosis?: true
  triage?: true
  disposition?: true
  dispositionDate?: true
  dispositionTime?: true
  dispositionNote?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type InpatientEncounterAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InpatientEncounter to aggregate.
   */
  where?: Prisma.InpatientEncounterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InpatientEncounters to fetch.
   */
  orderBy?: Prisma.InpatientEncounterOrderByWithRelationInput | Prisma.InpatientEncounterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.InpatientEncounterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InpatientEncounters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InpatientEncounters.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned InpatientEncounters
  **/
  _count?: true | InpatientEncounterCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: InpatientEncounterMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: InpatientEncounterMaxAggregateInputType
}

export type GetInpatientEncounterAggregateType<T extends InpatientEncounterAggregateArgs> = {
      [P in keyof T & keyof AggregateInpatientEncounter]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInpatientEncounter[P]>
    : Prisma.GetScalarType<T[P], AggregateInpatientEncounter[P]>
}




export type InpatientEncounterGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InpatientEncounterWhereInput
  orderBy?: Prisma.InpatientEncounterOrderByWithAggregationInput | Prisma.InpatientEncounterOrderByWithAggregationInput[]
  by: Prisma.InpatientEncounterScalarFieldEnum[] | Prisma.InpatientEncounterScalarFieldEnum
  having?: Prisma.InpatientEncounterScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: InpatientEncounterCountAggregateInputType | true
  _min?: InpatientEncounterMinAggregateInputType
  _max?: InpatientEncounterMaxAggregateInputType
}

export type InpatientEncounterGroupByOutputType = {
  id: string
  patientProfileId: string
  date: string
  time: string
  chiefComplaint: string
  doctorDiagnosis: string
  triage: $Enums.InpatientTriage
  disposition: $Enums.InpatientDisposition
  dispositionDate: string | null
  dispositionTime: string | null
  dispositionNote: string | null
  createdAt: Date
  updatedAt: Date
  _count: InpatientEncounterCountAggregateOutputType | null
  _min: InpatientEncounterMinAggregateOutputType | null
  _max: InpatientEncounterMaxAggregateOutputType | null
}

type GetInpatientEncounterGroupByPayload<T extends InpatientEncounterGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InpatientEncounterGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof InpatientEncounterGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InpatientEncounterGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InpatientEncounterGroupByOutputType[P]>
      }
    >
  >



export type InpatientEncounterWhereInput = {
  AND?: Prisma.InpatientEncounterWhereInput | Prisma.InpatientEncounterWhereInput[]
  OR?: Prisma.InpatientEncounterWhereInput[]
  NOT?: Prisma.InpatientEncounterWhereInput | Prisma.InpatientEncounterWhereInput[]
  id?: Prisma.UuidFilter<"InpatientEncounter"> | string
  patientProfileId?: Prisma.UuidFilter<"InpatientEncounter"> | string
  date?: Prisma.StringFilter<"InpatientEncounter"> | string
  time?: Prisma.StringFilter<"InpatientEncounter"> | string
  chiefComplaint?: Prisma.StringFilter<"InpatientEncounter"> | string
  doctorDiagnosis?: Prisma.StringFilter<"InpatientEncounter"> | string
  triage?: Prisma.EnumInpatientTriageFilter<"InpatientEncounter"> | $Enums.InpatientTriage
  disposition?: Prisma.EnumInpatientDispositionFilter<"InpatientEncounter"> | $Enums.InpatientDisposition
  dispositionDate?: Prisma.StringNullableFilter<"InpatientEncounter"> | string | null
  dispositionTime?: Prisma.StringNullableFilter<"InpatientEncounter"> | string | null
  dispositionNote?: Prisma.StringNullableFilter<"InpatientEncounter"> | string | null
  createdAt?: Prisma.DateTimeFilter<"InpatientEncounter"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InpatientEncounter"> | Date | string
  patientProfile?: Prisma.XOR<Prisma.PatientProfileScalarRelationFilter, Prisma.PatientProfileWhereInput>
  charts?: Prisma.InpatientEncounterChartListRelationFilter
  orders?: Prisma.InpatientEncounterOrderListRelationFilter
  medicalRecordRequest?: Prisma.MedicalRecordRequestListRelationFilter
}

export type InpatientEncounterOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  chiefComplaint?: Prisma.SortOrder
  doctorDiagnosis?: Prisma.SortOrder
  triage?: Prisma.SortOrder
  disposition?: Prisma.SortOrder
  dispositionDate?: Prisma.SortOrderInput | Prisma.SortOrder
  dispositionTime?: Prisma.SortOrderInput | Prisma.SortOrder
  dispositionNote?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  patientProfile?: Prisma.PatientProfileOrderByWithRelationInput
  charts?: Prisma.InpatientEncounterChartOrderByRelationAggregateInput
  orders?: Prisma.InpatientEncounterOrderOrderByRelationAggregateInput
  medicalRecordRequest?: Prisma.MedicalRecordRequestOrderByRelationAggregateInput
}

export type InpatientEncounterWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.InpatientEncounterWhereInput | Prisma.InpatientEncounterWhereInput[]
  OR?: Prisma.InpatientEncounterWhereInput[]
  NOT?: Prisma.InpatientEncounterWhereInput | Prisma.InpatientEncounterWhereInput[]
  patientProfileId?: Prisma.UuidFilter<"InpatientEncounter"> | string
  date?: Prisma.StringFilter<"InpatientEncounter"> | string
  time?: Prisma.StringFilter<"InpatientEncounter"> | string
  chiefComplaint?: Prisma.StringFilter<"InpatientEncounter"> | string
  doctorDiagnosis?: Prisma.StringFilter<"InpatientEncounter"> | string
  triage?: Prisma.EnumInpatientTriageFilter<"InpatientEncounter"> | $Enums.InpatientTriage
  disposition?: Prisma.EnumInpatientDispositionFilter<"InpatientEncounter"> | $Enums.InpatientDisposition
  dispositionDate?: Prisma.StringNullableFilter<"InpatientEncounter"> | string | null
  dispositionTime?: Prisma.StringNullableFilter<"InpatientEncounter"> | string | null
  dispositionNote?: Prisma.StringNullableFilter<"InpatientEncounter"> | string | null
  createdAt?: Prisma.DateTimeFilter<"InpatientEncounter"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InpatientEncounter"> | Date | string
  patientProfile?: Prisma.XOR<Prisma.PatientProfileScalarRelationFilter, Prisma.PatientProfileWhereInput>
  charts?: Prisma.InpatientEncounterChartListRelationFilter
  orders?: Prisma.InpatientEncounterOrderListRelationFilter
  medicalRecordRequest?: Prisma.MedicalRecordRequestListRelationFilter
}, "id">

export type InpatientEncounterOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  chiefComplaint?: Prisma.SortOrder
  doctorDiagnosis?: Prisma.SortOrder
  triage?: Prisma.SortOrder
  disposition?: Prisma.SortOrder
  dispositionDate?: Prisma.SortOrderInput | Prisma.SortOrder
  dispositionTime?: Prisma.SortOrderInput | Prisma.SortOrder
  dispositionNote?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.InpatientEncounterCountOrderByAggregateInput
  _max?: Prisma.InpatientEncounterMaxOrderByAggregateInput
  _min?: Prisma.InpatientEncounterMinOrderByAggregateInput
}

export type InpatientEncounterScalarWhereWithAggregatesInput = {
  AND?: Prisma.InpatientEncounterScalarWhereWithAggregatesInput | Prisma.InpatientEncounterScalarWhereWithAggregatesInput[]
  OR?: Prisma.InpatientEncounterScalarWhereWithAggregatesInput[]
  NOT?: Prisma.InpatientEncounterScalarWhereWithAggregatesInput | Prisma.InpatientEncounterScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"InpatientEncounter"> | string
  patientProfileId?: Prisma.UuidWithAggregatesFilter<"InpatientEncounter"> | string
  date?: Prisma.StringWithAggregatesFilter<"InpatientEncounter"> | string
  time?: Prisma.StringWithAggregatesFilter<"InpatientEncounter"> | string
  chiefComplaint?: Prisma.StringWithAggregatesFilter<"InpatientEncounter"> | string
  doctorDiagnosis?: Prisma.StringWithAggregatesFilter<"InpatientEncounter"> | string
  triage?: Prisma.EnumInpatientTriageWithAggregatesFilter<"InpatientEncounter"> | $Enums.InpatientTriage
  disposition?: Prisma.EnumInpatientDispositionWithAggregatesFilter<"InpatientEncounter"> | $Enums.InpatientDisposition
  dispositionDate?: Prisma.StringNullableWithAggregatesFilter<"InpatientEncounter"> | string | null
  dispositionTime?: Prisma.StringNullableWithAggregatesFilter<"InpatientEncounter"> | string | null
  dispositionNote?: Prisma.StringNullableWithAggregatesFilter<"InpatientEncounter"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"InpatientEncounter"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"InpatientEncounter"> | Date | string
}

export type InpatientEncounterCreateInput = {
  id?: string
  date: string
  time: string
  chiefComplaint: string
  doctorDiagnosis: string
  triage: $Enums.InpatientTriage
  disposition?: $Enums.InpatientDisposition
  dispositionDate?: string | null
  dispositionTime?: string | null
  dispositionNote?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  patientProfile: Prisma.PatientProfileCreateNestedOneWithoutInpatientEncountersInput
  charts?: Prisma.InpatientEncounterChartCreateNestedManyWithoutEncounterInput
  orders?: Prisma.InpatientEncounterOrderCreateNestedManyWithoutEncounterInput
  medicalRecordRequest?: Prisma.MedicalRecordRequestCreateNestedManyWithoutInpatientEncounterInput
}

export type InpatientEncounterUncheckedCreateInput = {
  id?: string
  patientProfileId: string
  date: string
  time: string
  chiefComplaint: string
  doctorDiagnosis: string
  triage: $Enums.InpatientTriage
  disposition?: $Enums.InpatientDisposition
  dispositionDate?: string | null
  dispositionTime?: string | null
  dispositionNote?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  charts?: Prisma.InpatientEncounterChartUncheckedCreateNestedManyWithoutEncounterInput
  orders?: Prisma.InpatientEncounterOrderUncheckedCreateNestedManyWithoutEncounterInput
  medicalRecordRequest?: Prisma.MedicalRecordRequestUncheckedCreateNestedManyWithoutInpatientEncounterInput
}

export type InpatientEncounterUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  chiefComplaint?: Prisma.StringFieldUpdateOperationsInput | string
  doctorDiagnosis?: Prisma.StringFieldUpdateOperationsInput | string
  triage?: Prisma.EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
  disposition?: Prisma.EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
  dispositionDate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  patientProfile?: Prisma.PatientProfileUpdateOneRequiredWithoutInpatientEncountersNestedInput
  charts?: Prisma.InpatientEncounterChartUpdateManyWithoutEncounterNestedInput
  orders?: Prisma.InpatientEncounterOrderUpdateManyWithoutEncounterNestedInput
  medicalRecordRequest?: Prisma.MedicalRecordRequestUpdateManyWithoutInpatientEncounterNestedInput
}

export type InpatientEncounterUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  patientProfileId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  chiefComplaint?: Prisma.StringFieldUpdateOperationsInput | string
  doctorDiagnosis?: Prisma.StringFieldUpdateOperationsInput | string
  triage?: Prisma.EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
  disposition?: Prisma.EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
  dispositionDate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  charts?: Prisma.InpatientEncounterChartUncheckedUpdateManyWithoutEncounterNestedInput
  orders?: Prisma.InpatientEncounterOrderUncheckedUpdateManyWithoutEncounterNestedInput
  medicalRecordRequest?: Prisma.MedicalRecordRequestUncheckedUpdateManyWithoutInpatientEncounterNestedInput
}

export type InpatientEncounterCreateManyInput = {
  id?: string
  patientProfileId: string
  date: string
  time: string
  chiefComplaint: string
  doctorDiagnosis: string
  triage: $Enums.InpatientTriage
  disposition?: $Enums.InpatientDisposition
  dispositionDate?: string | null
  dispositionTime?: string | null
  dispositionNote?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InpatientEncounterUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  chiefComplaint?: Prisma.StringFieldUpdateOperationsInput | string
  doctorDiagnosis?: Prisma.StringFieldUpdateOperationsInput | string
  triage?: Prisma.EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
  disposition?: Prisma.EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
  dispositionDate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InpatientEncounterUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  patientProfileId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  chiefComplaint?: Prisma.StringFieldUpdateOperationsInput | string
  doctorDiagnosis?: Prisma.StringFieldUpdateOperationsInput | string
  triage?: Prisma.EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
  disposition?: Prisma.EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
  dispositionDate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InpatientEncounterCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  chiefComplaint?: Prisma.SortOrder
  doctorDiagnosis?: Prisma.SortOrder
  triage?: Prisma.SortOrder
  disposition?: Prisma.SortOrder
  dispositionDate?: Prisma.SortOrder
  dispositionTime?: Prisma.SortOrder
  dispositionNote?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InpatientEncounterMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  chiefComplaint?: Prisma.SortOrder
  doctorDiagnosis?: Prisma.SortOrder
  triage?: Prisma.SortOrder
  disposition?: Prisma.SortOrder
  dispositionDate?: Prisma.SortOrder
  dispositionTime?: Prisma.SortOrder
  dispositionNote?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InpatientEncounterMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  chiefComplaint?: Prisma.SortOrder
  doctorDiagnosis?: Prisma.SortOrder
  triage?: Prisma.SortOrder
  disposition?: Prisma.SortOrder
  dispositionDate?: Prisma.SortOrder
  dispositionTime?: Prisma.SortOrder
  dispositionNote?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InpatientEncounterScalarRelationFilter = {
  is?: Prisma.InpatientEncounterWhereInput
  isNot?: Prisma.InpatientEncounterWhereInput
}

export type InpatientEncounterListRelationFilter = {
  every?: Prisma.InpatientEncounterWhereInput
  some?: Prisma.InpatientEncounterWhereInput
  none?: Prisma.InpatientEncounterWhereInput
}

export type InpatientEncounterOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EnumInpatientTriageFieldUpdateOperationsInput = {
  set?: $Enums.InpatientTriage
}

export type EnumInpatientDispositionFieldUpdateOperationsInput = {
  set?: $Enums.InpatientDisposition
}

export type InpatientEncounterCreateNestedOneWithoutChartsInput = {
  create?: Prisma.XOR<Prisma.InpatientEncounterCreateWithoutChartsInput, Prisma.InpatientEncounterUncheckedCreateWithoutChartsInput>
  connectOrCreate?: Prisma.InpatientEncounterCreateOrConnectWithoutChartsInput
  connect?: Prisma.InpatientEncounterWhereUniqueInput
}

export type InpatientEncounterUpdateOneRequiredWithoutChartsNestedInput = {
  create?: Prisma.XOR<Prisma.InpatientEncounterCreateWithoutChartsInput, Prisma.InpatientEncounterUncheckedCreateWithoutChartsInput>
  connectOrCreate?: Prisma.InpatientEncounterCreateOrConnectWithoutChartsInput
  upsert?: Prisma.InpatientEncounterUpsertWithoutChartsInput
  connect?: Prisma.InpatientEncounterWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.InpatientEncounterUpdateToOneWithWhereWithoutChartsInput, Prisma.InpatientEncounterUpdateWithoutChartsInput>, Prisma.InpatientEncounterUncheckedUpdateWithoutChartsInput>
}

export type InpatientEncounterCreateNestedOneWithoutOrdersInput = {
  create?: Prisma.XOR<Prisma.InpatientEncounterCreateWithoutOrdersInput, Prisma.InpatientEncounterUncheckedCreateWithoutOrdersInput>
  connectOrCreate?: Prisma.InpatientEncounterCreateOrConnectWithoutOrdersInput
  connect?: Prisma.InpatientEncounterWhereUniqueInput
}

export type InpatientEncounterUpdateOneRequiredWithoutOrdersNestedInput = {
  create?: Prisma.XOR<Prisma.InpatientEncounterCreateWithoutOrdersInput, Prisma.InpatientEncounterUncheckedCreateWithoutOrdersInput>
  connectOrCreate?: Prisma.InpatientEncounterCreateOrConnectWithoutOrdersInput
  upsert?: Prisma.InpatientEncounterUpsertWithoutOrdersInput
  connect?: Prisma.InpatientEncounterWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.InpatientEncounterUpdateToOneWithWhereWithoutOrdersInput, Prisma.InpatientEncounterUpdateWithoutOrdersInput>, Prisma.InpatientEncounterUncheckedUpdateWithoutOrdersInput>
}

export type InpatientEncounterCreateNestedManyWithoutPatientProfileInput = {
  create?: Prisma.XOR<Prisma.InpatientEncounterCreateWithoutPatientProfileInput, Prisma.InpatientEncounterUncheckedCreateWithoutPatientProfileInput> | Prisma.InpatientEncounterCreateWithoutPatientProfileInput[] | Prisma.InpatientEncounterUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.InpatientEncounterCreateOrConnectWithoutPatientProfileInput | Prisma.InpatientEncounterCreateOrConnectWithoutPatientProfileInput[]
  createMany?: Prisma.InpatientEncounterCreateManyPatientProfileInputEnvelope
  connect?: Prisma.InpatientEncounterWhereUniqueInput | Prisma.InpatientEncounterWhereUniqueInput[]
}

export type InpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput = {
  create?: Prisma.XOR<Prisma.InpatientEncounterCreateWithoutPatientProfileInput, Prisma.InpatientEncounterUncheckedCreateWithoutPatientProfileInput> | Prisma.InpatientEncounterCreateWithoutPatientProfileInput[] | Prisma.InpatientEncounterUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.InpatientEncounterCreateOrConnectWithoutPatientProfileInput | Prisma.InpatientEncounterCreateOrConnectWithoutPatientProfileInput[]
  createMany?: Prisma.InpatientEncounterCreateManyPatientProfileInputEnvelope
  connect?: Prisma.InpatientEncounterWhereUniqueInput | Prisma.InpatientEncounterWhereUniqueInput[]
}

export type InpatientEncounterUpdateManyWithoutPatientProfileNestedInput = {
  create?: Prisma.XOR<Prisma.InpatientEncounterCreateWithoutPatientProfileInput, Prisma.InpatientEncounterUncheckedCreateWithoutPatientProfileInput> | Prisma.InpatientEncounterCreateWithoutPatientProfileInput[] | Prisma.InpatientEncounterUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.InpatientEncounterCreateOrConnectWithoutPatientProfileInput | Prisma.InpatientEncounterCreateOrConnectWithoutPatientProfileInput[]
  upsert?: Prisma.InpatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput | Prisma.InpatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput[]
  createMany?: Prisma.InpatientEncounterCreateManyPatientProfileInputEnvelope
  set?: Prisma.InpatientEncounterWhereUniqueInput | Prisma.InpatientEncounterWhereUniqueInput[]
  disconnect?: Prisma.InpatientEncounterWhereUniqueInput | Prisma.InpatientEncounterWhereUniqueInput[]
  delete?: Prisma.InpatientEncounterWhereUniqueInput | Prisma.InpatientEncounterWhereUniqueInput[]
  connect?: Prisma.InpatientEncounterWhereUniqueInput | Prisma.InpatientEncounterWhereUniqueInput[]
  update?: Prisma.InpatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput | Prisma.InpatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput[]
  updateMany?: Prisma.InpatientEncounterUpdateManyWithWhereWithoutPatientProfileInput | Prisma.InpatientEncounterUpdateManyWithWhereWithoutPatientProfileInput[]
  deleteMany?: Prisma.InpatientEncounterScalarWhereInput | Prisma.InpatientEncounterScalarWhereInput[]
}

export type InpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput = {
  create?: Prisma.XOR<Prisma.InpatientEncounterCreateWithoutPatientProfileInput, Prisma.InpatientEncounterUncheckedCreateWithoutPatientProfileInput> | Prisma.InpatientEncounterCreateWithoutPatientProfileInput[] | Prisma.InpatientEncounterUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.InpatientEncounterCreateOrConnectWithoutPatientProfileInput | Prisma.InpatientEncounterCreateOrConnectWithoutPatientProfileInput[]
  upsert?: Prisma.InpatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput | Prisma.InpatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput[]
  createMany?: Prisma.InpatientEncounterCreateManyPatientProfileInputEnvelope
  set?: Prisma.InpatientEncounterWhereUniqueInput | Prisma.InpatientEncounterWhereUniqueInput[]
  disconnect?: Prisma.InpatientEncounterWhereUniqueInput | Prisma.InpatientEncounterWhereUniqueInput[]
  delete?: Prisma.InpatientEncounterWhereUniqueInput | Prisma.InpatientEncounterWhereUniqueInput[]
  connect?: Prisma.InpatientEncounterWhereUniqueInput | Prisma.InpatientEncounterWhereUniqueInput[]
  update?: Prisma.InpatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput | Prisma.InpatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput[]
  updateMany?: Prisma.InpatientEncounterUpdateManyWithWhereWithoutPatientProfileInput | Prisma.InpatientEncounterUpdateManyWithWhereWithoutPatientProfileInput[]
  deleteMany?: Prisma.InpatientEncounterScalarWhereInput | Prisma.InpatientEncounterScalarWhereInput[]
}

export type InpatientEncounterCreateNestedOneWithoutMedicalRecordRequestInput = {
  create?: Prisma.XOR<Prisma.InpatientEncounterCreateWithoutMedicalRecordRequestInput, Prisma.InpatientEncounterUncheckedCreateWithoutMedicalRecordRequestInput>
  connectOrCreate?: Prisma.InpatientEncounterCreateOrConnectWithoutMedicalRecordRequestInput
  connect?: Prisma.InpatientEncounterWhereUniqueInput
}

export type InpatientEncounterUpdateOneRequiredWithoutMedicalRecordRequestNestedInput = {
  create?: Prisma.XOR<Prisma.InpatientEncounterCreateWithoutMedicalRecordRequestInput, Prisma.InpatientEncounterUncheckedCreateWithoutMedicalRecordRequestInput>
  connectOrCreate?: Prisma.InpatientEncounterCreateOrConnectWithoutMedicalRecordRequestInput
  upsert?: Prisma.InpatientEncounterUpsertWithoutMedicalRecordRequestInput
  connect?: Prisma.InpatientEncounterWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.InpatientEncounterUpdateToOneWithWhereWithoutMedicalRecordRequestInput, Prisma.InpatientEncounterUpdateWithoutMedicalRecordRequestInput>, Prisma.InpatientEncounterUncheckedUpdateWithoutMedicalRecordRequestInput>
}

export type InpatientEncounterCreateWithoutChartsInput = {
  id?: string
  date: string
  time: string
  chiefComplaint: string
  doctorDiagnosis: string
  triage: $Enums.InpatientTriage
  disposition?: $Enums.InpatientDisposition
  dispositionDate?: string | null
  dispositionTime?: string | null
  dispositionNote?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  patientProfile: Prisma.PatientProfileCreateNestedOneWithoutInpatientEncountersInput
  orders?: Prisma.InpatientEncounterOrderCreateNestedManyWithoutEncounterInput
  medicalRecordRequest?: Prisma.MedicalRecordRequestCreateNestedManyWithoutInpatientEncounterInput
}

export type InpatientEncounterUncheckedCreateWithoutChartsInput = {
  id?: string
  patientProfileId: string
  date: string
  time: string
  chiefComplaint: string
  doctorDiagnosis: string
  triage: $Enums.InpatientTriage
  disposition?: $Enums.InpatientDisposition
  dispositionDate?: string | null
  dispositionTime?: string | null
  dispositionNote?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  orders?: Prisma.InpatientEncounterOrderUncheckedCreateNestedManyWithoutEncounterInput
  medicalRecordRequest?: Prisma.MedicalRecordRequestUncheckedCreateNestedManyWithoutInpatientEncounterInput
}

export type InpatientEncounterCreateOrConnectWithoutChartsInput = {
  where: Prisma.InpatientEncounterWhereUniqueInput
  create: Prisma.XOR<Prisma.InpatientEncounterCreateWithoutChartsInput, Prisma.InpatientEncounterUncheckedCreateWithoutChartsInput>
}

export type InpatientEncounterUpsertWithoutChartsInput = {
  update: Prisma.XOR<Prisma.InpatientEncounterUpdateWithoutChartsInput, Prisma.InpatientEncounterUncheckedUpdateWithoutChartsInput>
  create: Prisma.XOR<Prisma.InpatientEncounterCreateWithoutChartsInput, Prisma.InpatientEncounterUncheckedCreateWithoutChartsInput>
  where?: Prisma.InpatientEncounterWhereInput
}

export type InpatientEncounterUpdateToOneWithWhereWithoutChartsInput = {
  where?: Prisma.InpatientEncounterWhereInput
  data: Prisma.XOR<Prisma.InpatientEncounterUpdateWithoutChartsInput, Prisma.InpatientEncounterUncheckedUpdateWithoutChartsInput>
}

export type InpatientEncounterUpdateWithoutChartsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  chiefComplaint?: Prisma.StringFieldUpdateOperationsInput | string
  doctorDiagnosis?: Prisma.StringFieldUpdateOperationsInput | string
  triage?: Prisma.EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
  disposition?: Prisma.EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
  dispositionDate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  patientProfile?: Prisma.PatientProfileUpdateOneRequiredWithoutInpatientEncountersNestedInput
  orders?: Prisma.InpatientEncounterOrderUpdateManyWithoutEncounterNestedInput
  medicalRecordRequest?: Prisma.MedicalRecordRequestUpdateManyWithoutInpatientEncounterNestedInput
}

export type InpatientEncounterUncheckedUpdateWithoutChartsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  patientProfileId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  chiefComplaint?: Prisma.StringFieldUpdateOperationsInput | string
  doctorDiagnosis?: Prisma.StringFieldUpdateOperationsInput | string
  triage?: Prisma.EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
  disposition?: Prisma.EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
  dispositionDate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  orders?: Prisma.InpatientEncounterOrderUncheckedUpdateManyWithoutEncounterNestedInput
  medicalRecordRequest?: Prisma.MedicalRecordRequestUncheckedUpdateManyWithoutInpatientEncounterNestedInput
}

export type InpatientEncounterCreateWithoutOrdersInput = {
  id?: string
  date: string
  time: string
  chiefComplaint: string
  doctorDiagnosis: string
  triage: $Enums.InpatientTriage
  disposition?: $Enums.InpatientDisposition
  dispositionDate?: string | null
  dispositionTime?: string | null
  dispositionNote?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  patientProfile: Prisma.PatientProfileCreateNestedOneWithoutInpatientEncountersInput
  charts?: Prisma.InpatientEncounterChartCreateNestedManyWithoutEncounterInput
  medicalRecordRequest?: Prisma.MedicalRecordRequestCreateNestedManyWithoutInpatientEncounterInput
}

export type InpatientEncounterUncheckedCreateWithoutOrdersInput = {
  id?: string
  patientProfileId: string
  date: string
  time: string
  chiefComplaint: string
  doctorDiagnosis: string
  triage: $Enums.InpatientTriage
  disposition?: $Enums.InpatientDisposition
  dispositionDate?: string | null
  dispositionTime?: string | null
  dispositionNote?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  charts?: Prisma.InpatientEncounterChartUncheckedCreateNestedManyWithoutEncounterInput
  medicalRecordRequest?: Prisma.MedicalRecordRequestUncheckedCreateNestedManyWithoutInpatientEncounterInput
}

export type InpatientEncounterCreateOrConnectWithoutOrdersInput = {
  where: Prisma.InpatientEncounterWhereUniqueInput
  create: Prisma.XOR<Prisma.InpatientEncounterCreateWithoutOrdersInput, Prisma.InpatientEncounterUncheckedCreateWithoutOrdersInput>
}

export type InpatientEncounterUpsertWithoutOrdersInput = {
  update: Prisma.XOR<Prisma.InpatientEncounterUpdateWithoutOrdersInput, Prisma.InpatientEncounterUncheckedUpdateWithoutOrdersInput>
  create: Prisma.XOR<Prisma.InpatientEncounterCreateWithoutOrdersInput, Prisma.InpatientEncounterUncheckedCreateWithoutOrdersInput>
  where?: Prisma.InpatientEncounterWhereInput
}

export type InpatientEncounterUpdateToOneWithWhereWithoutOrdersInput = {
  where?: Prisma.InpatientEncounterWhereInput
  data: Prisma.XOR<Prisma.InpatientEncounterUpdateWithoutOrdersInput, Prisma.InpatientEncounterUncheckedUpdateWithoutOrdersInput>
}

export type InpatientEncounterUpdateWithoutOrdersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  chiefComplaint?: Prisma.StringFieldUpdateOperationsInput | string
  doctorDiagnosis?: Prisma.StringFieldUpdateOperationsInput | string
  triage?: Prisma.EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
  disposition?: Prisma.EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
  dispositionDate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  patientProfile?: Prisma.PatientProfileUpdateOneRequiredWithoutInpatientEncountersNestedInput
  charts?: Prisma.InpatientEncounterChartUpdateManyWithoutEncounterNestedInput
  medicalRecordRequest?: Prisma.MedicalRecordRequestUpdateManyWithoutInpatientEncounterNestedInput
}

export type InpatientEncounterUncheckedUpdateWithoutOrdersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  patientProfileId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  chiefComplaint?: Prisma.StringFieldUpdateOperationsInput | string
  doctorDiagnosis?: Prisma.StringFieldUpdateOperationsInput | string
  triage?: Prisma.EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
  disposition?: Prisma.EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
  dispositionDate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  charts?: Prisma.InpatientEncounterChartUncheckedUpdateManyWithoutEncounterNestedInput
  medicalRecordRequest?: Prisma.MedicalRecordRequestUncheckedUpdateManyWithoutInpatientEncounterNestedInput
}

export type InpatientEncounterCreateWithoutPatientProfileInput = {
  id?: string
  date: string
  time: string
  chiefComplaint: string
  doctorDiagnosis: string
  triage: $Enums.InpatientTriage
  disposition?: $Enums.InpatientDisposition
  dispositionDate?: string | null
  dispositionTime?: string | null
  dispositionNote?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  charts?: Prisma.InpatientEncounterChartCreateNestedManyWithoutEncounterInput
  orders?: Prisma.InpatientEncounterOrderCreateNestedManyWithoutEncounterInput
  medicalRecordRequest?: Prisma.MedicalRecordRequestCreateNestedManyWithoutInpatientEncounterInput
}

export type InpatientEncounterUncheckedCreateWithoutPatientProfileInput = {
  id?: string
  date: string
  time: string
  chiefComplaint: string
  doctorDiagnosis: string
  triage: $Enums.InpatientTriage
  disposition?: $Enums.InpatientDisposition
  dispositionDate?: string | null
  dispositionTime?: string | null
  dispositionNote?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  charts?: Prisma.InpatientEncounterChartUncheckedCreateNestedManyWithoutEncounterInput
  orders?: Prisma.InpatientEncounterOrderUncheckedCreateNestedManyWithoutEncounterInput
  medicalRecordRequest?: Prisma.MedicalRecordRequestUncheckedCreateNestedManyWithoutInpatientEncounterInput
}

export type InpatientEncounterCreateOrConnectWithoutPatientProfileInput = {
  where: Prisma.InpatientEncounterWhereUniqueInput
  create: Prisma.XOR<Prisma.InpatientEncounterCreateWithoutPatientProfileInput, Prisma.InpatientEncounterUncheckedCreateWithoutPatientProfileInput>
}

export type InpatientEncounterCreateManyPatientProfileInputEnvelope = {
  data: Prisma.InpatientEncounterCreateManyPatientProfileInput | Prisma.InpatientEncounterCreateManyPatientProfileInput[]
  skipDuplicates?: boolean
}

export type InpatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput = {
  where: Prisma.InpatientEncounterWhereUniqueInput
  update: Prisma.XOR<Prisma.InpatientEncounterUpdateWithoutPatientProfileInput, Prisma.InpatientEncounterUncheckedUpdateWithoutPatientProfileInput>
  create: Prisma.XOR<Prisma.InpatientEncounterCreateWithoutPatientProfileInput, Prisma.InpatientEncounterUncheckedCreateWithoutPatientProfileInput>
}

export type InpatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput = {
  where: Prisma.InpatientEncounterWhereUniqueInput
  data: Prisma.XOR<Prisma.InpatientEncounterUpdateWithoutPatientProfileInput, Prisma.InpatientEncounterUncheckedUpdateWithoutPatientProfileInput>
}

export type InpatientEncounterUpdateManyWithWhereWithoutPatientProfileInput = {
  where: Prisma.InpatientEncounterScalarWhereInput
  data: Prisma.XOR<Prisma.InpatientEncounterUpdateManyMutationInput, Prisma.InpatientEncounterUncheckedUpdateManyWithoutPatientProfileInput>
}

export type InpatientEncounterScalarWhereInput = {
  AND?: Prisma.InpatientEncounterScalarWhereInput | Prisma.InpatientEncounterScalarWhereInput[]
  OR?: Prisma.InpatientEncounterScalarWhereInput[]
  NOT?: Prisma.InpatientEncounterScalarWhereInput | Prisma.InpatientEncounterScalarWhereInput[]
  id?: Prisma.UuidFilter<"InpatientEncounter"> | string
  patientProfileId?: Prisma.UuidFilter<"InpatientEncounter"> | string
  date?: Prisma.StringFilter<"InpatientEncounter"> | string
  time?: Prisma.StringFilter<"InpatientEncounter"> | string
  chiefComplaint?: Prisma.StringFilter<"InpatientEncounter"> | string
  doctorDiagnosis?: Prisma.StringFilter<"InpatientEncounter"> | string
  triage?: Prisma.EnumInpatientTriageFilter<"InpatientEncounter"> | $Enums.InpatientTriage
  disposition?: Prisma.EnumInpatientDispositionFilter<"InpatientEncounter"> | $Enums.InpatientDisposition
  dispositionDate?: Prisma.StringNullableFilter<"InpatientEncounter"> | string | null
  dispositionTime?: Prisma.StringNullableFilter<"InpatientEncounter"> | string | null
  dispositionNote?: Prisma.StringNullableFilter<"InpatientEncounter"> | string | null
  createdAt?: Prisma.DateTimeFilter<"InpatientEncounter"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InpatientEncounter"> | Date | string
}

export type InpatientEncounterCreateWithoutMedicalRecordRequestInput = {
  id?: string
  date: string
  time: string
  chiefComplaint: string
  doctorDiagnosis: string
  triage: $Enums.InpatientTriage
  disposition?: $Enums.InpatientDisposition
  dispositionDate?: string | null
  dispositionTime?: string | null
  dispositionNote?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  patientProfile: Prisma.PatientProfileCreateNestedOneWithoutInpatientEncountersInput
  charts?: Prisma.InpatientEncounterChartCreateNestedManyWithoutEncounterInput
  orders?: Prisma.InpatientEncounterOrderCreateNestedManyWithoutEncounterInput
}

export type InpatientEncounterUncheckedCreateWithoutMedicalRecordRequestInput = {
  id?: string
  patientProfileId: string
  date: string
  time: string
  chiefComplaint: string
  doctorDiagnosis: string
  triage: $Enums.InpatientTriage
  disposition?: $Enums.InpatientDisposition
  dispositionDate?: string | null
  dispositionTime?: string | null
  dispositionNote?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  charts?: Prisma.InpatientEncounterChartUncheckedCreateNestedManyWithoutEncounterInput
  orders?: Prisma.InpatientEncounterOrderUncheckedCreateNestedManyWithoutEncounterInput
}

export type InpatientEncounterCreateOrConnectWithoutMedicalRecordRequestInput = {
  where: Prisma.InpatientEncounterWhereUniqueInput
  create: Prisma.XOR<Prisma.InpatientEncounterCreateWithoutMedicalRecordRequestInput, Prisma.InpatientEncounterUncheckedCreateWithoutMedicalRecordRequestInput>
}

export type InpatientEncounterUpsertWithoutMedicalRecordRequestInput = {
  update: Prisma.XOR<Prisma.InpatientEncounterUpdateWithoutMedicalRecordRequestInput, Prisma.InpatientEncounterUncheckedUpdateWithoutMedicalRecordRequestInput>
  create: Prisma.XOR<Prisma.InpatientEncounterCreateWithoutMedicalRecordRequestInput, Prisma.InpatientEncounterUncheckedCreateWithoutMedicalRecordRequestInput>
  where?: Prisma.InpatientEncounterWhereInput
}

export type InpatientEncounterUpdateToOneWithWhereWithoutMedicalRecordRequestInput = {
  where?: Prisma.InpatientEncounterWhereInput
  data: Prisma.XOR<Prisma.InpatientEncounterUpdateWithoutMedicalRecordRequestInput, Prisma.InpatientEncounterUncheckedUpdateWithoutMedicalRecordRequestInput>
}

export type InpatientEncounterUpdateWithoutMedicalRecordRequestInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  chiefComplaint?: Prisma.StringFieldUpdateOperationsInput | string
  doctorDiagnosis?: Prisma.StringFieldUpdateOperationsInput | string
  triage?: Prisma.EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
  disposition?: Prisma.EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
  dispositionDate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  patientProfile?: Prisma.PatientProfileUpdateOneRequiredWithoutInpatientEncountersNestedInput
  charts?: Prisma.InpatientEncounterChartUpdateManyWithoutEncounterNestedInput
  orders?: Prisma.InpatientEncounterOrderUpdateManyWithoutEncounterNestedInput
}

export type InpatientEncounterUncheckedUpdateWithoutMedicalRecordRequestInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  patientProfileId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  chiefComplaint?: Prisma.StringFieldUpdateOperationsInput | string
  doctorDiagnosis?: Prisma.StringFieldUpdateOperationsInput | string
  triage?: Prisma.EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
  disposition?: Prisma.EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
  dispositionDate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  charts?: Prisma.InpatientEncounterChartUncheckedUpdateManyWithoutEncounterNestedInput
  orders?: Prisma.InpatientEncounterOrderUncheckedUpdateManyWithoutEncounterNestedInput
}

export type InpatientEncounterCreateManyPatientProfileInput = {
  id?: string
  date: string
  time: string
  chiefComplaint: string
  doctorDiagnosis: string
  triage: $Enums.InpatientTriage
  disposition?: $Enums.InpatientDisposition
  dispositionDate?: string | null
  dispositionTime?: string | null
  dispositionNote?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InpatientEncounterUpdateWithoutPatientProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  chiefComplaint?: Prisma.StringFieldUpdateOperationsInput | string
  doctorDiagnosis?: Prisma.StringFieldUpdateOperationsInput | string
  triage?: Prisma.EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
  disposition?: Prisma.EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
  dispositionDate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  charts?: Prisma.InpatientEncounterChartUpdateManyWithoutEncounterNestedInput
  orders?: Prisma.InpatientEncounterOrderUpdateManyWithoutEncounterNestedInput
  medicalRecordRequest?: Prisma.MedicalRecordRequestUpdateManyWithoutInpatientEncounterNestedInput
}

export type InpatientEncounterUncheckedUpdateWithoutPatientProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  chiefComplaint?: Prisma.StringFieldUpdateOperationsInput | string
  doctorDiagnosis?: Prisma.StringFieldUpdateOperationsInput | string
  triage?: Prisma.EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
  disposition?: Prisma.EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
  dispositionDate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  charts?: Prisma.InpatientEncounterChartUncheckedUpdateManyWithoutEncounterNestedInput
  orders?: Prisma.InpatientEncounterOrderUncheckedUpdateManyWithoutEncounterNestedInput
  medicalRecordRequest?: Prisma.MedicalRecordRequestUncheckedUpdateManyWithoutInpatientEncounterNestedInput
}

export type InpatientEncounterUncheckedUpdateManyWithoutPatientProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  chiefComplaint?: Prisma.StringFieldUpdateOperationsInput | string
  doctorDiagnosis?: Prisma.StringFieldUpdateOperationsInput | string
  triage?: Prisma.EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
  disposition?: Prisma.EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
  dispositionDate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionTime?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dispositionNote?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type InpatientEncounterCountOutputType
 */

export type InpatientEncounterCountOutputType = {
  charts: number
  orders: number
  medicalRecordRequest: number
}

export type InpatientEncounterCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  charts?: boolean | InpatientEncounterCountOutputTypeCountChartsArgs
  orders?: boolean | InpatientEncounterCountOutputTypeCountOrdersArgs
  medicalRecordRequest?: boolean | InpatientEncounterCountOutputTypeCountMedicalRecordRequestArgs
}

/**
 * InpatientEncounterCountOutputType without action
 */
export type InpatientEncounterCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterCountOutputType
   */
  select?: Prisma.InpatientEncounterCountOutputTypeSelect<ExtArgs> | null
}

/**
 * InpatientEncounterCountOutputType without action
 */
export type InpatientEncounterCountOutputTypeCountChartsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InpatientEncounterChartWhereInput
}

/**
 * InpatientEncounterCountOutputType without action
 */
export type InpatientEncounterCountOutputTypeCountOrdersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InpatientEncounterOrderWhereInput
}

/**
 * InpatientEncounterCountOutputType without action
 */
export type InpatientEncounterCountOutputTypeCountMedicalRecordRequestArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MedicalRecordRequestWhereInput
}


export type InpatientEncounterSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  patientProfileId?: boolean
  date?: boolean
  time?: boolean
  chiefComplaint?: boolean
  doctorDiagnosis?: boolean
  triage?: boolean
  disposition?: boolean
  dispositionDate?: boolean
  dispositionTime?: boolean
  dispositionNote?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
  charts?: boolean | Prisma.InpatientEncounter$chartsArgs<ExtArgs>
  orders?: boolean | Prisma.InpatientEncounter$ordersArgs<ExtArgs>
  medicalRecordRequest?: boolean | Prisma.InpatientEncounter$medicalRecordRequestArgs<ExtArgs>
  _count?: boolean | Prisma.InpatientEncounterCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["inpatientEncounter"]>

export type InpatientEncounterSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  patientProfileId?: boolean
  date?: boolean
  time?: boolean
  chiefComplaint?: boolean
  doctorDiagnosis?: boolean
  triage?: boolean
  disposition?: boolean
  dispositionDate?: boolean
  dispositionTime?: boolean
  dispositionNote?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["inpatientEncounter"]>

export type InpatientEncounterSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  patientProfileId?: boolean
  date?: boolean
  time?: boolean
  chiefComplaint?: boolean
  doctorDiagnosis?: boolean
  triage?: boolean
  disposition?: boolean
  dispositionDate?: boolean
  dispositionTime?: boolean
  dispositionNote?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["inpatientEncounter"]>

export type InpatientEncounterSelectScalar = {
  id?: boolean
  patientProfileId?: boolean
  date?: boolean
  time?: boolean
  chiefComplaint?: boolean
  doctorDiagnosis?: boolean
  triage?: boolean
  disposition?: boolean
  dispositionDate?: boolean
  dispositionTime?: boolean
  dispositionNote?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type InpatientEncounterOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "patientProfileId" | "date" | "time" | "chiefComplaint" | "doctorDiagnosis" | "triage" | "disposition" | "dispositionDate" | "dispositionTime" | "dispositionNote" | "createdAt" | "updatedAt", ExtArgs["result"]["inpatientEncounter"]>
export type InpatientEncounterInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
  charts?: boolean | Prisma.InpatientEncounter$chartsArgs<ExtArgs>
  orders?: boolean | Prisma.InpatientEncounter$ordersArgs<ExtArgs>
  medicalRecordRequest?: boolean | Prisma.InpatientEncounter$medicalRecordRequestArgs<ExtArgs>
  _count?: boolean | Prisma.InpatientEncounterCountOutputTypeDefaultArgs<ExtArgs>
}
export type InpatientEncounterIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}
export type InpatientEncounterIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}

export type $InpatientEncounterPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "InpatientEncounter"
  objects: {
    patientProfile: Prisma.$PatientProfilePayload<ExtArgs>
    charts: Prisma.$InpatientEncounterChartPayload<ExtArgs>[]
    orders: Prisma.$InpatientEncounterOrderPayload<ExtArgs>[]
    medicalRecordRequest: Prisma.$MedicalRecordRequestPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    patientProfileId: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    triage: $Enums.InpatientTriage
    disposition: $Enums.InpatientDisposition
    dispositionDate: string | null
    dispositionTime: string | null
    dispositionNote: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["inpatientEncounter"]>
  composites: {}
}

export type InpatientEncounterGetPayload<S extends boolean | null | undefined | InpatientEncounterDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$InpatientEncounterPayload, S>

export type InpatientEncounterCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<InpatientEncounterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: InpatientEncounterCountAggregateInputType | true
  }

export interface InpatientEncounterDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InpatientEncounter'], meta: { name: 'InpatientEncounter' } }
  /**
   * Find zero or one InpatientEncounter that matches the filter.
   * @param {InpatientEncounterFindUniqueArgs} args - Arguments to find a InpatientEncounter
   * @example
   * // Get one InpatientEncounter
   * const inpatientEncounter = await prisma.inpatientEncounter.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InpatientEncounterFindUniqueArgs>(args: Prisma.SelectSubset<T, InpatientEncounterFindUniqueArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one InpatientEncounter that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InpatientEncounterFindUniqueOrThrowArgs} args - Arguments to find a InpatientEncounter
   * @example
   * // Get one InpatientEncounter
   * const inpatientEncounter = await prisma.inpatientEncounter.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InpatientEncounterFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, InpatientEncounterFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InpatientEncounter that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InpatientEncounterFindFirstArgs} args - Arguments to find a InpatientEncounter
   * @example
   * // Get one InpatientEncounter
   * const inpatientEncounter = await prisma.inpatientEncounter.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InpatientEncounterFindFirstArgs>(args?: Prisma.SelectSubset<T, InpatientEncounterFindFirstArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InpatientEncounter that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InpatientEncounterFindFirstOrThrowArgs} args - Arguments to find a InpatientEncounter
   * @example
   * // Get one InpatientEncounter
   * const inpatientEncounter = await prisma.inpatientEncounter.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InpatientEncounterFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, InpatientEncounterFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more InpatientEncounters that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InpatientEncounterFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all InpatientEncounters
   * const inpatientEncounters = await prisma.inpatientEncounter.findMany()
   * 
   * // Get first 10 InpatientEncounters
   * const inpatientEncounters = await prisma.inpatientEncounter.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const inpatientEncounterWithIdOnly = await prisma.inpatientEncounter.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends InpatientEncounterFindManyArgs>(args?: Prisma.SelectSubset<T, InpatientEncounterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a InpatientEncounter.
   * @param {InpatientEncounterCreateArgs} args - Arguments to create a InpatientEncounter.
   * @example
   * // Create one InpatientEncounter
   * const InpatientEncounter = await prisma.inpatientEncounter.create({
   *   data: {
   *     // ... data to create a InpatientEncounter
   *   }
   * })
   * 
   */
  create<T extends InpatientEncounterCreateArgs>(args: Prisma.SelectSubset<T, InpatientEncounterCreateArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many InpatientEncounters.
   * @param {InpatientEncounterCreateManyArgs} args - Arguments to create many InpatientEncounters.
   * @example
   * // Create many InpatientEncounters
   * const inpatientEncounter = await prisma.inpatientEncounter.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends InpatientEncounterCreateManyArgs>(args?: Prisma.SelectSubset<T, InpatientEncounterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many InpatientEncounters and returns the data saved in the database.
   * @param {InpatientEncounterCreateManyAndReturnArgs} args - Arguments to create many InpatientEncounters.
   * @example
   * // Create many InpatientEncounters
   * const inpatientEncounter = await prisma.inpatientEncounter.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many InpatientEncounters and only return the `id`
   * const inpatientEncounterWithIdOnly = await prisma.inpatientEncounter.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends InpatientEncounterCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, InpatientEncounterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a InpatientEncounter.
   * @param {InpatientEncounterDeleteArgs} args - Arguments to delete one InpatientEncounter.
   * @example
   * // Delete one InpatientEncounter
   * const InpatientEncounter = await prisma.inpatientEncounter.delete({
   *   where: {
   *     // ... filter to delete one InpatientEncounter
   *   }
   * })
   * 
   */
  delete<T extends InpatientEncounterDeleteArgs>(args: Prisma.SelectSubset<T, InpatientEncounterDeleteArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one InpatientEncounter.
   * @param {InpatientEncounterUpdateArgs} args - Arguments to update one InpatientEncounter.
   * @example
   * // Update one InpatientEncounter
   * const inpatientEncounter = await prisma.inpatientEncounter.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends InpatientEncounterUpdateArgs>(args: Prisma.SelectSubset<T, InpatientEncounterUpdateArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more InpatientEncounters.
   * @param {InpatientEncounterDeleteManyArgs} args - Arguments to filter InpatientEncounters to delete.
   * @example
   * // Delete a few InpatientEncounters
   * const { count } = await prisma.inpatientEncounter.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends InpatientEncounterDeleteManyArgs>(args?: Prisma.SelectSubset<T, InpatientEncounterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InpatientEncounters.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InpatientEncounterUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many InpatientEncounters
   * const inpatientEncounter = await prisma.inpatientEncounter.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends InpatientEncounterUpdateManyArgs>(args: Prisma.SelectSubset<T, InpatientEncounterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InpatientEncounters and returns the data updated in the database.
   * @param {InpatientEncounterUpdateManyAndReturnArgs} args - Arguments to update many InpatientEncounters.
   * @example
   * // Update many InpatientEncounters
   * const inpatientEncounter = await prisma.inpatientEncounter.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more InpatientEncounters and only return the `id`
   * const inpatientEncounterWithIdOnly = await prisma.inpatientEncounter.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends InpatientEncounterUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, InpatientEncounterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one InpatientEncounter.
   * @param {InpatientEncounterUpsertArgs} args - Arguments to update or create a InpatientEncounter.
   * @example
   * // Update or create a InpatientEncounter
   * const inpatientEncounter = await prisma.inpatientEncounter.upsert({
   *   create: {
   *     // ... data to create a InpatientEncounter
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the InpatientEncounter we want to update
   *   }
   * })
   */
  upsert<T extends InpatientEncounterUpsertArgs>(args: Prisma.SelectSubset<T, InpatientEncounterUpsertArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of InpatientEncounters.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InpatientEncounterCountArgs} args - Arguments to filter InpatientEncounters to count.
   * @example
   * // Count the number of InpatientEncounters
   * const count = await prisma.inpatientEncounter.count({
   *   where: {
   *     // ... the filter for the InpatientEncounters we want to count
   *   }
   * })
  **/
  count<T extends InpatientEncounterCountArgs>(
    args?: Prisma.Subset<T, InpatientEncounterCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], InpatientEncounterCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a InpatientEncounter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InpatientEncounterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends InpatientEncounterAggregateArgs>(args: Prisma.Subset<T, InpatientEncounterAggregateArgs>): Prisma.PrismaPromise<GetInpatientEncounterAggregateType<T>>

  /**
   * Group by InpatientEncounter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InpatientEncounterGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends InpatientEncounterGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InpatientEncounterGroupByArgs['orderBy'] }
      : { orderBy?: InpatientEncounterGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, InpatientEncounterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInpatientEncounterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the InpatientEncounter model
 */
readonly fields: InpatientEncounterFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for InpatientEncounter.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InpatientEncounterClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  patientProfile<T extends Prisma.PatientProfileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PatientProfileDefaultArgs<ExtArgs>>): Prisma.Prisma__PatientProfileClient<runtime.Types.Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  charts<T extends Prisma.InpatientEncounter$chartsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.InpatientEncounter$chartsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  orders<T extends Prisma.InpatientEncounter$ordersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.InpatientEncounter$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  medicalRecordRequest<T extends Prisma.InpatientEncounter$medicalRecordRequestArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.InpatientEncounter$medicalRecordRequestArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the InpatientEncounter model
 */
export interface InpatientEncounterFieldRefs {
  readonly id: Prisma.FieldRef<"InpatientEncounter", 'String'>
  readonly patientProfileId: Prisma.FieldRef<"InpatientEncounter", 'String'>
  readonly date: Prisma.FieldRef<"InpatientEncounter", 'String'>
  readonly time: Prisma.FieldRef<"InpatientEncounter", 'String'>
  readonly chiefComplaint: Prisma.FieldRef<"InpatientEncounter", 'String'>
  readonly doctorDiagnosis: Prisma.FieldRef<"InpatientEncounter", 'String'>
  readonly triage: Prisma.FieldRef<"InpatientEncounter", 'InpatientTriage'>
  readonly disposition: Prisma.FieldRef<"InpatientEncounter", 'InpatientDisposition'>
  readonly dispositionDate: Prisma.FieldRef<"InpatientEncounter", 'String'>
  readonly dispositionTime: Prisma.FieldRef<"InpatientEncounter", 'String'>
  readonly dispositionNote: Prisma.FieldRef<"InpatientEncounter", 'String'>
  readonly createdAt: Prisma.FieldRef<"InpatientEncounter", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"InpatientEncounter", 'DateTime'>
}
    

// Custom InputTypes
/**
 * InpatientEncounter findUnique
 */
export type InpatientEncounterFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounter
   */
  select?: Prisma.InpatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounter
   */
  omit?: Prisma.InpatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterInclude<ExtArgs> | null
  /**
   * Filter, which InpatientEncounter to fetch.
   */
  where: Prisma.InpatientEncounterWhereUniqueInput
}

/**
 * InpatientEncounter findUniqueOrThrow
 */
export type InpatientEncounterFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounter
   */
  select?: Prisma.InpatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounter
   */
  omit?: Prisma.InpatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterInclude<ExtArgs> | null
  /**
   * Filter, which InpatientEncounter to fetch.
   */
  where: Prisma.InpatientEncounterWhereUniqueInput
}

/**
 * InpatientEncounter findFirst
 */
export type InpatientEncounterFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounter
   */
  select?: Prisma.InpatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounter
   */
  omit?: Prisma.InpatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterInclude<ExtArgs> | null
  /**
   * Filter, which InpatientEncounter to fetch.
   */
  where?: Prisma.InpatientEncounterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InpatientEncounters to fetch.
   */
  orderBy?: Prisma.InpatientEncounterOrderByWithRelationInput | Prisma.InpatientEncounterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InpatientEncounters.
   */
  cursor?: Prisma.InpatientEncounterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InpatientEncounters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InpatientEncounters.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InpatientEncounters.
   */
  distinct?: Prisma.InpatientEncounterScalarFieldEnum | Prisma.InpatientEncounterScalarFieldEnum[]
}

/**
 * InpatientEncounter findFirstOrThrow
 */
export type InpatientEncounterFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounter
   */
  select?: Prisma.InpatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounter
   */
  omit?: Prisma.InpatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterInclude<ExtArgs> | null
  /**
   * Filter, which InpatientEncounter to fetch.
   */
  where?: Prisma.InpatientEncounterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InpatientEncounters to fetch.
   */
  orderBy?: Prisma.InpatientEncounterOrderByWithRelationInput | Prisma.InpatientEncounterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InpatientEncounters.
   */
  cursor?: Prisma.InpatientEncounterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InpatientEncounters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InpatientEncounters.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InpatientEncounters.
   */
  distinct?: Prisma.InpatientEncounterScalarFieldEnum | Prisma.InpatientEncounterScalarFieldEnum[]
}

/**
 * InpatientEncounter findMany
 */
export type InpatientEncounterFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounter
   */
  select?: Prisma.InpatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounter
   */
  omit?: Prisma.InpatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterInclude<ExtArgs> | null
  /**
   * Filter, which InpatientEncounters to fetch.
   */
  where?: Prisma.InpatientEncounterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InpatientEncounters to fetch.
   */
  orderBy?: Prisma.InpatientEncounterOrderByWithRelationInput | Prisma.InpatientEncounterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing InpatientEncounters.
   */
  cursor?: Prisma.InpatientEncounterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InpatientEncounters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InpatientEncounters.
   */
  skip?: number
  distinct?: Prisma.InpatientEncounterScalarFieldEnum | Prisma.InpatientEncounterScalarFieldEnum[]
}

/**
 * InpatientEncounter create
 */
export type InpatientEncounterCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounter
   */
  select?: Prisma.InpatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounter
   */
  omit?: Prisma.InpatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterInclude<ExtArgs> | null
  /**
   * The data needed to create a InpatientEncounter.
   */
  data: Prisma.XOR<Prisma.InpatientEncounterCreateInput, Prisma.InpatientEncounterUncheckedCreateInput>
}

/**
 * InpatientEncounter createMany
 */
export type InpatientEncounterCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many InpatientEncounters.
   */
  data: Prisma.InpatientEncounterCreateManyInput | Prisma.InpatientEncounterCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * InpatientEncounter createManyAndReturn
 */
export type InpatientEncounterCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounter
   */
  select?: Prisma.InpatientEncounterSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounter
   */
  omit?: Prisma.InpatientEncounterOmit<ExtArgs> | null
  /**
   * The data used to create many InpatientEncounters.
   */
  data: Prisma.InpatientEncounterCreateManyInput | Prisma.InpatientEncounterCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * InpatientEncounter update
 */
export type InpatientEncounterUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounter
   */
  select?: Prisma.InpatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounter
   */
  omit?: Prisma.InpatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterInclude<ExtArgs> | null
  /**
   * The data needed to update a InpatientEncounter.
   */
  data: Prisma.XOR<Prisma.InpatientEncounterUpdateInput, Prisma.InpatientEncounterUncheckedUpdateInput>
  /**
   * Choose, which InpatientEncounter to update.
   */
  where: Prisma.InpatientEncounterWhereUniqueInput
}

/**
 * InpatientEncounter updateMany
 */
export type InpatientEncounterUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update InpatientEncounters.
   */
  data: Prisma.XOR<Prisma.InpatientEncounterUpdateManyMutationInput, Prisma.InpatientEncounterUncheckedUpdateManyInput>
  /**
   * Filter which InpatientEncounters to update
   */
  where?: Prisma.InpatientEncounterWhereInput
  /**
   * Limit how many InpatientEncounters to update.
   */
  limit?: number
}

/**
 * InpatientEncounter updateManyAndReturn
 */
export type InpatientEncounterUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounter
   */
  select?: Prisma.InpatientEncounterSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounter
   */
  omit?: Prisma.InpatientEncounterOmit<ExtArgs> | null
  /**
   * The data used to update InpatientEncounters.
   */
  data: Prisma.XOR<Prisma.InpatientEncounterUpdateManyMutationInput, Prisma.InpatientEncounterUncheckedUpdateManyInput>
  /**
   * Filter which InpatientEncounters to update
   */
  where?: Prisma.InpatientEncounterWhereInput
  /**
   * Limit how many InpatientEncounters to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * InpatientEncounter upsert
 */
export type InpatientEncounterUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounter
   */
  select?: Prisma.InpatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounter
   */
  omit?: Prisma.InpatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterInclude<ExtArgs> | null
  /**
   * The filter to search for the InpatientEncounter to update in case it exists.
   */
  where: Prisma.InpatientEncounterWhereUniqueInput
  /**
   * In case the InpatientEncounter found by the `where` argument doesn't exist, create a new InpatientEncounter with this data.
   */
  create: Prisma.XOR<Prisma.InpatientEncounterCreateInput, Prisma.InpatientEncounterUncheckedCreateInput>
  /**
   * In case the InpatientEncounter was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.InpatientEncounterUpdateInput, Prisma.InpatientEncounterUncheckedUpdateInput>
}

/**
 * InpatientEncounter delete
 */
export type InpatientEncounterDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounter
   */
  select?: Prisma.InpatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounter
   */
  omit?: Prisma.InpatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterInclude<ExtArgs> | null
  /**
   * Filter which InpatientEncounter to delete.
   */
  where: Prisma.InpatientEncounterWhereUniqueInput
}

/**
 * InpatientEncounter deleteMany
 */
export type InpatientEncounterDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InpatientEncounters to delete
   */
  where?: Prisma.InpatientEncounterWhereInput
  /**
   * Limit how many InpatientEncounters to delete.
   */
  limit?: number
}

/**
 * InpatientEncounter.charts
 */
export type InpatientEncounter$chartsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterChart
   */
  select?: Prisma.InpatientEncounterChartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterChart
   */
  omit?: Prisma.InpatientEncounterChartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterChartInclude<ExtArgs> | null
  where?: Prisma.InpatientEncounterChartWhereInput
  orderBy?: Prisma.InpatientEncounterChartOrderByWithRelationInput | Prisma.InpatientEncounterChartOrderByWithRelationInput[]
  cursor?: Prisma.InpatientEncounterChartWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.InpatientEncounterChartScalarFieldEnum | Prisma.InpatientEncounterChartScalarFieldEnum[]
}

/**
 * InpatientEncounter.orders
 */
export type InpatientEncounter$ordersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterOrder
   */
  select?: Prisma.InpatientEncounterOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterOrder
   */
  omit?: Prisma.InpatientEncounterOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterOrderInclude<ExtArgs> | null
  where?: Prisma.InpatientEncounterOrderWhereInput
  orderBy?: Prisma.InpatientEncounterOrderOrderByWithRelationInput | Prisma.InpatientEncounterOrderOrderByWithRelationInput[]
  cursor?: Prisma.InpatientEncounterOrderWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.InpatientEncounterOrderScalarFieldEnum | Prisma.InpatientEncounterOrderScalarFieldEnum[]
}

/**
 * InpatientEncounter.medicalRecordRequest
 */
export type InpatientEncounter$medicalRecordRequestArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalRecordRequest
   */
  select?: Prisma.MedicalRecordRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalRecordRequest
   */
  omit?: Prisma.MedicalRecordRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalRecordRequestInclude<ExtArgs> | null
  where?: Prisma.MedicalRecordRequestWhereInput
  orderBy?: Prisma.MedicalRecordRequestOrderByWithRelationInput | Prisma.MedicalRecordRequestOrderByWithRelationInput[]
  cursor?: Prisma.MedicalRecordRequestWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MedicalRecordRequestScalarFieldEnum | Prisma.MedicalRecordRequestScalarFieldEnum[]
}

/**
 * InpatientEncounter without action
 */
export type InpatientEncounterDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounter
   */
  select?: Prisma.InpatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounter
   */
  omit?: Prisma.InpatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterInclude<ExtArgs> | null
}
