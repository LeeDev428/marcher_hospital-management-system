
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `InsuranceClaim` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model InsuranceClaim
 * 
 */
export type InsuranceClaimModel = runtime.Types.Result.DefaultSelection<Prisma.$InsuranceClaimPayload>

export type AggregateInsuranceClaim = {
  _count: InsuranceClaimCountAggregateOutputType | null
  _avg: InsuranceClaimAvgAggregateOutputType | null
  _sum: InsuranceClaimSumAggregateOutputType | null
  _min: InsuranceClaimMinAggregateOutputType | null
  _max: InsuranceClaimMaxAggregateOutputType | null
}

export type InsuranceClaimAvgAggregateOutputType = {
  amount: number | null
}

export type InsuranceClaimSumAggregateOutputType = {
  amount: number | null
}

export type InsuranceClaimMinAggregateOutputType = {
  id: string | null
  providerId: string | null
  status: string | null
  message: string | null
  amount: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InsuranceClaimMaxAggregateOutputType = {
  id: string | null
  providerId: string | null
  status: string | null
  message: string | null
  amount: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InsuranceClaimCountAggregateOutputType = {
  id: number
  providerId: number
  status: number
  message: number
  amount: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type InsuranceClaimAvgAggregateInputType = {
  amount?: true
}

export type InsuranceClaimSumAggregateInputType = {
  amount?: true
}

export type InsuranceClaimMinAggregateInputType = {
  id?: true
  providerId?: true
  status?: true
  message?: true
  amount?: true
  createdAt?: true
  updatedAt?: true
}

export type InsuranceClaimMaxAggregateInputType = {
  id?: true
  providerId?: true
  status?: true
  message?: true
  amount?: true
  createdAt?: true
  updatedAt?: true
}

export type InsuranceClaimCountAggregateInputType = {
  id?: true
  providerId?: true
  status?: true
  message?: true
  amount?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type InsuranceClaimAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InsuranceClaim to aggregate.
   */
  where?: Prisma.InsuranceClaimWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InsuranceClaims to fetch.
   */
  orderBy?: Prisma.InsuranceClaimOrderByWithRelationInput | Prisma.InsuranceClaimOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.InsuranceClaimWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InsuranceClaims from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InsuranceClaims.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned InsuranceClaims
  **/
  _count?: true | InsuranceClaimCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: InsuranceClaimAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: InsuranceClaimSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: InsuranceClaimMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: InsuranceClaimMaxAggregateInputType
}

export type GetInsuranceClaimAggregateType<T extends InsuranceClaimAggregateArgs> = {
      [P in keyof T & keyof AggregateInsuranceClaim]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInsuranceClaim[P]>
    : Prisma.GetScalarType<T[P], AggregateInsuranceClaim[P]>
}




export type InsuranceClaimGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InsuranceClaimWhereInput
  orderBy?: Prisma.InsuranceClaimOrderByWithAggregationInput | Prisma.InsuranceClaimOrderByWithAggregationInput[]
  by: Prisma.InsuranceClaimScalarFieldEnum[] | Prisma.InsuranceClaimScalarFieldEnum
  having?: Prisma.InsuranceClaimScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: InsuranceClaimCountAggregateInputType | true
  _avg?: InsuranceClaimAvgAggregateInputType
  _sum?: InsuranceClaimSumAggregateInputType
  _min?: InsuranceClaimMinAggregateInputType
  _max?: InsuranceClaimMaxAggregateInputType
}

export type InsuranceClaimGroupByOutputType = {
  id: string
  providerId: string
  status: string
  message: string | null
  amount: number
  createdAt: Date
  updatedAt: Date
  _count: InsuranceClaimCountAggregateOutputType | null
  _avg: InsuranceClaimAvgAggregateOutputType | null
  _sum: InsuranceClaimSumAggregateOutputType | null
  _min: InsuranceClaimMinAggregateOutputType | null
  _max: InsuranceClaimMaxAggregateOutputType | null
}

type GetInsuranceClaimGroupByPayload<T extends InsuranceClaimGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InsuranceClaimGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof InsuranceClaimGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InsuranceClaimGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InsuranceClaimGroupByOutputType[P]>
      }
    >
  >



export type InsuranceClaimWhereInput = {
  AND?: Prisma.InsuranceClaimWhereInput | Prisma.InsuranceClaimWhereInput[]
  OR?: Prisma.InsuranceClaimWhereInput[]
  NOT?: Prisma.InsuranceClaimWhereInput | Prisma.InsuranceClaimWhereInput[]
  id?: Prisma.UuidFilter<"InsuranceClaim"> | string
  providerId?: Prisma.UuidFilter<"InsuranceClaim"> | string
  status?: Prisma.StringFilter<"InsuranceClaim"> | string
  message?: Prisma.StringNullableFilter<"InsuranceClaim"> | string | null
  amount?: Prisma.IntFilter<"InsuranceClaim"> | number
  createdAt?: Prisma.DateTimeFilter<"InsuranceClaim"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InsuranceClaim"> | Date | string
  provider?: Prisma.XOR<Prisma.InsuranceProviderScalarRelationFilter, Prisma.InsuranceProviderWhereInput>
  items?: Prisma.InsuranceClaimItemListRelationFilter
}

export type InsuranceClaimOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  message?: Prisma.SortOrderInput | Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  provider?: Prisma.InsuranceProviderOrderByWithRelationInput
  items?: Prisma.InsuranceClaimItemOrderByRelationAggregateInput
}

export type InsuranceClaimWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.InsuranceClaimWhereInput | Prisma.InsuranceClaimWhereInput[]
  OR?: Prisma.InsuranceClaimWhereInput[]
  NOT?: Prisma.InsuranceClaimWhereInput | Prisma.InsuranceClaimWhereInput[]
  providerId?: Prisma.UuidFilter<"InsuranceClaim"> | string
  status?: Prisma.StringFilter<"InsuranceClaim"> | string
  message?: Prisma.StringNullableFilter<"InsuranceClaim"> | string | null
  amount?: Prisma.IntFilter<"InsuranceClaim"> | number
  createdAt?: Prisma.DateTimeFilter<"InsuranceClaim"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InsuranceClaim"> | Date | string
  provider?: Prisma.XOR<Prisma.InsuranceProviderScalarRelationFilter, Prisma.InsuranceProviderWhereInput>
  items?: Prisma.InsuranceClaimItemListRelationFilter
}, "id">

export type InsuranceClaimOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  message?: Prisma.SortOrderInput | Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.InsuranceClaimCountOrderByAggregateInput
  _avg?: Prisma.InsuranceClaimAvgOrderByAggregateInput
  _max?: Prisma.InsuranceClaimMaxOrderByAggregateInput
  _min?: Prisma.InsuranceClaimMinOrderByAggregateInput
  _sum?: Prisma.InsuranceClaimSumOrderByAggregateInput
}

export type InsuranceClaimScalarWhereWithAggregatesInput = {
  AND?: Prisma.InsuranceClaimScalarWhereWithAggregatesInput | Prisma.InsuranceClaimScalarWhereWithAggregatesInput[]
  OR?: Prisma.InsuranceClaimScalarWhereWithAggregatesInput[]
  NOT?: Prisma.InsuranceClaimScalarWhereWithAggregatesInput | Prisma.InsuranceClaimScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"InsuranceClaim"> | string
  providerId?: Prisma.UuidWithAggregatesFilter<"InsuranceClaim"> | string
  status?: Prisma.StringWithAggregatesFilter<"InsuranceClaim"> | string
  message?: Prisma.StringNullableWithAggregatesFilter<"InsuranceClaim"> | string | null
  amount?: Prisma.IntWithAggregatesFilter<"InsuranceClaim"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"InsuranceClaim"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"InsuranceClaim"> | Date | string
}

export type InsuranceClaimCreateInput = {
  id?: string
  status: string
  message?: string | null
  amount: number
  createdAt?: Date | string
  updatedAt?: Date | string
  provider: Prisma.InsuranceProviderCreateNestedOneWithoutClaimsInput
  items?: Prisma.InsuranceClaimItemCreateNestedManyWithoutClaimInput
}

export type InsuranceClaimUncheckedCreateInput = {
  id?: string
  providerId: string
  status: string
  message?: string | null
  amount: number
  createdAt?: Date | string
  updatedAt?: Date | string
  items?: Prisma.InsuranceClaimItemUncheckedCreateNestedManyWithoutClaimInput
}

export type InsuranceClaimUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  provider?: Prisma.InsuranceProviderUpdateOneRequiredWithoutClaimsNestedInput
  items?: Prisma.InsuranceClaimItemUpdateManyWithoutClaimNestedInput
}

export type InsuranceClaimUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  items?: Prisma.InsuranceClaimItemUncheckedUpdateManyWithoutClaimNestedInput
}

export type InsuranceClaimCreateManyInput = {
  id?: string
  providerId: string
  status: string
  message?: string | null
  amount: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InsuranceClaimUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InsuranceClaimUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InsuranceClaimListRelationFilter = {
  every?: Prisma.InsuranceClaimWhereInput
  some?: Prisma.InsuranceClaimWhereInput
  none?: Prisma.InsuranceClaimWhereInput
}

export type InsuranceClaimOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type InsuranceClaimCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  message?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InsuranceClaimAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type InsuranceClaimMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  message?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InsuranceClaimMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  message?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InsuranceClaimSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type InsuranceClaimScalarRelationFilter = {
  is?: Prisma.InsuranceClaimWhereInput
  isNot?: Prisma.InsuranceClaimWhereInput
}

export type InsuranceClaimCreateNestedManyWithoutProviderInput = {
  create?: Prisma.XOR<Prisma.InsuranceClaimCreateWithoutProviderInput, Prisma.InsuranceClaimUncheckedCreateWithoutProviderInput> | Prisma.InsuranceClaimCreateWithoutProviderInput[] | Prisma.InsuranceClaimUncheckedCreateWithoutProviderInput[]
  connectOrCreate?: Prisma.InsuranceClaimCreateOrConnectWithoutProviderInput | Prisma.InsuranceClaimCreateOrConnectWithoutProviderInput[]
  createMany?: Prisma.InsuranceClaimCreateManyProviderInputEnvelope
  connect?: Prisma.InsuranceClaimWhereUniqueInput | Prisma.InsuranceClaimWhereUniqueInput[]
}

export type InsuranceClaimUncheckedCreateNestedManyWithoutProviderInput = {
  create?: Prisma.XOR<Prisma.InsuranceClaimCreateWithoutProviderInput, Prisma.InsuranceClaimUncheckedCreateWithoutProviderInput> | Prisma.InsuranceClaimCreateWithoutProviderInput[] | Prisma.InsuranceClaimUncheckedCreateWithoutProviderInput[]
  connectOrCreate?: Prisma.InsuranceClaimCreateOrConnectWithoutProviderInput | Prisma.InsuranceClaimCreateOrConnectWithoutProviderInput[]
  createMany?: Prisma.InsuranceClaimCreateManyProviderInputEnvelope
  connect?: Prisma.InsuranceClaimWhereUniqueInput | Prisma.InsuranceClaimWhereUniqueInput[]
}

export type InsuranceClaimUpdateManyWithoutProviderNestedInput = {
  create?: Prisma.XOR<Prisma.InsuranceClaimCreateWithoutProviderInput, Prisma.InsuranceClaimUncheckedCreateWithoutProviderInput> | Prisma.InsuranceClaimCreateWithoutProviderInput[] | Prisma.InsuranceClaimUncheckedCreateWithoutProviderInput[]
  connectOrCreate?: Prisma.InsuranceClaimCreateOrConnectWithoutProviderInput | Prisma.InsuranceClaimCreateOrConnectWithoutProviderInput[]
  upsert?: Prisma.InsuranceClaimUpsertWithWhereUniqueWithoutProviderInput | Prisma.InsuranceClaimUpsertWithWhereUniqueWithoutProviderInput[]
  createMany?: Prisma.InsuranceClaimCreateManyProviderInputEnvelope
  set?: Prisma.InsuranceClaimWhereUniqueInput | Prisma.InsuranceClaimWhereUniqueInput[]
  disconnect?: Prisma.InsuranceClaimWhereUniqueInput | Prisma.InsuranceClaimWhereUniqueInput[]
  delete?: Prisma.InsuranceClaimWhereUniqueInput | Prisma.InsuranceClaimWhereUniqueInput[]
  connect?: Prisma.InsuranceClaimWhereUniqueInput | Prisma.InsuranceClaimWhereUniqueInput[]
  update?: Prisma.InsuranceClaimUpdateWithWhereUniqueWithoutProviderInput | Prisma.InsuranceClaimUpdateWithWhereUniqueWithoutProviderInput[]
  updateMany?: Prisma.InsuranceClaimUpdateManyWithWhereWithoutProviderInput | Prisma.InsuranceClaimUpdateManyWithWhereWithoutProviderInput[]
  deleteMany?: Prisma.InsuranceClaimScalarWhereInput | Prisma.InsuranceClaimScalarWhereInput[]
}

export type InsuranceClaimUncheckedUpdateManyWithoutProviderNestedInput = {
  create?: Prisma.XOR<Prisma.InsuranceClaimCreateWithoutProviderInput, Prisma.InsuranceClaimUncheckedCreateWithoutProviderInput> | Prisma.InsuranceClaimCreateWithoutProviderInput[] | Prisma.InsuranceClaimUncheckedCreateWithoutProviderInput[]
  connectOrCreate?: Prisma.InsuranceClaimCreateOrConnectWithoutProviderInput | Prisma.InsuranceClaimCreateOrConnectWithoutProviderInput[]
  upsert?: Prisma.InsuranceClaimUpsertWithWhereUniqueWithoutProviderInput | Prisma.InsuranceClaimUpsertWithWhereUniqueWithoutProviderInput[]
  createMany?: Prisma.InsuranceClaimCreateManyProviderInputEnvelope
  set?: Prisma.InsuranceClaimWhereUniqueInput | Prisma.InsuranceClaimWhereUniqueInput[]
  disconnect?: Prisma.InsuranceClaimWhereUniqueInput | Prisma.InsuranceClaimWhereUniqueInput[]
  delete?: Prisma.InsuranceClaimWhereUniqueInput | Prisma.InsuranceClaimWhereUniqueInput[]
  connect?: Prisma.InsuranceClaimWhereUniqueInput | Prisma.InsuranceClaimWhereUniqueInput[]
  update?: Prisma.InsuranceClaimUpdateWithWhereUniqueWithoutProviderInput | Prisma.InsuranceClaimUpdateWithWhereUniqueWithoutProviderInput[]
  updateMany?: Prisma.InsuranceClaimUpdateManyWithWhereWithoutProviderInput | Prisma.InsuranceClaimUpdateManyWithWhereWithoutProviderInput[]
  deleteMany?: Prisma.InsuranceClaimScalarWhereInput | Prisma.InsuranceClaimScalarWhereInput[]
}

export type InsuranceClaimCreateNestedOneWithoutItemsInput = {
  create?: Prisma.XOR<Prisma.InsuranceClaimCreateWithoutItemsInput, Prisma.InsuranceClaimUncheckedCreateWithoutItemsInput>
  connectOrCreate?: Prisma.InsuranceClaimCreateOrConnectWithoutItemsInput
  connect?: Prisma.InsuranceClaimWhereUniqueInput
}

export type InsuranceClaimUpdateOneRequiredWithoutItemsNestedInput = {
  create?: Prisma.XOR<Prisma.InsuranceClaimCreateWithoutItemsInput, Prisma.InsuranceClaimUncheckedCreateWithoutItemsInput>
  connectOrCreate?: Prisma.InsuranceClaimCreateOrConnectWithoutItemsInput
  upsert?: Prisma.InsuranceClaimUpsertWithoutItemsInput
  connect?: Prisma.InsuranceClaimWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.InsuranceClaimUpdateToOneWithWhereWithoutItemsInput, Prisma.InsuranceClaimUpdateWithoutItemsInput>, Prisma.InsuranceClaimUncheckedUpdateWithoutItemsInput>
}

export type InsuranceClaimCreateWithoutProviderInput = {
  id?: string
  status: string
  message?: string | null
  amount: number
  createdAt?: Date | string
  updatedAt?: Date | string
  items?: Prisma.InsuranceClaimItemCreateNestedManyWithoutClaimInput
}

export type InsuranceClaimUncheckedCreateWithoutProviderInput = {
  id?: string
  status: string
  message?: string | null
  amount: number
  createdAt?: Date | string
  updatedAt?: Date | string
  items?: Prisma.InsuranceClaimItemUncheckedCreateNestedManyWithoutClaimInput
}

export type InsuranceClaimCreateOrConnectWithoutProviderInput = {
  where: Prisma.InsuranceClaimWhereUniqueInput
  create: Prisma.XOR<Prisma.InsuranceClaimCreateWithoutProviderInput, Prisma.InsuranceClaimUncheckedCreateWithoutProviderInput>
}

export type InsuranceClaimCreateManyProviderInputEnvelope = {
  data: Prisma.InsuranceClaimCreateManyProviderInput | Prisma.InsuranceClaimCreateManyProviderInput[]
  skipDuplicates?: boolean
}

export type InsuranceClaimUpsertWithWhereUniqueWithoutProviderInput = {
  where: Prisma.InsuranceClaimWhereUniqueInput
  update: Prisma.XOR<Prisma.InsuranceClaimUpdateWithoutProviderInput, Prisma.InsuranceClaimUncheckedUpdateWithoutProviderInput>
  create: Prisma.XOR<Prisma.InsuranceClaimCreateWithoutProviderInput, Prisma.InsuranceClaimUncheckedCreateWithoutProviderInput>
}

export type InsuranceClaimUpdateWithWhereUniqueWithoutProviderInput = {
  where: Prisma.InsuranceClaimWhereUniqueInput
  data: Prisma.XOR<Prisma.InsuranceClaimUpdateWithoutProviderInput, Prisma.InsuranceClaimUncheckedUpdateWithoutProviderInput>
}

export type InsuranceClaimUpdateManyWithWhereWithoutProviderInput = {
  where: Prisma.InsuranceClaimScalarWhereInput
  data: Prisma.XOR<Prisma.InsuranceClaimUpdateManyMutationInput, Prisma.InsuranceClaimUncheckedUpdateManyWithoutProviderInput>
}

export type InsuranceClaimScalarWhereInput = {
  AND?: Prisma.InsuranceClaimScalarWhereInput | Prisma.InsuranceClaimScalarWhereInput[]
  OR?: Prisma.InsuranceClaimScalarWhereInput[]
  NOT?: Prisma.InsuranceClaimScalarWhereInput | Prisma.InsuranceClaimScalarWhereInput[]
  id?: Prisma.UuidFilter<"InsuranceClaim"> | string
  providerId?: Prisma.UuidFilter<"InsuranceClaim"> | string
  status?: Prisma.StringFilter<"InsuranceClaim"> | string
  message?: Prisma.StringNullableFilter<"InsuranceClaim"> | string | null
  amount?: Prisma.IntFilter<"InsuranceClaim"> | number
  createdAt?: Prisma.DateTimeFilter<"InsuranceClaim"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InsuranceClaim"> | Date | string
}

export type InsuranceClaimCreateWithoutItemsInput = {
  id?: string
  status: string
  message?: string | null
  amount: number
  createdAt?: Date | string
  updatedAt?: Date | string
  provider: Prisma.InsuranceProviderCreateNestedOneWithoutClaimsInput
}

export type InsuranceClaimUncheckedCreateWithoutItemsInput = {
  id?: string
  providerId: string
  status: string
  message?: string | null
  amount: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InsuranceClaimCreateOrConnectWithoutItemsInput = {
  where: Prisma.InsuranceClaimWhereUniqueInput
  create: Prisma.XOR<Prisma.InsuranceClaimCreateWithoutItemsInput, Prisma.InsuranceClaimUncheckedCreateWithoutItemsInput>
}

export type InsuranceClaimUpsertWithoutItemsInput = {
  update: Prisma.XOR<Prisma.InsuranceClaimUpdateWithoutItemsInput, Prisma.InsuranceClaimUncheckedUpdateWithoutItemsInput>
  create: Prisma.XOR<Prisma.InsuranceClaimCreateWithoutItemsInput, Prisma.InsuranceClaimUncheckedCreateWithoutItemsInput>
  where?: Prisma.InsuranceClaimWhereInput
}

export type InsuranceClaimUpdateToOneWithWhereWithoutItemsInput = {
  where?: Prisma.InsuranceClaimWhereInput
  data: Prisma.XOR<Prisma.InsuranceClaimUpdateWithoutItemsInput, Prisma.InsuranceClaimUncheckedUpdateWithoutItemsInput>
}

export type InsuranceClaimUpdateWithoutItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  provider?: Prisma.InsuranceProviderUpdateOneRequiredWithoutClaimsNestedInput
}

export type InsuranceClaimUncheckedUpdateWithoutItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InsuranceClaimCreateManyProviderInput = {
  id?: string
  status: string
  message?: string | null
  amount: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InsuranceClaimUpdateWithoutProviderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  items?: Prisma.InsuranceClaimItemUpdateManyWithoutClaimNestedInput
}

export type InsuranceClaimUncheckedUpdateWithoutProviderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  items?: Prisma.InsuranceClaimItemUncheckedUpdateManyWithoutClaimNestedInput
}

export type InsuranceClaimUncheckedUpdateManyWithoutProviderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type InsuranceClaimCountOutputType
 */

export type InsuranceClaimCountOutputType = {
  items: number
}

export type InsuranceClaimCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  items?: boolean | InsuranceClaimCountOutputTypeCountItemsArgs
}

/**
 * InsuranceClaimCountOutputType without action
 */
export type InsuranceClaimCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceClaimCountOutputType
   */
  select?: Prisma.InsuranceClaimCountOutputTypeSelect<ExtArgs> | null
}

/**
 * InsuranceClaimCountOutputType without action
 */
export type InsuranceClaimCountOutputTypeCountItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InsuranceClaimItemWhereInput
}


export type InsuranceClaimSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  providerId?: boolean
  status?: boolean
  message?: boolean
  amount?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  provider?: boolean | Prisma.InsuranceProviderDefaultArgs<ExtArgs>
  items?: boolean | Prisma.InsuranceClaim$itemsArgs<ExtArgs>
  _count?: boolean | Prisma.InsuranceClaimCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["insuranceClaim"]>

export type InsuranceClaimSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  providerId?: boolean
  status?: boolean
  message?: boolean
  amount?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  provider?: boolean | Prisma.InsuranceProviderDefaultArgs<ExtArgs>
}, ExtArgs["result"]["insuranceClaim"]>

export type InsuranceClaimSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  providerId?: boolean
  status?: boolean
  message?: boolean
  amount?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  provider?: boolean | Prisma.InsuranceProviderDefaultArgs<ExtArgs>
}, ExtArgs["result"]["insuranceClaim"]>

export type InsuranceClaimSelectScalar = {
  id?: boolean
  providerId?: boolean
  status?: boolean
  message?: boolean
  amount?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type InsuranceClaimOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "providerId" | "status" | "message" | "amount" | "createdAt" | "updatedAt", ExtArgs["result"]["insuranceClaim"]>
export type InsuranceClaimInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  provider?: boolean | Prisma.InsuranceProviderDefaultArgs<ExtArgs>
  items?: boolean | Prisma.InsuranceClaim$itemsArgs<ExtArgs>
  _count?: boolean | Prisma.InsuranceClaimCountOutputTypeDefaultArgs<ExtArgs>
}
export type InsuranceClaimIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  provider?: boolean | Prisma.InsuranceProviderDefaultArgs<ExtArgs>
}
export type InsuranceClaimIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  provider?: boolean | Prisma.InsuranceProviderDefaultArgs<ExtArgs>
}

export type $InsuranceClaimPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "InsuranceClaim"
  objects: {
    provider: Prisma.$InsuranceProviderPayload<ExtArgs>
    items: Prisma.$InsuranceClaimItemPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    providerId: string
    status: string
    message: string | null
    amount: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["insuranceClaim"]>
  composites: {}
}

export type InsuranceClaimGetPayload<S extends boolean | null | undefined | InsuranceClaimDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$InsuranceClaimPayload, S>

export type InsuranceClaimCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<InsuranceClaimFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: InsuranceClaimCountAggregateInputType | true
  }

export interface InsuranceClaimDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InsuranceClaim'], meta: { name: 'InsuranceClaim' } }
  /**
   * Find zero or one InsuranceClaim that matches the filter.
   * @param {InsuranceClaimFindUniqueArgs} args - Arguments to find a InsuranceClaim
   * @example
   * // Get one InsuranceClaim
   * const insuranceClaim = await prisma.insuranceClaim.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InsuranceClaimFindUniqueArgs>(args: Prisma.SelectSubset<T, InsuranceClaimFindUniqueArgs<ExtArgs>>): Prisma.Prisma__InsuranceClaimClient<runtime.Types.Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one InsuranceClaim that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InsuranceClaimFindUniqueOrThrowArgs} args - Arguments to find a InsuranceClaim
   * @example
   * // Get one InsuranceClaim
   * const insuranceClaim = await prisma.insuranceClaim.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InsuranceClaimFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, InsuranceClaimFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__InsuranceClaimClient<runtime.Types.Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InsuranceClaim that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InsuranceClaimFindFirstArgs} args - Arguments to find a InsuranceClaim
   * @example
   * // Get one InsuranceClaim
   * const insuranceClaim = await prisma.insuranceClaim.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InsuranceClaimFindFirstArgs>(args?: Prisma.SelectSubset<T, InsuranceClaimFindFirstArgs<ExtArgs>>): Prisma.Prisma__InsuranceClaimClient<runtime.Types.Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InsuranceClaim that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InsuranceClaimFindFirstOrThrowArgs} args - Arguments to find a InsuranceClaim
   * @example
   * // Get one InsuranceClaim
   * const insuranceClaim = await prisma.insuranceClaim.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InsuranceClaimFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, InsuranceClaimFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__InsuranceClaimClient<runtime.Types.Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more InsuranceClaims that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InsuranceClaimFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all InsuranceClaims
   * const insuranceClaims = await prisma.insuranceClaim.findMany()
   * 
   * // Get first 10 InsuranceClaims
   * const insuranceClaims = await prisma.insuranceClaim.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const insuranceClaimWithIdOnly = await prisma.insuranceClaim.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends InsuranceClaimFindManyArgs>(args?: Prisma.SelectSubset<T, InsuranceClaimFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a InsuranceClaim.
   * @param {InsuranceClaimCreateArgs} args - Arguments to create a InsuranceClaim.
   * @example
   * // Create one InsuranceClaim
   * const InsuranceClaim = await prisma.insuranceClaim.create({
   *   data: {
   *     // ... data to create a InsuranceClaim
   *   }
   * })
   * 
   */
  create<T extends InsuranceClaimCreateArgs>(args: Prisma.SelectSubset<T, InsuranceClaimCreateArgs<ExtArgs>>): Prisma.Prisma__InsuranceClaimClient<runtime.Types.Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many InsuranceClaims.
   * @param {InsuranceClaimCreateManyArgs} args - Arguments to create many InsuranceClaims.
   * @example
   * // Create many InsuranceClaims
   * const insuranceClaim = await prisma.insuranceClaim.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends InsuranceClaimCreateManyArgs>(args?: Prisma.SelectSubset<T, InsuranceClaimCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many InsuranceClaims and returns the data saved in the database.
   * @param {InsuranceClaimCreateManyAndReturnArgs} args - Arguments to create many InsuranceClaims.
   * @example
   * // Create many InsuranceClaims
   * const insuranceClaim = await prisma.insuranceClaim.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many InsuranceClaims and only return the `id`
   * const insuranceClaimWithIdOnly = await prisma.insuranceClaim.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends InsuranceClaimCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, InsuranceClaimCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a InsuranceClaim.
   * @param {InsuranceClaimDeleteArgs} args - Arguments to delete one InsuranceClaim.
   * @example
   * // Delete one InsuranceClaim
   * const InsuranceClaim = await prisma.insuranceClaim.delete({
   *   where: {
   *     // ... filter to delete one InsuranceClaim
   *   }
   * })
   * 
   */
  delete<T extends InsuranceClaimDeleteArgs>(args: Prisma.SelectSubset<T, InsuranceClaimDeleteArgs<ExtArgs>>): Prisma.Prisma__InsuranceClaimClient<runtime.Types.Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one InsuranceClaim.
   * @param {InsuranceClaimUpdateArgs} args - Arguments to update one InsuranceClaim.
   * @example
   * // Update one InsuranceClaim
   * const insuranceClaim = await prisma.insuranceClaim.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends InsuranceClaimUpdateArgs>(args: Prisma.SelectSubset<T, InsuranceClaimUpdateArgs<ExtArgs>>): Prisma.Prisma__InsuranceClaimClient<runtime.Types.Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more InsuranceClaims.
   * @param {InsuranceClaimDeleteManyArgs} args - Arguments to filter InsuranceClaims to delete.
   * @example
   * // Delete a few InsuranceClaims
   * const { count } = await prisma.insuranceClaim.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends InsuranceClaimDeleteManyArgs>(args?: Prisma.SelectSubset<T, InsuranceClaimDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InsuranceClaims.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InsuranceClaimUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many InsuranceClaims
   * const insuranceClaim = await prisma.insuranceClaim.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends InsuranceClaimUpdateManyArgs>(args: Prisma.SelectSubset<T, InsuranceClaimUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InsuranceClaims and returns the data updated in the database.
   * @param {InsuranceClaimUpdateManyAndReturnArgs} args - Arguments to update many InsuranceClaims.
   * @example
   * // Update many InsuranceClaims
   * const insuranceClaim = await prisma.insuranceClaim.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more InsuranceClaims and only return the `id`
   * const insuranceClaimWithIdOnly = await prisma.insuranceClaim.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends InsuranceClaimUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, InsuranceClaimUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one InsuranceClaim.
   * @param {InsuranceClaimUpsertArgs} args - Arguments to update or create a InsuranceClaim.
   * @example
   * // Update or create a InsuranceClaim
   * const insuranceClaim = await prisma.insuranceClaim.upsert({
   *   create: {
   *     // ... data to create a InsuranceClaim
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the InsuranceClaim we want to update
   *   }
   * })
   */
  upsert<T extends InsuranceClaimUpsertArgs>(args: Prisma.SelectSubset<T, InsuranceClaimUpsertArgs<ExtArgs>>): Prisma.Prisma__InsuranceClaimClient<runtime.Types.Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of InsuranceClaims.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InsuranceClaimCountArgs} args - Arguments to filter InsuranceClaims to count.
   * @example
   * // Count the number of InsuranceClaims
   * const count = await prisma.insuranceClaim.count({
   *   where: {
   *     // ... the filter for the InsuranceClaims we want to count
   *   }
   * })
  **/
  count<T extends InsuranceClaimCountArgs>(
    args?: Prisma.Subset<T, InsuranceClaimCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], InsuranceClaimCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a InsuranceClaim.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InsuranceClaimAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends InsuranceClaimAggregateArgs>(args: Prisma.Subset<T, InsuranceClaimAggregateArgs>): Prisma.PrismaPromise<GetInsuranceClaimAggregateType<T>>

  /**
   * Group by InsuranceClaim.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InsuranceClaimGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends InsuranceClaimGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InsuranceClaimGroupByArgs['orderBy'] }
      : { orderBy?: InsuranceClaimGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, InsuranceClaimGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInsuranceClaimGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the InsuranceClaim model
 */
readonly fields: InsuranceClaimFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for InsuranceClaim.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InsuranceClaimClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  provider<T extends Prisma.InsuranceProviderDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.InsuranceProviderDefaultArgs<ExtArgs>>): Prisma.Prisma__InsuranceProviderClient<runtime.Types.Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  items<T extends Prisma.InsuranceClaim$itemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.InsuranceClaim$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InsuranceClaimItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the InsuranceClaim model
 */
export interface InsuranceClaimFieldRefs {
  readonly id: Prisma.FieldRef<"InsuranceClaim", 'String'>
  readonly providerId: Prisma.FieldRef<"InsuranceClaim", 'String'>
  readonly status: Prisma.FieldRef<"InsuranceClaim", 'String'>
  readonly message: Prisma.FieldRef<"InsuranceClaim", 'String'>
  readonly amount: Prisma.FieldRef<"InsuranceClaim", 'Int'>
  readonly createdAt: Prisma.FieldRef<"InsuranceClaim", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"InsuranceClaim", 'DateTime'>
}
    

// Custom InputTypes
/**
 * InsuranceClaim findUnique
 */
export type InsuranceClaimFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceClaim
   */
  select?: Prisma.InsuranceClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceClaim
   */
  omit?: Prisma.InsuranceClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceClaimInclude<ExtArgs> | null
  /**
   * Filter, which InsuranceClaim to fetch.
   */
  where: Prisma.InsuranceClaimWhereUniqueInput
}

/**
 * InsuranceClaim findUniqueOrThrow
 */
export type InsuranceClaimFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceClaim
   */
  select?: Prisma.InsuranceClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceClaim
   */
  omit?: Prisma.InsuranceClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceClaimInclude<ExtArgs> | null
  /**
   * Filter, which InsuranceClaim to fetch.
   */
  where: Prisma.InsuranceClaimWhereUniqueInput
}

/**
 * InsuranceClaim findFirst
 */
export type InsuranceClaimFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceClaim
   */
  select?: Prisma.InsuranceClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceClaim
   */
  omit?: Prisma.InsuranceClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceClaimInclude<ExtArgs> | null
  /**
   * Filter, which InsuranceClaim to fetch.
   */
  where?: Prisma.InsuranceClaimWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InsuranceClaims to fetch.
   */
  orderBy?: Prisma.InsuranceClaimOrderByWithRelationInput | Prisma.InsuranceClaimOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InsuranceClaims.
   */
  cursor?: Prisma.InsuranceClaimWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InsuranceClaims from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InsuranceClaims.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InsuranceClaims.
   */
  distinct?: Prisma.InsuranceClaimScalarFieldEnum | Prisma.InsuranceClaimScalarFieldEnum[]
}

/**
 * InsuranceClaim findFirstOrThrow
 */
export type InsuranceClaimFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceClaim
   */
  select?: Prisma.InsuranceClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceClaim
   */
  omit?: Prisma.InsuranceClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceClaimInclude<ExtArgs> | null
  /**
   * Filter, which InsuranceClaim to fetch.
   */
  where?: Prisma.InsuranceClaimWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InsuranceClaims to fetch.
   */
  orderBy?: Prisma.InsuranceClaimOrderByWithRelationInput | Prisma.InsuranceClaimOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InsuranceClaims.
   */
  cursor?: Prisma.InsuranceClaimWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InsuranceClaims from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InsuranceClaims.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InsuranceClaims.
   */
  distinct?: Prisma.InsuranceClaimScalarFieldEnum | Prisma.InsuranceClaimScalarFieldEnum[]
}

/**
 * InsuranceClaim findMany
 */
export type InsuranceClaimFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceClaim
   */
  select?: Prisma.InsuranceClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceClaim
   */
  omit?: Prisma.InsuranceClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceClaimInclude<ExtArgs> | null
  /**
   * Filter, which InsuranceClaims to fetch.
   */
  where?: Prisma.InsuranceClaimWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InsuranceClaims to fetch.
   */
  orderBy?: Prisma.InsuranceClaimOrderByWithRelationInput | Prisma.InsuranceClaimOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing InsuranceClaims.
   */
  cursor?: Prisma.InsuranceClaimWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InsuranceClaims from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InsuranceClaims.
   */
  skip?: number
  distinct?: Prisma.InsuranceClaimScalarFieldEnum | Prisma.InsuranceClaimScalarFieldEnum[]
}

/**
 * InsuranceClaim create
 */
export type InsuranceClaimCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceClaim
   */
  select?: Prisma.InsuranceClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceClaim
   */
  omit?: Prisma.InsuranceClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceClaimInclude<ExtArgs> | null
  /**
   * The data needed to create a InsuranceClaim.
   */
  data: Prisma.XOR<Prisma.InsuranceClaimCreateInput, Prisma.InsuranceClaimUncheckedCreateInput>
}

/**
 * InsuranceClaim createMany
 */
export type InsuranceClaimCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many InsuranceClaims.
   */
  data: Prisma.InsuranceClaimCreateManyInput | Prisma.InsuranceClaimCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * InsuranceClaim createManyAndReturn
 */
export type InsuranceClaimCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceClaim
   */
  select?: Prisma.InsuranceClaimSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceClaim
   */
  omit?: Prisma.InsuranceClaimOmit<ExtArgs> | null
  /**
   * The data used to create many InsuranceClaims.
   */
  data: Prisma.InsuranceClaimCreateManyInput | Prisma.InsuranceClaimCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceClaimIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * InsuranceClaim update
 */
export type InsuranceClaimUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceClaim
   */
  select?: Prisma.InsuranceClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceClaim
   */
  omit?: Prisma.InsuranceClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceClaimInclude<ExtArgs> | null
  /**
   * The data needed to update a InsuranceClaim.
   */
  data: Prisma.XOR<Prisma.InsuranceClaimUpdateInput, Prisma.InsuranceClaimUncheckedUpdateInput>
  /**
   * Choose, which InsuranceClaim to update.
   */
  where: Prisma.InsuranceClaimWhereUniqueInput
}

/**
 * InsuranceClaim updateMany
 */
export type InsuranceClaimUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update InsuranceClaims.
   */
  data: Prisma.XOR<Prisma.InsuranceClaimUpdateManyMutationInput, Prisma.InsuranceClaimUncheckedUpdateManyInput>
  /**
   * Filter which InsuranceClaims to update
   */
  where?: Prisma.InsuranceClaimWhereInput
  /**
   * Limit how many InsuranceClaims to update.
   */
  limit?: number
}

/**
 * InsuranceClaim updateManyAndReturn
 */
export type InsuranceClaimUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceClaim
   */
  select?: Prisma.InsuranceClaimSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceClaim
   */
  omit?: Prisma.InsuranceClaimOmit<ExtArgs> | null
  /**
   * The data used to update InsuranceClaims.
   */
  data: Prisma.XOR<Prisma.InsuranceClaimUpdateManyMutationInput, Prisma.InsuranceClaimUncheckedUpdateManyInput>
  /**
   * Filter which InsuranceClaims to update
   */
  where?: Prisma.InsuranceClaimWhereInput
  /**
   * Limit how many InsuranceClaims to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceClaimIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * InsuranceClaim upsert
 */
export type InsuranceClaimUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceClaim
   */
  select?: Prisma.InsuranceClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceClaim
   */
  omit?: Prisma.InsuranceClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceClaimInclude<ExtArgs> | null
  /**
   * The filter to search for the InsuranceClaim to update in case it exists.
   */
  where: Prisma.InsuranceClaimWhereUniqueInput
  /**
   * In case the InsuranceClaim found by the `where` argument doesn't exist, create a new InsuranceClaim with this data.
   */
  create: Prisma.XOR<Prisma.InsuranceClaimCreateInput, Prisma.InsuranceClaimUncheckedCreateInput>
  /**
   * In case the InsuranceClaim was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.InsuranceClaimUpdateInput, Prisma.InsuranceClaimUncheckedUpdateInput>
}

/**
 * InsuranceClaim delete
 */
export type InsuranceClaimDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceClaim
   */
  select?: Prisma.InsuranceClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceClaim
   */
  omit?: Prisma.InsuranceClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceClaimInclude<ExtArgs> | null
  /**
   * Filter which InsuranceClaim to delete.
   */
  where: Prisma.InsuranceClaimWhereUniqueInput
}

/**
 * InsuranceClaim deleteMany
 */
export type InsuranceClaimDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InsuranceClaims to delete
   */
  where?: Prisma.InsuranceClaimWhereInput
  /**
   * Limit how many InsuranceClaims to delete.
   */
  limit?: number
}

/**
 * InsuranceClaim.items
 */
export type InsuranceClaim$itemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceClaimItem
   */
  select?: Prisma.InsuranceClaimItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceClaimItem
   */
  omit?: Prisma.InsuranceClaimItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceClaimItemInclude<ExtArgs> | null
  where?: Prisma.InsuranceClaimItemWhereInput
  orderBy?: Prisma.InsuranceClaimItemOrderByWithRelationInput | Prisma.InsuranceClaimItemOrderByWithRelationInput[]
  cursor?: Prisma.InsuranceClaimItemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.InsuranceClaimItemScalarFieldEnum | Prisma.InsuranceClaimItemScalarFieldEnum[]
}

/**
 * InsuranceClaim without action
 */
export type InsuranceClaimDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InsuranceClaim
   */
  select?: Prisma.InsuranceClaimSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InsuranceClaim
   */
  omit?: Prisma.InsuranceClaimOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InsuranceClaimInclude<ExtArgs> | null
}
