
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PharmacyItem` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PharmacyItem
 * 
 */
export type PharmacyItemModel = runtime.Types.Result.DefaultSelection<Prisma.$PharmacyItemPayload>

export type AggregatePharmacyItem = {
  _count: PharmacyItemCountAggregateOutputType | null
  _avg: PharmacyItemAvgAggregateOutputType | null
  _sum: PharmacyItemSumAggregateOutputType | null
  _min: PharmacyItemMinAggregateOutputType | null
  _max: PharmacyItemMaxAggregateOutputType | null
}

export type PharmacyItemAvgAggregateOutputType = {
  stock: number | null
}

export type PharmacyItemSumAggregateOutputType = {
  stock: number | null
}

export type PharmacyItemMinAggregateOutputType = {
  id: string | null
  brandId: string | null
  categoryId: string | null
  name: string | null
  form: $Enums.PharmacyItemForm | null
  route: $Enums.PharmacyItemRoute | null
  strength: string | null
  stock: number | null
  unit: string | null
  sku: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PharmacyItemMaxAggregateOutputType = {
  id: string | null
  brandId: string | null
  categoryId: string | null
  name: string | null
  form: $Enums.PharmacyItemForm | null
  route: $Enums.PharmacyItemRoute | null
  strength: string | null
  stock: number | null
  unit: string | null
  sku: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PharmacyItemCountAggregateOutputType = {
  id: number
  brandId: number
  categoryId: number
  name: number
  form: number
  route: number
  strength: number
  stock: number
  unit: number
  sku: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PharmacyItemAvgAggregateInputType = {
  stock?: true
}

export type PharmacyItemSumAggregateInputType = {
  stock?: true
}

export type PharmacyItemMinAggregateInputType = {
  id?: true
  brandId?: true
  categoryId?: true
  name?: true
  form?: true
  route?: true
  strength?: true
  stock?: true
  unit?: true
  sku?: true
  createdAt?: true
  updatedAt?: true
}

export type PharmacyItemMaxAggregateInputType = {
  id?: true
  brandId?: true
  categoryId?: true
  name?: true
  form?: true
  route?: true
  strength?: true
  stock?: true
  unit?: true
  sku?: true
  createdAt?: true
  updatedAt?: true
}

export type PharmacyItemCountAggregateInputType = {
  id?: true
  brandId?: true
  categoryId?: true
  name?: true
  form?: true
  route?: true
  strength?: true
  stock?: true
  unit?: true
  sku?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PharmacyItemAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PharmacyItem to aggregate.
   */
  where?: Prisma.PharmacyItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PharmacyItems to fetch.
   */
  orderBy?: Prisma.PharmacyItemOrderByWithRelationInput | Prisma.PharmacyItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PharmacyItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PharmacyItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PharmacyItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PharmacyItems
  **/
  _count?: true | PharmacyItemCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PharmacyItemAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PharmacyItemSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PharmacyItemMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PharmacyItemMaxAggregateInputType
}

export type GetPharmacyItemAggregateType<T extends PharmacyItemAggregateArgs> = {
      [P in keyof T & keyof AggregatePharmacyItem]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePharmacyItem[P]>
    : Prisma.GetScalarType<T[P], AggregatePharmacyItem[P]>
}




export type PharmacyItemGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PharmacyItemWhereInput
  orderBy?: Prisma.PharmacyItemOrderByWithAggregationInput | Prisma.PharmacyItemOrderByWithAggregationInput[]
  by: Prisma.PharmacyItemScalarFieldEnum[] | Prisma.PharmacyItemScalarFieldEnum
  having?: Prisma.PharmacyItemScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PharmacyItemCountAggregateInputType | true
  _avg?: PharmacyItemAvgAggregateInputType
  _sum?: PharmacyItemSumAggregateInputType
  _min?: PharmacyItemMinAggregateInputType
  _max?: PharmacyItemMaxAggregateInputType
}

export type PharmacyItemGroupByOutputType = {
  id: string
  brandId: string
  categoryId: string
  name: string
  form: $Enums.PharmacyItemForm
  route: $Enums.PharmacyItemRoute
  strength: string
  stock: number
  unit: string
  sku: string | null
  createdAt: Date
  updatedAt: Date
  _count: PharmacyItemCountAggregateOutputType | null
  _avg: PharmacyItemAvgAggregateOutputType | null
  _sum: PharmacyItemSumAggregateOutputType | null
  _min: PharmacyItemMinAggregateOutputType | null
  _max: PharmacyItemMaxAggregateOutputType | null
}

type GetPharmacyItemGroupByPayload<T extends PharmacyItemGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PharmacyItemGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PharmacyItemGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PharmacyItemGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PharmacyItemGroupByOutputType[P]>
      }
    >
  >



export type PharmacyItemWhereInput = {
  AND?: Prisma.PharmacyItemWhereInput | Prisma.PharmacyItemWhereInput[]
  OR?: Prisma.PharmacyItemWhereInput[]
  NOT?: Prisma.PharmacyItemWhereInput | Prisma.PharmacyItemWhereInput[]
  id?: Prisma.UuidFilter<"PharmacyItem"> | string
  brandId?: Prisma.UuidFilter<"PharmacyItem"> | string
  categoryId?: Prisma.UuidFilter<"PharmacyItem"> | string
  name?: Prisma.StringFilter<"PharmacyItem"> | string
  form?: Prisma.EnumPharmacyItemFormFilter<"PharmacyItem"> | $Enums.PharmacyItemForm
  route?: Prisma.EnumPharmacyItemRouteFilter<"PharmacyItem"> | $Enums.PharmacyItemRoute
  strength?: Prisma.StringFilter<"PharmacyItem"> | string
  stock?: Prisma.IntFilter<"PharmacyItem"> | number
  unit?: Prisma.StringFilter<"PharmacyItem"> | string
  sku?: Prisma.StringNullableFilter<"PharmacyItem"> | string | null
  createdAt?: Prisma.DateTimeFilter<"PharmacyItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PharmacyItem"> | Date | string
  brand?: Prisma.XOR<Prisma.PharmacyBrandScalarRelationFilter, Prisma.PharmacyBrandWhereInput>
  category?: Prisma.XOR<Prisma.PharmacyItemCategoryScalarRelationFilter, Prisma.PharmacyItemCategoryWhereInput>
}

export type PharmacyItemOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  brandId?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  form?: Prisma.SortOrder
  route?: Prisma.SortOrder
  strength?: Prisma.SortOrder
  stock?: Prisma.SortOrder
  unit?: Prisma.SortOrder
  sku?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  brand?: Prisma.PharmacyBrandOrderByWithRelationInput
  category?: Prisma.PharmacyItemCategoryOrderByWithRelationInput
}

export type PharmacyItemWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PharmacyItemWhereInput | Prisma.PharmacyItemWhereInput[]
  OR?: Prisma.PharmacyItemWhereInput[]
  NOT?: Prisma.PharmacyItemWhereInput | Prisma.PharmacyItemWhereInput[]
  brandId?: Prisma.UuidFilter<"PharmacyItem"> | string
  categoryId?: Prisma.UuidFilter<"PharmacyItem"> | string
  name?: Prisma.StringFilter<"PharmacyItem"> | string
  form?: Prisma.EnumPharmacyItemFormFilter<"PharmacyItem"> | $Enums.PharmacyItemForm
  route?: Prisma.EnumPharmacyItemRouteFilter<"PharmacyItem"> | $Enums.PharmacyItemRoute
  strength?: Prisma.StringFilter<"PharmacyItem"> | string
  stock?: Prisma.IntFilter<"PharmacyItem"> | number
  unit?: Prisma.StringFilter<"PharmacyItem"> | string
  sku?: Prisma.StringNullableFilter<"PharmacyItem"> | string | null
  createdAt?: Prisma.DateTimeFilter<"PharmacyItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PharmacyItem"> | Date | string
  brand?: Prisma.XOR<Prisma.PharmacyBrandScalarRelationFilter, Prisma.PharmacyBrandWhereInput>
  category?: Prisma.XOR<Prisma.PharmacyItemCategoryScalarRelationFilter, Prisma.PharmacyItemCategoryWhereInput>
}, "id">

export type PharmacyItemOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  brandId?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  form?: Prisma.SortOrder
  route?: Prisma.SortOrder
  strength?: Prisma.SortOrder
  stock?: Prisma.SortOrder
  unit?: Prisma.SortOrder
  sku?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PharmacyItemCountOrderByAggregateInput
  _avg?: Prisma.PharmacyItemAvgOrderByAggregateInput
  _max?: Prisma.PharmacyItemMaxOrderByAggregateInput
  _min?: Prisma.PharmacyItemMinOrderByAggregateInput
  _sum?: Prisma.PharmacyItemSumOrderByAggregateInput
}

export type PharmacyItemScalarWhereWithAggregatesInput = {
  AND?: Prisma.PharmacyItemScalarWhereWithAggregatesInput | Prisma.PharmacyItemScalarWhereWithAggregatesInput[]
  OR?: Prisma.PharmacyItemScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PharmacyItemScalarWhereWithAggregatesInput | Prisma.PharmacyItemScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"PharmacyItem"> | string
  brandId?: Prisma.UuidWithAggregatesFilter<"PharmacyItem"> | string
  categoryId?: Prisma.UuidWithAggregatesFilter<"PharmacyItem"> | string
  name?: Prisma.StringWithAggregatesFilter<"PharmacyItem"> | string
  form?: Prisma.EnumPharmacyItemFormWithAggregatesFilter<"PharmacyItem"> | $Enums.PharmacyItemForm
  route?: Prisma.EnumPharmacyItemRouteWithAggregatesFilter<"PharmacyItem"> | $Enums.PharmacyItemRoute
  strength?: Prisma.StringWithAggregatesFilter<"PharmacyItem"> | string
  stock?: Prisma.IntWithAggregatesFilter<"PharmacyItem"> | number
  unit?: Prisma.StringWithAggregatesFilter<"PharmacyItem"> | string
  sku?: Prisma.StringNullableWithAggregatesFilter<"PharmacyItem"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PharmacyItem"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PharmacyItem"> | Date | string
}

export type PharmacyItemCreateInput = {
  id?: string
  name: string
  form: $Enums.PharmacyItemForm
  route: $Enums.PharmacyItemRoute
  strength: string
  stock: number
  unit: string
  sku?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  brand: Prisma.PharmacyBrandCreateNestedOneWithoutItemsInput
  category: Prisma.PharmacyItemCategoryCreateNestedOneWithoutItemsInput
}

export type PharmacyItemUncheckedCreateInput = {
  id?: string
  brandId: string
  categoryId: string
  name: string
  form: $Enums.PharmacyItemForm
  route: $Enums.PharmacyItemRoute
  strength: string
  stock: number
  unit: string
  sku?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PharmacyItemUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  form?: Prisma.EnumPharmacyItemFormFieldUpdateOperationsInput | $Enums.PharmacyItemForm
  route?: Prisma.EnumPharmacyItemRouteFieldUpdateOperationsInput | $Enums.PharmacyItemRoute
  strength?: Prisma.StringFieldUpdateOperationsInput | string
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  brand?: Prisma.PharmacyBrandUpdateOneRequiredWithoutItemsNestedInput
  category?: Prisma.PharmacyItemCategoryUpdateOneRequiredWithoutItemsNestedInput
}

export type PharmacyItemUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  brandId?: Prisma.StringFieldUpdateOperationsInput | string
  categoryId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  form?: Prisma.EnumPharmacyItemFormFieldUpdateOperationsInput | $Enums.PharmacyItemForm
  route?: Prisma.EnumPharmacyItemRouteFieldUpdateOperationsInput | $Enums.PharmacyItemRoute
  strength?: Prisma.StringFieldUpdateOperationsInput | string
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PharmacyItemCreateManyInput = {
  id?: string
  brandId: string
  categoryId: string
  name: string
  form: $Enums.PharmacyItemForm
  route: $Enums.PharmacyItemRoute
  strength: string
  stock: number
  unit: string
  sku?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PharmacyItemUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  form?: Prisma.EnumPharmacyItemFormFieldUpdateOperationsInput | $Enums.PharmacyItemForm
  route?: Prisma.EnumPharmacyItemRouteFieldUpdateOperationsInput | $Enums.PharmacyItemRoute
  strength?: Prisma.StringFieldUpdateOperationsInput | string
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PharmacyItemUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  brandId?: Prisma.StringFieldUpdateOperationsInput | string
  categoryId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  form?: Prisma.EnumPharmacyItemFormFieldUpdateOperationsInput | $Enums.PharmacyItemForm
  route?: Prisma.EnumPharmacyItemRouteFieldUpdateOperationsInput | $Enums.PharmacyItemRoute
  strength?: Prisma.StringFieldUpdateOperationsInput | string
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PharmacyItemListRelationFilter = {
  every?: Prisma.PharmacyItemWhereInput
  some?: Prisma.PharmacyItemWhereInput
  none?: Prisma.PharmacyItemWhereInput
}

export type PharmacyItemOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PharmacyItemCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brandId?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  form?: Prisma.SortOrder
  route?: Prisma.SortOrder
  strength?: Prisma.SortOrder
  stock?: Prisma.SortOrder
  unit?: Prisma.SortOrder
  sku?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PharmacyItemAvgOrderByAggregateInput = {
  stock?: Prisma.SortOrder
}

export type PharmacyItemMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brandId?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  form?: Prisma.SortOrder
  route?: Prisma.SortOrder
  strength?: Prisma.SortOrder
  stock?: Prisma.SortOrder
  unit?: Prisma.SortOrder
  sku?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PharmacyItemMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brandId?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  form?: Prisma.SortOrder
  route?: Prisma.SortOrder
  strength?: Prisma.SortOrder
  stock?: Prisma.SortOrder
  unit?: Prisma.SortOrder
  sku?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PharmacyItemSumOrderByAggregateInput = {
  stock?: Prisma.SortOrder
}

export type PharmacyItemCreateNestedManyWithoutBrandInput = {
  create?: Prisma.XOR<Prisma.PharmacyItemCreateWithoutBrandInput, Prisma.PharmacyItemUncheckedCreateWithoutBrandInput> | Prisma.PharmacyItemCreateWithoutBrandInput[] | Prisma.PharmacyItemUncheckedCreateWithoutBrandInput[]
  connectOrCreate?: Prisma.PharmacyItemCreateOrConnectWithoutBrandInput | Prisma.PharmacyItemCreateOrConnectWithoutBrandInput[]
  createMany?: Prisma.PharmacyItemCreateManyBrandInputEnvelope
  connect?: Prisma.PharmacyItemWhereUniqueInput | Prisma.PharmacyItemWhereUniqueInput[]
}

export type PharmacyItemUncheckedCreateNestedManyWithoutBrandInput = {
  create?: Prisma.XOR<Prisma.PharmacyItemCreateWithoutBrandInput, Prisma.PharmacyItemUncheckedCreateWithoutBrandInput> | Prisma.PharmacyItemCreateWithoutBrandInput[] | Prisma.PharmacyItemUncheckedCreateWithoutBrandInput[]
  connectOrCreate?: Prisma.PharmacyItemCreateOrConnectWithoutBrandInput | Prisma.PharmacyItemCreateOrConnectWithoutBrandInput[]
  createMany?: Prisma.PharmacyItemCreateManyBrandInputEnvelope
  connect?: Prisma.PharmacyItemWhereUniqueInput | Prisma.PharmacyItemWhereUniqueInput[]
}

export type PharmacyItemUpdateManyWithoutBrandNestedInput = {
  create?: Prisma.XOR<Prisma.PharmacyItemCreateWithoutBrandInput, Prisma.PharmacyItemUncheckedCreateWithoutBrandInput> | Prisma.PharmacyItemCreateWithoutBrandInput[] | Prisma.PharmacyItemUncheckedCreateWithoutBrandInput[]
  connectOrCreate?: Prisma.PharmacyItemCreateOrConnectWithoutBrandInput | Prisma.PharmacyItemCreateOrConnectWithoutBrandInput[]
  upsert?: Prisma.PharmacyItemUpsertWithWhereUniqueWithoutBrandInput | Prisma.PharmacyItemUpsertWithWhereUniqueWithoutBrandInput[]
  createMany?: Prisma.PharmacyItemCreateManyBrandInputEnvelope
  set?: Prisma.PharmacyItemWhereUniqueInput | Prisma.PharmacyItemWhereUniqueInput[]
  disconnect?: Prisma.PharmacyItemWhereUniqueInput | Prisma.PharmacyItemWhereUniqueInput[]
  delete?: Prisma.PharmacyItemWhereUniqueInput | Prisma.PharmacyItemWhereUniqueInput[]
  connect?: Prisma.PharmacyItemWhereUniqueInput | Prisma.PharmacyItemWhereUniqueInput[]
  update?: Prisma.PharmacyItemUpdateWithWhereUniqueWithoutBrandInput | Prisma.PharmacyItemUpdateWithWhereUniqueWithoutBrandInput[]
  updateMany?: Prisma.PharmacyItemUpdateManyWithWhereWithoutBrandInput | Prisma.PharmacyItemUpdateManyWithWhereWithoutBrandInput[]
  deleteMany?: Prisma.PharmacyItemScalarWhereInput | Prisma.PharmacyItemScalarWhereInput[]
}

export type PharmacyItemUncheckedUpdateManyWithoutBrandNestedInput = {
  create?: Prisma.XOR<Prisma.PharmacyItemCreateWithoutBrandInput, Prisma.PharmacyItemUncheckedCreateWithoutBrandInput> | Prisma.PharmacyItemCreateWithoutBrandInput[] | Prisma.PharmacyItemUncheckedCreateWithoutBrandInput[]
  connectOrCreate?: Prisma.PharmacyItemCreateOrConnectWithoutBrandInput | Prisma.PharmacyItemCreateOrConnectWithoutBrandInput[]
  upsert?: Prisma.PharmacyItemUpsertWithWhereUniqueWithoutBrandInput | Prisma.PharmacyItemUpsertWithWhereUniqueWithoutBrandInput[]
  createMany?: Prisma.PharmacyItemCreateManyBrandInputEnvelope
  set?: Prisma.PharmacyItemWhereUniqueInput | Prisma.PharmacyItemWhereUniqueInput[]
  disconnect?: Prisma.PharmacyItemWhereUniqueInput | Prisma.PharmacyItemWhereUniqueInput[]
  delete?: Prisma.PharmacyItemWhereUniqueInput | Prisma.PharmacyItemWhereUniqueInput[]
  connect?: Prisma.PharmacyItemWhereUniqueInput | Prisma.PharmacyItemWhereUniqueInput[]
  update?: Prisma.PharmacyItemUpdateWithWhereUniqueWithoutBrandInput | Prisma.PharmacyItemUpdateWithWhereUniqueWithoutBrandInput[]
  updateMany?: Prisma.PharmacyItemUpdateManyWithWhereWithoutBrandInput | Prisma.PharmacyItemUpdateManyWithWhereWithoutBrandInput[]
  deleteMany?: Prisma.PharmacyItemScalarWhereInput | Prisma.PharmacyItemScalarWhereInput[]
}

export type PharmacyItemCreateNestedManyWithoutCategoryInput = {
  create?: Prisma.XOR<Prisma.PharmacyItemCreateWithoutCategoryInput, Prisma.PharmacyItemUncheckedCreateWithoutCategoryInput> | Prisma.PharmacyItemCreateWithoutCategoryInput[] | Prisma.PharmacyItemUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.PharmacyItemCreateOrConnectWithoutCategoryInput | Prisma.PharmacyItemCreateOrConnectWithoutCategoryInput[]
  createMany?: Prisma.PharmacyItemCreateManyCategoryInputEnvelope
  connect?: Prisma.PharmacyItemWhereUniqueInput | Prisma.PharmacyItemWhereUniqueInput[]
}

export type PharmacyItemUncheckedCreateNestedManyWithoutCategoryInput = {
  create?: Prisma.XOR<Prisma.PharmacyItemCreateWithoutCategoryInput, Prisma.PharmacyItemUncheckedCreateWithoutCategoryInput> | Prisma.PharmacyItemCreateWithoutCategoryInput[] | Prisma.PharmacyItemUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.PharmacyItemCreateOrConnectWithoutCategoryInput | Prisma.PharmacyItemCreateOrConnectWithoutCategoryInput[]
  createMany?: Prisma.PharmacyItemCreateManyCategoryInputEnvelope
  connect?: Prisma.PharmacyItemWhereUniqueInput | Prisma.PharmacyItemWhereUniqueInput[]
}

export type PharmacyItemUpdateManyWithoutCategoryNestedInput = {
  create?: Prisma.XOR<Prisma.PharmacyItemCreateWithoutCategoryInput, Prisma.PharmacyItemUncheckedCreateWithoutCategoryInput> | Prisma.PharmacyItemCreateWithoutCategoryInput[] | Prisma.PharmacyItemUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.PharmacyItemCreateOrConnectWithoutCategoryInput | Prisma.PharmacyItemCreateOrConnectWithoutCategoryInput[]
  upsert?: Prisma.PharmacyItemUpsertWithWhereUniqueWithoutCategoryInput | Prisma.PharmacyItemUpsertWithWhereUniqueWithoutCategoryInput[]
  createMany?: Prisma.PharmacyItemCreateManyCategoryInputEnvelope
  set?: Prisma.PharmacyItemWhereUniqueInput | Prisma.PharmacyItemWhereUniqueInput[]
  disconnect?: Prisma.PharmacyItemWhereUniqueInput | Prisma.PharmacyItemWhereUniqueInput[]
  delete?: Prisma.PharmacyItemWhereUniqueInput | Prisma.PharmacyItemWhereUniqueInput[]
  connect?: Prisma.PharmacyItemWhereUniqueInput | Prisma.PharmacyItemWhereUniqueInput[]
  update?: Prisma.PharmacyItemUpdateWithWhereUniqueWithoutCategoryInput | Prisma.PharmacyItemUpdateWithWhereUniqueWithoutCategoryInput[]
  updateMany?: Prisma.PharmacyItemUpdateManyWithWhereWithoutCategoryInput | Prisma.PharmacyItemUpdateManyWithWhereWithoutCategoryInput[]
  deleteMany?: Prisma.PharmacyItemScalarWhereInput | Prisma.PharmacyItemScalarWhereInput[]
}

export type PharmacyItemUncheckedUpdateManyWithoutCategoryNestedInput = {
  create?: Prisma.XOR<Prisma.PharmacyItemCreateWithoutCategoryInput, Prisma.PharmacyItemUncheckedCreateWithoutCategoryInput> | Prisma.PharmacyItemCreateWithoutCategoryInput[] | Prisma.PharmacyItemUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.PharmacyItemCreateOrConnectWithoutCategoryInput | Prisma.PharmacyItemCreateOrConnectWithoutCategoryInput[]
  upsert?: Prisma.PharmacyItemUpsertWithWhereUniqueWithoutCategoryInput | Prisma.PharmacyItemUpsertWithWhereUniqueWithoutCategoryInput[]
  createMany?: Prisma.PharmacyItemCreateManyCategoryInputEnvelope
  set?: Prisma.PharmacyItemWhereUniqueInput | Prisma.PharmacyItemWhereUniqueInput[]
  disconnect?: Prisma.PharmacyItemWhereUniqueInput | Prisma.PharmacyItemWhereUniqueInput[]
  delete?: Prisma.PharmacyItemWhereUniqueInput | Prisma.PharmacyItemWhereUniqueInput[]
  connect?: Prisma.PharmacyItemWhereUniqueInput | Prisma.PharmacyItemWhereUniqueInput[]
  update?: Prisma.PharmacyItemUpdateWithWhereUniqueWithoutCategoryInput | Prisma.PharmacyItemUpdateWithWhereUniqueWithoutCategoryInput[]
  updateMany?: Prisma.PharmacyItemUpdateManyWithWhereWithoutCategoryInput | Prisma.PharmacyItemUpdateManyWithWhereWithoutCategoryInput[]
  deleteMany?: Prisma.PharmacyItemScalarWhereInput | Prisma.PharmacyItemScalarWhereInput[]
}

export type EnumPharmacyItemFormFieldUpdateOperationsInput = {
  set?: $Enums.PharmacyItemForm
}

export type EnumPharmacyItemRouteFieldUpdateOperationsInput = {
  set?: $Enums.PharmacyItemRoute
}

export type PharmacyItemCreateWithoutBrandInput = {
  id?: string
  name: string
  form: $Enums.PharmacyItemForm
  route: $Enums.PharmacyItemRoute
  strength: string
  stock: number
  unit: string
  sku?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  category: Prisma.PharmacyItemCategoryCreateNestedOneWithoutItemsInput
}

export type PharmacyItemUncheckedCreateWithoutBrandInput = {
  id?: string
  categoryId: string
  name: string
  form: $Enums.PharmacyItemForm
  route: $Enums.PharmacyItemRoute
  strength: string
  stock: number
  unit: string
  sku?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PharmacyItemCreateOrConnectWithoutBrandInput = {
  where: Prisma.PharmacyItemWhereUniqueInput
  create: Prisma.XOR<Prisma.PharmacyItemCreateWithoutBrandInput, Prisma.PharmacyItemUncheckedCreateWithoutBrandInput>
}

export type PharmacyItemCreateManyBrandInputEnvelope = {
  data: Prisma.PharmacyItemCreateManyBrandInput | Prisma.PharmacyItemCreateManyBrandInput[]
  skipDuplicates?: boolean
}

export type PharmacyItemUpsertWithWhereUniqueWithoutBrandInput = {
  where: Prisma.PharmacyItemWhereUniqueInput
  update: Prisma.XOR<Prisma.PharmacyItemUpdateWithoutBrandInput, Prisma.PharmacyItemUncheckedUpdateWithoutBrandInput>
  create: Prisma.XOR<Prisma.PharmacyItemCreateWithoutBrandInput, Prisma.PharmacyItemUncheckedCreateWithoutBrandInput>
}

export type PharmacyItemUpdateWithWhereUniqueWithoutBrandInput = {
  where: Prisma.PharmacyItemWhereUniqueInput
  data: Prisma.XOR<Prisma.PharmacyItemUpdateWithoutBrandInput, Prisma.PharmacyItemUncheckedUpdateWithoutBrandInput>
}

export type PharmacyItemUpdateManyWithWhereWithoutBrandInput = {
  where: Prisma.PharmacyItemScalarWhereInput
  data: Prisma.XOR<Prisma.PharmacyItemUpdateManyMutationInput, Prisma.PharmacyItemUncheckedUpdateManyWithoutBrandInput>
}

export type PharmacyItemScalarWhereInput = {
  AND?: Prisma.PharmacyItemScalarWhereInput | Prisma.PharmacyItemScalarWhereInput[]
  OR?: Prisma.PharmacyItemScalarWhereInput[]
  NOT?: Prisma.PharmacyItemScalarWhereInput | Prisma.PharmacyItemScalarWhereInput[]
  id?: Prisma.UuidFilter<"PharmacyItem"> | string
  brandId?: Prisma.UuidFilter<"PharmacyItem"> | string
  categoryId?: Prisma.UuidFilter<"PharmacyItem"> | string
  name?: Prisma.StringFilter<"PharmacyItem"> | string
  form?: Prisma.EnumPharmacyItemFormFilter<"PharmacyItem"> | $Enums.PharmacyItemForm
  route?: Prisma.EnumPharmacyItemRouteFilter<"PharmacyItem"> | $Enums.PharmacyItemRoute
  strength?: Prisma.StringFilter<"PharmacyItem"> | string
  stock?: Prisma.IntFilter<"PharmacyItem"> | number
  unit?: Prisma.StringFilter<"PharmacyItem"> | string
  sku?: Prisma.StringNullableFilter<"PharmacyItem"> | string | null
  createdAt?: Prisma.DateTimeFilter<"PharmacyItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PharmacyItem"> | Date | string
}

export type PharmacyItemCreateWithoutCategoryInput = {
  id?: string
  name: string
  form: $Enums.PharmacyItemForm
  route: $Enums.PharmacyItemRoute
  strength: string
  stock: number
  unit: string
  sku?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  brand: Prisma.PharmacyBrandCreateNestedOneWithoutItemsInput
}

export type PharmacyItemUncheckedCreateWithoutCategoryInput = {
  id?: string
  brandId: string
  name: string
  form: $Enums.PharmacyItemForm
  route: $Enums.PharmacyItemRoute
  strength: string
  stock: number
  unit: string
  sku?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PharmacyItemCreateOrConnectWithoutCategoryInput = {
  where: Prisma.PharmacyItemWhereUniqueInput
  create: Prisma.XOR<Prisma.PharmacyItemCreateWithoutCategoryInput, Prisma.PharmacyItemUncheckedCreateWithoutCategoryInput>
}

export type PharmacyItemCreateManyCategoryInputEnvelope = {
  data: Prisma.PharmacyItemCreateManyCategoryInput | Prisma.PharmacyItemCreateManyCategoryInput[]
  skipDuplicates?: boolean
}

export type PharmacyItemUpsertWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.PharmacyItemWhereUniqueInput
  update: Prisma.XOR<Prisma.PharmacyItemUpdateWithoutCategoryInput, Prisma.PharmacyItemUncheckedUpdateWithoutCategoryInput>
  create: Prisma.XOR<Prisma.PharmacyItemCreateWithoutCategoryInput, Prisma.PharmacyItemUncheckedCreateWithoutCategoryInput>
}

export type PharmacyItemUpdateWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.PharmacyItemWhereUniqueInput
  data: Prisma.XOR<Prisma.PharmacyItemUpdateWithoutCategoryInput, Prisma.PharmacyItemUncheckedUpdateWithoutCategoryInput>
}

export type PharmacyItemUpdateManyWithWhereWithoutCategoryInput = {
  where: Prisma.PharmacyItemScalarWhereInput
  data: Prisma.XOR<Prisma.PharmacyItemUpdateManyMutationInput, Prisma.PharmacyItemUncheckedUpdateManyWithoutCategoryInput>
}

export type PharmacyItemCreateManyBrandInput = {
  id?: string
  categoryId: string
  name: string
  form: $Enums.PharmacyItemForm
  route: $Enums.PharmacyItemRoute
  strength: string
  stock: number
  unit: string
  sku?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PharmacyItemUpdateWithoutBrandInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  form?: Prisma.EnumPharmacyItemFormFieldUpdateOperationsInput | $Enums.PharmacyItemForm
  route?: Prisma.EnumPharmacyItemRouteFieldUpdateOperationsInput | $Enums.PharmacyItemRoute
  strength?: Prisma.StringFieldUpdateOperationsInput | string
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  category?: Prisma.PharmacyItemCategoryUpdateOneRequiredWithoutItemsNestedInput
}

export type PharmacyItemUncheckedUpdateWithoutBrandInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  categoryId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  form?: Prisma.EnumPharmacyItemFormFieldUpdateOperationsInput | $Enums.PharmacyItemForm
  route?: Prisma.EnumPharmacyItemRouteFieldUpdateOperationsInput | $Enums.PharmacyItemRoute
  strength?: Prisma.StringFieldUpdateOperationsInput | string
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PharmacyItemUncheckedUpdateManyWithoutBrandInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  categoryId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  form?: Prisma.EnumPharmacyItemFormFieldUpdateOperationsInput | $Enums.PharmacyItemForm
  route?: Prisma.EnumPharmacyItemRouteFieldUpdateOperationsInput | $Enums.PharmacyItemRoute
  strength?: Prisma.StringFieldUpdateOperationsInput | string
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PharmacyItemCreateManyCategoryInput = {
  id?: string
  brandId: string
  name: string
  form: $Enums.PharmacyItemForm
  route: $Enums.PharmacyItemRoute
  strength: string
  stock: number
  unit: string
  sku?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PharmacyItemUpdateWithoutCategoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  form?: Prisma.EnumPharmacyItemFormFieldUpdateOperationsInput | $Enums.PharmacyItemForm
  route?: Prisma.EnumPharmacyItemRouteFieldUpdateOperationsInput | $Enums.PharmacyItemRoute
  strength?: Prisma.StringFieldUpdateOperationsInput | string
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  brand?: Prisma.PharmacyBrandUpdateOneRequiredWithoutItemsNestedInput
}

export type PharmacyItemUncheckedUpdateWithoutCategoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  brandId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  form?: Prisma.EnumPharmacyItemFormFieldUpdateOperationsInput | $Enums.PharmacyItemForm
  route?: Prisma.EnumPharmacyItemRouteFieldUpdateOperationsInput | $Enums.PharmacyItemRoute
  strength?: Prisma.StringFieldUpdateOperationsInput | string
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PharmacyItemUncheckedUpdateManyWithoutCategoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  brandId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  form?: Prisma.EnumPharmacyItemFormFieldUpdateOperationsInput | $Enums.PharmacyItemForm
  route?: Prisma.EnumPharmacyItemRouteFieldUpdateOperationsInput | $Enums.PharmacyItemRoute
  strength?: Prisma.StringFieldUpdateOperationsInput | string
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PharmacyItemSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brandId?: boolean
  categoryId?: boolean
  name?: boolean
  form?: boolean
  route?: boolean
  strength?: boolean
  stock?: boolean
  unit?: boolean
  sku?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  brand?: boolean | Prisma.PharmacyBrandDefaultArgs<ExtArgs>
  category?: boolean | Prisma.PharmacyItemCategoryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pharmacyItem"]>

export type PharmacyItemSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brandId?: boolean
  categoryId?: boolean
  name?: boolean
  form?: boolean
  route?: boolean
  strength?: boolean
  stock?: boolean
  unit?: boolean
  sku?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  brand?: boolean | Prisma.PharmacyBrandDefaultArgs<ExtArgs>
  category?: boolean | Prisma.PharmacyItemCategoryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pharmacyItem"]>

export type PharmacyItemSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brandId?: boolean
  categoryId?: boolean
  name?: boolean
  form?: boolean
  route?: boolean
  strength?: boolean
  stock?: boolean
  unit?: boolean
  sku?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  brand?: boolean | Prisma.PharmacyBrandDefaultArgs<ExtArgs>
  category?: boolean | Prisma.PharmacyItemCategoryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pharmacyItem"]>

export type PharmacyItemSelectScalar = {
  id?: boolean
  brandId?: boolean
  categoryId?: boolean
  name?: boolean
  form?: boolean
  route?: boolean
  strength?: boolean
  stock?: boolean
  unit?: boolean
  sku?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PharmacyItemOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "brandId" | "categoryId" | "name" | "form" | "route" | "strength" | "stock" | "unit" | "sku" | "createdAt" | "updatedAt", ExtArgs["result"]["pharmacyItem"]>
export type PharmacyItemInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brand?: boolean | Prisma.PharmacyBrandDefaultArgs<ExtArgs>
  category?: boolean | Prisma.PharmacyItemCategoryDefaultArgs<ExtArgs>
}
export type PharmacyItemIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brand?: boolean | Prisma.PharmacyBrandDefaultArgs<ExtArgs>
  category?: boolean | Prisma.PharmacyItemCategoryDefaultArgs<ExtArgs>
}
export type PharmacyItemIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brand?: boolean | Prisma.PharmacyBrandDefaultArgs<ExtArgs>
  category?: boolean | Prisma.PharmacyItemCategoryDefaultArgs<ExtArgs>
}

export type $PharmacyItemPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PharmacyItem"
  objects: {
    brand: Prisma.$PharmacyBrandPayload<ExtArgs>
    category: Prisma.$PharmacyItemCategoryPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    brandId: string
    categoryId: string
    name: string
    form: $Enums.PharmacyItemForm
    route: $Enums.PharmacyItemRoute
    strength: string
    stock: number
    unit: string
    sku: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["pharmacyItem"]>
  composites: {}
}

export type PharmacyItemGetPayload<S extends boolean | null | undefined | PharmacyItemDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PharmacyItemPayload, S>

export type PharmacyItemCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PharmacyItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PharmacyItemCountAggregateInputType | true
  }

export interface PharmacyItemDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PharmacyItem'], meta: { name: 'PharmacyItem' } }
  /**
   * Find zero or one PharmacyItem that matches the filter.
   * @param {PharmacyItemFindUniqueArgs} args - Arguments to find a PharmacyItem
   * @example
   * // Get one PharmacyItem
   * const pharmacyItem = await prisma.pharmacyItem.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PharmacyItemFindUniqueArgs>(args: Prisma.SelectSubset<T, PharmacyItemFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PharmacyItemClient<runtime.Types.Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PharmacyItem that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PharmacyItemFindUniqueOrThrowArgs} args - Arguments to find a PharmacyItem
   * @example
   * // Get one PharmacyItem
   * const pharmacyItem = await prisma.pharmacyItem.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PharmacyItemFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PharmacyItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PharmacyItemClient<runtime.Types.Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PharmacyItem that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacyItemFindFirstArgs} args - Arguments to find a PharmacyItem
   * @example
   * // Get one PharmacyItem
   * const pharmacyItem = await prisma.pharmacyItem.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PharmacyItemFindFirstArgs>(args?: Prisma.SelectSubset<T, PharmacyItemFindFirstArgs<ExtArgs>>): Prisma.Prisma__PharmacyItemClient<runtime.Types.Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PharmacyItem that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacyItemFindFirstOrThrowArgs} args - Arguments to find a PharmacyItem
   * @example
   * // Get one PharmacyItem
   * const pharmacyItem = await prisma.pharmacyItem.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PharmacyItemFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PharmacyItemFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PharmacyItemClient<runtime.Types.Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PharmacyItems that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacyItemFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PharmacyItems
   * const pharmacyItems = await prisma.pharmacyItem.findMany()
   * 
   * // Get first 10 PharmacyItems
   * const pharmacyItems = await prisma.pharmacyItem.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pharmacyItemWithIdOnly = await prisma.pharmacyItem.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PharmacyItemFindManyArgs>(args?: Prisma.SelectSubset<T, PharmacyItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PharmacyItem.
   * @param {PharmacyItemCreateArgs} args - Arguments to create a PharmacyItem.
   * @example
   * // Create one PharmacyItem
   * const PharmacyItem = await prisma.pharmacyItem.create({
   *   data: {
   *     // ... data to create a PharmacyItem
   *   }
   * })
   * 
   */
  create<T extends PharmacyItemCreateArgs>(args: Prisma.SelectSubset<T, PharmacyItemCreateArgs<ExtArgs>>): Prisma.Prisma__PharmacyItemClient<runtime.Types.Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PharmacyItems.
   * @param {PharmacyItemCreateManyArgs} args - Arguments to create many PharmacyItems.
   * @example
   * // Create many PharmacyItems
   * const pharmacyItem = await prisma.pharmacyItem.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PharmacyItemCreateManyArgs>(args?: Prisma.SelectSubset<T, PharmacyItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PharmacyItems and returns the data saved in the database.
   * @param {PharmacyItemCreateManyAndReturnArgs} args - Arguments to create many PharmacyItems.
   * @example
   * // Create many PharmacyItems
   * const pharmacyItem = await prisma.pharmacyItem.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PharmacyItems and only return the `id`
   * const pharmacyItemWithIdOnly = await prisma.pharmacyItem.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PharmacyItemCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PharmacyItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PharmacyItem.
   * @param {PharmacyItemDeleteArgs} args - Arguments to delete one PharmacyItem.
   * @example
   * // Delete one PharmacyItem
   * const PharmacyItem = await prisma.pharmacyItem.delete({
   *   where: {
   *     // ... filter to delete one PharmacyItem
   *   }
   * })
   * 
   */
  delete<T extends PharmacyItemDeleteArgs>(args: Prisma.SelectSubset<T, PharmacyItemDeleteArgs<ExtArgs>>): Prisma.Prisma__PharmacyItemClient<runtime.Types.Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PharmacyItem.
   * @param {PharmacyItemUpdateArgs} args - Arguments to update one PharmacyItem.
   * @example
   * // Update one PharmacyItem
   * const pharmacyItem = await prisma.pharmacyItem.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PharmacyItemUpdateArgs>(args: Prisma.SelectSubset<T, PharmacyItemUpdateArgs<ExtArgs>>): Prisma.Prisma__PharmacyItemClient<runtime.Types.Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PharmacyItems.
   * @param {PharmacyItemDeleteManyArgs} args - Arguments to filter PharmacyItems to delete.
   * @example
   * // Delete a few PharmacyItems
   * const { count } = await prisma.pharmacyItem.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PharmacyItemDeleteManyArgs>(args?: Prisma.SelectSubset<T, PharmacyItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PharmacyItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacyItemUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PharmacyItems
   * const pharmacyItem = await prisma.pharmacyItem.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PharmacyItemUpdateManyArgs>(args: Prisma.SelectSubset<T, PharmacyItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PharmacyItems and returns the data updated in the database.
   * @param {PharmacyItemUpdateManyAndReturnArgs} args - Arguments to update many PharmacyItems.
   * @example
   * // Update many PharmacyItems
   * const pharmacyItem = await prisma.pharmacyItem.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PharmacyItems and only return the `id`
   * const pharmacyItemWithIdOnly = await prisma.pharmacyItem.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PharmacyItemUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PharmacyItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PharmacyItem.
   * @param {PharmacyItemUpsertArgs} args - Arguments to update or create a PharmacyItem.
   * @example
   * // Update or create a PharmacyItem
   * const pharmacyItem = await prisma.pharmacyItem.upsert({
   *   create: {
   *     // ... data to create a PharmacyItem
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PharmacyItem we want to update
   *   }
   * })
   */
  upsert<T extends PharmacyItemUpsertArgs>(args: Prisma.SelectSubset<T, PharmacyItemUpsertArgs<ExtArgs>>): Prisma.Prisma__PharmacyItemClient<runtime.Types.Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PharmacyItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacyItemCountArgs} args - Arguments to filter PharmacyItems to count.
   * @example
   * // Count the number of PharmacyItems
   * const count = await prisma.pharmacyItem.count({
   *   where: {
   *     // ... the filter for the PharmacyItems we want to count
   *   }
   * })
  **/
  count<T extends PharmacyItemCountArgs>(
    args?: Prisma.Subset<T, PharmacyItemCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PharmacyItemCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PharmacyItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacyItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PharmacyItemAggregateArgs>(args: Prisma.Subset<T, PharmacyItemAggregateArgs>): Prisma.PrismaPromise<GetPharmacyItemAggregateType<T>>

  /**
   * Group by PharmacyItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PharmacyItemGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PharmacyItemGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PharmacyItemGroupByArgs['orderBy'] }
      : { orderBy?: PharmacyItemGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PharmacyItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPharmacyItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PharmacyItem model
 */
readonly fields: PharmacyItemFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PharmacyItem.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PharmacyItemClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  brand<T extends Prisma.PharmacyBrandDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PharmacyBrandDefaultArgs<ExtArgs>>): Prisma.Prisma__PharmacyBrandClient<runtime.Types.Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  category<T extends Prisma.PharmacyItemCategoryDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PharmacyItemCategoryDefaultArgs<ExtArgs>>): Prisma.Prisma__PharmacyItemCategoryClient<runtime.Types.Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PharmacyItem model
 */
export interface PharmacyItemFieldRefs {
  readonly id: Prisma.FieldRef<"PharmacyItem", 'String'>
  readonly brandId: Prisma.FieldRef<"PharmacyItem", 'String'>
  readonly categoryId: Prisma.FieldRef<"PharmacyItem", 'String'>
  readonly name: Prisma.FieldRef<"PharmacyItem", 'String'>
  readonly form: Prisma.FieldRef<"PharmacyItem", 'PharmacyItemForm'>
  readonly route: Prisma.FieldRef<"PharmacyItem", 'PharmacyItemRoute'>
  readonly strength: Prisma.FieldRef<"PharmacyItem", 'String'>
  readonly stock: Prisma.FieldRef<"PharmacyItem", 'Int'>
  readonly unit: Prisma.FieldRef<"PharmacyItem", 'String'>
  readonly sku: Prisma.FieldRef<"PharmacyItem", 'String'>
  readonly createdAt: Prisma.FieldRef<"PharmacyItem", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PharmacyItem", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PharmacyItem findUnique
 */
export type PharmacyItemFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItem
   */
  select?: Prisma.PharmacyItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItem
   */
  omit?: Prisma.PharmacyItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemInclude<ExtArgs> | null
  /**
   * Filter, which PharmacyItem to fetch.
   */
  where: Prisma.PharmacyItemWhereUniqueInput
}

/**
 * PharmacyItem findUniqueOrThrow
 */
export type PharmacyItemFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItem
   */
  select?: Prisma.PharmacyItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItem
   */
  omit?: Prisma.PharmacyItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemInclude<ExtArgs> | null
  /**
   * Filter, which PharmacyItem to fetch.
   */
  where: Prisma.PharmacyItemWhereUniqueInput
}

/**
 * PharmacyItem findFirst
 */
export type PharmacyItemFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItem
   */
  select?: Prisma.PharmacyItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItem
   */
  omit?: Prisma.PharmacyItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemInclude<ExtArgs> | null
  /**
   * Filter, which PharmacyItem to fetch.
   */
  where?: Prisma.PharmacyItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PharmacyItems to fetch.
   */
  orderBy?: Prisma.PharmacyItemOrderByWithRelationInput | Prisma.PharmacyItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PharmacyItems.
   */
  cursor?: Prisma.PharmacyItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PharmacyItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PharmacyItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PharmacyItems.
   */
  distinct?: Prisma.PharmacyItemScalarFieldEnum | Prisma.PharmacyItemScalarFieldEnum[]
}

/**
 * PharmacyItem findFirstOrThrow
 */
export type PharmacyItemFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItem
   */
  select?: Prisma.PharmacyItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItem
   */
  omit?: Prisma.PharmacyItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemInclude<ExtArgs> | null
  /**
   * Filter, which PharmacyItem to fetch.
   */
  where?: Prisma.PharmacyItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PharmacyItems to fetch.
   */
  orderBy?: Prisma.PharmacyItemOrderByWithRelationInput | Prisma.PharmacyItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PharmacyItems.
   */
  cursor?: Prisma.PharmacyItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PharmacyItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PharmacyItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PharmacyItems.
   */
  distinct?: Prisma.PharmacyItemScalarFieldEnum | Prisma.PharmacyItemScalarFieldEnum[]
}

/**
 * PharmacyItem findMany
 */
export type PharmacyItemFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItem
   */
  select?: Prisma.PharmacyItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItem
   */
  omit?: Prisma.PharmacyItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemInclude<ExtArgs> | null
  /**
   * Filter, which PharmacyItems to fetch.
   */
  where?: Prisma.PharmacyItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PharmacyItems to fetch.
   */
  orderBy?: Prisma.PharmacyItemOrderByWithRelationInput | Prisma.PharmacyItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PharmacyItems.
   */
  cursor?: Prisma.PharmacyItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PharmacyItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PharmacyItems.
   */
  skip?: number
  distinct?: Prisma.PharmacyItemScalarFieldEnum | Prisma.PharmacyItemScalarFieldEnum[]
}

/**
 * PharmacyItem create
 */
export type PharmacyItemCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItem
   */
  select?: Prisma.PharmacyItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItem
   */
  omit?: Prisma.PharmacyItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemInclude<ExtArgs> | null
  /**
   * The data needed to create a PharmacyItem.
   */
  data: Prisma.XOR<Prisma.PharmacyItemCreateInput, Prisma.PharmacyItemUncheckedCreateInput>
}

/**
 * PharmacyItem createMany
 */
export type PharmacyItemCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PharmacyItems.
   */
  data: Prisma.PharmacyItemCreateManyInput | Prisma.PharmacyItemCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PharmacyItem createManyAndReturn
 */
export type PharmacyItemCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItem
   */
  select?: Prisma.PharmacyItemSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItem
   */
  omit?: Prisma.PharmacyItemOmit<ExtArgs> | null
  /**
   * The data used to create many PharmacyItems.
   */
  data: Prisma.PharmacyItemCreateManyInput | Prisma.PharmacyItemCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PharmacyItem update
 */
export type PharmacyItemUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItem
   */
  select?: Prisma.PharmacyItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItem
   */
  omit?: Prisma.PharmacyItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemInclude<ExtArgs> | null
  /**
   * The data needed to update a PharmacyItem.
   */
  data: Prisma.XOR<Prisma.PharmacyItemUpdateInput, Prisma.PharmacyItemUncheckedUpdateInput>
  /**
   * Choose, which PharmacyItem to update.
   */
  where: Prisma.PharmacyItemWhereUniqueInput
}

/**
 * PharmacyItem updateMany
 */
export type PharmacyItemUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PharmacyItems.
   */
  data: Prisma.XOR<Prisma.PharmacyItemUpdateManyMutationInput, Prisma.PharmacyItemUncheckedUpdateManyInput>
  /**
   * Filter which PharmacyItems to update
   */
  where?: Prisma.PharmacyItemWhereInput
  /**
   * Limit how many PharmacyItems to update.
   */
  limit?: number
}

/**
 * PharmacyItem updateManyAndReturn
 */
export type PharmacyItemUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItem
   */
  select?: Prisma.PharmacyItemSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItem
   */
  omit?: Prisma.PharmacyItemOmit<ExtArgs> | null
  /**
   * The data used to update PharmacyItems.
   */
  data: Prisma.XOR<Prisma.PharmacyItemUpdateManyMutationInput, Prisma.PharmacyItemUncheckedUpdateManyInput>
  /**
   * Filter which PharmacyItems to update
   */
  where?: Prisma.PharmacyItemWhereInput
  /**
   * Limit how many PharmacyItems to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PharmacyItem upsert
 */
export type PharmacyItemUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItem
   */
  select?: Prisma.PharmacyItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItem
   */
  omit?: Prisma.PharmacyItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemInclude<ExtArgs> | null
  /**
   * The filter to search for the PharmacyItem to update in case it exists.
   */
  where: Prisma.PharmacyItemWhereUniqueInput
  /**
   * In case the PharmacyItem found by the `where` argument doesn't exist, create a new PharmacyItem with this data.
   */
  create: Prisma.XOR<Prisma.PharmacyItemCreateInput, Prisma.PharmacyItemUncheckedCreateInput>
  /**
   * In case the PharmacyItem was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PharmacyItemUpdateInput, Prisma.PharmacyItemUncheckedUpdateInput>
}

/**
 * PharmacyItem delete
 */
export type PharmacyItemDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItem
   */
  select?: Prisma.PharmacyItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItem
   */
  omit?: Prisma.PharmacyItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemInclude<ExtArgs> | null
  /**
   * Filter which PharmacyItem to delete.
   */
  where: Prisma.PharmacyItemWhereUniqueInput
}

/**
 * PharmacyItem deleteMany
 */
export type PharmacyItemDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PharmacyItems to delete
   */
  where?: Prisma.PharmacyItemWhereInput
  /**
   * Limit how many PharmacyItems to delete.
   */
  limit?: number
}

/**
 * PharmacyItem without action
 */
export type PharmacyItemDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PharmacyItem
   */
  select?: Prisma.PharmacyItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PharmacyItem
   */
  omit?: Prisma.PharmacyItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PharmacyItemInclude<ExtArgs> | null
}
