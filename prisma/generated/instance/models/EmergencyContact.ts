
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `EmergencyContact` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model EmergencyContact
 * 
 */
export type EmergencyContactModel = runtime.Types.Result.DefaultSelection<Prisma.$EmergencyContactPayload>

export type AggregateEmergencyContact = {
  _count: EmergencyContactCountAggregateOutputType | null
  _min: EmergencyContactMinAggregateOutputType | null
  _max: EmergencyContactMaxAggregateOutputType | null
}

export type EmergencyContactMinAggregateOutputType = {
  id: string | null
  patientProfileId: string | null
  lastName: string | null
  firstName: string | null
  middleName: string | null
  suffix: string | null
  relationship: $Enums.Relationship | null
  phone: string | null
  email: string | null
  address: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EmergencyContactMaxAggregateOutputType = {
  id: string | null
  patientProfileId: string | null
  lastName: string | null
  firstName: string | null
  middleName: string | null
  suffix: string | null
  relationship: $Enums.Relationship | null
  phone: string | null
  email: string | null
  address: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EmergencyContactCountAggregateOutputType = {
  id: number
  patientProfileId: number
  lastName: number
  firstName: number
  middleName: number
  suffix: number
  relationship: number
  phone: number
  email: number
  address: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type EmergencyContactMinAggregateInputType = {
  id?: true
  patientProfileId?: true
  lastName?: true
  firstName?: true
  middleName?: true
  suffix?: true
  relationship?: true
  phone?: true
  email?: true
  address?: true
  createdAt?: true
  updatedAt?: true
}

export type EmergencyContactMaxAggregateInputType = {
  id?: true
  patientProfileId?: true
  lastName?: true
  firstName?: true
  middleName?: true
  suffix?: true
  relationship?: true
  phone?: true
  email?: true
  address?: true
  createdAt?: true
  updatedAt?: true
}

export type EmergencyContactCountAggregateInputType = {
  id?: true
  patientProfileId?: true
  lastName?: true
  firstName?: true
  middleName?: true
  suffix?: true
  relationship?: true
  phone?: true
  email?: true
  address?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type EmergencyContactAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EmergencyContact to aggregate.
   */
  where?: Prisma.EmergencyContactWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmergencyContacts to fetch.
   */
  orderBy?: Prisma.EmergencyContactOrderByWithRelationInput | Prisma.EmergencyContactOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EmergencyContactWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmergencyContacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmergencyContacts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EmergencyContacts
  **/
  _count?: true | EmergencyContactCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EmergencyContactMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EmergencyContactMaxAggregateInputType
}

export type GetEmergencyContactAggregateType<T extends EmergencyContactAggregateArgs> = {
      [P in keyof T & keyof AggregateEmergencyContact]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEmergencyContact[P]>
    : Prisma.GetScalarType<T[P], AggregateEmergencyContact[P]>
}




export type EmergencyContactGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EmergencyContactWhereInput
  orderBy?: Prisma.EmergencyContactOrderByWithAggregationInput | Prisma.EmergencyContactOrderByWithAggregationInput[]
  by: Prisma.EmergencyContactScalarFieldEnum[] | Prisma.EmergencyContactScalarFieldEnum
  having?: Prisma.EmergencyContactScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EmergencyContactCountAggregateInputType | true
  _min?: EmergencyContactMinAggregateInputType
  _max?: EmergencyContactMaxAggregateInputType
}

export type EmergencyContactGroupByOutputType = {
  id: string
  patientProfileId: string
  lastName: string
  firstName: string
  middleName: string | null
  suffix: string | null
  relationship: $Enums.Relationship
  phone: string | null
  email: string | null
  address: string | null
  createdAt: Date
  updatedAt: Date
  _count: EmergencyContactCountAggregateOutputType | null
  _min: EmergencyContactMinAggregateOutputType | null
  _max: EmergencyContactMaxAggregateOutputType | null
}

type GetEmergencyContactGroupByPayload<T extends EmergencyContactGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EmergencyContactGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EmergencyContactGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EmergencyContactGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EmergencyContactGroupByOutputType[P]>
      }
    >
  >



export type EmergencyContactWhereInput = {
  AND?: Prisma.EmergencyContactWhereInput | Prisma.EmergencyContactWhereInput[]
  OR?: Prisma.EmergencyContactWhereInput[]
  NOT?: Prisma.EmergencyContactWhereInput | Prisma.EmergencyContactWhereInput[]
  id?: Prisma.UuidFilter<"EmergencyContact"> | string
  patientProfileId?: Prisma.UuidFilter<"EmergencyContact"> | string
  lastName?: Prisma.StringFilter<"EmergencyContact"> | string
  firstName?: Prisma.StringFilter<"EmergencyContact"> | string
  middleName?: Prisma.StringNullableFilter<"EmergencyContact"> | string | null
  suffix?: Prisma.StringNullableFilter<"EmergencyContact"> | string | null
  relationship?: Prisma.EnumRelationshipFilter<"EmergencyContact"> | $Enums.Relationship
  phone?: Prisma.StringNullableFilter<"EmergencyContact"> | string | null
  email?: Prisma.StringNullableFilter<"EmergencyContact"> | string | null
  address?: Prisma.StringNullableFilter<"EmergencyContact"> | string | null
  createdAt?: Prisma.DateTimeFilter<"EmergencyContact"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EmergencyContact"> | Date | string
  patientProfile?: Prisma.XOR<Prisma.PatientProfileScalarRelationFilter, Prisma.PatientProfileWhereInput>
}

export type EmergencyContactOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  middleName?: Prisma.SortOrderInput | Prisma.SortOrder
  suffix?: Prisma.SortOrderInput | Prisma.SortOrder
  relationship?: Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  email?: Prisma.SortOrderInput | Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  patientProfile?: Prisma.PatientProfileOrderByWithRelationInput
}

export type EmergencyContactWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.EmergencyContactWhereInput | Prisma.EmergencyContactWhereInput[]
  OR?: Prisma.EmergencyContactWhereInput[]
  NOT?: Prisma.EmergencyContactWhereInput | Prisma.EmergencyContactWhereInput[]
  patientProfileId?: Prisma.UuidFilter<"EmergencyContact"> | string
  lastName?: Prisma.StringFilter<"EmergencyContact"> | string
  firstName?: Prisma.StringFilter<"EmergencyContact"> | string
  middleName?: Prisma.StringNullableFilter<"EmergencyContact"> | string | null
  suffix?: Prisma.StringNullableFilter<"EmergencyContact"> | string | null
  relationship?: Prisma.EnumRelationshipFilter<"EmergencyContact"> | $Enums.Relationship
  phone?: Prisma.StringNullableFilter<"EmergencyContact"> | string | null
  email?: Prisma.StringNullableFilter<"EmergencyContact"> | string | null
  address?: Prisma.StringNullableFilter<"EmergencyContact"> | string | null
  createdAt?: Prisma.DateTimeFilter<"EmergencyContact"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EmergencyContact"> | Date | string
  patientProfile?: Prisma.XOR<Prisma.PatientProfileScalarRelationFilter, Prisma.PatientProfileWhereInput>
}, "id">

export type EmergencyContactOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  middleName?: Prisma.SortOrderInput | Prisma.SortOrder
  suffix?: Prisma.SortOrderInput | Prisma.SortOrder
  relationship?: Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  email?: Prisma.SortOrderInput | Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.EmergencyContactCountOrderByAggregateInput
  _max?: Prisma.EmergencyContactMaxOrderByAggregateInput
  _min?: Prisma.EmergencyContactMinOrderByAggregateInput
}

export type EmergencyContactScalarWhereWithAggregatesInput = {
  AND?: Prisma.EmergencyContactScalarWhereWithAggregatesInput | Prisma.EmergencyContactScalarWhereWithAggregatesInput[]
  OR?: Prisma.EmergencyContactScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EmergencyContactScalarWhereWithAggregatesInput | Prisma.EmergencyContactScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"EmergencyContact"> | string
  patientProfileId?: Prisma.UuidWithAggregatesFilter<"EmergencyContact"> | string
  lastName?: Prisma.StringWithAggregatesFilter<"EmergencyContact"> | string
  firstName?: Prisma.StringWithAggregatesFilter<"EmergencyContact"> | string
  middleName?: Prisma.StringNullableWithAggregatesFilter<"EmergencyContact"> | string | null
  suffix?: Prisma.StringNullableWithAggregatesFilter<"EmergencyContact"> | string | null
  relationship?: Prisma.EnumRelationshipWithAggregatesFilter<"EmergencyContact"> | $Enums.Relationship
  phone?: Prisma.StringNullableWithAggregatesFilter<"EmergencyContact"> | string | null
  email?: Prisma.StringNullableWithAggregatesFilter<"EmergencyContact"> | string | null
  address?: Prisma.StringNullableWithAggregatesFilter<"EmergencyContact"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"EmergencyContact"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"EmergencyContact"> | Date | string
}

export type EmergencyContactCreateInput = {
  id?: string
  lastName: string
  firstName: string
  middleName?: string | null
  suffix?: string | null
  relationship: $Enums.Relationship
  phone?: string | null
  email?: string | null
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  patientProfile: Prisma.PatientProfileCreateNestedOneWithoutEmergencyContactsInput
}

export type EmergencyContactUncheckedCreateInput = {
  id?: string
  patientProfileId: string
  lastName: string
  firstName: string
  middleName?: string | null
  suffix?: string | null
  relationship: $Enums.Relationship
  phone?: string | null
  email?: string | null
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmergencyContactUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  middleName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  suffix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  relationship?: Prisma.EnumRelationshipFieldUpdateOperationsInput | $Enums.Relationship
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  patientProfile?: Prisma.PatientProfileUpdateOneRequiredWithoutEmergencyContactsNestedInput
}

export type EmergencyContactUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  patientProfileId?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  middleName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  suffix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  relationship?: Prisma.EnumRelationshipFieldUpdateOperationsInput | $Enums.Relationship
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmergencyContactCreateManyInput = {
  id?: string
  patientProfileId: string
  lastName: string
  firstName: string
  middleName?: string | null
  suffix?: string | null
  relationship: $Enums.Relationship
  phone?: string | null
  email?: string | null
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmergencyContactUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  middleName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  suffix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  relationship?: Prisma.EnumRelationshipFieldUpdateOperationsInput | $Enums.Relationship
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmergencyContactUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  patientProfileId?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  middleName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  suffix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  relationship?: Prisma.EnumRelationshipFieldUpdateOperationsInput | $Enums.Relationship
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmergencyContactListRelationFilter = {
  every?: Prisma.EmergencyContactWhereInput
  some?: Prisma.EmergencyContactWhereInput
  none?: Prisma.EmergencyContactWhereInput
}

export type EmergencyContactOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EmergencyContactCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  middleName?: Prisma.SortOrder
  suffix?: Prisma.SortOrder
  relationship?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  address?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EmergencyContactMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  middleName?: Prisma.SortOrder
  suffix?: Prisma.SortOrder
  relationship?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  address?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EmergencyContactMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  middleName?: Prisma.SortOrder
  suffix?: Prisma.SortOrder
  relationship?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  address?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EmergencyContactCreateNestedManyWithoutPatientProfileInput = {
  create?: Prisma.XOR<Prisma.EmergencyContactCreateWithoutPatientProfileInput, Prisma.EmergencyContactUncheckedCreateWithoutPatientProfileInput> | Prisma.EmergencyContactCreateWithoutPatientProfileInput[] | Prisma.EmergencyContactUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.EmergencyContactCreateOrConnectWithoutPatientProfileInput | Prisma.EmergencyContactCreateOrConnectWithoutPatientProfileInput[]
  createMany?: Prisma.EmergencyContactCreateManyPatientProfileInputEnvelope
  connect?: Prisma.EmergencyContactWhereUniqueInput | Prisma.EmergencyContactWhereUniqueInput[]
}

export type EmergencyContactUncheckedCreateNestedManyWithoutPatientProfileInput = {
  create?: Prisma.XOR<Prisma.EmergencyContactCreateWithoutPatientProfileInput, Prisma.EmergencyContactUncheckedCreateWithoutPatientProfileInput> | Prisma.EmergencyContactCreateWithoutPatientProfileInput[] | Prisma.EmergencyContactUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.EmergencyContactCreateOrConnectWithoutPatientProfileInput | Prisma.EmergencyContactCreateOrConnectWithoutPatientProfileInput[]
  createMany?: Prisma.EmergencyContactCreateManyPatientProfileInputEnvelope
  connect?: Prisma.EmergencyContactWhereUniqueInput | Prisma.EmergencyContactWhereUniqueInput[]
}

export type EmergencyContactUpdateManyWithoutPatientProfileNestedInput = {
  create?: Prisma.XOR<Prisma.EmergencyContactCreateWithoutPatientProfileInput, Prisma.EmergencyContactUncheckedCreateWithoutPatientProfileInput> | Prisma.EmergencyContactCreateWithoutPatientProfileInput[] | Prisma.EmergencyContactUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.EmergencyContactCreateOrConnectWithoutPatientProfileInput | Prisma.EmergencyContactCreateOrConnectWithoutPatientProfileInput[]
  upsert?: Prisma.EmergencyContactUpsertWithWhereUniqueWithoutPatientProfileInput | Prisma.EmergencyContactUpsertWithWhereUniqueWithoutPatientProfileInput[]
  createMany?: Prisma.EmergencyContactCreateManyPatientProfileInputEnvelope
  set?: Prisma.EmergencyContactWhereUniqueInput | Prisma.EmergencyContactWhereUniqueInput[]
  disconnect?: Prisma.EmergencyContactWhereUniqueInput | Prisma.EmergencyContactWhereUniqueInput[]
  delete?: Prisma.EmergencyContactWhereUniqueInput | Prisma.EmergencyContactWhereUniqueInput[]
  connect?: Prisma.EmergencyContactWhereUniqueInput | Prisma.EmergencyContactWhereUniqueInput[]
  update?: Prisma.EmergencyContactUpdateWithWhereUniqueWithoutPatientProfileInput | Prisma.EmergencyContactUpdateWithWhereUniqueWithoutPatientProfileInput[]
  updateMany?: Prisma.EmergencyContactUpdateManyWithWhereWithoutPatientProfileInput | Prisma.EmergencyContactUpdateManyWithWhereWithoutPatientProfileInput[]
  deleteMany?: Prisma.EmergencyContactScalarWhereInput | Prisma.EmergencyContactScalarWhereInput[]
}

export type EmergencyContactUncheckedUpdateManyWithoutPatientProfileNestedInput = {
  create?: Prisma.XOR<Prisma.EmergencyContactCreateWithoutPatientProfileInput, Prisma.EmergencyContactUncheckedCreateWithoutPatientProfileInput> | Prisma.EmergencyContactCreateWithoutPatientProfileInput[] | Prisma.EmergencyContactUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.EmergencyContactCreateOrConnectWithoutPatientProfileInput | Prisma.EmergencyContactCreateOrConnectWithoutPatientProfileInput[]
  upsert?: Prisma.EmergencyContactUpsertWithWhereUniqueWithoutPatientProfileInput | Prisma.EmergencyContactUpsertWithWhereUniqueWithoutPatientProfileInput[]
  createMany?: Prisma.EmergencyContactCreateManyPatientProfileInputEnvelope
  set?: Prisma.EmergencyContactWhereUniqueInput | Prisma.EmergencyContactWhereUniqueInput[]
  disconnect?: Prisma.EmergencyContactWhereUniqueInput | Prisma.EmergencyContactWhereUniqueInput[]
  delete?: Prisma.EmergencyContactWhereUniqueInput | Prisma.EmergencyContactWhereUniqueInput[]
  connect?: Prisma.EmergencyContactWhereUniqueInput | Prisma.EmergencyContactWhereUniqueInput[]
  update?: Prisma.EmergencyContactUpdateWithWhereUniqueWithoutPatientProfileInput | Prisma.EmergencyContactUpdateWithWhereUniqueWithoutPatientProfileInput[]
  updateMany?: Prisma.EmergencyContactUpdateManyWithWhereWithoutPatientProfileInput | Prisma.EmergencyContactUpdateManyWithWhereWithoutPatientProfileInput[]
  deleteMany?: Prisma.EmergencyContactScalarWhereInput | Prisma.EmergencyContactScalarWhereInput[]
}

export type EnumRelationshipFieldUpdateOperationsInput = {
  set?: $Enums.Relationship
}

export type EmergencyContactCreateWithoutPatientProfileInput = {
  id?: string
  lastName: string
  firstName: string
  middleName?: string | null
  suffix?: string | null
  relationship: $Enums.Relationship
  phone?: string | null
  email?: string | null
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmergencyContactUncheckedCreateWithoutPatientProfileInput = {
  id?: string
  lastName: string
  firstName: string
  middleName?: string | null
  suffix?: string | null
  relationship: $Enums.Relationship
  phone?: string | null
  email?: string | null
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmergencyContactCreateOrConnectWithoutPatientProfileInput = {
  where: Prisma.EmergencyContactWhereUniqueInput
  create: Prisma.XOR<Prisma.EmergencyContactCreateWithoutPatientProfileInput, Prisma.EmergencyContactUncheckedCreateWithoutPatientProfileInput>
}

export type EmergencyContactCreateManyPatientProfileInputEnvelope = {
  data: Prisma.EmergencyContactCreateManyPatientProfileInput | Prisma.EmergencyContactCreateManyPatientProfileInput[]
  skipDuplicates?: boolean
}

export type EmergencyContactUpsertWithWhereUniqueWithoutPatientProfileInput = {
  where: Prisma.EmergencyContactWhereUniqueInput
  update: Prisma.XOR<Prisma.EmergencyContactUpdateWithoutPatientProfileInput, Prisma.EmergencyContactUncheckedUpdateWithoutPatientProfileInput>
  create: Prisma.XOR<Prisma.EmergencyContactCreateWithoutPatientProfileInput, Prisma.EmergencyContactUncheckedCreateWithoutPatientProfileInput>
}

export type EmergencyContactUpdateWithWhereUniqueWithoutPatientProfileInput = {
  where: Prisma.EmergencyContactWhereUniqueInput
  data: Prisma.XOR<Prisma.EmergencyContactUpdateWithoutPatientProfileInput, Prisma.EmergencyContactUncheckedUpdateWithoutPatientProfileInput>
}

export type EmergencyContactUpdateManyWithWhereWithoutPatientProfileInput = {
  where: Prisma.EmergencyContactScalarWhereInput
  data: Prisma.XOR<Prisma.EmergencyContactUpdateManyMutationInput, Prisma.EmergencyContactUncheckedUpdateManyWithoutPatientProfileInput>
}

export type EmergencyContactScalarWhereInput = {
  AND?: Prisma.EmergencyContactScalarWhereInput | Prisma.EmergencyContactScalarWhereInput[]
  OR?: Prisma.EmergencyContactScalarWhereInput[]
  NOT?: Prisma.EmergencyContactScalarWhereInput | Prisma.EmergencyContactScalarWhereInput[]
  id?: Prisma.UuidFilter<"EmergencyContact"> | string
  patientProfileId?: Prisma.UuidFilter<"EmergencyContact"> | string
  lastName?: Prisma.StringFilter<"EmergencyContact"> | string
  firstName?: Prisma.StringFilter<"EmergencyContact"> | string
  middleName?: Prisma.StringNullableFilter<"EmergencyContact"> | string | null
  suffix?: Prisma.StringNullableFilter<"EmergencyContact"> | string | null
  relationship?: Prisma.EnumRelationshipFilter<"EmergencyContact"> | $Enums.Relationship
  phone?: Prisma.StringNullableFilter<"EmergencyContact"> | string | null
  email?: Prisma.StringNullableFilter<"EmergencyContact"> | string | null
  address?: Prisma.StringNullableFilter<"EmergencyContact"> | string | null
  createdAt?: Prisma.DateTimeFilter<"EmergencyContact"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EmergencyContact"> | Date | string
}

export type EmergencyContactCreateManyPatientProfileInput = {
  id?: string
  lastName: string
  firstName: string
  middleName?: string | null
  suffix?: string | null
  relationship: $Enums.Relationship
  phone?: string | null
  email?: string | null
  address?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmergencyContactUpdateWithoutPatientProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  middleName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  suffix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  relationship?: Prisma.EnumRelationshipFieldUpdateOperationsInput | $Enums.Relationship
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmergencyContactUncheckedUpdateWithoutPatientProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  middleName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  suffix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  relationship?: Prisma.EnumRelationshipFieldUpdateOperationsInput | $Enums.Relationship
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmergencyContactUncheckedUpdateManyWithoutPatientProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  middleName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  suffix?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  relationship?: Prisma.EnumRelationshipFieldUpdateOperationsInput | $Enums.Relationship
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type EmergencyContactSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  patientProfileId?: boolean
  lastName?: boolean
  firstName?: boolean
  middleName?: boolean
  suffix?: boolean
  relationship?: boolean
  phone?: boolean
  email?: boolean
  address?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["emergencyContact"]>

export type EmergencyContactSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  patientProfileId?: boolean
  lastName?: boolean
  firstName?: boolean
  middleName?: boolean
  suffix?: boolean
  relationship?: boolean
  phone?: boolean
  email?: boolean
  address?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["emergencyContact"]>

export type EmergencyContactSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  patientProfileId?: boolean
  lastName?: boolean
  firstName?: boolean
  middleName?: boolean
  suffix?: boolean
  relationship?: boolean
  phone?: boolean
  email?: boolean
  address?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["emergencyContact"]>

export type EmergencyContactSelectScalar = {
  id?: boolean
  patientProfileId?: boolean
  lastName?: boolean
  firstName?: boolean
  middleName?: boolean
  suffix?: boolean
  relationship?: boolean
  phone?: boolean
  email?: boolean
  address?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type EmergencyContactOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "patientProfileId" | "lastName" | "firstName" | "middleName" | "suffix" | "relationship" | "phone" | "email" | "address" | "createdAt" | "updatedAt", ExtArgs["result"]["emergencyContact"]>
export type EmergencyContactInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}
export type EmergencyContactIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}
export type EmergencyContactIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}

export type $EmergencyContactPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EmergencyContact"
  objects: {
    patientProfile: Prisma.$PatientProfilePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    patientProfileId: string
    lastName: string
    firstName: string
    middleName: string | null
    suffix: string | null
    relationship: $Enums.Relationship
    phone: string | null
    email: string | null
    address: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["emergencyContact"]>
  composites: {}
}

export type EmergencyContactGetPayload<S extends boolean | null | undefined | EmergencyContactDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EmergencyContactPayload, S>

export type EmergencyContactCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EmergencyContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EmergencyContactCountAggregateInputType | true
  }

export interface EmergencyContactDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmergencyContact'], meta: { name: 'EmergencyContact' } }
  /**
   * Find zero or one EmergencyContact that matches the filter.
   * @param {EmergencyContactFindUniqueArgs} args - Arguments to find a EmergencyContact
   * @example
   * // Get one EmergencyContact
   * const emergencyContact = await prisma.emergencyContact.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EmergencyContactFindUniqueArgs>(args: Prisma.SelectSubset<T, EmergencyContactFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EmergencyContactClient<runtime.Types.Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EmergencyContact that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EmergencyContactFindUniqueOrThrowArgs} args - Arguments to find a EmergencyContact
   * @example
   * // Get one EmergencyContact
   * const emergencyContact = await prisma.emergencyContact.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EmergencyContactFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EmergencyContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmergencyContactClient<runtime.Types.Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EmergencyContact that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmergencyContactFindFirstArgs} args - Arguments to find a EmergencyContact
   * @example
   * // Get one EmergencyContact
   * const emergencyContact = await prisma.emergencyContact.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EmergencyContactFindFirstArgs>(args?: Prisma.SelectSubset<T, EmergencyContactFindFirstArgs<ExtArgs>>): Prisma.Prisma__EmergencyContactClient<runtime.Types.Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EmergencyContact that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmergencyContactFindFirstOrThrowArgs} args - Arguments to find a EmergencyContact
   * @example
   * // Get one EmergencyContact
   * const emergencyContact = await prisma.emergencyContact.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EmergencyContactFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EmergencyContactFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmergencyContactClient<runtime.Types.Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EmergencyContacts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmergencyContactFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EmergencyContacts
   * const emergencyContacts = await prisma.emergencyContact.findMany()
   * 
   * // Get first 10 EmergencyContacts
   * const emergencyContacts = await prisma.emergencyContact.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const emergencyContactWithIdOnly = await prisma.emergencyContact.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EmergencyContactFindManyArgs>(args?: Prisma.SelectSubset<T, EmergencyContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EmergencyContact.
   * @param {EmergencyContactCreateArgs} args - Arguments to create a EmergencyContact.
   * @example
   * // Create one EmergencyContact
   * const EmergencyContact = await prisma.emergencyContact.create({
   *   data: {
   *     // ... data to create a EmergencyContact
   *   }
   * })
   * 
   */
  create<T extends EmergencyContactCreateArgs>(args: Prisma.SelectSubset<T, EmergencyContactCreateArgs<ExtArgs>>): Prisma.Prisma__EmergencyContactClient<runtime.Types.Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EmergencyContacts.
   * @param {EmergencyContactCreateManyArgs} args - Arguments to create many EmergencyContacts.
   * @example
   * // Create many EmergencyContacts
   * const emergencyContact = await prisma.emergencyContact.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EmergencyContactCreateManyArgs>(args?: Prisma.SelectSubset<T, EmergencyContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many EmergencyContacts and returns the data saved in the database.
   * @param {EmergencyContactCreateManyAndReturnArgs} args - Arguments to create many EmergencyContacts.
   * @example
   * // Create many EmergencyContacts
   * const emergencyContact = await prisma.emergencyContact.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many EmergencyContacts and only return the `id`
   * const emergencyContactWithIdOnly = await prisma.emergencyContact.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EmergencyContactCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EmergencyContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a EmergencyContact.
   * @param {EmergencyContactDeleteArgs} args - Arguments to delete one EmergencyContact.
   * @example
   * // Delete one EmergencyContact
   * const EmergencyContact = await prisma.emergencyContact.delete({
   *   where: {
   *     // ... filter to delete one EmergencyContact
   *   }
   * })
   * 
   */
  delete<T extends EmergencyContactDeleteArgs>(args: Prisma.SelectSubset<T, EmergencyContactDeleteArgs<ExtArgs>>): Prisma.Prisma__EmergencyContactClient<runtime.Types.Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EmergencyContact.
   * @param {EmergencyContactUpdateArgs} args - Arguments to update one EmergencyContact.
   * @example
   * // Update one EmergencyContact
   * const emergencyContact = await prisma.emergencyContact.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EmergencyContactUpdateArgs>(args: Prisma.SelectSubset<T, EmergencyContactUpdateArgs<ExtArgs>>): Prisma.Prisma__EmergencyContactClient<runtime.Types.Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EmergencyContacts.
   * @param {EmergencyContactDeleteManyArgs} args - Arguments to filter EmergencyContacts to delete.
   * @example
   * // Delete a few EmergencyContacts
   * const { count } = await prisma.emergencyContact.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EmergencyContactDeleteManyArgs>(args?: Prisma.SelectSubset<T, EmergencyContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EmergencyContacts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmergencyContactUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EmergencyContacts
   * const emergencyContact = await prisma.emergencyContact.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EmergencyContactUpdateManyArgs>(args: Prisma.SelectSubset<T, EmergencyContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EmergencyContacts and returns the data updated in the database.
   * @param {EmergencyContactUpdateManyAndReturnArgs} args - Arguments to update many EmergencyContacts.
   * @example
   * // Update many EmergencyContacts
   * const emergencyContact = await prisma.emergencyContact.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more EmergencyContacts and only return the `id`
   * const emergencyContactWithIdOnly = await prisma.emergencyContact.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EmergencyContactUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EmergencyContactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one EmergencyContact.
   * @param {EmergencyContactUpsertArgs} args - Arguments to update or create a EmergencyContact.
   * @example
   * // Update or create a EmergencyContact
   * const emergencyContact = await prisma.emergencyContact.upsert({
   *   create: {
   *     // ... data to create a EmergencyContact
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EmergencyContact we want to update
   *   }
   * })
   */
  upsert<T extends EmergencyContactUpsertArgs>(args: Prisma.SelectSubset<T, EmergencyContactUpsertArgs<ExtArgs>>): Prisma.Prisma__EmergencyContactClient<runtime.Types.Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EmergencyContacts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmergencyContactCountArgs} args - Arguments to filter EmergencyContacts to count.
   * @example
   * // Count the number of EmergencyContacts
   * const count = await prisma.emergencyContact.count({
   *   where: {
   *     // ... the filter for the EmergencyContacts we want to count
   *   }
   * })
  **/
  count<T extends EmergencyContactCountArgs>(
    args?: Prisma.Subset<T, EmergencyContactCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EmergencyContactCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EmergencyContact.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmergencyContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EmergencyContactAggregateArgs>(args: Prisma.Subset<T, EmergencyContactAggregateArgs>): Prisma.PrismaPromise<GetEmergencyContactAggregateType<T>>

  /**
   * Group by EmergencyContact.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmergencyContactGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EmergencyContactGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EmergencyContactGroupByArgs['orderBy'] }
      : { orderBy?: EmergencyContactGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EmergencyContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmergencyContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EmergencyContact model
 */
readonly fields: EmergencyContactFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EmergencyContact.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EmergencyContactClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  patientProfile<T extends Prisma.PatientProfileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PatientProfileDefaultArgs<ExtArgs>>): Prisma.Prisma__PatientProfileClient<runtime.Types.Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EmergencyContact model
 */
export interface EmergencyContactFieldRefs {
  readonly id: Prisma.FieldRef<"EmergencyContact", 'String'>
  readonly patientProfileId: Prisma.FieldRef<"EmergencyContact", 'String'>
  readonly lastName: Prisma.FieldRef<"EmergencyContact", 'String'>
  readonly firstName: Prisma.FieldRef<"EmergencyContact", 'String'>
  readonly middleName: Prisma.FieldRef<"EmergencyContact", 'String'>
  readonly suffix: Prisma.FieldRef<"EmergencyContact", 'String'>
  readonly relationship: Prisma.FieldRef<"EmergencyContact", 'Relationship'>
  readonly phone: Prisma.FieldRef<"EmergencyContact", 'String'>
  readonly email: Prisma.FieldRef<"EmergencyContact", 'String'>
  readonly address: Prisma.FieldRef<"EmergencyContact", 'String'>
  readonly createdAt: Prisma.FieldRef<"EmergencyContact", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"EmergencyContact", 'DateTime'>
}
    

// Custom InputTypes
/**
 * EmergencyContact findUnique
 */
export type EmergencyContactFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmergencyContact
   */
  select?: Prisma.EmergencyContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmergencyContact
   */
  omit?: Prisma.EmergencyContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmergencyContactInclude<ExtArgs> | null
  /**
   * Filter, which EmergencyContact to fetch.
   */
  where: Prisma.EmergencyContactWhereUniqueInput
}

/**
 * EmergencyContact findUniqueOrThrow
 */
export type EmergencyContactFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmergencyContact
   */
  select?: Prisma.EmergencyContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmergencyContact
   */
  omit?: Prisma.EmergencyContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmergencyContactInclude<ExtArgs> | null
  /**
   * Filter, which EmergencyContact to fetch.
   */
  where: Prisma.EmergencyContactWhereUniqueInput
}

/**
 * EmergencyContact findFirst
 */
export type EmergencyContactFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmergencyContact
   */
  select?: Prisma.EmergencyContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmergencyContact
   */
  omit?: Prisma.EmergencyContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmergencyContactInclude<ExtArgs> | null
  /**
   * Filter, which EmergencyContact to fetch.
   */
  where?: Prisma.EmergencyContactWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmergencyContacts to fetch.
   */
  orderBy?: Prisma.EmergencyContactOrderByWithRelationInput | Prisma.EmergencyContactOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EmergencyContacts.
   */
  cursor?: Prisma.EmergencyContactWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmergencyContacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmergencyContacts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EmergencyContacts.
   */
  distinct?: Prisma.EmergencyContactScalarFieldEnum | Prisma.EmergencyContactScalarFieldEnum[]
}

/**
 * EmergencyContact findFirstOrThrow
 */
export type EmergencyContactFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmergencyContact
   */
  select?: Prisma.EmergencyContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmergencyContact
   */
  omit?: Prisma.EmergencyContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmergencyContactInclude<ExtArgs> | null
  /**
   * Filter, which EmergencyContact to fetch.
   */
  where?: Prisma.EmergencyContactWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmergencyContacts to fetch.
   */
  orderBy?: Prisma.EmergencyContactOrderByWithRelationInput | Prisma.EmergencyContactOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EmergencyContacts.
   */
  cursor?: Prisma.EmergencyContactWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmergencyContacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmergencyContacts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EmergencyContacts.
   */
  distinct?: Prisma.EmergencyContactScalarFieldEnum | Prisma.EmergencyContactScalarFieldEnum[]
}

/**
 * EmergencyContact findMany
 */
export type EmergencyContactFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmergencyContact
   */
  select?: Prisma.EmergencyContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmergencyContact
   */
  omit?: Prisma.EmergencyContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmergencyContactInclude<ExtArgs> | null
  /**
   * Filter, which EmergencyContacts to fetch.
   */
  where?: Prisma.EmergencyContactWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmergencyContacts to fetch.
   */
  orderBy?: Prisma.EmergencyContactOrderByWithRelationInput | Prisma.EmergencyContactOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EmergencyContacts.
   */
  cursor?: Prisma.EmergencyContactWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmergencyContacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmergencyContacts.
   */
  skip?: number
  distinct?: Prisma.EmergencyContactScalarFieldEnum | Prisma.EmergencyContactScalarFieldEnum[]
}

/**
 * EmergencyContact create
 */
export type EmergencyContactCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmergencyContact
   */
  select?: Prisma.EmergencyContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmergencyContact
   */
  omit?: Prisma.EmergencyContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmergencyContactInclude<ExtArgs> | null
  /**
   * The data needed to create a EmergencyContact.
   */
  data: Prisma.XOR<Prisma.EmergencyContactCreateInput, Prisma.EmergencyContactUncheckedCreateInput>
}

/**
 * EmergencyContact createMany
 */
export type EmergencyContactCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EmergencyContacts.
   */
  data: Prisma.EmergencyContactCreateManyInput | Prisma.EmergencyContactCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * EmergencyContact createManyAndReturn
 */
export type EmergencyContactCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmergencyContact
   */
  select?: Prisma.EmergencyContactSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EmergencyContact
   */
  omit?: Prisma.EmergencyContactOmit<ExtArgs> | null
  /**
   * The data used to create many EmergencyContacts.
   */
  data: Prisma.EmergencyContactCreateManyInput | Prisma.EmergencyContactCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmergencyContactIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * EmergencyContact update
 */
export type EmergencyContactUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmergencyContact
   */
  select?: Prisma.EmergencyContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmergencyContact
   */
  omit?: Prisma.EmergencyContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmergencyContactInclude<ExtArgs> | null
  /**
   * The data needed to update a EmergencyContact.
   */
  data: Prisma.XOR<Prisma.EmergencyContactUpdateInput, Prisma.EmergencyContactUncheckedUpdateInput>
  /**
   * Choose, which EmergencyContact to update.
   */
  where: Prisma.EmergencyContactWhereUniqueInput
}

/**
 * EmergencyContact updateMany
 */
export type EmergencyContactUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EmergencyContacts.
   */
  data: Prisma.XOR<Prisma.EmergencyContactUpdateManyMutationInput, Prisma.EmergencyContactUncheckedUpdateManyInput>
  /**
   * Filter which EmergencyContacts to update
   */
  where?: Prisma.EmergencyContactWhereInput
  /**
   * Limit how many EmergencyContacts to update.
   */
  limit?: number
}

/**
 * EmergencyContact updateManyAndReturn
 */
export type EmergencyContactUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmergencyContact
   */
  select?: Prisma.EmergencyContactSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EmergencyContact
   */
  omit?: Prisma.EmergencyContactOmit<ExtArgs> | null
  /**
   * The data used to update EmergencyContacts.
   */
  data: Prisma.XOR<Prisma.EmergencyContactUpdateManyMutationInput, Prisma.EmergencyContactUncheckedUpdateManyInput>
  /**
   * Filter which EmergencyContacts to update
   */
  where?: Prisma.EmergencyContactWhereInput
  /**
   * Limit how many EmergencyContacts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmergencyContactIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * EmergencyContact upsert
 */
export type EmergencyContactUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmergencyContact
   */
  select?: Prisma.EmergencyContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmergencyContact
   */
  omit?: Prisma.EmergencyContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmergencyContactInclude<ExtArgs> | null
  /**
   * The filter to search for the EmergencyContact to update in case it exists.
   */
  where: Prisma.EmergencyContactWhereUniqueInput
  /**
   * In case the EmergencyContact found by the `where` argument doesn't exist, create a new EmergencyContact with this data.
   */
  create: Prisma.XOR<Prisma.EmergencyContactCreateInput, Prisma.EmergencyContactUncheckedCreateInput>
  /**
   * In case the EmergencyContact was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EmergencyContactUpdateInput, Prisma.EmergencyContactUncheckedUpdateInput>
}

/**
 * EmergencyContact delete
 */
export type EmergencyContactDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmergencyContact
   */
  select?: Prisma.EmergencyContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmergencyContact
   */
  omit?: Prisma.EmergencyContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmergencyContactInclude<ExtArgs> | null
  /**
   * Filter which EmergencyContact to delete.
   */
  where: Prisma.EmergencyContactWhereUniqueInput
}

/**
 * EmergencyContact deleteMany
 */
export type EmergencyContactDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EmergencyContacts to delete
   */
  where?: Prisma.EmergencyContactWhereInput
  /**
   * Limit how many EmergencyContacts to delete.
   */
  limit?: number
}

/**
 * EmergencyContact without action
 */
export type EmergencyContactDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmergencyContact
   */
  select?: Prisma.EmergencyContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmergencyContact
   */
  omit?: Prisma.EmergencyContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmergencyContactInclude<ExtArgs> | null
}
