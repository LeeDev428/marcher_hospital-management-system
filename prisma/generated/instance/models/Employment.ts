
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Employment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Employment
 * 
 */
export type EmploymentModel = runtime.Types.Result.DefaultSelection<Prisma.$EmploymentPayload>

export type AggregateEmployment = {
  _count: EmploymentCountAggregateOutputType | null
  _min: EmploymentMinAggregateOutputType | null
  _max: EmploymentMaxAggregateOutputType | null
}

export type EmploymentMinAggregateOutputType = {
  id: string | null
  patientProfileId: string | null
  employer: string | null
  contactPerson: string | null
  address: string | null
  phone: string | null
  email: string | null
  website: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EmploymentMaxAggregateOutputType = {
  id: string | null
  patientProfileId: string | null
  employer: string | null
  contactPerson: string | null
  address: string | null
  phone: string | null
  email: string | null
  website: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EmploymentCountAggregateOutputType = {
  id: number
  patientProfileId: number
  employer: number
  contactPerson: number
  address: number
  phone: number
  email: number
  website: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type EmploymentMinAggregateInputType = {
  id?: true
  patientProfileId?: true
  employer?: true
  contactPerson?: true
  address?: true
  phone?: true
  email?: true
  website?: true
  createdAt?: true
  updatedAt?: true
}

export type EmploymentMaxAggregateInputType = {
  id?: true
  patientProfileId?: true
  employer?: true
  contactPerson?: true
  address?: true
  phone?: true
  email?: true
  website?: true
  createdAt?: true
  updatedAt?: true
}

export type EmploymentCountAggregateInputType = {
  id?: true
  patientProfileId?: true
  employer?: true
  contactPerson?: true
  address?: true
  phone?: true
  email?: true
  website?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type EmploymentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Employment to aggregate.
   */
  where?: Prisma.EmploymentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Employments to fetch.
   */
  orderBy?: Prisma.EmploymentOrderByWithRelationInput | Prisma.EmploymentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EmploymentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Employments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Employments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Employments
  **/
  _count?: true | EmploymentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EmploymentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EmploymentMaxAggregateInputType
}

export type GetEmploymentAggregateType<T extends EmploymentAggregateArgs> = {
      [P in keyof T & keyof AggregateEmployment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEmployment[P]>
    : Prisma.GetScalarType<T[P], AggregateEmployment[P]>
}




export type EmploymentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EmploymentWhereInput
  orderBy?: Prisma.EmploymentOrderByWithAggregationInput | Prisma.EmploymentOrderByWithAggregationInput[]
  by: Prisma.EmploymentScalarFieldEnum[] | Prisma.EmploymentScalarFieldEnum
  having?: Prisma.EmploymentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EmploymentCountAggregateInputType | true
  _min?: EmploymentMinAggregateInputType
  _max?: EmploymentMaxAggregateInputType
}

export type EmploymentGroupByOutputType = {
  id: string
  patientProfileId: string
  employer: string
  contactPerson: string | null
  address: string | null
  phone: string | null
  email: string | null
  website: string | null
  createdAt: Date
  updatedAt: Date
  _count: EmploymentCountAggregateOutputType | null
  _min: EmploymentMinAggregateOutputType | null
  _max: EmploymentMaxAggregateOutputType | null
}

type GetEmploymentGroupByPayload<T extends EmploymentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EmploymentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EmploymentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EmploymentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EmploymentGroupByOutputType[P]>
      }
    >
  >



export type EmploymentWhereInput = {
  AND?: Prisma.EmploymentWhereInput | Prisma.EmploymentWhereInput[]
  OR?: Prisma.EmploymentWhereInput[]
  NOT?: Prisma.EmploymentWhereInput | Prisma.EmploymentWhereInput[]
  id?: Prisma.UuidFilter<"Employment"> | string
  patientProfileId?: Prisma.UuidFilter<"Employment"> | string
  employer?: Prisma.StringFilter<"Employment"> | string
  contactPerson?: Prisma.StringNullableFilter<"Employment"> | string | null
  address?: Prisma.StringNullableFilter<"Employment"> | string | null
  phone?: Prisma.StringNullableFilter<"Employment"> | string | null
  email?: Prisma.StringNullableFilter<"Employment"> | string | null
  website?: Prisma.StringNullableFilter<"Employment"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Employment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Employment"> | Date | string
  patientProfile?: Prisma.XOR<Prisma.PatientProfileScalarRelationFilter, Prisma.PatientProfileWhereInput>
}

export type EmploymentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  employer?: Prisma.SortOrder
  contactPerson?: Prisma.SortOrderInput | Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  email?: Prisma.SortOrderInput | Prisma.SortOrder
  website?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  patientProfile?: Prisma.PatientProfileOrderByWithRelationInput
}

export type EmploymentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.EmploymentWhereInput | Prisma.EmploymentWhereInput[]
  OR?: Prisma.EmploymentWhereInput[]
  NOT?: Prisma.EmploymentWhereInput | Prisma.EmploymentWhereInput[]
  patientProfileId?: Prisma.UuidFilter<"Employment"> | string
  employer?: Prisma.StringFilter<"Employment"> | string
  contactPerson?: Prisma.StringNullableFilter<"Employment"> | string | null
  address?: Prisma.StringNullableFilter<"Employment"> | string | null
  phone?: Prisma.StringNullableFilter<"Employment"> | string | null
  email?: Prisma.StringNullableFilter<"Employment"> | string | null
  website?: Prisma.StringNullableFilter<"Employment"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Employment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Employment"> | Date | string
  patientProfile?: Prisma.XOR<Prisma.PatientProfileScalarRelationFilter, Prisma.PatientProfileWhereInput>
}, "id">

export type EmploymentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  employer?: Prisma.SortOrder
  contactPerson?: Prisma.SortOrderInput | Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  email?: Prisma.SortOrderInput | Prisma.SortOrder
  website?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.EmploymentCountOrderByAggregateInput
  _max?: Prisma.EmploymentMaxOrderByAggregateInput
  _min?: Prisma.EmploymentMinOrderByAggregateInput
}

export type EmploymentScalarWhereWithAggregatesInput = {
  AND?: Prisma.EmploymentScalarWhereWithAggregatesInput | Prisma.EmploymentScalarWhereWithAggregatesInput[]
  OR?: Prisma.EmploymentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EmploymentScalarWhereWithAggregatesInput | Prisma.EmploymentScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Employment"> | string
  patientProfileId?: Prisma.UuidWithAggregatesFilter<"Employment"> | string
  employer?: Prisma.StringWithAggregatesFilter<"Employment"> | string
  contactPerson?: Prisma.StringNullableWithAggregatesFilter<"Employment"> | string | null
  address?: Prisma.StringNullableWithAggregatesFilter<"Employment"> | string | null
  phone?: Prisma.StringNullableWithAggregatesFilter<"Employment"> | string | null
  email?: Prisma.StringNullableWithAggregatesFilter<"Employment"> | string | null
  website?: Prisma.StringNullableWithAggregatesFilter<"Employment"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Employment"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Employment"> | Date | string
}

export type EmploymentCreateInput = {
  id?: string
  employer: string
  contactPerson?: string | null
  address?: string | null
  phone?: string | null
  email?: string | null
  website?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  patientProfile: Prisma.PatientProfileCreateNestedOneWithoutEmploymentsInput
}

export type EmploymentUncheckedCreateInput = {
  id?: string
  patientProfileId: string
  employer: string
  contactPerson?: string | null
  address?: string | null
  phone?: string | null
  email?: string | null
  website?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmploymentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  employer?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  patientProfile?: Prisma.PatientProfileUpdateOneRequiredWithoutEmploymentsNestedInput
}

export type EmploymentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  patientProfileId?: Prisma.StringFieldUpdateOperationsInput | string
  employer?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmploymentCreateManyInput = {
  id?: string
  patientProfileId: string
  employer: string
  contactPerson?: string | null
  address?: string | null
  phone?: string | null
  email?: string | null
  website?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmploymentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  employer?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmploymentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  patientProfileId?: Prisma.StringFieldUpdateOperationsInput | string
  employer?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmploymentListRelationFilter = {
  every?: Prisma.EmploymentWhereInput
  some?: Prisma.EmploymentWhereInput
  none?: Prisma.EmploymentWhereInput
}

export type EmploymentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EmploymentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  employer?: Prisma.SortOrder
  contactPerson?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  website?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EmploymentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  employer?: Prisma.SortOrder
  contactPerson?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  website?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EmploymentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  employer?: Prisma.SortOrder
  contactPerson?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  website?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EmploymentCreateNestedManyWithoutPatientProfileInput = {
  create?: Prisma.XOR<Prisma.EmploymentCreateWithoutPatientProfileInput, Prisma.EmploymentUncheckedCreateWithoutPatientProfileInput> | Prisma.EmploymentCreateWithoutPatientProfileInput[] | Prisma.EmploymentUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.EmploymentCreateOrConnectWithoutPatientProfileInput | Prisma.EmploymentCreateOrConnectWithoutPatientProfileInput[]
  createMany?: Prisma.EmploymentCreateManyPatientProfileInputEnvelope
  connect?: Prisma.EmploymentWhereUniqueInput | Prisma.EmploymentWhereUniqueInput[]
}

export type EmploymentUncheckedCreateNestedManyWithoutPatientProfileInput = {
  create?: Prisma.XOR<Prisma.EmploymentCreateWithoutPatientProfileInput, Prisma.EmploymentUncheckedCreateWithoutPatientProfileInput> | Prisma.EmploymentCreateWithoutPatientProfileInput[] | Prisma.EmploymentUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.EmploymentCreateOrConnectWithoutPatientProfileInput | Prisma.EmploymentCreateOrConnectWithoutPatientProfileInput[]
  createMany?: Prisma.EmploymentCreateManyPatientProfileInputEnvelope
  connect?: Prisma.EmploymentWhereUniqueInput | Prisma.EmploymentWhereUniqueInput[]
}

export type EmploymentUpdateManyWithoutPatientProfileNestedInput = {
  create?: Prisma.XOR<Prisma.EmploymentCreateWithoutPatientProfileInput, Prisma.EmploymentUncheckedCreateWithoutPatientProfileInput> | Prisma.EmploymentCreateWithoutPatientProfileInput[] | Prisma.EmploymentUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.EmploymentCreateOrConnectWithoutPatientProfileInput | Prisma.EmploymentCreateOrConnectWithoutPatientProfileInput[]
  upsert?: Prisma.EmploymentUpsertWithWhereUniqueWithoutPatientProfileInput | Prisma.EmploymentUpsertWithWhereUniqueWithoutPatientProfileInput[]
  createMany?: Prisma.EmploymentCreateManyPatientProfileInputEnvelope
  set?: Prisma.EmploymentWhereUniqueInput | Prisma.EmploymentWhereUniqueInput[]
  disconnect?: Prisma.EmploymentWhereUniqueInput | Prisma.EmploymentWhereUniqueInput[]
  delete?: Prisma.EmploymentWhereUniqueInput | Prisma.EmploymentWhereUniqueInput[]
  connect?: Prisma.EmploymentWhereUniqueInput | Prisma.EmploymentWhereUniqueInput[]
  update?: Prisma.EmploymentUpdateWithWhereUniqueWithoutPatientProfileInput | Prisma.EmploymentUpdateWithWhereUniqueWithoutPatientProfileInput[]
  updateMany?: Prisma.EmploymentUpdateManyWithWhereWithoutPatientProfileInput | Prisma.EmploymentUpdateManyWithWhereWithoutPatientProfileInput[]
  deleteMany?: Prisma.EmploymentScalarWhereInput | Prisma.EmploymentScalarWhereInput[]
}

export type EmploymentUncheckedUpdateManyWithoutPatientProfileNestedInput = {
  create?: Prisma.XOR<Prisma.EmploymentCreateWithoutPatientProfileInput, Prisma.EmploymentUncheckedCreateWithoutPatientProfileInput> | Prisma.EmploymentCreateWithoutPatientProfileInput[] | Prisma.EmploymentUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.EmploymentCreateOrConnectWithoutPatientProfileInput | Prisma.EmploymentCreateOrConnectWithoutPatientProfileInput[]
  upsert?: Prisma.EmploymentUpsertWithWhereUniqueWithoutPatientProfileInput | Prisma.EmploymentUpsertWithWhereUniqueWithoutPatientProfileInput[]
  createMany?: Prisma.EmploymentCreateManyPatientProfileInputEnvelope
  set?: Prisma.EmploymentWhereUniqueInput | Prisma.EmploymentWhereUniqueInput[]
  disconnect?: Prisma.EmploymentWhereUniqueInput | Prisma.EmploymentWhereUniqueInput[]
  delete?: Prisma.EmploymentWhereUniqueInput | Prisma.EmploymentWhereUniqueInput[]
  connect?: Prisma.EmploymentWhereUniqueInput | Prisma.EmploymentWhereUniqueInput[]
  update?: Prisma.EmploymentUpdateWithWhereUniqueWithoutPatientProfileInput | Prisma.EmploymentUpdateWithWhereUniqueWithoutPatientProfileInput[]
  updateMany?: Prisma.EmploymentUpdateManyWithWhereWithoutPatientProfileInput | Prisma.EmploymentUpdateManyWithWhereWithoutPatientProfileInput[]
  deleteMany?: Prisma.EmploymentScalarWhereInput | Prisma.EmploymentScalarWhereInput[]
}

export type EmploymentCreateWithoutPatientProfileInput = {
  id?: string
  employer: string
  contactPerson?: string | null
  address?: string | null
  phone?: string | null
  email?: string | null
  website?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmploymentUncheckedCreateWithoutPatientProfileInput = {
  id?: string
  employer: string
  contactPerson?: string | null
  address?: string | null
  phone?: string | null
  email?: string | null
  website?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmploymentCreateOrConnectWithoutPatientProfileInput = {
  where: Prisma.EmploymentWhereUniqueInput
  create: Prisma.XOR<Prisma.EmploymentCreateWithoutPatientProfileInput, Prisma.EmploymentUncheckedCreateWithoutPatientProfileInput>
}

export type EmploymentCreateManyPatientProfileInputEnvelope = {
  data: Prisma.EmploymentCreateManyPatientProfileInput | Prisma.EmploymentCreateManyPatientProfileInput[]
  skipDuplicates?: boolean
}

export type EmploymentUpsertWithWhereUniqueWithoutPatientProfileInput = {
  where: Prisma.EmploymentWhereUniqueInput
  update: Prisma.XOR<Prisma.EmploymentUpdateWithoutPatientProfileInput, Prisma.EmploymentUncheckedUpdateWithoutPatientProfileInput>
  create: Prisma.XOR<Prisma.EmploymentCreateWithoutPatientProfileInput, Prisma.EmploymentUncheckedCreateWithoutPatientProfileInput>
}

export type EmploymentUpdateWithWhereUniqueWithoutPatientProfileInput = {
  where: Prisma.EmploymentWhereUniqueInput
  data: Prisma.XOR<Prisma.EmploymentUpdateWithoutPatientProfileInput, Prisma.EmploymentUncheckedUpdateWithoutPatientProfileInput>
}

export type EmploymentUpdateManyWithWhereWithoutPatientProfileInput = {
  where: Prisma.EmploymentScalarWhereInput
  data: Prisma.XOR<Prisma.EmploymentUpdateManyMutationInput, Prisma.EmploymentUncheckedUpdateManyWithoutPatientProfileInput>
}

export type EmploymentScalarWhereInput = {
  AND?: Prisma.EmploymentScalarWhereInput | Prisma.EmploymentScalarWhereInput[]
  OR?: Prisma.EmploymentScalarWhereInput[]
  NOT?: Prisma.EmploymentScalarWhereInput | Prisma.EmploymentScalarWhereInput[]
  id?: Prisma.UuidFilter<"Employment"> | string
  patientProfileId?: Prisma.UuidFilter<"Employment"> | string
  employer?: Prisma.StringFilter<"Employment"> | string
  contactPerson?: Prisma.StringNullableFilter<"Employment"> | string | null
  address?: Prisma.StringNullableFilter<"Employment"> | string | null
  phone?: Prisma.StringNullableFilter<"Employment"> | string | null
  email?: Prisma.StringNullableFilter<"Employment"> | string | null
  website?: Prisma.StringNullableFilter<"Employment"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Employment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Employment"> | Date | string
}

export type EmploymentCreateManyPatientProfileInput = {
  id?: string
  employer: string
  contactPerson?: string | null
  address?: string | null
  phone?: string | null
  email?: string | null
  website?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmploymentUpdateWithoutPatientProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  employer?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmploymentUncheckedUpdateWithoutPatientProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  employer?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmploymentUncheckedUpdateManyWithoutPatientProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  employer?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type EmploymentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  patientProfileId?: boolean
  employer?: boolean
  contactPerson?: boolean
  address?: boolean
  phone?: boolean
  email?: boolean
  website?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["employment"]>

export type EmploymentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  patientProfileId?: boolean
  employer?: boolean
  contactPerson?: boolean
  address?: boolean
  phone?: boolean
  email?: boolean
  website?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["employment"]>

export type EmploymentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  patientProfileId?: boolean
  employer?: boolean
  contactPerson?: boolean
  address?: boolean
  phone?: boolean
  email?: boolean
  website?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["employment"]>

export type EmploymentSelectScalar = {
  id?: boolean
  patientProfileId?: boolean
  employer?: boolean
  contactPerson?: boolean
  address?: boolean
  phone?: boolean
  email?: boolean
  website?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type EmploymentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "patientProfileId" | "employer" | "contactPerson" | "address" | "phone" | "email" | "website" | "createdAt" | "updatedAt", ExtArgs["result"]["employment"]>
export type EmploymentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}
export type EmploymentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}
export type EmploymentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}

export type $EmploymentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Employment"
  objects: {
    patientProfile: Prisma.$PatientProfilePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    patientProfileId: string
    employer: string
    contactPerson: string | null
    address: string | null
    phone: string | null
    email: string | null
    website: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["employment"]>
  composites: {}
}

export type EmploymentGetPayload<S extends boolean | null | undefined | EmploymentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EmploymentPayload, S>

export type EmploymentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EmploymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EmploymentCountAggregateInputType | true
  }

export interface EmploymentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employment'], meta: { name: 'Employment' } }
  /**
   * Find zero or one Employment that matches the filter.
   * @param {EmploymentFindUniqueArgs} args - Arguments to find a Employment
   * @example
   * // Get one Employment
   * const employment = await prisma.employment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EmploymentFindUniqueArgs>(args: Prisma.SelectSubset<T, EmploymentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EmploymentClient<runtime.Types.Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Employment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EmploymentFindUniqueOrThrowArgs} args - Arguments to find a Employment
   * @example
   * // Get one Employment
   * const employment = await prisma.employment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EmploymentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EmploymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmploymentClient<runtime.Types.Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Employment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmploymentFindFirstArgs} args - Arguments to find a Employment
   * @example
   * // Get one Employment
   * const employment = await prisma.employment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EmploymentFindFirstArgs>(args?: Prisma.SelectSubset<T, EmploymentFindFirstArgs<ExtArgs>>): Prisma.Prisma__EmploymentClient<runtime.Types.Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Employment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmploymentFindFirstOrThrowArgs} args - Arguments to find a Employment
   * @example
   * // Get one Employment
   * const employment = await prisma.employment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EmploymentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EmploymentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmploymentClient<runtime.Types.Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Employments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmploymentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Employments
   * const employments = await prisma.employment.findMany()
   * 
   * // Get first 10 Employments
   * const employments = await prisma.employment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const employmentWithIdOnly = await prisma.employment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EmploymentFindManyArgs>(args?: Prisma.SelectSubset<T, EmploymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Employment.
   * @param {EmploymentCreateArgs} args - Arguments to create a Employment.
   * @example
   * // Create one Employment
   * const Employment = await prisma.employment.create({
   *   data: {
   *     // ... data to create a Employment
   *   }
   * })
   * 
   */
  create<T extends EmploymentCreateArgs>(args: Prisma.SelectSubset<T, EmploymentCreateArgs<ExtArgs>>): Prisma.Prisma__EmploymentClient<runtime.Types.Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Employments.
   * @param {EmploymentCreateManyArgs} args - Arguments to create many Employments.
   * @example
   * // Create many Employments
   * const employment = await prisma.employment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EmploymentCreateManyArgs>(args?: Prisma.SelectSubset<T, EmploymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Employments and returns the data saved in the database.
   * @param {EmploymentCreateManyAndReturnArgs} args - Arguments to create many Employments.
   * @example
   * // Create many Employments
   * const employment = await prisma.employment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Employments and only return the `id`
   * const employmentWithIdOnly = await prisma.employment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EmploymentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EmploymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Employment.
   * @param {EmploymentDeleteArgs} args - Arguments to delete one Employment.
   * @example
   * // Delete one Employment
   * const Employment = await prisma.employment.delete({
   *   where: {
   *     // ... filter to delete one Employment
   *   }
   * })
   * 
   */
  delete<T extends EmploymentDeleteArgs>(args: Prisma.SelectSubset<T, EmploymentDeleteArgs<ExtArgs>>): Prisma.Prisma__EmploymentClient<runtime.Types.Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Employment.
   * @param {EmploymentUpdateArgs} args - Arguments to update one Employment.
   * @example
   * // Update one Employment
   * const employment = await prisma.employment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EmploymentUpdateArgs>(args: Prisma.SelectSubset<T, EmploymentUpdateArgs<ExtArgs>>): Prisma.Prisma__EmploymentClient<runtime.Types.Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Employments.
   * @param {EmploymentDeleteManyArgs} args - Arguments to filter Employments to delete.
   * @example
   * // Delete a few Employments
   * const { count } = await prisma.employment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EmploymentDeleteManyArgs>(args?: Prisma.SelectSubset<T, EmploymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Employments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmploymentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Employments
   * const employment = await prisma.employment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EmploymentUpdateManyArgs>(args: Prisma.SelectSubset<T, EmploymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Employments and returns the data updated in the database.
   * @param {EmploymentUpdateManyAndReturnArgs} args - Arguments to update many Employments.
   * @example
   * // Update many Employments
   * const employment = await prisma.employment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Employments and only return the `id`
   * const employmentWithIdOnly = await prisma.employment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EmploymentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EmploymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Employment.
   * @param {EmploymentUpsertArgs} args - Arguments to update or create a Employment.
   * @example
   * // Update or create a Employment
   * const employment = await prisma.employment.upsert({
   *   create: {
   *     // ... data to create a Employment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Employment we want to update
   *   }
   * })
   */
  upsert<T extends EmploymentUpsertArgs>(args: Prisma.SelectSubset<T, EmploymentUpsertArgs<ExtArgs>>): Prisma.Prisma__EmploymentClient<runtime.Types.Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Employments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmploymentCountArgs} args - Arguments to filter Employments to count.
   * @example
   * // Count the number of Employments
   * const count = await prisma.employment.count({
   *   where: {
   *     // ... the filter for the Employments we want to count
   *   }
   * })
  **/
  count<T extends EmploymentCountArgs>(
    args?: Prisma.Subset<T, EmploymentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EmploymentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Employment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmploymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EmploymentAggregateArgs>(args: Prisma.Subset<T, EmploymentAggregateArgs>): Prisma.PrismaPromise<GetEmploymentAggregateType<T>>

  /**
   * Group by Employment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmploymentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EmploymentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EmploymentGroupByArgs['orderBy'] }
      : { orderBy?: EmploymentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EmploymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmploymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Employment model
 */
readonly fields: EmploymentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Employment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EmploymentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  patientProfile<T extends Prisma.PatientProfileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PatientProfileDefaultArgs<ExtArgs>>): Prisma.Prisma__PatientProfileClient<runtime.Types.Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Employment model
 */
export interface EmploymentFieldRefs {
  readonly id: Prisma.FieldRef<"Employment", 'String'>
  readonly patientProfileId: Prisma.FieldRef<"Employment", 'String'>
  readonly employer: Prisma.FieldRef<"Employment", 'String'>
  readonly contactPerson: Prisma.FieldRef<"Employment", 'String'>
  readonly address: Prisma.FieldRef<"Employment", 'String'>
  readonly phone: Prisma.FieldRef<"Employment", 'String'>
  readonly email: Prisma.FieldRef<"Employment", 'String'>
  readonly website: Prisma.FieldRef<"Employment", 'String'>
  readonly createdAt: Prisma.FieldRef<"Employment", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Employment", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Employment findUnique
 */
export type EmploymentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employment
   */
  select?: Prisma.EmploymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Employment
   */
  omit?: Prisma.EmploymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmploymentInclude<ExtArgs> | null
  /**
   * Filter, which Employment to fetch.
   */
  where: Prisma.EmploymentWhereUniqueInput
}

/**
 * Employment findUniqueOrThrow
 */
export type EmploymentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employment
   */
  select?: Prisma.EmploymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Employment
   */
  omit?: Prisma.EmploymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmploymentInclude<ExtArgs> | null
  /**
   * Filter, which Employment to fetch.
   */
  where: Prisma.EmploymentWhereUniqueInput
}

/**
 * Employment findFirst
 */
export type EmploymentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employment
   */
  select?: Prisma.EmploymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Employment
   */
  omit?: Prisma.EmploymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmploymentInclude<ExtArgs> | null
  /**
   * Filter, which Employment to fetch.
   */
  where?: Prisma.EmploymentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Employments to fetch.
   */
  orderBy?: Prisma.EmploymentOrderByWithRelationInput | Prisma.EmploymentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Employments.
   */
  cursor?: Prisma.EmploymentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Employments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Employments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Employments.
   */
  distinct?: Prisma.EmploymentScalarFieldEnum | Prisma.EmploymentScalarFieldEnum[]
}

/**
 * Employment findFirstOrThrow
 */
export type EmploymentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employment
   */
  select?: Prisma.EmploymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Employment
   */
  omit?: Prisma.EmploymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmploymentInclude<ExtArgs> | null
  /**
   * Filter, which Employment to fetch.
   */
  where?: Prisma.EmploymentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Employments to fetch.
   */
  orderBy?: Prisma.EmploymentOrderByWithRelationInput | Prisma.EmploymentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Employments.
   */
  cursor?: Prisma.EmploymentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Employments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Employments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Employments.
   */
  distinct?: Prisma.EmploymentScalarFieldEnum | Prisma.EmploymentScalarFieldEnum[]
}

/**
 * Employment findMany
 */
export type EmploymentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employment
   */
  select?: Prisma.EmploymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Employment
   */
  omit?: Prisma.EmploymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmploymentInclude<ExtArgs> | null
  /**
   * Filter, which Employments to fetch.
   */
  where?: Prisma.EmploymentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Employments to fetch.
   */
  orderBy?: Prisma.EmploymentOrderByWithRelationInput | Prisma.EmploymentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Employments.
   */
  cursor?: Prisma.EmploymentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Employments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Employments.
   */
  skip?: number
  distinct?: Prisma.EmploymentScalarFieldEnum | Prisma.EmploymentScalarFieldEnum[]
}

/**
 * Employment create
 */
export type EmploymentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employment
   */
  select?: Prisma.EmploymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Employment
   */
  omit?: Prisma.EmploymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmploymentInclude<ExtArgs> | null
  /**
   * The data needed to create a Employment.
   */
  data: Prisma.XOR<Prisma.EmploymentCreateInput, Prisma.EmploymentUncheckedCreateInput>
}

/**
 * Employment createMany
 */
export type EmploymentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Employments.
   */
  data: Prisma.EmploymentCreateManyInput | Prisma.EmploymentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Employment createManyAndReturn
 */
export type EmploymentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employment
   */
  select?: Prisma.EmploymentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Employment
   */
  omit?: Prisma.EmploymentOmit<ExtArgs> | null
  /**
   * The data used to create many Employments.
   */
  data: Prisma.EmploymentCreateManyInput | Prisma.EmploymentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmploymentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Employment update
 */
export type EmploymentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employment
   */
  select?: Prisma.EmploymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Employment
   */
  omit?: Prisma.EmploymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmploymentInclude<ExtArgs> | null
  /**
   * The data needed to update a Employment.
   */
  data: Prisma.XOR<Prisma.EmploymentUpdateInput, Prisma.EmploymentUncheckedUpdateInput>
  /**
   * Choose, which Employment to update.
   */
  where: Prisma.EmploymentWhereUniqueInput
}

/**
 * Employment updateMany
 */
export type EmploymentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Employments.
   */
  data: Prisma.XOR<Prisma.EmploymentUpdateManyMutationInput, Prisma.EmploymentUncheckedUpdateManyInput>
  /**
   * Filter which Employments to update
   */
  where?: Prisma.EmploymentWhereInput
  /**
   * Limit how many Employments to update.
   */
  limit?: number
}

/**
 * Employment updateManyAndReturn
 */
export type EmploymentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employment
   */
  select?: Prisma.EmploymentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Employment
   */
  omit?: Prisma.EmploymentOmit<ExtArgs> | null
  /**
   * The data used to update Employments.
   */
  data: Prisma.XOR<Prisma.EmploymentUpdateManyMutationInput, Prisma.EmploymentUncheckedUpdateManyInput>
  /**
   * Filter which Employments to update
   */
  where?: Prisma.EmploymentWhereInput
  /**
   * Limit how many Employments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmploymentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Employment upsert
 */
export type EmploymentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employment
   */
  select?: Prisma.EmploymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Employment
   */
  omit?: Prisma.EmploymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmploymentInclude<ExtArgs> | null
  /**
   * The filter to search for the Employment to update in case it exists.
   */
  where: Prisma.EmploymentWhereUniqueInput
  /**
   * In case the Employment found by the `where` argument doesn't exist, create a new Employment with this data.
   */
  create: Prisma.XOR<Prisma.EmploymentCreateInput, Prisma.EmploymentUncheckedCreateInput>
  /**
   * In case the Employment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EmploymentUpdateInput, Prisma.EmploymentUncheckedUpdateInput>
}

/**
 * Employment delete
 */
export type EmploymentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employment
   */
  select?: Prisma.EmploymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Employment
   */
  omit?: Prisma.EmploymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmploymentInclude<ExtArgs> | null
  /**
   * Filter which Employment to delete.
   */
  where: Prisma.EmploymentWhereUniqueInput
}

/**
 * Employment deleteMany
 */
export type EmploymentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Employments to delete
   */
  where?: Prisma.EmploymentWhereInput
  /**
   * Limit how many Employments to delete.
   */
  limit?: number
}

/**
 * Employment without action
 */
export type EmploymentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Employment
   */
  select?: Prisma.EmploymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Employment
   */
  omit?: Prisma.EmploymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmploymentInclude<ExtArgs> | null
}
