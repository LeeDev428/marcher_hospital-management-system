
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `FacilityLog` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model FacilityLog
 * 
 */
export type FacilityLogModel = runtime.Types.Result.DefaultSelection<Prisma.$FacilityLogPayload>

export type AggregateFacilityLog = {
  _count: FacilityLogCountAggregateOutputType | null
  _avg: FacilityLogAvgAggregateOutputType | null
  _sum: FacilityLogSumAggregateOutputType | null
  _min: FacilityLogMinAggregateOutputType | null
  _max: FacilityLogMaxAggregateOutputType | null
}

export type FacilityLogAvgAggregateOutputType = {
  id: number | null
}

export type FacilityLogSumAggregateOutputType = {
  id: number | null
}

export type FacilityLogMinAggregateOutputType = {
  id: number | null
  timestamp: Date | null
  user: string | null
  role: string | null
  action: string | null
  roomIdentifier: string | null
  type: string | null
  oldStatus: string | null
  newStatus: string | null
}

export type FacilityLogMaxAggregateOutputType = {
  id: number | null
  timestamp: Date | null
  user: string | null
  role: string | null
  action: string | null
  roomIdentifier: string | null
  type: string | null
  oldStatus: string | null
  newStatus: string | null
}

export type FacilityLogCountAggregateOutputType = {
  id: number
  timestamp: number
  user: number
  role: number
  action: number
  roomIdentifier: number
  type: number
  oldStatus: number
  newStatus: number
  _all: number
}


export type FacilityLogAvgAggregateInputType = {
  id?: true
}

export type FacilityLogSumAggregateInputType = {
  id?: true
}

export type FacilityLogMinAggregateInputType = {
  id?: true
  timestamp?: true
  user?: true
  role?: true
  action?: true
  roomIdentifier?: true
  type?: true
  oldStatus?: true
  newStatus?: true
}

export type FacilityLogMaxAggregateInputType = {
  id?: true
  timestamp?: true
  user?: true
  role?: true
  action?: true
  roomIdentifier?: true
  type?: true
  oldStatus?: true
  newStatus?: true
}

export type FacilityLogCountAggregateInputType = {
  id?: true
  timestamp?: true
  user?: true
  role?: true
  action?: true
  roomIdentifier?: true
  type?: true
  oldStatus?: true
  newStatus?: true
  _all?: true
}

export type FacilityLogAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FacilityLog to aggregate.
   */
  where?: Prisma.FacilityLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FacilityLogs to fetch.
   */
  orderBy?: Prisma.FacilityLogOrderByWithRelationInput | Prisma.FacilityLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FacilityLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FacilityLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FacilityLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FacilityLogs
  **/
  _count?: true | FacilityLogCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FacilityLogAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FacilityLogSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FacilityLogMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FacilityLogMaxAggregateInputType
}

export type GetFacilityLogAggregateType<T extends FacilityLogAggregateArgs> = {
      [P in keyof T & keyof AggregateFacilityLog]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFacilityLog[P]>
    : Prisma.GetScalarType<T[P], AggregateFacilityLog[P]>
}




export type FacilityLogGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FacilityLogWhereInput
  orderBy?: Prisma.FacilityLogOrderByWithAggregationInput | Prisma.FacilityLogOrderByWithAggregationInput[]
  by: Prisma.FacilityLogScalarFieldEnum[] | Prisma.FacilityLogScalarFieldEnum
  having?: Prisma.FacilityLogScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FacilityLogCountAggregateInputType | true
  _avg?: FacilityLogAvgAggregateInputType
  _sum?: FacilityLogSumAggregateInputType
  _min?: FacilityLogMinAggregateInputType
  _max?: FacilityLogMaxAggregateInputType
}

export type FacilityLogGroupByOutputType = {
  id: number
  timestamp: Date
  user: string
  role: string
  action: string
  roomIdentifier: string
  type: string
  oldStatus: string | null
  newStatus: string | null
  _count: FacilityLogCountAggregateOutputType | null
  _avg: FacilityLogAvgAggregateOutputType | null
  _sum: FacilityLogSumAggregateOutputType | null
  _min: FacilityLogMinAggregateOutputType | null
  _max: FacilityLogMaxAggregateOutputType | null
}

type GetFacilityLogGroupByPayload<T extends FacilityLogGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FacilityLogGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FacilityLogGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FacilityLogGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FacilityLogGroupByOutputType[P]>
      }
    >
  >



export type FacilityLogWhereInput = {
  AND?: Prisma.FacilityLogWhereInput | Prisma.FacilityLogWhereInput[]
  OR?: Prisma.FacilityLogWhereInput[]
  NOT?: Prisma.FacilityLogWhereInput | Prisma.FacilityLogWhereInput[]
  id?: Prisma.IntFilter<"FacilityLog"> | number
  timestamp?: Prisma.DateTimeFilter<"FacilityLog"> | Date | string
  user?: Prisma.StringFilter<"FacilityLog"> | string
  role?: Prisma.StringFilter<"FacilityLog"> | string
  action?: Prisma.StringFilter<"FacilityLog"> | string
  roomIdentifier?: Prisma.StringFilter<"FacilityLog"> | string
  type?: Prisma.StringFilter<"FacilityLog"> | string
  oldStatus?: Prisma.StringNullableFilter<"FacilityLog"> | string | null
  newStatus?: Prisma.StringNullableFilter<"FacilityLog"> | string | null
}

export type FacilityLogOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  user?: Prisma.SortOrder
  role?: Prisma.SortOrder
  action?: Prisma.SortOrder
  roomIdentifier?: Prisma.SortOrder
  type?: Prisma.SortOrder
  oldStatus?: Prisma.SortOrderInput | Prisma.SortOrder
  newStatus?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type FacilityLogWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.FacilityLogWhereInput | Prisma.FacilityLogWhereInput[]
  OR?: Prisma.FacilityLogWhereInput[]
  NOT?: Prisma.FacilityLogWhereInput | Prisma.FacilityLogWhereInput[]
  timestamp?: Prisma.DateTimeFilter<"FacilityLog"> | Date | string
  user?: Prisma.StringFilter<"FacilityLog"> | string
  role?: Prisma.StringFilter<"FacilityLog"> | string
  action?: Prisma.StringFilter<"FacilityLog"> | string
  roomIdentifier?: Prisma.StringFilter<"FacilityLog"> | string
  type?: Prisma.StringFilter<"FacilityLog"> | string
  oldStatus?: Prisma.StringNullableFilter<"FacilityLog"> | string | null
  newStatus?: Prisma.StringNullableFilter<"FacilityLog"> | string | null
}, "id">

export type FacilityLogOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  user?: Prisma.SortOrder
  role?: Prisma.SortOrder
  action?: Prisma.SortOrder
  roomIdentifier?: Prisma.SortOrder
  type?: Prisma.SortOrder
  oldStatus?: Prisma.SortOrderInput | Prisma.SortOrder
  newStatus?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.FacilityLogCountOrderByAggregateInput
  _avg?: Prisma.FacilityLogAvgOrderByAggregateInput
  _max?: Prisma.FacilityLogMaxOrderByAggregateInput
  _min?: Prisma.FacilityLogMinOrderByAggregateInput
  _sum?: Prisma.FacilityLogSumOrderByAggregateInput
}

export type FacilityLogScalarWhereWithAggregatesInput = {
  AND?: Prisma.FacilityLogScalarWhereWithAggregatesInput | Prisma.FacilityLogScalarWhereWithAggregatesInput[]
  OR?: Prisma.FacilityLogScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FacilityLogScalarWhereWithAggregatesInput | Prisma.FacilityLogScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"FacilityLog"> | number
  timestamp?: Prisma.DateTimeWithAggregatesFilter<"FacilityLog"> | Date | string
  user?: Prisma.StringWithAggregatesFilter<"FacilityLog"> | string
  role?: Prisma.StringWithAggregatesFilter<"FacilityLog"> | string
  action?: Prisma.StringWithAggregatesFilter<"FacilityLog"> | string
  roomIdentifier?: Prisma.StringWithAggregatesFilter<"FacilityLog"> | string
  type?: Prisma.StringWithAggregatesFilter<"FacilityLog"> | string
  oldStatus?: Prisma.StringNullableWithAggregatesFilter<"FacilityLog"> | string | null
  newStatus?: Prisma.StringNullableWithAggregatesFilter<"FacilityLog"> | string | null
}

export type FacilityLogCreateInput = {
  timestamp?: Date | string
  user: string
  role: string
  action: string
  roomIdentifier: string
  type: string
  oldStatus?: string | null
  newStatus?: string | null
}

export type FacilityLogUncheckedCreateInput = {
  id?: number
  timestamp?: Date | string
  user: string
  role: string
  action: string
  roomIdentifier: string
  type: string
  oldStatus?: string | null
  newStatus?: string | null
}

export type FacilityLogUpdateInput = {
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  action?: Prisma.StringFieldUpdateOperationsInput | string
  roomIdentifier?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  oldStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  newStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FacilityLogUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  action?: Prisma.StringFieldUpdateOperationsInput | string
  roomIdentifier?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  oldStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  newStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FacilityLogCreateManyInput = {
  id?: number
  timestamp?: Date | string
  user: string
  role: string
  action: string
  roomIdentifier: string
  type: string
  oldStatus?: string | null
  newStatus?: string | null
}

export type FacilityLogUpdateManyMutationInput = {
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  action?: Prisma.StringFieldUpdateOperationsInput | string
  roomIdentifier?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  oldStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  newStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FacilityLogUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  action?: Prisma.StringFieldUpdateOperationsInput | string
  roomIdentifier?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  oldStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  newStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type FacilityLogCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  user?: Prisma.SortOrder
  role?: Prisma.SortOrder
  action?: Prisma.SortOrder
  roomIdentifier?: Prisma.SortOrder
  type?: Prisma.SortOrder
  oldStatus?: Prisma.SortOrder
  newStatus?: Prisma.SortOrder
}

export type FacilityLogAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type FacilityLogMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  user?: Prisma.SortOrder
  role?: Prisma.SortOrder
  action?: Prisma.SortOrder
  roomIdentifier?: Prisma.SortOrder
  type?: Prisma.SortOrder
  oldStatus?: Prisma.SortOrder
  newStatus?: Prisma.SortOrder
}

export type FacilityLogMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  user?: Prisma.SortOrder
  role?: Prisma.SortOrder
  action?: Prisma.SortOrder
  roomIdentifier?: Prisma.SortOrder
  type?: Prisma.SortOrder
  oldStatus?: Prisma.SortOrder
  newStatus?: Prisma.SortOrder
}

export type FacilityLogSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}



export type FacilityLogSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  timestamp?: boolean
  user?: boolean
  role?: boolean
  action?: boolean
  roomIdentifier?: boolean
  type?: boolean
  oldStatus?: boolean
  newStatus?: boolean
}, ExtArgs["result"]["facilityLog"]>

export type FacilityLogSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  timestamp?: boolean
  user?: boolean
  role?: boolean
  action?: boolean
  roomIdentifier?: boolean
  type?: boolean
  oldStatus?: boolean
  newStatus?: boolean
}, ExtArgs["result"]["facilityLog"]>

export type FacilityLogSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  timestamp?: boolean
  user?: boolean
  role?: boolean
  action?: boolean
  roomIdentifier?: boolean
  type?: boolean
  oldStatus?: boolean
  newStatus?: boolean
}, ExtArgs["result"]["facilityLog"]>

export type FacilityLogSelectScalar = {
  id?: boolean
  timestamp?: boolean
  user?: boolean
  role?: boolean
  action?: boolean
  roomIdentifier?: boolean
  type?: boolean
  oldStatus?: boolean
  newStatus?: boolean
}

export type FacilityLogOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "timestamp" | "user" | "role" | "action" | "roomIdentifier" | "type" | "oldStatus" | "newStatus", ExtArgs["result"]["facilityLog"]>

export type $FacilityLogPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FacilityLog"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    timestamp: Date
    user: string
    role: string
    action: string
    roomIdentifier: string
    type: string
    oldStatus: string | null
    newStatus: string | null
  }, ExtArgs["result"]["facilityLog"]>
  composites: {}
}

export type FacilityLogGetPayload<S extends boolean | null | undefined | FacilityLogDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FacilityLogPayload, S>

export type FacilityLogCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FacilityLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FacilityLogCountAggregateInputType | true
  }

export interface FacilityLogDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FacilityLog'], meta: { name: 'FacilityLog' } }
  /**
   * Find zero or one FacilityLog that matches the filter.
   * @param {FacilityLogFindUniqueArgs} args - Arguments to find a FacilityLog
   * @example
   * // Get one FacilityLog
   * const facilityLog = await prisma.facilityLog.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FacilityLogFindUniqueArgs>(args: Prisma.SelectSubset<T, FacilityLogFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FacilityLogClient<runtime.Types.Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FacilityLog that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FacilityLogFindUniqueOrThrowArgs} args - Arguments to find a FacilityLog
   * @example
   * // Get one FacilityLog
   * const facilityLog = await prisma.facilityLog.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FacilityLogFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FacilityLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FacilityLogClient<runtime.Types.Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FacilityLog that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FacilityLogFindFirstArgs} args - Arguments to find a FacilityLog
   * @example
   * // Get one FacilityLog
   * const facilityLog = await prisma.facilityLog.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FacilityLogFindFirstArgs>(args?: Prisma.SelectSubset<T, FacilityLogFindFirstArgs<ExtArgs>>): Prisma.Prisma__FacilityLogClient<runtime.Types.Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FacilityLog that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FacilityLogFindFirstOrThrowArgs} args - Arguments to find a FacilityLog
   * @example
   * // Get one FacilityLog
   * const facilityLog = await prisma.facilityLog.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FacilityLogFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FacilityLogFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FacilityLogClient<runtime.Types.Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FacilityLogs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FacilityLogFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FacilityLogs
   * const facilityLogs = await prisma.facilityLog.findMany()
   * 
   * // Get first 10 FacilityLogs
   * const facilityLogs = await prisma.facilityLog.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const facilityLogWithIdOnly = await prisma.facilityLog.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FacilityLogFindManyArgs>(args?: Prisma.SelectSubset<T, FacilityLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FacilityLog.
   * @param {FacilityLogCreateArgs} args - Arguments to create a FacilityLog.
   * @example
   * // Create one FacilityLog
   * const FacilityLog = await prisma.facilityLog.create({
   *   data: {
   *     // ... data to create a FacilityLog
   *   }
   * })
   * 
   */
  create<T extends FacilityLogCreateArgs>(args: Prisma.SelectSubset<T, FacilityLogCreateArgs<ExtArgs>>): Prisma.Prisma__FacilityLogClient<runtime.Types.Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FacilityLogs.
   * @param {FacilityLogCreateManyArgs} args - Arguments to create many FacilityLogs.
   * @example
   * // Create many FacilityLogs
   * const facilityLog = await prisma.facilityLog.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FacilityLogCreateManyArgs>(args?: Prisma.SelectSubset<T, FacilityLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FacilityLogs and returns the data saved in the database.
   * @param {FacilityLogCreateManyAndReturnArgs} args - Arguments to create many FacilityLogs.
   * @example
   * // Create many FacilityLogs
   * const facilityLog = await prisma.facilityLog.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FacilityLogs and only return the `id`
   * const facilityLogWithIdOnly = await prisma.facilityLog.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FacilityLogCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FacilityLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FacilityLog.
   * @param {FacilityLogDeleteArgs} args - Arguments to delete one FacilityLog.
   * @example
   * // Delete one FacilityLog
   * const FacilityLog = await prisma.facilityLog.delete({
   *   where: {
   *     // ... filter to delete one FacilityLog
   *   }
   * })
   * 
   */
  delete<T extends FacilityLogDeleteArgs>(args: Prisma.SelectSubset<T, FacilityLogDeleteArgs<ExtArgs>>): Prisma.Prisma__FacilityLogClient<runtime.Types.Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FacilityLog.
   * @param {FacilityLogUpdateArgs} args - Arguments to update one FacilityLog.
   * @example
   * // Update one FacilityLog
   * const facilityLog = await prisma.facilityLog.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FacilityLogUpdateArgs>(args: Prisma.SelectSubset<T, FacilityLogUpdateArgs<ExtArgs>>): Prisma.Prisma__FacilityLogClient<runtime.Types.Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FacilityLogs.
   * @param {FacilityLogDeleteManyArgs} args - Arguments to filter FacilityLogs to delete.
   * @example
   * // Delete a few FacilityLogs
   * const { count } = await prisma.facilityLog.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FacilityLogDeleteManyArgs>(args?: Prisma.SelectSubset<T, FacilityLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FacilityLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FacilityLogUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FacilityLogs
   * const facilityLog = await prisma.facilityLog.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FacilityLogUpdateManyArgs>(args: Prisma.SelectSubset<T, FacilityLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FacilityLogs and returns the data updated in the database.
   * @param {FacilityLogUpdateManyAndReturnArgs} args - Arguments to update many FacilityLogs.
   * @example
   * // Update many FacilityLogs
   * const facilityLog = await prisma.facilityLog.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FacilityLogs and only return the `id`
   * const facilityLogWithIdOnly = await prisma.facilityLog.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FacilityLogUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FacilityLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FacilityLog.
   * @param {FacilityLogUpsertArgs} args - Arguments to update or create a FacilityLog.
   * @example
   * // Update or create a FacilityLog
   * const facilityLog = await prisma.facilityLog.upsert({
   *   create: {
   *     // ... data to create a FacilityLog
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FacilityLog we want to update
   *   }
   * })
   */
  upsert<T extends FacilityLogUpsertArgs>(args: Prisma.SelectSubset<T, FacilityLogUpsertArgs<ExtArgs>>): Prisma.Prisma__FacilityLogClient<runtime.Types.Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FacilityLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FacilityLogCountArgs} args - Arguments to filter FacilityLogs to count.
   * @example
   * // Count the number of FacilityLogs
   * const count = await prisma.facilityLog.count({
   *   where: {
   *     // ... the filter for the FacilityLogs we want to count
   *   }
   * })
  **/
  count<T extends FacilityLogCountArgs>(
    args?: Prisma.Subset<T, FacilityLogCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FacilityLogCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FacilityLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FacilityLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FacilityLogAggregateArgs>(args: Prisma.Subset<T, FacilityLogAggregateArgs>): Prisma.PrismaPromise<GetFacilityLogAggregateType<T>>

  /**
   * Group by FacilityLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FacilityLogGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FacilityLogGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FacilityLogGroupByArgs['orderBy'] }
      : { orderBy?: FacilityLogGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FacilityLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacilityLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FacilityLog model
 */
readonly fields: FacilityLogFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FacilityLog.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FacilityLogClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FacilityLog model
 */
export interface FacilityLogFieldRefs {
  readonly id: Prisma.FieldRef<"FacilityLog", 'Int'>
  readonly timestamp: Prisma.FieldRef<"FacilityLog", 'DateTime'>
  readonly user: Prisma.FieldRef<"FacilityLog", 'String'>
  readonly role: Prisma.FieldRef<"FacilityLog", 'String'>
  readonly action: Prisma.FieldRef<"FacilityLog", 'String'>
  readonly roomIdentifier: Prisma.FieldRef<"FacilityLog", 'String'>
  readonly type: Prisma.FieldRef<"FacilityLog", 'String'>
  readonly oldStatus: Prisma.FieldRef<"FacilityLog", 'String'>
  readonly newStatus: Prisma.FieldRef<"FacilityLog", 'String'>
}
    

// Custom InputTypes
/**
 * FacilityLog findUnique
 */
export type FacilityLogFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacilityLog
   */
  select?: Prisma.FacilityLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FacilityLog
   */
  omit?: Prisma.FacilityLogOmit<ExtArgs> | null
  /**
   * Filter, which FacilityLog to fetch.
   */
  where: Prisma.FacilityLogWhereUniqueInput
}

/**
 * FacilityLog findUniqueOrThrow
 */
export type FacilityLogFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacilityLog
   */
  select?: Prisma.FacilityLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FacilityLog
   */
  omit?: Prisma.FacilityLogOmit<ExtArgs> | null
  /**
   * Filter, which FacilityLog to fetch.
   */
  where: Prisma.FacilityLogWhereUniqueInput
}

/**
 * FacilityLog findFirst
 */
export type FacilityLogFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacilityLog
   */
  select?: Prisma.FacilityLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FacilityLog
   */
  omit?: Prisma.FacilityLogOmit<ExtArgs> | null
  /**
   * Filter, which FacilityLog to fetch.
   */
  where?: Prisma.FacilityLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FacilityLogs to fetch.
   */
  orderBy?: Prisma.FacilityLogOrderByWithRelationInput | Prisma.FacilityLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FacilityLogs.
   */
  cursor?: Prisma.FacilityLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FacilityLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FacilityLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FacilityLogs.
   */
  distinct?: Prisma.FacilityLogScalarFieldEnum | Prisma.FacilityLogScalarFieldEnum[]
}

/**
 * FacilityLog findFirstOrThrow
 */
export type FacilityLogFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacilityLog
   */
  select?: Prisma.FacilityLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FacilityLog
   */
  omit?: Prisma.FacilityLogOmit<ExtArgs> | null
  /**
   * Filter, which FacilityLog to fetch.
   */
  where?: Prisma.FacilityLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FacilityLogs to fetch.
   */
  orderBy?: Prisma.FacilityLogOrderByWithRelationInput | Prisma.FacilityLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FacilityLogs.
   */
  cursor?: Prisma.FacilityLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FacilityLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FacilityLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FacilityLogs.
   */
  distinct?: Prisma.FacilityLogScalarFieldEnum | Prisma.FacilityLogScalarFieldEnum[]
}

/**
 * FacilityLog findMany
 */
export type FacilityLogFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacilityLog
   */
  select?: Prisma.FacilityLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FacilityLog
   */
  omit?: Prisma.FacilityLogOmit<ExtArgs> | null
  /**
   * Filter, which FacilityLogs to fetch.
   */
  where?: Prisma.FacilityLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FacilityLogs to fetch.
   */
  orderBy?: Prisma.FacilityLogOrderByWithRelationInput | Prisma.FacilityLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FacilityLogs.
   */
  cursor?: Prisma.FacilityLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FacilityLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FacilityLogs.
   */
  skip?: number
  distinct?: Prisma.FacilityLogScalarFieldEnum | Prisma.FacilityLogScalarFieldEnum[]
}

/**
 * FacilityLog create
 */
export type FacilityLogCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacilityLog
   */
  select?: Prisma.FacilityLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FacilityLog
   */
  omit?: Prisma.FacilityLogOmit<ExtArgs> | null
  /**
   * The data needed to create a FacilityLog.
   */
  data: Prisma.XOR<Prisma.FacilityLogCreateInput, Prisma.FacilityLogUncheckedCreateInput>
}

/**
 * FacilityLog createMany
 */
export type FacilityLogCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FacilityLogs.
   */
  data: Prisma.FacilityLogCreateManyInput | Prisma.FacilityLogCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FacilityLog createManyAndReturn
 */
export type FacilityLogCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacilityLog
   */
  select?: Prisma.FacilityLogSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FacilityLog
   */
  omit?: Prisma.FacilityLogOmit<ExtArgs> | null
  /**
   * The data used to create many FacilityLogs.
   */
  data: Prisma.FacilityLogCreateManyInput | Prisma.FacilityLogCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FacilityLog update
 */
export type FacilityLogUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacilityLog
   */
  select?: Prisma.FacilityLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FacilityLog
   */
  omit?: Prisma.FacilityLogOmit<ExtArgs> | null
  /**
   * The data needed to update a FacilityLog.
   */
  data: Prisma.XOR<Prisma.FacilityLogUpdateInput, Prisma.FacilityLogUncheckedUpdateInput>
  /**
   * Choose, which FacilityLog to update.
   */
  where: Prisma.FacilityLogWhereUniqueInput
}

/**
 * FacilityLog updateMany
 */
export type FacilityLogUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FacilityLogs.
   */
  data: Prisma.XOR<Prisma.FacilityLogUpdateManyMutationInput, Prisma.FacilityLogUncheckedUpdateManyInput>
  /**
   * Filter which FacilityLogs to update
   */
  where?: Prisma.FacilityLogWhereInput
  /**
   * Limit how many FacilityLogs to update.
   */
  limit?: number
}

/**
 * FacilityLog updateManyAndReturn
 */
export type FacilityLogUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacilityLog
   */
  select?: Prisma.FacilityLogSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FacilityLog
   */
  omit?: Prisma.FacilityLogOmit<ExtArgs> | null
  /**
   * The data used to update FacilityLogs.
   */
  data: Prisma.XOR<Prisma.FacilityLogUpdateManyMutationInput, Prisma.FacilityLogUncheckedUpdateManyInput>
  /**
   * Filter which FacilityLogs to update
   */
  where?: Prisma.FacilityLogWhereInput
  /**
   * Limit how many FacilityLogs to update.
   */
  limit?: number
}

/**
 * FacilityLog upsert
 */
export type FacilityLogUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacilityLog
   */
  select?: Prisma.FacilityLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FacilityLog
   */
  omit?: Prisma.FacilityLogOmit<ExtArgs> | null
  /**
   * The filter to search for the FacilityLog to update in case it exists.
   */
  where: Prisma.FacilityLogWhereUniqueInput
  /**
   * In case the FacilityLog found by the `where` argument doesn't exist, create a new FacilityLog with this data.
   */
  create: Prisma.XOR<Prisma.FacilityLogCreateInput, Prisma.FacilityLogUncheckedCreateInput>
  /**
   * In case the FacilityLog was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FacilityLogUpdateInput, Prisma.FacilityLogUncheckedUpdateInput>
}

/**
 * FacilityLog delete
 */
export type FacilityLogDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacilityLog
   */
  select?: Prisma.FacilityLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FacilityLog
   */
  omit?: Prisma.FacilityLogOmit<ExtArgs> | null
  /**
   * Filter which FacilityLog to delete.
   */
  where: Prisma.FacilityLogWhereUniqueInput
}

/**
 * FacilityLog deleteMany
 */
export type FacilityLogDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FacilityLogs to delete
   */
  where?: Prisma.FacilityLogWhereInput
  /**
   * Limit how many FacilityLogs to delete.
   */
  limit?: number
}

/**
 * FacilityLog without action
 */
export type FacilityLogDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FacilityLog
   */
  select?: Prisma.FacilityLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FacilityLog
   */
  omit?: Prisma.FacilityLogOmit<ExtArgs> | null
}
