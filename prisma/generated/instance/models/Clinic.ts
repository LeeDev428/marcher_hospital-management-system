
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Clinic` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Clinic
 * 
 */
export type ClinicModel = runtime.Types.Result.DefaultSelection<Prisma.$ClinicPayload>

export type AggregateClinic = {
  _count: ClinicCountAggregateOutputType | null
  _min: ClinicMinAggregateOutputType | null
  _max: ClinicMaxAggregateOutputType | null
}

export type ClinicMinAggregateOutputType = {
  id: string | null
  roomId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ClinicMaxAggregateOutputType = {
  id: string | null
  roomId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ClinicCountAggregateOutputType = {
  id: number
  roomId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ClinicMinAggregateInputType = {
  id?: true
  roomId?: true
  createdAt?: true
  updatedAt?: true
}

export type ClinicMaxAggregateInputType = {
  id?: true
  roomId?: true
  createdAt?: true
  updatedAt?: true
}

export type ClinicCountAggregateInputType = {
  id?: true
  roomId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ClinicAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Clinic to aggregate.
   */
  where?: Prisma.ClinicWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Clinics to fetch.
   */
  orderBy?: Prisma.ClinicOrderByWithRelationInput | Prisma.ClinicOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ClinicWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Clinics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Clinics.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Clinics
  **/
  _count?: true | ClinicCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ClinicMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ClinicMaxAggregateInputType
}

export type GetClinicAggregateType<T extends ClinicAggregateArgs> = {
      [P in keyof T & keyof AggregateClinic]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateClinic[P]>
    : Prisma.GetScalarType<T[P], AggregateClinic[P]>
}




export type ClinicGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ClinicWhereInput
  orderBy?: Prisma.ClinicOrderByWithAggregationInput | Prisma.ClinicOrderByWithAggregationInput[]
  by: Prisma.ClinicScalarFieldEnum[] | Prisma.ClinicScalarFieldEnum
  having?: Prisma.ClinicScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ClinicCountAggregateInputType | true
  _min?: ClinicMinAggregateInputType
  _max?: ClinicMaxAggregateInputType
}

export type ClinicGroupByOutputType = {
  id: string
  roomId: string
  createdAt: Date
  updatedAt: Date
  _count: ClinicCountAggregateOutputType | null
  _min: ClinicMinAggregateOutputType | null
  _max: ClinicMaxAggregateOutputType | null
}

type GetClinicGroupByPayload<T extends ClinicGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ClinicGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ClinicGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ClinicGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ClinicGroupByOutputType[P]>
      }
    >
  >



export type ClinicWhereInput = {
  AND?: Prisma.ClinicWhereInput | Prisma.ClinicWhereInput[]
  OR?: Prisma.ClinicWhereInput[]
  NOT?: Prisma.ClinicWhereInput | Prisma.ClinicWhereInput[]
  id?: Prisma.UuidFilter<"Clinic"> | string
  roomId?: Prisma.UuidFilter<"Clinic"> | string
  createdAt?: Prisma.DateTimeFilter<"Clinic"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Clinic"> | Date | string
  schedules?: Prisma.ClinicScheduleListRelationFilter
}

export type ClinicOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  schedules?: Prisma.ClinicScheduleOrderByRelationAggregateInput
}

export type ClinicWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ClinicWhereInput | Prisma.ClinicWhereInput[]
  OR?: Prisma.ClinicWhereInput[]
  NOT?: Prisma.ClinicWhereInput | Prisma.ClinicWhereInput[]
  roomId?: Prisma.UuidFilter<"Clinic"> | string
  createdAt?: Prisma.DateTimeFilter<"Clinic"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Clinic"> | Date | string
  schedules?: Prisma.ClinicScheduleListRelationFilter
}, "id">

export type ClinicOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ClinicCountOrderByAggregateInput
  _max?: Prisma.ClinicMaxOrderByAggregateInput
  _min?: Prisma.ClinicMinOrderByAggregateInput
}

export type ClinicScalarWhereWithAggregatesInput = {
  AND?: Prisma.ClinicScalarWhereWithAggregatesInput | Prisma.ClinicScalarWhereWithAggregatesInput[]
  OR?: Prisma.ClinicScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ClinicScalarWhereWithAggregatesInput | Prisma.ClinicScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Clinic"> | string
  roomId?: Prisma.UuidWithAggregatesFilter<"Clinic"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Clinic"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Clinic"> | Date | string
}

export type ClinicCreateInput = {
  id?: string
  roomId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  schedules?: Prisma.ClinicScheduleCreateNestedManyWithoutClinicInput
}

export type ClinicUncheckedCreateInput = {
  id?: string
  roomId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  schedules?: Prisma.ClinicScheduleUncheckedCreateNestedManyWithoutClinicInput
}

export type ClinicUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  schedules?: Prisma.ClinicScheduleUpdateManyWithoutClinicNestedInput
}

export type ClinicUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  schedules?: Prisma.ClinicScheduleUncheckedUpdateManyWithoutClinicNestedInput
}

export type ClinicCreateManyInput = {
  id?: string
  roomId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ClinicUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ClinicUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ClinicCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ClinicMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ClinicMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ClinicScalarRelationFilter = {
  is?: Prisma.ClinicWhereInput
  isNot?: Prisma.ClinicWhereInput
}

export type ClinicCreateNestedOneWithoutSchedulesInput = {
  create?: Prisma.XOR<Prisma.ClinicCreateWithoutSchedulesInput, Prisma.ClinicUncheckedCreateWithoutSchedulesInput>
  connectOrCreate?: Prisma.ClinicCreateOrConnectWithoutSchedulesInput
  connect?: Prisma.ClinicWhereUniqueInput
}

export type ClinicUpdateOneRequiredWithoutSchedulesNestedInput = {
  create?: Prisma.XOR<Prisma.ClinicCreateWithoutSchedulesInput, Prisma.ClinicUncheckedCreateWithoutSchedulesInput>
  connectOrCreate?: Prisma.ClinicCreateOrConnectWithoutSchedulesInput
  upsert?: Prisma.ClinicUpsertWithoutSchedulesInput
  connect?: Prisma.ClinicWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ClinicUpdateToOneWithWhereWithoutSchedulesInput, Prisma.ClinicUpdateWithoutSchedulesInput>, Prisma.ClinicUncheckedUpdateWithoutSchedulesInput>
}

export type ClinicCreateWithoutSchedulesInput = {
  id?: string
  roomId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ClinicUncheckedCreateWithoutSchedulesInput = {
  id?: string
  roomId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ClinicCreateOrConnectWithoutSchedulesInput = {
  where: Prisma.ClinicWhereUniqueInput
  create: Prisma.XOR<Prisma.ClinicCreateWithoutSchedulesInput, Prisma.ClinicUncheckedCreateWithoutSchedulesInput>
}

export type ClinicUpsertWithoutSchedulesInput = {
  update: Prisma.XOR<Prisma.ClinicUpdateWithoutSchedulesInput, Prisma.ClinicUncheckedUpdateWithoutSchedulesInput>
  create: Prisma.XOR<Prisma.ClinicCreateWithoutSchedulesInput, Prisma.ClinicUncheckedCreateWithoutSchedulesInput>
  where?: Prisma.ClinicWhereInput
}

export type ClinicUpdateToOneWithWhereWithoutSchedulesInput = {
  where?: Prisma.ClinicWhereInput
  data: Prisma.XOR<Prisma.ClinicUpdateWithoutSchedulesInput, Prisma.ClinicUncheckedUpdateWithoutSchedulesInput>
}

export type ClinicUpdateWithoutSchedulesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ClinicUncheckedUpdateWithoutSchedulesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ClinicCountOutputType
 */

export type ClinicCountOutputType = {
  schedules: number
}

export type ClinicCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  schedules?: boolean | ClinicCountOutputTypeCountSchedulesArgs
}

/**
 * ClinicCountOutputType without action
 */
export type ClinicCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClinicCountOutputType
   */
  select?: Prisma.ClinicCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ClinicCountOutputType without action
 */
export type ClinicCountOutputTypeCountSchedulesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ClinicScheduleWhereInput
}


export type ClinicSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  roomId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  schedules?: boolean | Prisma.Clinic$schedulesArgs<ExtArgs>
  _count?: boolean | Prisma.ClinicCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["clinic"]>

export type ClinicSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  roomId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["clinic"]>

export type ClinicSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  roomId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["clinic"]>

export type ClinicSelectScalar = {
  id?: boolean
  roomId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ClinicOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "roomId" | "createdAt" | "updatedAt", ExtArgs["result"]["clinic"]>
export type ClinicInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  schedules?: boolean | Prisma.Clinic$schedulesArgs<ExtArgs>
  _count?: boolean | Prisma.ClinicCountOutputTypeDefaultArgs<ExtArgs>
}
export type ClinicIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type ClinicIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $ClinicPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Clinic"
  objects: {
    schedules: Prisma.$ClinicSchedulePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    roomId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["clinic"]>
  composites: {}
}

export type ClinicGetPayload<S extends boolean | null | undefined | ClinicDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ClinicPayload, S>

export type ClinicCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ClinicFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ClinicCountAggregateInputType | true
  }

export interface ClinicDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Clinic'], meta: { name: 'Clinic' } }
  /**
   * Find zero or one Clinic that matches the filter.
   * @param {ClinicFindUniqueArgs} args - Arguments to find a Clinic
   * @example
   * // Get one Clinic
   * const clinic = await prisma.clinic.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ClinicFindUniqueArgs>(args: Prisma.SelectSubset<T, ClinicFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ClinicClient<runtime.Types.Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Clinic that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ClinicFindUniqueOrThrowArgs} args - Arguments to find a Clinic
   * @example
   * // Get one Clinic
   * const clinic = await prisma.clinic.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ClinicFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ClinicFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ClinicClient<runtime.Types.Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Clinic that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClinicFindFirstArgs} args - Arguments to find a Clinic
   * @example
   * // Get one Clinic
   * const clinic = await prisma.clinic.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ClinicFindFirstArgs>(args?: Prisma.SelectSubset<T, ClinicFindFirstArgs<ExtArgs>>): Prisma.Prisma__ClinicClient<runtime.Types.Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Clinic that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClinicFindFirstOrThrowArgs} args - Arguments to find a Clinic
   * @example
   * // Get one Clinic
   * const clinic = await prisma.clinic.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ClinicFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ClinicFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ClinicClient<runtime.Types.Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Clinics that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClinicFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Clinics
   * const clinics = await prisma.clinic.findMany()
   * 
   * // Get first 10 Clinics
   * const clinics = await prisma.clinic.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const clinicWithIdOnly = await prisma.clinic.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ClinicFindManyArgs>(args?: Prisma.SelectSubset<T, ClinicFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Clinic.
   * @param {ClinicCreateArgs} args - Arguments to create a Clinic.
   * @example
   * // Create one Clinic
   * const Clinic = await prisma.clinic.create({
   *   data: {
   *     // ... data to create a Clinic
   *   }
   * })
   * 
   */
  create<T extends ClinicCreateArgs>(args: Prisma.SelectSubset<T, ClinicCreateArgs<ExtArgs>>): Prisma.Prisma__ClinicClient<runtime.Types.Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Clinics.
   * @param {ClinicCreateManyArgs} args - Arguments to create many Clinics.
   * @example
   * // Create many Clinics
   * const clinic = await prisma.clinic.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ClinicCreateManyArgs>(args?: Prisma.SelectSubset<T, ClinicCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Clinics and returns the data saved in the database.
   * @param {ClinicCreateManyAndReturnArgs} args - Arguments to create many Clinics.
   * @example
   * // Create many Clinics
   * const clinic = await prisma.clinic.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Clinics and only return the `id`
   * const clinicWithIdOnly = await prisma.clinic.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ClinicCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ClinicCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Clinic.
   * @param {ClinicDeleteArgs} args - Arguments to delete one Clinic.
   * @example
   * // Delete one Clinic
   * const Clinic = await prisma.clinic.delete({
   *   where: {
   *     // ... filter to delete one Clinic
   *   }
   * })
   * 
   */
  delete<T extends ClinicDeleteArgs>(args: Prisma.SelectSubset<T, ClinicDeleteArgs<ExtArgs>>): Prisma.Prisma__ClinicClient<runtime.Types.Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Clinic.
   * @param {ClinicUpdateArgs} args - Arguments to update one Clinic.
   * @example
   * // Update one Clinic
   * const clinic = await prisma.clinic.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ClinicUpdateArgs>(args: Prisma.SelectSubset<T, ClinicUpdateArgs<ExtArgs>>): Prisma.Prisma__ClinicClient<runtime.Types.Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Clinics.
   * @param {ClinicDeleteManyArgs} args - Arguments to filter Clinics to delete.
   * @example
   * // Delete a few Clinics
   * const { count } = await prisma.clinic.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ClinicDeleteManyArgs>(args?: Prisma.SelectSubset<T, ClinicDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Clinics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClinicUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Clinics
   * const clinic = await prisma.clinic.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ClinicUpdateManyArgs>(args: Prisma.SelectSubset<T, ClinicUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Clinics and returns the data updated in the database.
   * @param {ClinicUpdateManyAndReturnArgs} args - Arguments to update many Clinics.
   * @example
   * // Update many Clinics
   * const clinic = await prisma.clinic.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Clinics and only return the `id`
   * const clinicWithIdOnly = await prisma.clinic.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ClinicUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ClinicUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Clinic.
   * @param {ClinicUpsertArgs} args - Arguments to update or create a Clinic.
   * @example
   * // Update or create a Clinic
   * const clinic = await prisma.clinic.upsert({
   *   create: {
   *     // ... data to create a Clinic
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Clinic we want to update
   *   }
   * })
   */
  upsert<T extends ClinicUpsertArgs>(args: Prisma.SelectSubset<T, ClinicUpsertArgs<ExtArgs>>): Prisma.Prisma__ClinicClient<runtime.Types.Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Clinics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClinicCountArgs} args - Arguments to filter Clinics to count.
   * @example
   * // Count the number of Clinics
   * const count = await prisma.clinic.count({
   *   where: {
   *     // ... the filter for the Clinics we want to count
   *   }
   * })
  **/
  count<T extends ClinicCountArgs>(
    args?: Prisma.Subset<T, ClinicCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ClinicCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Clinic.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClinicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ClinicAggregateArgs>(args: Prisma.Subset<T, ClinicAggregateArgs>): Prisma.PrismaPromise<GetClinicAggregateType<T>>

  /**
   * Group by Clinic.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClinicGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ClinicGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ClinicGroupByArgs['orderBy'] }
      : { orderBy?: ClinicGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ClinicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClinicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Clinic model
 */
readonly fields: ClinicFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Clinic.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ClinicClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  schedules<T extends Prisma.Clinic$schedulesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Clinic$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Clinic model
 */
export interface ClinicFieldRefs {
  readonly id: Prisma.FieldRef<"Clinic", 'String'>
  readonly roomId: Prisma.FieldRef<"Clinic", 'String'>
  readonly createdAt: Prisma.FieldRef<"Clinic", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Clinic", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Clinic findUnique
 */
export type ClinicFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Clinic
   */
  select?: Prisma.ClinicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Clinic
   */
  omit?: Prisma.ClinicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicInclude<ExtArgs> | null
  /**
   * Filter, which Clinic to fetch.
   */
  where: Prisma.ClinicWhereUniqueInput
}

/**
 * Clinic findUniqueOrThrow
 */
export type ClinicFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Clinic
   */
  select?: Prisma.ClinicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Clinic
   */
  omit?: Prisma.ClinicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicInclude<ExtArgs> | null
  /**
   * Filter, which Clinic to fetch.
   */
  where: Prisma.ClinicWhereUniqueInput
}

/**
 * Clinic findFirst
 */
export type ClinicFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Clinic
   */
  select?: Prisma.ClinicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Clinic
   */
  omit?: Prisma.ClinicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicInclude<ExtArgs> | null
  /**
   * Filter, which Clinic to fetch.
   */
  where?: Prisma.ClinicWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Clinics to fetch.
   */
  orderBy?: Prisma.ClinicOrderByWithRelationInput | Prisma.ClinicOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Clinics.
   */
  cursor?: Prisma.ClinicWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Clinics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Clinics.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Clinics.
   */
  distinct?: Prisma.ClinicScalarFieldEnum | Prisma.ClinicScalarFieldEnum[]
}

/**
 * Clinic findFirstOrThrow
 */
export type ClinicFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Clinic
   */
  select?: Prisma.ClinicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Clinic
   */
  omit?: Prisma.ClinicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicInclude<ExtArgs> | null
  /**
   * Filter, which Clinic to fetch.
   */
  where?: Prisma.ClinicWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Clinics to fetch.
   */
  orderBy?: Prisma.ClinicOrderByWithRelationInput | Prisma.ClinicOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Clinics.
   */
  cursor?: Prisma.ClinicWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Clinics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Clinics.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Clinics.
   */
  distinct?: Prisma.ClinicScalarFieldEnum | Prisma.ClinicScalarFieldEnum[]
}

/**
 * Clinic findMany
 */
export type ClinicFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Clinic
   */
  select?: Prisma.ClinicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Clinic
   */
  omit?: Prisma.ClinicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicInclude<ExtArgs> | null
  /**
   * Filter, which Clinics to fetch.
   */
  where?: Prisma.ClinicWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Clinics to fetch.
   */
  orderBy?: Prisma.ClinicOrderByWithRelationInput | Prisma.ClinicOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Clinics.
   */
  cursor?: Prisma.ClinicWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Clinics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Clinics.
   */
  skip?: number
  distinct?: Prisma.ClinicScalarFieldEnum | Prisma.ClinicScalarFieldEnum[]
}

/**
 * Clinic create
 */
export type ClinicCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Clinic
   */
  select?: Prisma.ClinicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Clinic
   */
  omit?: Prisma.ClinicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicInclude<ExtArgs> | null
  /**
   * The data needed to create a Clinic.
   */
  data: Prisma.XOR<Prisma.ClinicCreateInput, Prisma.ClinicUncheckedCreateInput>
}

/**
 * Clinic createMany
 */
export type ClinicCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Clinics.
   */
  data: Prisma.ClinicCreateManyInput | Prisma.ClinicCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Clinic createManyAndReturn
 */
export type ClinicCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Clinic
   */
  select?: Prisma.ClinicSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Clinic
   */
  omit?: Prisma.ClinicOmit<ExtArgs> | null
  /**
   * The data used to create many Clinics.
   */
  data: Prisma.ClinicCreateManyInput | Prisma.ClinicCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Clinic update
 */
export type ClinicUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Clinic
   */
  select?: Prisma.ClinicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Clinic
   */
  omit?: Prisma.ClinicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicInclude<ExtArgs> | null
  /**
   * The data needed to update a Clinic.
   */
  data: Prisma.XOR<Prisma.ClinicUpdateInput, Prisma.ClinicUncheckedUpdateInput>
  /**
   * Choose, which Clinic to update.
   */
  where: Prisma.ClinicWhereUniqueInput
}

/**
 * Clinic updateMany
 */
export type ClinicUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Clinics.
   */
  data: Prisma.XOR<Prisma.ClinicUpdateManyMutationInput, Prisma.ClinicUncheckedUpdateManyInput>
  /**
   * Filter which Clinics to update
   */
  where?: Prisma.ClinicWhereInput
  /**
   * Limit how many Clinics to update.
   */
  limit?: number
}

/**
 * Clinic updateManyAndReturn
 */
export type ClinicUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Clinic
   */
  select?: Prisma.ClinicSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Clinic
   */
  omit?: Prisma.ClinicOmit<ExtArgs> | null
  /**
   * The data used to update Clinics.
   */
  data: Prisma.XOR<Prisma.ClinicUpdateManyMutationInput, Prisma.ClinicUncheckedUpdateManyInput>
  /**
   * Filter which Clinics to update
   */
  where?: Prisma.ClinicWhereInput
  /**
   * Limit how many Clinics to update.
   */
  limit?: number
}

/**
 * Clinic upsert
 */
export type ClinicUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Clinic
   */
  select?: Prisma.ClinicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Clinic
   */
  omit?: Prisma.ClinicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicInclude<ExtArgs> | null
  /**
   * The filter to search for the Clinic to update in case it exists.
   */
  where: Prisma.ClinicWhereUniqueInput
  /**
   * In case the Clinic found by the `where` argument doesn't exist, create a new Clinic with this data.
   */
  create: Prisma.XOR<Prisma.ClinicCreateInput, Prisma.ClinicUncheckedCreateInput>
  /**
   * In case the Clinic was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ClinicUpdateInput, Prisma.ClinicUncheckedUpdateInput>
}

/**
 * Clinic delete
 */
export type ClinicDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Clinic
   */
  select?: Prisma.ClinicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Clinic
   */
  omit?: Prisma.ClinicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicInclude<ExtArgs> | null
  /**
   * Filter which Clinic to delete.
   */
  where: Prisma.ClinicWhereUniqueInput
}

/**
 * Clinic deleteMany
 */
export type ClinicDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Clinics to delete
   */
  where?: Prisma.ClinicWhereInput
  /**
   * Limit how many Clinics to delete.
   */
  limit?: number
}

/**
 * Clinic.schedules
 */
export type Clinic$schedulesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClinicSchedule
   */
  select?: Prisma.ClinicScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClinicSchedule
   */
  omit?: Prisma.ClinicScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicScheduleInclude<ExtArgs> | null
  where?: Prisma.ClinicScheduleWhereInput
  orderBy?: Prisma.ClinicScheduleOrderByWithRelationInput | Prisma.ClinicScheduleOrderByWithRelationInput[]
  cursor?: Prisma.ClinicScheduleWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ClinicScheduleScalarFieldEnum | Prisma.ClinicScheduleScalarFieldEnum[]
}

/**
 * Clinic without action
 */
export type ClinicDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Clinic
   */
  select?: Prisma.ClinicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Clinic
   */
  omit?: Prisma.ClinicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClinicInclude<ExtArgs> | null
}
