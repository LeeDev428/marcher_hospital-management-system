
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Consent` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Consent
 * 
 */
export type ConsentModel = runtime.Types.Result.DefaultSelection<Prisma.$ConsentPayload>

export type AggregateConsent = {
  _count: ConsentCountAggregateOutputType | null
  _min: ConsentMinAggregateOutputType | null
  _max: ConsentMaxAggregateOutputType | null
}

export type ConsentMinAggregateOutputType = {
  id: string | null
  patientProfileId: string | null
  documentUrl: string | null
  signature: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ConsentMaxAggregateOutputType = {
  id: string | null
  patientProfileId: string | null
  documentUrl: string | null
  signature: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ConsentCountAggregateOutputType = {
  id: number
  patientProfileId: number
  documentUrl: number
  signature: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ConsentMinAggregateInputType = {
  id?: true
  patientProfileId?: true
  documentUrl?: true
  signature?: true
  createdAt?: true
  updatedAt?: true
}

export type ConsentMaxAggregateInputType = {
  id?: true
  patientProfileId?: true
  documentUrl?: true
  signature?: true
  createdAt?: true
  updatedAt?: true
}

export type ConsentCountAggregateInputType = {
  id?: true
  patientProfileId?: true
  documentUrl?: true
  signature?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ConsentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Consent to aggregate.
   */
  where?: Prisma.ConsentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Consents to fetch.
   */
  orderBy?: Prisma.ConsentOrderByWithRelationInput | Prisma.ConsentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ConsentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Consents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Consents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Consents
  **/
  _count?: true | ConsentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ConsentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ConsentMaxAggregateInputType
}

export type GetConsentAggregateType<T extends ConsentAggregateArgs> = {
      [P in keyof T & keyof AggregateConsent]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateConsent[P]>
    : Prisma.GetScalarType<T[P], AggregateConsent[P]>
}




export type ConsentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ConsentWhereInput
  orderBy?: Prisma.ConsentOrderByWithAggregationInput | Prisma.ConsentOrderByWithAggregationInput[]
  by: Prisma.ConsentScalarFieldEnum[] | Prisma.ConsentScalarFieldEnum
  having?: Prisma.ConsentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ConsentCountAggregateInputType | true
  _min?: ConsentMinAggregateInputType
  _max?: ConsentMaxAggregateInputType
}

export type ConsentGroupByOutputType = {
  id: string
  patientProfileId: string
  documentUrl: string
  signature: string
  createdAt: Date
  updatedAt: Date
  _count: ConsentCountAggregateOutputType | null
  _min: ConsentMinAggregateOutputType | null
  _max: ConsentMaxAggregateOutputType | null
}

type GetConsentGroupByPayload<T extends ConsentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ConsentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ConsentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ConsentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ConsentGroupByOutputType[P]>
      }
    >
  >



export type ConsentWhereInput = {
  AND?: Prisma.ConsentWhereInput | Prisma.ConsentWhereInput[]
  OR?: Prisma.ConsentWhereInput[]
  NOT?: Prisma.ConsentWhereInput | Prisma.ConsentWhereInput[]
  id?: Prisma.UuidFilter<"Consent"> | string
  patientProfileId?: Prisma.UuidFilter<"Consent"> | string
  documentUrl?: Prisma.StringFilter<"Consent"> | string
  signature?: Prisma.StringFilter<"Consent"> | string
  createdAt?: Prisma.DateTimeFilter<"Consent"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Consent"> | Date | string
  patientProfile?: Prisma.XOR<Prisma.PatientProfileScalarRelationFilter, Prisma.PatientProfileWhereInput>
}

export type ConsentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  documentUrl?: Prisma.SortOrder
  signature?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  patientProfile?: Prisma.PatientProfileOrderByWithRelationInput
}

export type ConsentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  patientProfileId?: string
  AND?: Prisma.ConsentWhereInput | Prisma.ConsentWhereInput[]
  OR?: Prisma.ConsentWhereInput[]
  NOT?: Prisma.ConsentWhereInput | Prisma.ConsentWhereInput[]
  documentUrl?: Prisma.StringFilter<"Consent"> | string
  signature?: Prisma.StringFilter<"Consent"> | string
  createdAt?: Prisma.DateTimeFilter<"Consent"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Consent"> | Date | string
  patientProfile?: Prisma.XOR<Prisma.PatientProfileScalarRelationFilter, Prisma.PatientProfileWhereInput>
}, "id" | "patientProfileId">

export type ConsentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  documentUrl?: Prisma.SortOrder
  signature?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ConsentCountOrderByAggregateInput
  _max?: Prisma.ConsentMaxOrderByAggregateInput
  _min?: Prisma.ConsentMinOrderByAggregateInput
}

export type ConsentScalarWhereWithAggregatesInput = {
  AND?: Prisma.ConsentScalarWhereWithAggregatesInput | Prisma.ConsentScalarWhereWithAggregatesInput[]
  OR?: Prisma.ConsentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ConsentScalarWhereWithAggregatesInput | Prisma.ConsentScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Consent"> | string
  patientProfileId?: Prisma.UuidWithAggregatesFilter<"Consent"> | string
  documentUrl?: Prisma.StringWithAggregatesFilter<"Consent"> | string
  signature?: Prisma.StringWithAggregatesFilter<"Consent"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Consent"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Consent"> | Date | string
}

export type ConsentCreateInput = {
  id?: string
  documentUrl: string
  signature: string
  createdAt?: Date | string
  updatedAt?: Date | string
  patientProfile: Prisma.PatientProfileCreateNestedOneWithoutConsentInput
}

export type ConsentUncheckedCreateInput = {
  id?: string
  patientProfileId: string
  documentUrl: string
  signature: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ConsentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentUrl?: Prisma.StringFieldUpdateOperationsInput | string
  signature?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  patientProfile?: Prisma.PatientProfileUpdateOneRequiredWithoutConsentNestedInput
}

export type ConsentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  patientProfileId?: Prisma.StringFieldUpdateOperationsInput | string
  documentUrl?: Prisma.StringFieldUpdateOperationsInput | string
  signature?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ConsentCreateManyInput = {
  id?: string
  patientProfileId: string
  documentUrl: string
  signature: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ConsentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentUrl?: Prisma.StringFieldUpdateOperationsInput | string
  signature?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ConsentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  patientProfileId?: Prisma.StringFieldUpdateOperationsInput | string
  documentUrl?: Prisma.StringFieldUpdateOperationsInput | string
  signature?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ConsentNullableScalarRelationFilter = {
  is?: Prisma.ConsentWhereInput | null
  isNot?: Prisma.ConsentWhereInput | null
}

export type ConsentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  documentUrl?: Prisma.SortOrder
  signature?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ConsentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  documentUrl?: Prisma.SortOrder
  signature?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ConsentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  documentUrl?: Prisma.SortOrder
  signature?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ConsentCreateNestedOneWithoutPatientProfileInput = {
  create?: Prisma.XOR<Prisma.ConsentCreateWithoutPatientProfileInput, Prisma.ConsentUncheckedCreateWithoutPatientProfileInput>
  connectOrCreate?: Prisma.ConsentCreateOrConnectWithoutPatientProfileInput
  connect?: Prisma.ConsentWhereUniqueInput
}

export type ConsentUncheckedCreateNestedOneWithoutPatientProfileInput = {
  create?: Prisma.XOR<Prisma.ConsentCreateWithoutPatientProfileInput, Prisma.ConsentUncheckedCreateWithoutPatientProfileInput>
  connectOrCreate?: Prisma.ConsentCreateOrConnectWithoutPatientProfileInput
  connect?: Prisma.ConsentWhereUniqueInput
}

export type ConsentUpdateOneWithoutPatientProfileNestedInput = {
  create?: Prisma.XOR<Prisma.ConsentCreateWithoutPatientProfileInput, Prisma.ConsentUncheckedCreateWithoutPatientProfileInput>
  connectOrCreate?: Prisma.ConsentCreateOrConnectWithoutPatientProfileInput
  upsert?: Prisma.ConsentUpsertWithoutPatientProfileInput
  disconnect?: Prisma.ConsentWhereInput | boolean
  delete?: Prisma.ConsentWhereInput | boolean
  connect?: Prisma.ConsentWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ConsentUpdateToOneWithWhereWithoutPatientProfileInput, Prisma.ConsentUpdateWithoutPatientProfileInput>, Prisma.ConsentUncheckedUpdateWithoutPatientProfileInput>
}

export type ConsentUncheckedUpdateOneWithoutPatientProfileNestedInput = {
  create?: Prisma.XOR<Prisma.ConsentCreateWithoutPatientProfileInput, Prisma.ConsentUncheckedCreateWithoutPatientProfileInput>
  connectOrCreate?: Prisma.ConsentCreateOrConnectWithoutPatientProfileInput
  upsert?: Prisma.ConsentUpsertWithoutPatientProfileInput
  disconnect?: Prisma.ConsentWhereInput | boolean
  delete?: Prisma.ConsentWhereInput | boolean
  connect?: Prisma.ConsentWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ConsentUpdateToOneWithWhereWithoutPatientProfileInput, Prisma.ConsentUpdateWithoutPatientProfileInput>, Prisma.ConsentUncheckedUpdateWithoutPatientProfileInput>
}

export type ConsentCreateWithoutPatientProfileInput = {
  id?: string
  documentUrl: string
  signature: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ConsentUncheckedCreateWithoutPatientProfileInput = {
  id?: string
  documentUrl: string
  signature: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ConsentCreateOrConnectWithoutPatientProfileInput = {
  where: Prisma.ConsentWhereUniqueInput
  create: Prisma.XOR<Prisma.ConsentCreateWithoutPatientProfileInput, Prisma.ConsentUncheckedCreateWithoutPatientProfileInput>
}

export type ConsentUpsertWithoutPatientProfileInput = {
  update: Prisma.XOR<Prisma.ConsentUpdateWithoutPatientProfileInput, Prisma.ConsentUncheckedUpdateWithoutPatientProfileInput>
  create: Prisma.XOR<Prisma.ConsentCreateWithoutPatientProfileInput, Prisma.ConsentUncheckedCreateWithoutPatientProfileInput>
  where?: Prisma.ConsentWhereInput
}

export type ConsentUpdateToOneWithWhereWithoutPatientProfileInput = {
  where?: Prisma.ConsentWhereInput
  data: Prisma.XOR<Prisma.ConsentUpdateWithoutPatientProfileInput, Prisma.ConsentUncheckedUpdateWithoutPatientProfileInput>
}

export type ConsentUpdateWithoutPatientProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentUrl?: Prisma.StringFieldUpdateOperationsInput | string
  signature?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ConsentUncheckedUpdateWithoutPatientProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentUrl?: Prisma.StringFieldUpdateOperationsInput | string
  signature?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ConsentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  patientProfileId?: boolean
  documentUrl?: boolean
  signature?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["consent"]>

export type ConsentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  patientProfileId?: boolean
  documentUrl?: boolean
  signature?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["consent"]>

export type ConsentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  patientProfileId?: boolean
  documentUrl?: boolean
  signature?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["consent"]>

export type ConsentSelectScalar = {
  id?: boolean
  patientProfileId?: boolean
  documentUrl?: boolean
  signature?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ConsentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "patientProfileId" | "documentUrl" | "signature" | "createdAt" | "updatedAt", ExtArgs["result"]["consent"]>
export type ConsentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}
export type ConsentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}
export type ConsentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}

export type $ConsentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Consent"
  objects: {
    patientProfile: Prisma.$PatientProfilePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    patientProfileId: string
    documentUrl: string
    signature: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["consent"]>
  composites: {}
}

export type ConsentGetPayload<S extends boolean | null | undefined | ConsentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ConsentPayload, S>

export type ConsentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ConsentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ConsentCountAggregateInputType | true
  }

export interface ConsentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Consent'], meta: { name: 'Consent' } }
  /**
   * Find zero or one Consent that matches the filter.
   * @param {ConsentFindUniqueArgs} args - Arguments to find a Consent
   * @example
   * // Get one Consent
   * const consent = await prisma.consent.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ConsentFindUniqueArgs>(args: Prisma.SelectSubset<T, ConsentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ConsentClient<runtime.Types.Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Consent that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ConsentFindUniqueOrThrowArgs} args - Arguments to find a Consent
   * @example
   * // Get one Consent
   * const consent = await prisma.consent.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ConsentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ConsentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConsentClient<runtime.Types.Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Consent that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConsentFindFirstArgs} args - Arguments to find a Consent
   * @example
   * // Get one Consent
   * const consent = await prisma.consent.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ConsentFindFirstArgs>(args?: Prisma.SelectSubset<T, ConsentFindFirstArgs<ExtArgs>>): Prisma.Prisma__ConsentClient<runtime.Types.Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Consent that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConsentFindFirstOrThrowArgs} args - Arguments to find a Consent
   * @example
   * // Get one Consent
   * const consent = await prisma.consent.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ConsentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ConsentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConsentClient<runtime.Types.Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Consents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConsentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Consents
   * const consents = await prisma.consent.findMany()
   * 
   * // Get first 10 Consents
   * const consents = await prisma.consent.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const consentWithIdOnly = await prisma.consent.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ConsentFindManyArgs>(args?: Prisma.SelectSubset<T, ConsentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Consent.
   * @param {ConsentCreateArgs} args - Arguments to create a Consent.
   * @example
   * // Create one Consent
   * const Consent = await prisma.consent.create({
   *   data: {
   *     // ... data to create a Consent
   *   }
   * })
   * 
   */
  create<T extends ConsentCreateArgs>(args: Prisma.SelectSubset<T, ConsentCreateArgs<ExtArgs>>): Prisma.Prisma__ConsentClient<runtime.Types.Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Consents.
   * @param {ConsentCreateManyArgs} args - Arguments to create many Consents.
   * @example
   * // Create many Consents
   * const consent = await prisma.consent.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ConsentCreateManyArgs>(args?: Prisma.SelectSubset<T, ConsentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Consents and returns the data saved in the database.
   * @param {ConsentCreateManyAndReturnArgs} args - Arguments to create many Consents.
   * @example
   * // Create many Consents
   * const consent = await prisma.consent.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Consents and only return the `id`
   * const consentWithIdOnly = await prisma.consent.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ConsentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ConsentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Consent.
   * @param {ConsentDeleteArgs} args - Arguments to delete one Consent.
   * @example
   * // Delete one Consent
   * const Consent = await prisma.consent.delete({
   *   where: {
   *     // ... filter to delete one Consent
   *   }
   * })
   * 
   */
  delete<T extends ConsentDeleteArgs>(args: Prisma.SelectSubset<T, ConsentDeleteArgs<ExtArgs>>): Prisma.Prisma__ConsentClient<runtime.Types.Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Consent.
   * @param {ConsentUpdateArgs} args - Arguments to update one Consent.
   * @example
   * // Update one Consent
   * const consent = await prisma.consent.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ConsentUpdateArgs>(args: Prisma.SelectSubset<T, ConsentUpdateArgs<ExtArgs>>): Prisma.Prisma__ConsentClient<runtime.Types.Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Consents.
   * @param {ConsentDeleteManyArgs} args - Arguments to filter Consents to delete.
   * @example
   * // Delete a few Consents
   * const { count } = await prisma.consent.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ConsentDeleteManyArgs>(args?: Prisma.SelectSubset<T, ConsentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Consents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConsentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Consents
   * const consent = await prisma.consent.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ConsentUpdateManyArgs>(args: Prisma.SelectSubset<T, ConsentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Consents and returns the data updated in the database.
   * @param {ConsentUpdateManyAndReturnArgs} args - Arguments to update many Consents.
   * @example
   * // Update many Consents
   * const consent = await prisma.consent.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Consents and only return the `id`
   * const consentWithIdOnly = await prisma.consent.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ConsentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ConsentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Consent.
   * @param {ConsentUpsertArgs} args - Arguments to update or create a Consent.
   * @example
   * // Update or create a Consent
   * const consent = await prisma.consent.upsert({
   *   create: {
   *     // ... data to create a Consent
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Consent we want to update
   *   }
   * })
   */
  upsert<T extends ConsentUpsertArgs>(args: Prisma.SelectSubset<T, ConsentUpsertArgs<ExtArgs>>): Prisma.Prisma__ConsentClient<runtime.Types.Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Consents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConsentCountArgs} args - Arguments to filter Consents to count.
   * @example
   * // Count the number of Consents
   * const count = await prisma.consent.count({
   *   where: {
   *     // ... the filter for the Consents we want to count
   *   }
   * })
  **/
  count<T extends ConsentCountArgs>(
    args?: Prisma.Subset<T, ConsentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ConsentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Consent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConsentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ConsentAggregateArgs>(args: Prisma.Subset<T, ConsentAggregateArgs>): Prisma.PrismaPromise<GetConsentAggregateType<T>>

  /**
   * Group by Consent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConsentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ConsentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ConsentGroupByArgs['orderBy'] }
      : { orderBy?: ConsentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ConsentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Consent model
 */
readonly fields: ConsentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Consent.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ConsentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  patientProfile<T extends Prisma.PatientProfileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PatientProfileDefaultArgs<ExtArgs>>): Prisma.Prisma__PatientProfileClient<runtime.Types.Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Consent model
 */
export interface ConsentFieldRefs {
  readonly id: Prisma.FieldRef<"Consent", 'String'>
  readonly patientProfileId: Prisma.FieldRef<"Consent", 'String'>
  readonly documentUrl: Prisma.FieldRef<"Consent", 'String'>
  readonly signature: Prisma.FieldRef<"Consent", 'String'>
  readonly createdAt: Prisma.FieldRef<"Consent", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Consent", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Consent findUnique
 */
export type ConsentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Consent
   */
  select?: Prisma.ConsentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Consent
   */
  omit?: Prisma.ConsentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsentInclude<ExtArgs> | null
  /**
   * Filter, which Consent to fetch.
   */
  where: Prisma.ConsentWhereUniqueInput
}

/**
 * Consent findUniqueOrThrow
 */
export type ConsentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Consent
   */
  select?: Prisma.ConsentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Consent
   */
  omit?: Prisma.ConsentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsentInclude<ExtArgs> | null
  /**
   * Filter, which Consent to fetch.
   */
  where: Prisma.ConsentWhereUniqueInput
}

/**
 * Consent findFirst
 */
export type ConsentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Consent
   */
  select?: Prisma.ConsentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Consent
   */
  omit?: Prisma.ConsentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsentInclude<ExtArgs> | null
  /**
   * Filter, which Consent to fetch.
   */
  where?: Prisma.ConsentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Consents to fetch.
   */
  orderBy?: Prisma.ConsentOrderByWithRelationInput | Prisma.ConsentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Consents.
   */
  cursor?: Prisma.ConsentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Consents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Consents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Consents.
   */
  distinct?: Prisma.ConsentScalarFieldEnum | Prisma.ConsentScalarFieldEnum[]
}

/**
 * Consent findFirstOrThrow
 */
export type ConsentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Consent
   */
  select?: Prisma.ConsentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Consent
   */
  omit?: Prisma.ConsentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsentInclude<ExtArgs> | null
  /**
   * Filter, which Consent to fetch.
   */
  where?: Prisma.ConsentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Consents to fetch.
   */
  orderBy?: Prisma.ConsentOrderByWithRelationInput | Prisma.ConsentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Consents.
   */
  cursor?: Prisma.ConsentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Consents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Consents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Consents.
   */
  distinct?: Prisma.ConsentScalarFieldEnum | Prisma.ConsentScalarFieldEnum[]
}

/**
 * Consent findMany
 */
export type ConsentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Consent
   */
  select?: Prisma.ConsentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Consent
   */
  omit?: Prisma.ConsentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsentInclude<ExtArgs> | null
  /**
   * Filter, which Consents to fetch.
   */
  where?: Prisma.ConsentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Consents to fetch.
   */
  orderBy?: Prisma.ConsentOrderByWithRelationInput | Prisma.ConsentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Consents.
   */
  cursor?: Prisma.ConsentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Consents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Consents.
   */
  skip?: number
  distinct?: Prisma.ConsentScalarFieldEnum | Prisma.ConsentScalarFieldEnum[]
}

/**
 * Consent create
 */
export type ConsentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Consent
   */
  select?: Prisma.ConsentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Consent
   */
  omit?: Prisma.ConsentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsentInclude<ExtArgs> | null
  /**
   * The data needed to create a Consent.
   */
  data: Prisma.XOR<Prisma.ConsentCreateInput, Prisma.ConsentUncheckedCreateInput>
}

/**
 * Consent createMany
 */
export type ConsentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Consents.
   */
  data: Prisma.ConsentCreateManyInput | Prisma.ConsentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Consent createManyAndReturn
 */
export type ConsentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Consent
   */
  select?: Prisma.ConsentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Consent
   */
  omit?: Prisma.ConsentOmit<ExtArgs> | null
  /**
   * The data used to create many Consents.
   */
  data: Prisma.ConsentCreateManyInput | Prisma.ConsentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Consent update
 */
export type ConsentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Consent
   */
  select?: Prisma.ConsentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Consent
   */
  omit?: Prisma.ConsentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsentInclude<ExtArgs> | null
  /**
   * The data needed to update a Consent.
   */
  data: Prisma.XOR<Prisma.ConsentUpdateInput, Prisma.ConsentUncheckedUpdateInput>
  /**
   * Choose, which Consent to update.
   */
  where: Prisma.ConsentWhereUniqueInput
}

/**
 * Consent updateMany
 */
export type ConsentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Consents.
   */
  data: Prisma.XOR<Prisma.ConsentUpdateManyMutationInput, Prisma.ConsentUncheckedUpdateManyInput>
  /**
   * Filter which Consents to update
   */
  where?: Prisma.ConsentWhereInput
  /**
   * Limit how many Consents to update.
   */
  limit?: number
}

/**
 * Consent updateManyAndReturn
 */
export type ConsentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Consent
   */
  select?: Prisma.ConsentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Consent
   */
  omit?: Prisma.ConsentOmit<ExtArgs> | null
  /**
   * The data used to update Consents.
   */
  data: Prisma.XOR<Prisma.ConsentUpdateManyMutationInput, Prisma.ConsentUncheckedUpdateManyInput>
  /**
   * Filter which Consents to update
   */
  where?: Prisma.ConsentWhereInput
  /**
   * Limit how many Consents to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Consent upsert
 */
export type ConsentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Consent
   */
  select?: Prisma.ConsentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Consent
   */
  omit?: Prisma.ConsentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsentInclude<ExtArgs> | null
  /**
   * The filter to search for the Consent to update in case it exists.
   */
  where: Prisma.ConsentWhereUniqueInput
  /**
   * In case the Consent found by the `where` argument doesn't exist, create a new Consent with this data.
   */
  create: Prisma.XOR<Prisma.ConsentCreateInput, Prisma.ConsentUncheckedCreateInput>
  /**
   * In case the Consent was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ConsentUpdateInput, Prisma.ConsentUncheckedUpdateInput>
}

/**
 * Consent delete
 */
export type ConsentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Consent
   */
  select?: Prisma.ConsentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Consent
   */
  omit?: Prisma.ConsentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsentInclude<ExtArgs> | null
  /**
   * Filter which Consent to delete.
   */
  where: Prisma.ConsentWhereUniqueInput
}

/**
 * Consent deleteMany
 */
export type ConsentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Consents to delete
   */
  where?: Prisma.ConsentWhereInput
  /**
   * Limit how many Consents to delete.
   */
  limit?: number
}

/**
 * Consent without action
 */
export type ConsentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Consent
   */
  select?: Prisma.ConsentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Consent
   */
  omit?: Prisma.ConsentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ConsentInclude<ExtArgs> | null
}
