
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `OutpatientEncounter` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model OutpatientEncounter
 * 
 */
export type OutpatientEncounterModel = runtime.Types.Result.DefaultSelection<Prisma.$OutpatientEncounterPayload>

export type AggregateOutpatientEncounter = {
  _count: OutpatientEncounterCountAggregateOutputType | null
  _min: OutpatientEncounterMinAggregateOutputType | null
  _max: OutpatientEncounterMaxAggregateOutputType | null
}

export type OutpatientEncounterMinAggregateOutputType = {
  id: string | null
  patientProfileId: string | null
  date: string | null
  time: string | null
  chiefComplaint: string | null
  doctorDiagnosis: string | null
  type: $Enums.OutpatientEncounterType | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type OutpatientEncounterMaxAggregateOutputType = {
  id: string | null
  patientProfileId: string | null
  date: string | null
  time: string | null
  chiefComplaint: string | null
  doctorDiagnosis: string | null
  type: $Enums.OutpatientEncounterType | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type OutpatientEncounterCountAggregateOutputType = {
  id: number
  patientProfileId: number
  date: number
  time: number
  chiefComplaint: number
  doctorDiagnosis: number
  type: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type OutpatientEncounterMinAggregateInputType = {
  id?: true
  patientProfileId?: true
  date?: true
  time?: true
  chiefComplaint?: true
  doctorDiagnosis?: true
  type?: true
  createdAt?: true
  updatedAt?: true
}

export type OutpatientEncounterMaxAggregateInputType = {
  id?: true
  patientProfileId?: true
  date?: true
  time?: true
  chiefComplaint?: true
  doctorDiagnosis?: true
  type?: true
  createdAt?: true
  updatedAt?: true
}

export type OutpatientEncounterCountAggregateInputType = {
  id?: true
  patientProfileId?: true
  date?: true
  time?: true
  chiefComplaint?: true
  doctorDiagnosis?: true
  type?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type OutpatientEncounterAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OutpatientEncounter to aggregate.
   */
  where?: Prisma.OutpatientEncounterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OutpatientEncounters to fetch.
   */
  orderBy?: Prisma.OutpatientEncounterOrderByWithRelationInput | Prisma.OutpatientEncounterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.OutpatientEncounterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OutpatientEncounters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OutpatientEncounters.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned OutpatientEncounters
  **/
  _count?: true | OutpatientEncounterCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: OutpatientEncounterMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: OutpatientEncounterMaxAggregateInputType
}

export type GetOutpatientEncounterAggregateType<T extends OutpatientEncounterAggregateArgs> = {
      [P in keyof T & keyof AggregateOutpatientEncounter]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOutpatientEncounter[P]>
    : Prisma.GetScalarType<T[P], AggregateOutpatientEncounter[P]>
}




export type OutpatientEncounterGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OutpatientEncounterWhereInput
  orderBy?: Prisma.OutpatientEncounterOrderByWithAggregationInput | Prisma.OutpatientEncounterOrderByWithAggregationInput[]
  by: Prisma.OutpatientEncounterScalarFieldEnum[] | Prisma.OutpatientEncounterScalarFieldEnum
  having?: Prisma.OutpatientEncounterScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: OutpatientEncounterCountAggregateInputType | true
  _min?: OutpatientEncounterMinAggregateInputType
  _max?: OutpatientEncounterMaxAggregateInputType
}

export type OutpatientEncounterGroupByOutputType = {
  id: string
  patientProfileId: string
  date: string
  time: string
  chiefComplaint: string
  doctorDiagnosis: string
  type: $Enums.OutpatientEncounterType
  createdAt: Date
  updatedAt: Date
  _count: OutpatientEncounterCountAggregateOutputType | null
  _min: OutpatientEncounterMinAggregateOutputType | null
  _max: OutpatientEncounterMaxAggregateOutputType | null
}

type GetOutpatientEncounterGroupByPayload<T extends OutpatientEncounterGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OutpatientEncounterGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof OutpatientEncounterGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OutpatientEncounterGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OutpatientEncounterGroupByOutputType[P]>
      }
    >
  > 



export type OutpatientEncounterWhereInput = {
  AND?: Prisma.OutpatientEncounterWhereInput | Prisma.OutpatientEncounterWhereInput[]
  OR?: Prisma.OutpatientEncounterWhereInput[]
  NOT?: Prisma.OutpatientEncounterWhereInput | Prisma.OutpatientEncounterWhereInput[]
  id?: Prisma.UuidFilter<"OutpatientEncounter"> | string
  patientProfileId?: Prisma.UuidFilter<"OutpatientEncounter"> | string
  date?: Prisma.StringFilter<"OutpatientEncounter"> | string
  time?: Prisma.StringFilter<"OutpatientEncounter"> | string
  chiefComplaint?: Prisma.StringFilter<"OutpatientEncounter"> | string
  doctorDiagnosis?: Prisma.StringFilter<"OutpatientEncounter"> | string
  type?: Prisma.EnumOutpatientEncounterTypeFilter<"OutpatientEncounter"> | $Enums.OutpatientEncounterType
  createdAt?: Prisma.DateTimeFilter<"OutpatientEncounter"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"OutpatientEncounter"> | Date | string
  patientProfile?: Prisma.XOR<Prisma.PatientProfileScalarRelationFilter, Prisma.PatientProfileWhereInput>
}

export type OutpatientEncounterOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  chiefComplaint?: Prisma.SortOrder
  doctorDiagnosis?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  patientProfile?: Prisma.PatientProfileOrderByWithRelationInput
}

export type OutpatientEncounterWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.OutpatientEncounterWhereInput | Prisma.OutpatientEncounterWhereInput[]
  OR?: Prisma.OutpatientEncounterWhereInput[]
  NOT?: Prisma.OutpatientEncounterWhereInput | Prisma.OutpatientEncounterWhereInput[]
  patientProfileId?: Prisma.UuidFilter<"OutpatientEncounter"> | string
  date?: Prisma.StringFilter<"OutpatientEncounter"> | string
  time?: Prisma.StringFilter<"OutpatientEncounter"> | string
  chiefComplaint?: Prisma.StringFilter<"OutpatientEncounter"> | string
  doctorDiagnosis?: Prisma.StringFilter<"OutpatientEncounter"> | string
  type?: Prisma.EnumOutpatientEncounterTypeFilter<"OutpatientEncounter"> | $Enums.OutpatientEncounterType
  createdAt?: Prisma.DateTimeFilter<"OutpatientEncounter"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"OutpatientEncounter"> | Date | string
  patientProfile?: Prisma.XOR<Prisma.PatientProfileScalarRelationFilter, Prisma.PatientProfileWhereInput>
}, "id">

export type OutpatientEncounterOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  chiefComplaint?: Prisma.SortOrder
  doctorDiagnosis?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.OutpatientEncounterCountOrderByAggregateInput
  _max?: Prisma.OutpatientEncounterMaxOrderByAggregateInput
  _min?: Prisma.OutpatientEncounterMinOrderByAggregateInput
}

export type OutpatientEncounterScalarWhereWithAggregatesInput = {
  AND?: Prisma.OutpatientEncounterScalarWhereWithAggregatesInput | Prisma.OutpatientEncounterScalarWhereWithAggregatesInput[]
  OR?: Prisma.OutpatientEncounterScalarWhereWithAggregatesInput[]
  NOT?: Prisma.OutpatientEncounterScalarWhereWithAggregatesInput | Prisma.OutpatientEncounterScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"OutpatientEncounter"> | string
  patientProfileId?: Prisma.UuidWithAggregatesFilter<"OutpatientEncounter"> | string
  date?: Prisma.StringWithAggregatesFilter<"OutpatientEncounter"> | string
  time?: Prisma.StringWithAggregatesFilter<"OutpatientEncounter"> | string
  chiefComplaint?: Prisma.StringWithAggregatesFilter<"OutpatientEncounter"> | string
  doctorDiagnosis?: Prisma.StringWithAggregatesFilter<"OutpatientEncounter"> | string
  type?: Prisma.EnumOutpatientEncounterTypeWithAggregatesFilter<"OutpatientEncounter"> | $Enums.OutpatientEncounterType
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"OutpatientEncounter"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"OutpatientEncounter"> | Date | string
}

export type OutpatientEncounterCreateInput = {
  id?: string
  date: string
  time: string
  chiefComplaint: string
  doctorDiagnosis: string
  type: $Enums.OutpatientEncounterType
  createdAt?: Date | string
  updatedAt?: Date | string
  patientProfile: Prisma.PatientProfileCreateNestedOneWithoutOutpatientEncountersInput
}

export type OutpatientEncounterUncheckedCreateInput = {
  id?: string
  patientProfileId: string
  date: string
  time: string
  chiefComplaint: string
  doctorDiagnosis: string
  type: $Enums.OutpatientEncounterType
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type OutpatientEncounterUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  chiefComplaint?: Prisma.StringFieldUpdateOperationsInput | string
  doctorDiagnosis?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumOutpatientEncounterTypeFieldUpdateOperationsInput | $Enums.OutpatientEncounterType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  patientProfile?: Prisma.PatientProfileUpdateOneRequiredWithoutOutpatientEncountersNestedInput
}

export type OutpatientEncounterUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  patientProfileId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  chiefComplaint?: Prisma.StringFieldUpdateOperationsInput | string
  doctorDiagnosis?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumOutpatientEncounterTypeFieldUpdateOperationsInput | $Enums.OutpatientEncounterType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OutpatientEncounterCreateManyInput = {
  id?: string
  patientProfileId: string
  date: string
  time: string
  chiefComplaint: string
  doctorDiagnosis: string
  type: $Enums.OutpatientEncounterType
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type OutpatientEncounterUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  chiefComplaint?: Prisma.StringFieldUpdateOperationsInput | string
  doctorDiagnosis?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumOutpatientEncounterTypeFieldUpdateOperationsInput | $Enums.OutpatientEncounterType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OutpatientEncounterUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  patientProfileId?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  chiefComplaint?: Prisma.StringFieldUpdateOperationsInput | string
  doctorDiagnosis?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumOutpatientEncounterTypeFieldUpdateOperationsInput | $Enums.OutpatientEncounterType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OutpatientEncounterCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  chiefComplaint?: Prisma.SortOrder
  doctorDiagnosis?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type OutpatientEncounterMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  chiefComplaint?: Prisma.SortOrder
  doctorDiagnosis?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type OutpatientEncounterMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  chiefComplaint?: Prisma.SortOrder
  doctorDiagnosis?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type OutpatientEncounterListRelationFilter = {
  every?: Prisma.OutpatientEncounterWhereInput
  some?: Prisma.OutpatientEncounterWhereInput
  none?: Prisma.OutpatientEncounterWhereInput
}

export type OutpatientEncounterOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EnumOutpatientEncounterTypeFieldUpdateOperationsInput = {
  set?: $Enums.OutpatientEncounterType
}

export type OutpatientEncounterCreateNestedManyWithoutPatientProfileInput = {
  create?: Prisma.XOR<Prisma.OutpatientEncounterCreateWithoutPatientProfileInput, Prisma.OutpatientEncounterUncheckedCreateWithoutPatientProfileInput> | Prisma.OutpatientEncounterCreateWithoutPatientProfileInput[] | Prisma.OutpatientEncounterUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.OutpatientEncounterCreateOrConnectWithoutPatientProfileInput | Prisma.OutpatientEncounterCreateOrConnectWithoutPatientProfileInput[]
  createMany?: Prisma.OutpatientEncounterCreateManyPatientProfileInputEnvelope
  connect?: Prisma.OutpatientEncounterWhereUniqueInput | Prisma.OutpatientEncounterWhereUniqueInput[]
}

export type OutpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput = {
  create?: Prisma.XOR<Prisma.OutpatientEncounterCreateWithoutPatientProfileInput, Prisma.OutpatientEncounterUncheckedCreateWithoutPatientProfileInput> | Prisma.OutpatientEncounterCreateWithoutPatientProfileInput[] | Prisma.OutpatientEncounterUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.OutpatientEncounterCreateOrConnectWithoutPatientProfileInput | Prisma.OutpatientEncounterCreateOrConnectWithoutPatientProfileInput[]
  createMany?: Prisma.OutpatientEncounterCreateManyPatientProfileInputEnvelope
  connect?: Prisma.OutpatientEncounterWhereUniqueInput | Prisma.OutpatientEncounterWhereUniqueInput[]
}

export type OutpatientEncounterUpdateManyWithoutPatientProfileNestedInput = {
  create?: Prisma.XOR<Prisma.OutpatientEncounterCreateWithoutPatientProfileInput, Prisma.OutpatientEncounterUncheckedCreateWithoutPatientProfileInput> | Prisma.OutpatientEncounterCreateWithoutPatientProfileInput[] | Prisma.OutpatientEncounterUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.OutpatientEncounterCreateOrConnectWithoutPatientProfileInput | Prisma.OutpatientEncounterCreateOrConnectWithoutPatientProfileInput[]
  upsert?: Prisma.OutpatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput | Prisma.OutpatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput[]
  createMany?: Prisma.OutpatientEncounterCreateManyPatientProfileInputEnvelope
  set?: Prisma.OutpatientEncounterWhereUniqueInput | Prisma.OutpatientEncounterWhereUniqueInput[]
  disconnect?: Prisma.OutpatientEncounterWhereUniqueInput | Prisma.OutpatientEncounterWhereUniqueInput[]
  delete?: Prisma.OutpatientEncounterWhereUniqueInput | Prisma.OutpatientEncounterWhereUniqueInput[]
  connect?: Prisma.OutpatientEncounterWhereUniqueInput | Prisma.OutpatientEncounterWhereUniqueInput[]
  update?: Prisma.OutpatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput | Prisma.OutpatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput[]
  updateMany?: Prisma.OutpatientEncounterUpdateManyWithWhereWithoutPatientProfileInput | Prisma.OutpatientEncounterUpdateManyWithWhereWithoutPatientProfileInput[]
  deleteMany?: Prisma.OutpatientEncounterScalarWhereInput | Prisma.OutpatientEncounterScalarWhereInput[]
}

export type OutpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput = {
  create?: Prisma.XOR<Prisma.OutpatientEncounterCreateWithoutPatientProfileInput, Prisma.OutpatientEncounterUncheckedCreateWithoutPatientProfileInput> | Prisma.OutpatientEncounterCreateWithoutPatientProfileInput[] | Prisma.OutpatientEncounterUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.OutpatientEncounterCreateOrConnectWithoutPatientProfileInput | Prisma.OutpatientEncounterCreateOrConnectWithoutPatientProfileInput[]
  upsert?: Prisma.OutpatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput | Prisma.OutpatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput[]
  createMany?: Prisma.OutpatientEncounterCreateManyPatientProfileInputEnvelope
  set?: Prisma.OutpatientEncounterWhereUniqueInput | Prisma.OutpatientEncounterWhereUniqueInput[]
  disconnect?: Prisma.OutpatientEncounterWhereUniqueInput | Prisma.OutpatientEncounterWhereUniqueInput[]
  delete?: Prisma.OutpatientEncounterWhereUniqueInput | Prisma.OutpatientEncounterWhereUniqueInput[]
  connect?: Prisma.OutpatientEncounterWhereUniqueInput | Prisma.OutpatientEncounterWhereUniqueInput[]
  update?: Prisma.OutpatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput | Prisma.OutpatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput[]
  updateMany?: Prisma.OutpatientEncounterUpdateManyWithWhereWithoutPatientProfileInput | Prisma.OutpatientEncounterUpdateManyWithWhereWithoutPatientProfileInput[]
  deleteMany?: Prisma.OutpatientEncounterScalarWhereInput | Prisma.OutpatientEncounterScalarWhereInput[]
}

export type OutpatientEncounterCreateWithoutPatientProfileInput = {
  id?: string
  date: string
  time: string
  chiefComplaint: string
  doctorDiagnosis: string
  type: $Enums.OutpatientEncounterType
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type OutpatientEncounterUncheckedCreateWithoutPatientProfileInput = {
  id?: string
  date: string
  time: string
  chiefComplaint: string
  doctorDiagnosis: string
  type: $Enums.OutpatientEncounterType
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type OutpatientEncounterCreateOrConnectWithoutPatientProfileInput = {
  where: Prisma.OutpatientEncounterWhereUniqueInput
  create: Prisma.XOR<Prisma.OutpatientEncounterCreateWithoutPatientProfileInput, Prisma.OutpatientEncounterUncheckedCreateWithoutPatientProfileInput>
}

export type OutpatientEncounterCreateManyPatientProfileInputEnvelope = {
  data: Prisma.OutpatientEncounterCreateManyPatientProfileInput | Prisma.OutpatientEncounterCreateManyPatientProfileInput[]
  skipDuplicates?: boolean
}

export type OutpatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput = {
  where: Prisma.OutpatientEncounterWhereUniqueInput
  update: Prisma.XOR<Prisma.OutpatientEncounterUpdateWithoutPatientProfileInput, Prisma.OutpatientEncounterUncheckedUpdateWithoutPatientProfileInput>
  create: Prisma.XOR<Prisma.OutpatientEncounterCreateWithoutPatientProfileInput, Prisma.OutpatientEncounterUncheckedCreateWithoutPatientProfileInput>
}

export type OutpatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput = {
  where: Prisma.OutpatientEncounterWhereUniqueInput
  data: Prisma.XOR<Prisma.OutpatientEncounterUpdateWithoutPatientProfileInput, Prisma.OutpatientEncounterUncheckedUpdateWithoutPatientProfileInput>
}

export type OutpatientEncounterUpdateManyWithWhereWithoutPatientProfileInput = {
  where: Prisma.OutpatientEncounterScalarWhereInput
  data: Prisma.XOR<Prisma.OutpatientEncounterUpdateManyMutationInput, Prisma.OutpatientEncounterUncheckedUpdateManyWithoutPatientProfileInput>
}

export type OutpatientEncounterScalarWhereInput = {
  AND?: Prisma.OutpatientEncounterScalarWhereInput | Prisma.OutpatientEncounterScalarWhereInput[]
  OR?: Prisma.OutpatientEncounterScalarWhereInput[]
  NOT?: Prisma.OutpatientEncounterScalarWhereInput | Prisma.OutpatientEncounterScalarWhereInput[]
  id?: Prisma.UuidFilter<"OutpatientEncounter"> | string
  patientProfileId?: Prisma.UuidFilter<"OutpatientEncounter"> | string
  date?: Prisma.StringFilter<"OutpatientEncounter"> | string
  time?: Prisma.StringFilter<"OutpatientEncounter"> | string
  chiefComplaint?: Prisma.StringFilter<"OutpatientEncounter"> | string
  doctorDiagnosis?: Prisma.StringFilter<"OutpatientEncounter"> | string
  type?: Prisma.EnumOutpatientEncounterTypeFilter<"OutpatientEncounter"> | $Enums.OutpatientEncounterType
  createdAt?: Prisma.DateTimeFilter<"OutpatientEncounter"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"OutpatientEncounter"> | Date | string
}

export type OutpatientEncounterCreateManyPatientProfileInput = {
  id?: string
  date: string
  time: string
  chiefComplaint: string
  doctorDiagnosis: string
  type: $Enums.OutpatientEncounterType
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type OutpatientEncounterUpdateWithoutPatientProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  chiefComplaint?: Prisma.StringFieldUpdateOperationsInput | string
  doctorDiagnosis?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumOutpatientEncounterTypeFieldUpdateOperationsInput | $Enums.OutpatientEncounterType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OutpatientEncounterUncheckedUpdateWithoutPatientProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  chiefComplaint?: Prisma.StringFieldUpdateOperationsInput | string
  doctorDiagnosis?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumOutpatientEncounterTypeFieldUpdateOperationsInput | $Enums.OutpatientEncounterType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OutpatientEncounterUncheckedUpdateManyWithoutPatientProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.StringFieldUpdateOperationsInput | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  chiefComplaint?: Prisma.StringFieldUpdateOperationsInput | string
  doctorDiagnosis?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumOutpatientEncounterTypeFieldUpdateOperationsInput | $Enums.OutpatientEncounterType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type OutpatientEncounterSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  patientProfileId?: boolean
  date?: boolean
  time?: boolean
  chiefComplaint?: boolean
  doctorDiagnosis?: boolean
  type?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["outpatientEncounter"]>

export type OutpatientEncounterSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  patientProfileId?: boolean
  date?: boolean
  time?: boolean
  chiefComplaint?: boolean
  doctorDiagnosis?: boolean
  type?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["outpatientEncounter"]>

export type OutpatientEncounterSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  patientProfileId?: boolean
  date?: boolean
  time?: boolean
  chiefComplaint?: boolean
  doctorDiagnosis?: boolean
  type?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["outpatientEncounter"]>

export type OutpatientEncounterSelectScalar = {
  id?: boolean
  patientProfileId?: boolean
  date?: boolean
  time?: boolean
  chiefComplaint?: boolean
  doctorDiagnosis?: boolean
  type?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type OutpatientEncounterOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "patientProfileId" | "date" | "time" | "chiefComplaint" | "doctorDiagnosis" | "type" | "createdAt" | "updatedAt", ExtArgs["result"]["outpatientEncounter"]>
export type OutpatientEncounterInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}
export type OutpatientEncounterIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}
export type OutpatientEncounterIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}

export type $OutpatientEncounterPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "OutpatientEncounter"
  objects: {
    patientProfile: Prisma.$PatientProfilePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    patientProfileId: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    type: $Enums.OutpatientEncounterType
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["outpatientEncounter"]>
  composites: {}
}

export type OutpatientEncounterGetPayload<S extends boolean | null | undefined | OutpatientEncounterDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$OutpatientEncounterPayload, S>

export type OutpatientEncounterCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<OutpatientEncounterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: OutpatientEncounterCountAggregateInputType | true
  }

export interface OutpatientEncounterDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OutpatientEncounter'], meta: { name: 'OutpatientEncounter' } }
  /**
   * Find zero or one OutpatientEncounter that matches the filter.
   * @param {OutpatientEncounterFindUniqueArgs} args - Arguments to find a OutpatientEncounter
   * @example
   * // Get one OutpatientEncounter
   * const outpatientEncounter = await prisma.outpatientEncounter.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OutpatientEncounterFindUniqueArgs>(args: Prisma.SelectSubset<T, OutpatientEncounterFindUniqueArgs<ExtArgs>>): Prisma.Prisma__OutpatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one OutpatientEncounter that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OutpatientEncounterFindUniqueOrThrowArgs} args - Arguments to find a OutpatientEncounter
   * @example
   * // Get one OutpatientEncounter
   * const outpatientEncounter = await prisma.outpatientEncounter.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OutpatientEncounterFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, OutpatientEncounterFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__OutpatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OutpatientEncounter that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OutpatientEncounterFindFirstArgs} args - Arguments to find a OutpatientEncounter
   * @example
   * // Get one OutpatientEncounter
   * const outpatientEncounter = await prisma.outpatientEncounter.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OutpatientEncounterFindFirstArgs>(args?: Prisma.SelectSubset<T, OutpatientEncounterFindFirstArgs<ExtArgs>>): Prisma.Prisma__OutpatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OutpatientEncounter that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OutpatientEncounterFindFirstOrThrowArgs} args - Arguments to find a OutpatientEncounter
   * @example
   * // Get one OutpatientEncounter
   * const outpatientEncounter = await prisma.outpatientEncounter.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OutpatientEncounterFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, OutpatientEncounterFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__OutpatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more OutpatientEncounters that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OutpatientEncounterFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all OutpatientEncounters
   * const outpatientEncounters = await prisma.outpatientEncounter.findMany()
   * 
   * // Get first 10 OutpatientEncounters
   * const outpatientEncounters = await prisma.outpatientEncounter.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const outpatientEncounterWithIdOnly = await prisma.outpatientEncounter.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends OutpatientEncounterFindManyArgs>(args?: Prisma.SelectSubset<T, OutpatientEncounterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a OutpatientEncounter.
   * @param {OutpatientEncounterCreateArgs} args - Arguments to create a OutpatientEncounter.
   * @example
   * // Create one OutpatientEncounter
   * const OutpatientEncounter = await prisma.outpatientEncounter.create({
   *   data: {
   *     // ... data to create a OutpatientEncounter
   *   }
   * })
   * 
   */
  create<T extends OutpatientEncounterCreateArgs>(args: Prisma.SelectSubset<T, OutpatientEncounterCreateArgs<ExtArgs>>): Prisma.Prisma__OutpatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many OutpatientEncounters.
   * @param {OutpatientEncounterCreateManyArgs} args - Arguments to create many OutpatientEncounters.
   * @example
   * // Create many OutpatientEncounters
   * const outpatientEncounter = await prisma.outpatientEncounter.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends OutpatientEncounterCreateManyArgs>(args?: Prisma.SelectSubset<T, OutpatientEncounterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many OutpatientEncounters and returns the data saved in the database.
   * @param {OutpatientEncounterCreateManyAndReturnArgs} args - Arguments to create many OutpatientEncounters.
   * @example
   * // Create many OutpatientEncounters
   * const outpatientEncounter = await prisma.outpatientEncounter.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many OutpatientEncounters and only return the `id`
   * const outpatientEncounterWithIdOnly = await prisma.outpatientEncounter.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends OutpatientEncounterCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, OutpatientEncounterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a OutpatientEncounter.
   * @param {OutpatientEncounterDeleteArgs} args - Arguments to delete one OutpatientEncounter.
   * @example
   * // Delete one OutpatientEncounter
   * const OutpatientEncounter = await prisma.outpatientEncounter.delete({
   *   where: {
   *     // ... filter to delete one OutpatientEncounter
   *   }
   * })
   * 
   */
  delete<T extends OutpatientEncounterDeleteArgs>(args: Prisma.SelectSubset<T, OutpatientEncounterDeleteArgs<ExtArgs>>): Prisma.Prisma__OutpatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one OutpatientEncounter.
   * @param {OutpatientEncounterUpdateArgs} args - Arguments to update one OutpatientEncounter.
   * @example
   * // Update one OutpatientEncounter
   * const outpatientEncounter = await prisma.outpatientEncounter.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends OutpatientEncounterUpdateArgs>(args: Prisma.SelectSubset<T, OutpatientEncounterUpdateArgs<ExtArgs>>): Prisma.Prisma__OutpatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more OutpatientEncounters.
   * @param {OutpatientEncounterDeleteManyArgs} args - Arguments to filter OutpatientEncounters to delete.
   * @example
   * // Delete a few OutpatientEncounters
   * const { count } = await prisma.outpatientEncounter.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends OutpatientEncounterDeleteManyArgs>(args?: Prisma.SelectSubset<T, OutpatientEncounterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OutpatientEncounters.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OutpatientEncounterUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many OutpatientEncounters
   * const outpatientEncounter = await prisma.outpatientEncounter.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends OutpatientEncounterUpdateManyArgs>(args: Prisma.SelectSubset<T, OutpatientEncounterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OutpatientEncounters and returns the data updated in the database.
   * @param {OutpatientEncounterUpdateManyAndReturnArgs} args - Arguments to update many OutpatientEncounters.
   * @example
   * // Update many OutpatientEncounters
   * const outpatientEncounter = await prisma.outpatientEncounter.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more OutpatientEncounters and only return the `id`
   * const outpatientEncounterWithIdOnly = await prisma.outpatientEncounter.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends OutpatientEncounterUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, OutpatientEncounterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one OutpatientEncounter.
   * @param {OutpatientEncounterUpsertArgs} args - Arguments to update or create a OutpatientEncounter.
   * @example
   * // Update or create a OutpatientEncounter
   * const outpatientEncounter = await prisma.outpatientEncounter.upsert({
   *   create: {
   *     // ... data to create a OutpatientEncounter
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the OutpatientEncounter we want to update
   *   }
   * })
   */
  upsert<T extends OutpatientEncounterUpsertArgs>(args: Prisma.SelectSubset<T, OutpatientEncounterUpsertArgs<ExtArgs>>): Prisma.Prisma__OutpatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of OutpatientEncounters.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OutpatientEncounterCountArgs} args - Arguments to filter OutpatientEncounters to count.
   * @example
   * // Count the number of OutpatientEncounters
   * const count = await prisma.outpatientEncounter.count({
   *   where: {
   *     // ... the filter for the OutpatientEncounters we want to count
   *   }
   * })
  **/
  count<T extends OutpatientEncounterCountArgs>(
    args?: Prisma.Subset<T, OutpatientEncounterCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], OutpatientEncounterCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a OutpatientEncounter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OutpatientEncounterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends OutpatientEncounterAggregateArgs>(args: Prisma.Subset<T, OutpatientEncounterAggregateArgs>): Prisma.PrismaPromise<GetOutpatientEncounterAggregateType<T>>

  /**
   * Group by OutpatientEncounter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OutpatientEncounterGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends OutpatientEncounterGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OutpatientEncounterGroupByArgs['orderBy'] }
      : { orderBy?: OutpatientEncounterGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, OutpatientEncounterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOutpatientEncounterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the OutpatientEncounter model
 */
readonly fields: OutpatientEncounterFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for OutpatientEncounter.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OutpatientEncounterClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  patientProfile<T extends Prisma.PatientProfileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PatientProfileDefaultArgs<ExtArgs>>): Prisma.Prisma__PatientProfileClient<runtime.Types.Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the OutpatientEncounter model
 */
export interface OutpatientEncounterFieldRefs {
  readonly id: Prisma.FieldRef<"OutpatientEncounter", 'String'>
  readonly patientProfileId: Prisma.FieldRef<"OutpatientEncounter", 'String'>
  readonly date: Prisma.FieldRef<"OutpatientEncounter", 'String'>
  readonly time: Prisma.FieldRef<"OutpatientEncounter", 'String'>
  readonly chiefComplaint: Prisma.FieldRef<"OutpatientEncounter", 'String'>
  readonly doctorDiagnosis: Prisma.FieldRef<"OutpatientEncounter", 'String'>
  readonly type: Prisma.FieldRef<"OutpatientEncounter", 'OutpatientEncounterType'>
  readonly createdAt: Prisma.FieldRef<"OutpatientEncounter", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"OutpatientEncounter", 'DateTime'>
}
    

// Custom InputTypes
/**
 * OutpatientEncounter findUnique
 */
export type OutpatientEncounterFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OutpatientEncounter
   */
  select?: Prisma.OutpatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OutpatientEncounter
   */
  omit?: Prisma.OutpatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutpatientEncounterInclude<ExtArgs> | null
  /**
   * Filter, which OutpatientEncounter to fetch.
   */
  where: Prisma.OutpatientEncounterWhereUniqueInput
}

/**
 * OutpatientEncounter findUniqueOrThrow
 */
export type OutpatientEncounterFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OutpatientEncounter
   */
  select?: Prisma.OutpatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OutpatientEncounter
   */
  omit?: Prisma.OutpatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutpatientEncounterInclude<ExtArgs> | null
  /**
   * Filter, which OutpatientEncounter to fetch.
   */
  where: Prisma.OutpatientEncounterWhereUniqueInput
}

/**
 * OutpatientEncounter findFirst
 */
export type OutpatientEncounterFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OutpatientEncounter
   */
  select?: Prisma.OutpatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OutpatientEncounter
   */
  omit?: Prisma.OutpatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutpatientEncounterInclude<ExtArgs> | null
  /**
   * Filter, which OutpatientEncounter to fetch.
   */
  where?: Prisma.OutpatientEncounterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OutpatientEncounters to fetch.
   */
  orderBy?: Prisma.OutpatientEncounterOrderByWithRelationInput | Prisma.OutpatientEncounterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OutpatientEncounters.
   */
  cursor?: Prisma.OutpatientEncounterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OutpatientEncounters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OutpatientEncounters.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OutpatientEncounters.
   */
  distinct?: Prisma.OutpatientEncounterScalarFieldEnum | Prisma.OutpatientEncounterScalarFieldEnum[]
}

/**
 * OutpatientEncounter findFirstOrThrow
 */
export type OutpatientEncounterFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OutpatientEncounter
   */
  select?: Prisma.OutpatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OutpatientEncounter
   */
  omit?: Prisma.OutpatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutpatientEncounterInclude<ExtArgs> | null
  /**
   * Filter, which OutpatientEncounter to fetch.
   */
  where?: Prisma.OutpatientEncounterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OutpatientEncounters to fetch.
   */
  orderBy?: Prisma.OutpatientEncounterOrderByWithRelationInput | Prisma.OutpatientEncounterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OutpatientEncounters.
   */
  cursor?: Prisma.OutpatientEncounterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OutpatientEncounters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OutpatientEncounters.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OutpatientEncounters.
   */
  distinct?: Prisma.OutpatientEncounterScalarFieldEnum | Prisma.OutpatientEncounterScalarFieldEnum[]
}

/**
 * OutpatientEncounter findMany
 */
export type OutpatientEncounterFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OutpatientEncounter
   */
  select?: Prisma.OutpatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OutpatientEncounter
   */
  omit?: Prisma.OutpatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutpatientEncounterInclude<ExtArgs> | null
  /**
   * Filter, which OutpatientEncounters to fetch.
   */
  where?: Prisma.OutpatientEncounterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OutpatientEncounters to fetch.
   */
  orderBy?: Prisma.OutpatientEncounterOrderByWithRelationInput | Prisma.OutpatientEncounterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing OutpatientEncounters.
   */
  cursor?: Prisma.OutpatientEncounterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OutpatientEncounters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OutpatientEncounters.
   */
  skip?: number
  distinct?: Prisma.OutpatientEncounterScalarFieldEnum | Prisma.OutpatientEncounterScalarFieldEnum[]
}

/**
 * OutpatientEncounter create
 */
export type OutpatientEncounterCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OutpatientEncounter
   */
  select?: Prisma.OutpatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OutpatientEncounter
   */
  omit?: Prisma.OutpatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutpatientEncounterInclude<ExtArgs> | null
  /**
   * The data needed to create a OutpatientEncounter.
   */
  data: Prisma.XOR<Prisma.OutpatientEncounterCreateInput, Prisma.OutpatientEncounterUncheckedCreateInput>
}

/**
 * OutpatientEncounter createMany
 */
export type OutpatientEncounterCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many OutpatientEncounters.
   */
  data: Prisma.OutpatientEncounterCreateManyInput | Prisma.OutpatientEncounterCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * OutpatientEncounter createManyAndReturn
 */
export type OutpatientEncounterCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OutpatientEncounter
   */
  select?: Prisma.OutpatientEncounterSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OutpatientEncounter
   */
  omit?: Prisma.OutpatientEncounterOmit<ExtArgs> | null
  /**
   * The data used to create many OutpatientEncounters.
   */
  data: Prisma.OutpatientEncounterCreateManyInput | Prisma.OutpatientEncounterCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutpatientEncounterIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * OutpatientEncounter update
 */
export type OutpatientEncounterUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OutpatientEncounter
   */
  select?: Prisma.OutpatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OutpatientEncounter
   */
  omit?: Prisma.OutpatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutpatientEncounterInclude<ExtArgs> | null
  /**
   * The data needed to update a OutpatientEncounter.
   */
  data: Prisma.XOR<Prisma.OutpatientEncounterUpdateInput, Prisma.OutpatientEncounterUncheckedUpdateInput>
  /**
   * Choose, which OutpatientEncounter to update.
   */
  where: Prisma.OutpatientEncounterWhereUniqueInput
}

/**
 * OutpatientEncounter updateMany
 */
export type OutpatientEncounterUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update OutpatientEncounters.
   */
  data: Prisma.XOR<Prisma.OutpatientEncounterUpdateManyMutationInput, Prisma.OutpatientEncounterUncheckedUpdateManyInput>
  /**
   * Filter which OutpatientEncounters to update
   */
  where?: Prisma.OutpatientEncounterWhereInput
  /**
   * Limit how many OutpatientEncounters to update.
   */
  limit?: number
}

/**
 * OutpatientEncounter updateManyAndReturn
 */
export type OutpatientEncounterUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OutpatientEncounter
   */
  select?: Prisma.OutpatientEncounterSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OutpatientEncounter
   */
  omit?: Prisma.OutpatientEncounterOmit<ExtArgs> | null
  /**
   * The data used to update OutpatientEncounters.
   */
  data: Prisma.XOR<Prisma.OutpatientEncounterUpdateManyMutationInput, Prisma.OutpatientEncounterUncheckedUpdateManyInput>
  /**
   * Filter which OutpatientEncounters to update
   */
  where?: Prisma.OutpatientEncounterWhereInput
  /**
   * Limit how many OutpatientEncounters to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutpatientEncounterIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * OutpatientEncounter upsert
 */
export type OutpatientEncounterUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OutpatientEncounter
   */
  select?: Prisma.OutpatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OutpatientEncounter
   */
  omit?: Prisma.OutpatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutpatientEncounterInclude<ExtArgs> | null
  /**
   * The filter to search for the OutpatientEncounter to update in case it exists.
   */
  where: Prisma.OutpatientEncounterWhereUniqueInput
  /**
   * In case the OutpatientEncounter found by the `where` argument doesn't exist, create a new OutpatientEncounter with this data.
   */
  create: Prisma.XOR<Prisma.OutpatientEncounterCreateInput, Prisma.OutpatientEncounterUncheckedCreateInput>
  /**
   * In case the OutpatientEncounter was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OutpatientEncounterUpdateInput, Prisma.OutpatientEncounterUncheckedUpdateInput>
}

/**
 * OutpatientEncounter delete
 */
export type OutpatientEncounterDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OutpatientEncounter
   */
  select?: Prisma.OutpatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OutpatientEncounter
   */
  omit?: Prisma.OutpatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutpatientEncounterInclude<ExtArgs> | null
  /**
   * Filter which OutpatientEncounter to delete.
   */
  where: Prisma.OutpatientEncounterWhereUniqueInput
}

/**
 * OutpatientEncounter deleteMany
 */
export type OutpatientEncounterDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OutpatientEncounters to delete
   */
  where?: Prisma.OutpatientEncounterWhereInput
  /**
   * Limit how many OutpatientEncounters to delete.
   */
  limit?: number
}

/**
 * OutpatientEncounter without action
 */
export type OutpatientEncounterDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OutpatientEncounter
   */
  select?: Prisma.OutpatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OutpatientEncounter
   */
  omit?: Prisma.OutpatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OutpatientEncounterInclude<ExtArgs> | null
}
