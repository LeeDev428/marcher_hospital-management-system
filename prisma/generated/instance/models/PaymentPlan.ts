
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PaymentPlan` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PaymentPlan
 * 
 */
export type PaymentPlanModel = runtime.Types.Result.DefaultSelection<Prisma.$PaymentPlanPayload>

export type AggregatePaymentPlan = {
  _count: PaymentPlanCountAggregateOutputType | null
  _avg: PaymentPlanAvgAggregateOutputType | null
  _sum: PaymentPlanSumAggregateOutputType | null
  _min: PaymentPlanMinAggregateOutputType | null
  _max: PaymentPlanMaxAggregateOutputType | null
}

export type PaymentPlanAvgAggregateOutputType = {
  numberOfPayments: number | null
}

export type PaymentPlanSumAggregateOutputType = {
  numberOfPayments: number | null
}

export type PaymentPlanMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  cycle: string | null
  numberOfPayments: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PaymentPlanMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  cycle: string | null
  numberOfPayments: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PaymentPlanCountAggregateOutputType = {
  id: number
  name: number
  description: number
  cycle: number
  numberOfPayments: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PaymentPlanAvgAggregateInputType = {
  numberOfPayments?: true
}

export type PaymentPlanSumAggregateInputType = {
  numberOfPayments?: true
}

export type PaymentPlanMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  cycle?: true
  numberOfPayments?: true
  createdAt?: true
  updatedAt?: true
}

export type PaymentPlanMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  cycle?: true
  numberOfPayments?: true
  createdAt?: true
  updatedAt?: true
}

export type PaymentPlanCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  cycle?: true
  numberOfPayments?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PaymentPlanAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PaymentPlan to aggregate.
   */
  where?: Prisma.PaymentPlanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentPlans to fetch.
   */
  orderBy?: Prisma.PaymentPlanOrderByWithRelationInput | Prisma.PaymentPlanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PaymentPlanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentPlans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentPlans.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PaymentPlans
  **/
  _count?: true | PaymentPlanCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PaymentPlanAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PaymentPlanSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PaymentPlanMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PaymentPlanMaxAggregateInputType
}

export type GetPaymentPlanAggregateType<T extends PaymentPlanAggregateArgs> = {
      [P in keyof T & keyof AggregatePaymentPlan]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePaymentPlan[P]>
    : Prisma.GetScalarType<T[P], AggregatePaymentPlan[P]>
}




export type PaymentPlanGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PaymentPlanWhereInput
  orderBy?: Prisma.PaymentPlanOrderByWithAggregationInput | Prisma.PaymentPlanOrderByWithAggregationInput[]
  by: Prisma.PaymentPlanScalarFieldEnum[] | Prisma.PaymentPlanScalarFieldEnum
  having?: Prisma.PaymentPlanScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PaymentPlanCountAggregateInputType | true
  _avg?: PaymentPlanAvgAggregateInputType
  _sum?: PaymentPlanSumAggregateInputType
  _min?: PaymentPlanMinAggregateInputType
  _max?: PaymentPlanMaxAggregateInputType
}

export type PaymentPlanGroupByOutputType = {
  id: string
  name: string
  description: string | null
  cycle: string
  numberOfPayments: number
  createdAt: Date
  updatedAt: Date
  _count: PaymentPlanCountAggregateOutputType | null
  _avg: PaymentPlanAvgAggregateOutputType | null
  _sum: PaymentPlanSumAggregateOutputType | null
  _min: PaymentPlanMinAggregateOutputType | null
  _max: PaymentPlanMaxAggregateOutputType | null
}

type GetPaymentPlanGroupByPayload<T extends PaymentPlanGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PaymentPlanGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PaymentPlanGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PaymentPlanGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PaymentPlanGroupByOutputType[P]>
      }
    >
  >



export type PaymentPlanWhereInput = {
  AND?: Prisma.PaymentPlanWhereInput | Prisma.PaymentPlanWhereInput[]
  OR?: Prisma.PaymentPlanWhereInput[]
  NOT?: Prisma.PaymentPlanWhereInput | Prisma.PaymentPlanWhereInput[]
  id?: Prisma.UuidFilter<"PaymentPlan"> | string
  name?: Prisma.StringFilter<"PaymentPlan"> | string
  description?: Prisma.StringNullableFilter<"PaymentPlan"> | string | null
  cycle?: Prisma.StringFilter<"PaymentPlan"> | string
  numberOfPayments?: Prisma.IntFilter<"PaymentPlan"> | number
  createdAt?: Prisma.DateTimeFilter<"PaymentPlan"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PaymentPlan"> | Date | string
  instalments?: Prisma.PaymentInstalmentListRelationFilter
}

export type PaymentPlanOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  cycle?: Prisma.SortOrder
  numberOfPayments?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  instalments?: Prisma.PaymentInstalmentOrderByRelationAggregateInput
}

export type PaymentPlanWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PaymentPlanWhereInput | Prisma.PaymentPlanWhereInput[]
  OR?: Prisma.PaymentPlanWhereInput[]
  NOT?: Prisma.PaymentPlanWhereInput | Prisma.PaymentPlanWhereInput[]
  name?: Prisma.StringFilter<"PaymentPlan"> | string
  description?: Prisma.StringNullableFilter<"PaymentPlan"> | string | null
  cycle?: Prisma.StringFilter<"PaymentPlan"> | string
  numberOfPayments?: Prisma.IntFilter<"PaymentPlan"> | number
  createdAt?: Prisma.DateTimeFilter<"PaymentPlan"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PaymentPlan"> | Date | string
  instalments?: Prisma.PaymentInstalmentListRelationFilter
}, "id">

export type PaymentPlanOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  cycle?: Prisma.SortOrder
  numberOfPayments?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PaymentPlanCountOrderByAggregateInput
  _avg?: Prisma.PaymentPlanAvgOrderByAggregateInput
  _max?: Prisma.PaymentPlanMaxOrderByAggregateInput
  _min?: Prisma.PaymentPlanMinOrderByAggregateInput
  _sum?: Prisma.PaymentPlanSumOrderByAggregateInput
}

export type PaymentPlanScalarWhereWithAggregatesInput = {
  AND?: Prisma.PaymentPlanScalarWhereWithAggregatesInput | Prisma.PaymentPlanScalarWhereWithAggregatesInput[]
  OR?: Prisma.PaymentPlanScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PaymentPlanScalarWhereWithAggregatesInput | Prisma.PaymentPlanScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"PaymentPlan"> | string
  name?: Prisma.StringWithAggregatesFilter<"PaymentPlan"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"PaymentPlan"> | string | null
  cycle?: Prisma.StringWithAggregatesFilter<"PaymentPlan"> | string
  numberOfPayments?: Prisma.IntWithAggregatesFilter<"PaymentPlan"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PaymentPlan"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PaymentPlan"> | Date | string
}

export type PaymentPlanCreateInput = {
  id?: string
  name: string
  description?: string | null
  cycle: string
  numberOfPayments: number
  createdAt?: Date | string
  updatedAt?: Date | string
  instalments?: Prisma.PaymentInstalmentCreateNestedManyWithoutPlanInput
}

export type PaymentPlanUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  cycle: string
  numberOfPayments: number
  createdAt?: Date | string
  updatedAt?: Date | string
  instalments?: Prisma.PaymentInstalmentUncheckedCreateNestedManyWithoutPlanInput
}

export type PaymentPlanUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cycle?: Prisma.StringFieldUpdateOperationsInput | string
  numberOfPayments?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  instalments?: Prisma.PaymentInstalmentUpdateManyWithoutPlanNestedInput
}

export type PaymentPlanUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cycle?: Prisma.StringFieldUpdateOperationsInput | string
  numberOfPayments?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  instalments?: Prisma.PaymentInstalmentUncheckedUpdateManyWithoutPlanNestedInput
}

export type PaymentPlanCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  cycle: string
  numberOfPayments: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PaymentPlanUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cycle?: Prisma.StringFieldUpdateOperationsInput | string
  numberOfPayments?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentPlanUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cycle?: Prisma.StringFieldUpdateOperationsInput | string
  numberOfPayments?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentPlanCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  cycle?: Prisma.SortOrder
  numberOfPayments?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PaymentPlanAvgOrderByAggregateInput = {
  numberOfPayments?: Prisma.SortOrder
}

export type PaymentPlanMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  cycle?: Prisma.SortOrder
  numberOfPayments?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PaymentPlanMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  cycle?: Prisma.SortOrder
  numberOfPayments?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PaymentPlanSumOrderByAggregateInput = {
  numberOfPayments?: Prisma.SortOrder
}

export type PaymentPlanScalarRelationFilter = {
  is?: Prisma.PaymentPlanWhereInput
  isNot?: Prisma.PaymentPlanWhereInput
}

export type PaymentPlanCreateNestedOneWithoutInstalmentsInput = {
  create?: Prisma.XOR<Prisma.PaymentPlanCreateWithoutInstalmentsInput, Prisma.PaymentPlanUncheckedCreateWithoutInstalmentsInput>
  connectOrCreate?: Prisma.PaymentPlanCreateOrConnectWithoutInstalmentsInput
  connect?: Prisma.PaymentPlanWhereUniqueInput
}

export type PaymentPlanUpdateOneRequiredWithoutInstalmentsNestedInput = {
  create?: Prisma.XOR<Prisma.PaymentPlanCreateWithoutInstalmentsInput, Prisma.PaymentPlanUncheckedCreateWithoutInstalmentsInput>
  connectOrCreate?: Prisma.PaymentPlanCreateOrConnectWithoutInstalmentsInput
  upsert?: Prisma.PaymentPlanUpsertWithoutInstalmentsInput
  connect?: Prisma.PaymentPlanWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PaymentPlanUpdateToOneWithWhereWithoutInstalmentsInput, Prisma.PaymentPlanUpdateWithoutInstalmentsInput>, Prisma.PaymentPlanUncheckedUpdateWithoutInstalmentsInput>
}

export type PaymentPlanCreateWithoutInstalmentsInput = {
  id?: string
  name: string
  description?: string | null
  cycle: string
  numberOfPayments: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PaymentPlanUncheckedCreateWithoutInstalmentsInput = {
  id?: string
  name: string
  description?: string | null
  cycle: string
  numberOfPayments: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PaymentPlanCreateOrConnectWithoutInstalmentsInput = {
  where: Prisma.PaymentPlanWhereUniqueInput
  create: Prisma.XOR<Prisma.PaymentPlanCreateWithoutInstalmentsInput, Prisma.PaymentPlanUncheckedCreateWithoutInstalmentsInput>
}

export type PaymentPlanUpsertWithoutInstalmentsInput = {
  update: Prisma.XOR<Prisma.PaymentPlanUpdateWithoutInstalmentsInput, Prisma.PaymentPlanUncheckedUpdateWithoutInstalmentsInput>
  create: Prisma.XOR<Prisma.PaymentPlanCreateWithoutInstalmentsInput, Prisma.PaymentPlanUncheckedCreateWithoutInstalmentsInput>
  where?: Prisma.PaymentPlanWhereInput
}

export type PaymentPlanUpdateToOneWithWhereWithoutInstalmentsInput = {
  where?: Prisma.PaymentPlanWhereInput
  data: Prisma.XOR<Prisma.PaymentPlanUpdateWithoutInstalmentsInput, Prisma.PaymentPlanUncheckedUpdateWithoutInstalmentsInput>
}

export type PaymentPlanUpdateWithoutInstalmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cycle?: Prisma.StringFieldUpdateOperationsInput | string
  numberOfPayments?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentPlanUncheckedUpdateWithoutInstalmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cycle?: Prisma.StringFieldUpdateOperationsInput | string
  numberOfPayments?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type PaymentPlanCountOutputType
 */

export type PaymentPlanCountOutputType = {
  instalments: number
}

export type PaymentPlanCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  instalments?: boolean | PaymentPlanCountOutputTypeCountInstalmentsArgs
}

/**
 * PaymentPlanCountOutputType without action
 */
export type PaymentPlanCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentPlanCountOutputType
   */
  select?: Prisma.PaymentPlanCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PaymentPlanCountOutputType without action
 */
export type PaymentPlanCountOutputTypeCountInstalmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PaymentInstalmentWhereInput
}


export type PaymentPlanSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  cycle?: boolean
  numberOfPayments?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  instalments?: boolean | Prisma.PaymentPlan$instalmentsArgs<ExtArgs>
  _count?: boolean | Prisma.PaymentPlanCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["paymentPlan"]>

export type PaymentPlanSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  cycle?: boolean
  numberOfPayments?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["paymentPlan"]>

export type PaymentPlanSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  cycle?: boolean
  numberOfPayments?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["paymentPlan"]>

export type PaymentPlanSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  cycle?: boolean
  numberOfPayments?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PaymentPlanOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "cycle" | "numberOfPayments" | "createdAt" | "updatedAt", ExtArgs["result"]["paymentPlan"]>
export type PaymentPlanInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  instalments?: boolean | Prisma.PaymentPlan$instalmentsArgs<ExtArgs>
  _count?: boolean | Prisma.PaymentPlanCountOutputTypeDefaultArgs<ExtArgs>
}
export type PaymentPlanIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type PaymentPlanIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $PaymentPlanPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PaymentPlan"
  objects: {
    instalments: Prisma.$PaymentInstalmentPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    cycle: string
    numberOfPayments: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["paymentPlan"]>
  composites: {}
}

export type PaymentPlanGetPayload<S extends boolean | null | undefined | PaymentPlanDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PaymentPlanPayload, S>

export type PaymentPlanCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PaymentPlanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PaymentPlanCountAggregateInputType | true
  }

export interface PaymentPlanDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentPlan'], meta: { name: 'PaymentPlan' } }
  /**
   * Find zero or one PaymentPlan that matches the filter.
   * @param {PaymentPlanFindUniqueArgs} args - Arguments to find a PaymentPlan
   * @example
   * // Get one PaymentPlan
   * const paymentPlan = await prisma.paymentPlan.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PaymentPlanFindUniqueArgs>(args: Prisma.SelectSubset<T, PaymentPlanFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PaymentPlanClient<runtime.Types.Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PaymentPlan that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PaymentPlanFindUniqueOrThrowArgs} args - Arguments to find a PaymentPlan
   * @example
   * // Get one PaymentPlan
   * const paymentPlan = await prisma.paymentPlan.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PaymentPlanFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PaymentPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PaymentPlanClient<runtime.Types.Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PaymentPlan that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentPlanFindFirstArgs} args - Arguments to find a PaymentPlan
   * @example
   * // Get one PaymentPlan
   * const paymentPlan = await prisma.paymentPlan.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PaymentPlanFindFirstArgs>(args?: Prisma.SelectSubset<T, PaymentPlanFindFirstArgs<ExtArgs>>): Prisma.Prisma__PaymentPlanClient<runtime.Types.Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PaymentPlan that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentPlanFindFirstOrThrowArgs} args - Arguments to find a PaymentPlan
   * @example
   * // Get one PaymentPlan
   * const paymentPlan = await prisma.paymentPlan.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PaymentPlanFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PaymentPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PaymentPlanClient<runtime.Types.Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PaymentPlans that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentPlanFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PaymentPlans
   * const paymentPlans = await prisma.paymentPlan.findMany()
   * 
   * // Get first 10 PaymentPlans
   * const paymentPlans = await prisma.paymentPlan.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const paymentPlanWithIdOnly = await prisma.paymentPlan.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PaymentPlanFindManyArgs>(args?: Prisma.SelectSubset<T, PaymentPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PaymentPlan.
   * @param {PaymentPlanCreateArgs} args - Arguments to create a PaymentPlan.
   * @example
   * // Create one PaymentPlan
   * const PaymentPlan = await prisma.paymentPlan.create({
   *   data: {
   *     // ... data to create a PaymentPlan
   *   }
   * })
   * 
   */
  create<T extends PaymentPlanCreateArgs>(args: Prisma.SelectSubset<T, PaymentPlanCreateArgs<ExtArgs>>): Prisma.Prisma__PaymentPlanClient<runtime.Types.Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PaymentPlans.
   * @param {PaymentPlanCreateManyArgs} args - Arguments to create many PaymentPlans.
   * @example
   * // Create many PaymentPlans
   * const paymentPlan = await prisma.paymentPlan.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PaymentPlanCreateManyArgs>(args?: Prisma.SelectSubset<T, PaymentPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PaymentPlans and returns the data saved in the database.
   * @param {PaymentPlanCreateManyAndReturnArgs} args - Arguments to create many PaymentPlans.
   * @example
   * // Create many PaymentPlans
   * const paymentPlan = await prisma.paymentPlan.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PaymentPlans and only return the `id`
   * const paymentPlanWithIdOnly = await prisma.paymentPlan.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PaymentPlanCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PaymentPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PaymentPlan.
   * @param {PaymentPlanDeleteArgs} args - Arguments to delete one PaymentPlan.
   * @example
   * // Delete one PaymentPlan
   * const PaymentPlan = await prisma.paymentPlan.delete({
   *   where: {
   *     // ... filter to delete one PaymentPlan
   *   }
   * })
   * 
   */
  delete<T extends PaymentPlanDeleteArgs>(args: Prisma.SelectSubset<T, PaymentPlanDeleteArgs<ExtArgs>>): Prisma.Prisma__PaymentPlanClient<runtime.Types.Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PaymentPlan.
   * @param {PaymentPlanUpdateArgs} args - Arguments to update one PaymentPlan.
   * @example
   * // Update one PaymentPlan
   * const paymentPlan = await prisma.paymentPlan.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PaymentPlanUpdateArgs>(args: Prisma.SelectSubset<T, PaymentPlanUpdateArgs<ExtArgs>>): Prisma.Prisma__PaymentPlanClient<runtime.Types.Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PaymentPlans.
   * @param {PaymentPlanDeleteManyArgs} args - Arguments to filter PaymentPlans to delete.
   * @example
   * // Delete a few PaymentPlans
   * const { count } = await prisma.paymentPlan.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PaymentPlanDeleteManyArgs>(args?: Prisma.SelectSubset<T, PaymentPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PaymentPlans.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentPlanUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PaymentPlans
   * const paymentPlan = await prisma.paymentPlan.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PaymentPlanUpdateManyArgs>(args: Prisma.SelectSubset<T, PaymentPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PaymentPlans and returns the data updated in the database.
   * @param {PaymentPlanUpdateManyAndReturnArgs} args - Arguments to update many PaymentPlans.
   * @example
   * // Update many PaymentPlans
   * const paymentPlan = await prisma.paymentPlan.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PaymentPlans and only return the `id`
   * const paymentPlanWithIdOnly = await prisma.paymentPlan.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PaymentPlanUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PaymentPlanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PaymentPlan.
   * @param {PaymentPlanUpsertArgs} args - Arguments to update or create a PaymentPlan.
   * @example
   * // Update or create a PaymentPlan
   * const paymentPlan = await prisma.paymentPlan.upsert({
   *   create: {
   *     // ... data to create a PaymentPlan
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PaymentPlan we want to update
   *   }
   * })
   */
  upsert<T extends PaymentPlanUpsertArgs>(args: Prisma.SelectSubset<T, PaymentPlanUpsertArgs<ExtArgs>>): Prisma.Prisma__PaymentPlanClient<runtime.Types.Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PaymentPlans.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentPlanCountArgs} args - Arguments to filter PaymentPlans to count.
   * @example
   * // Count the number of PaymentPlans
   * const count = await prisma.paymentPlan.count({
   *   where: {
   *     // ... the filter for the PaymentPlans we want to count
   *   }
   * })
  **/
  count<T extends PaymentPlanCountArgs>(
    args?: Prisma.Subset<T, PaymentPlanCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PaymentPlanCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PaymentPlan.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PaymentPlanAggregateArgs>(args: Prisma.Subset<T, PaymentPlanAggregateArgs>): Prisma.PrismaPromise<GetPaymentPlanAggregateType<T>>

  /**
   * Group by PaymentPlan.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentPlanGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PaymentPlanGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PaymentPlanGroupByArgs['orderBy'] }
      : { orderBy?: PaymentPlanGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PaymentPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PaymentPlan model
 */
readonly fields: PaymentPlanFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PaymentPlan.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PaymentPlanClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  instalments<T extends Prisma.PaymentPlan$instalmentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PaymentPlan$instalmentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PaymentPlan model
 */
export interface PaymentPlanFieldRefs {
  readonly id: Prisma.FieldRef<"PaymentPlan", 'String'>
  readonly name: Prisma.FieldRef<"PaymentPlan", 'String'>
  readonly description: Prisma.FieldRef<"PaymentPlan", 'String'>
  readonly cycle: Prisma.FieldRef<"PaymentPlan", 'String'>
  readonly numberOfPayments: Prisma.FieldRef<"PaymentPlan", 'Int'>
  readonly createdAt: Prisma.FieldRef<"PaymentPlan", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PaymentPlan", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PaymentPlan findUnique
 */
export type PaymentPlanFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentPlan
   */
  select?: Prisma.PaymentPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentPlan
   */
  omit?: Prisma.PaymentPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentPlanInclude<ExtArgs> | null
  /**
   * Filter, which PaymentPlan to fetch.
   */
  where: Prisma.PaymentPlanWhereUniqueInput
}

/**
 * PaymentPlan findUniqueOrThrow
 */
export type PaymentPlanFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentPlan
   */
  select?: Prisma.PaymentPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentPlan
   */
  omit?: Prisma.PaymentPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentPlanInclude<ExtArgs> | null
  /**
   * Filter, which PaymentPlan to fetch.
   */
  where: Prisma.PaymentPlanWhereUniqueInput
}

/**
 * PaymentPlan findFirst
 */
export type PaymentPlanFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentPlan
   */
  select?: Prisma.PaymentPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentPlan
   */
  omit?: Prisma.PaymentPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentPlanInclude<ExtArgs> | null
  /**
   * Filter, which PaymentPlan to fetch.
   */
  where?: Prisma.PaymentPlanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentPlans to fetch.
   */
  orderBy?: Prisma.PaymentPlanOrderByWithRelationInput | Prisma.PaymentPlanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PaymentPlans.
   */
  cursor?: Prisma.PaymentPlanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentPlans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentPlans.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PaymentPlans.
   */
  distinct?: Prisma.PaymentPlanScalarFieldEnum | Prisma.PaymentPlanScalarFieldEnum[]
}

/**
 * PaymentPlan findFirstOrThrow
 */
export type PaymentPlanFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentPlan
   */
  select?: Prisma.PaymentPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentPlan
   */
  omit?: Prisma.PaymentPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentPlanInclude<ExtArgs> | null
  /**
   * Filter, which PaymentPlan to fetch.
   */
  where?: Prisma.PaymentPlanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentPlans to fetch.
   */
  orderBy?: Prisma.PaymentPlanOrderByWithRelationInput | Prisma.PaymentPlanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PaymentPlans.
   */
  cursor?: Prisma.PaymentPlanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentPlans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentPlans.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PaymentPlans.
   */
  distinct?: Prisma.PaymentPlanScalarFieldEnum | Prisma.PaymentPlanScalarFieldEnum[]
}

/**
 * PaymentPlan findMany
 */
export type PaymentPlanFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentPlan
   */
  select?: Prisma.PaymentPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentPlan
   */
  omit?: Prisma.PaymentPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentPlanInclude<ExtArgs> | null
  /**
   * Filter, which PaymentPlans to fetch.
   */
  where?: Prisma.PaymentPlanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentPlans to fetch.
   */
  orderBy?: Prisma.PaymentPlanOrderByWithRelationInput | Prisma.PaymentPlanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PaymentPlans.
   */
  cursor?: Prisma.PaymentPlanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentPlans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentPlans.
   */
  skip?: number
  distinct?: Prisma.PaymentPlanScalarFieldEnum | Prisma.PaymentPlanScalarFieldEnum[]
}

/**
 * PaymentPlan create
 */
export type PaymentPlanCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentPlan
   */
  select?: Prisma.PaymentPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentPlan
   */
  omit?: Prisma.PaymentPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentPlanInclude<ExtArgs> | null
  /**
   * The data needed to create a PaymentPlan.
   */
  data: Prisma.XOR<Prisma.PaymentPlanCreateInput, Prisma.PaymentPlanUncheckedCreateInput>
}

/**
 * PaymentPlan createMany
 */
export type PaymentPlanCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PaymentPlans.
   */
  data: Prisma.PaymentPlanCreateManyInput | Prisma.PaymentPlanCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PaymentPlan createManyAndReturn
 */
export type PaymentPlanCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentPlan
   */
  select?: Prisma.PaymentPlanSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentPlan
   */
  omit?: Prisma.PaymentPlanOmit<ExtArgs> | null
  /**
   * The data used to create many PaymentPlans.
   */
  data: Prisma.PaymentPlanCreateManyInput | Prisma.PaymentPlanCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PaymentPlan update
 */
export type PaymentPlanUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentPlan
   */
  select?: Prisma.PaymentPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentPlan
   */
  omit?: Prisma.PaymentPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentPlanInclude<ExtArgs> | null
  /**
   * The data needed to update a PaymentPlan.
   */
  data: Prisma.XOR<Prisma.PaymentPlanUpdateInput, Prisma.PaymentPlanUncheckedUpdateInput>
  /**
   * Choose, which PaymentPlan to update.
   */
  where: Prisma.PaymentPlanWhereUniqueInput
}

/**
 * PaymentPlan updateMany
 */
export type PaymentPlanUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PaymentPlans.
   */
  data: Prisma.XOR<Prisma.PaymentPlanUpdateManyMutationInput, Prisma.PaymentPlanUncheckedUpdateManyInput>
  /**
   * Filter which PaymentPlans to update
   */
  where?: Prisma.PaymentPlanWhereInput
  /**
   * Limit how many PaymentPlans to update.
   */
  limit?: number
}

/**
 * PaymentPlan updateManyAndReturn
 */
export type PaymentPlanUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentPlan
   */
  select?: Prisma.PaymentPlanSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentPlan
   */
  omit?: Prisma.PaymentPlanOmit<ExtArgs> | null
  /**
   * The data used to update PaymentPlans.
   */
  data: Prisma.XOR<Prisma.PaymentPlanUpdateManyMutationInput, Prisma.PaymentPlanUncheckedUpdateManyInput>
  /**
   * Filter which PaymentPlans to update
   */
  where?: Prisma.PaymentPlanWhereInput
  /**
   * Limit how many PaymentPlans to update.
   */
  limit?: number
}

/**
 * PaymentPlan upsert
 */
export type PaymentPlanUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentPlan
   */
  select?: Prisma.PaymentPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentPlan
   */
  omit?: Prisma.PaymentPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentPlanInclude<ExtArgs> | null
  /**
   * The filter to search for the PaymentPlan to update in case it exists.
   */
  where: Prisma.PaymentPlanWhereUniqueInput
  /**
   * In case the PaymentPlan found by the `where` argument doesn't exist, create a new PaymentPlan with this data.
   */
  create: Prisma.XOR<Prisma.PaymentPlanCreateInput, Prisma.PaymentPlanUncheckedCreateInput>
  /**
   * In case the PaymentPlan was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PaymentPlanUpdateInput, Prisma.PaymentPlanUncheckedUpdateInput>
}

/**
 * PaymentPlan delete
 */
export type PaymentPlanDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentPlan
   */
  select?: Prisma.PaymentPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentPlan
   */
  omit?: Prisma.PaymentPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentPlanInclude<ExtArgs> | null
  /**
   * Filter which PaymentPlan to delete.
   */
  where: Prisma.PaymentPlanWhereUniqueInput
}

/**
 * PaymentPlan deleteMany
 */
export type PaymentPlanDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PaymentPlans to delete
   */
  where?: Prisma.PaymentPlanWhereInput
  /**
   * Limit how many PaymentPlans to delete.
   */
  limit?: number
}

/**
 * PaymentPlan.instalments
 */
export type PaymentPlan$instalmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentInstalment
   */
  select?: Prisma.PaymentInstalmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentInstalment
   */
  omit?: Prisma.PaymentInstalmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentInstalmentInclude<ExtArgs> | null
  where?: Prisma.PaymentInstalmentWhereInput
  orderBy?: Prisma.PaymentInstalmentOrderByWithRelationInput | Prisma.PaymentInstalmentOrderByWithRelationInput[]
  cursor?: Prisma.PaymentInstalmentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PaymentInstalmentScalarFieldEnum | Prisma.PaymentInstalmentScalarFieldEnum[]
}

/**
 * PaymentPlan without action
 */
export type PaymentPlanDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentPlan
   */
  select?: Prisma.PaymentPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentPlan
   */
  omit?: Prisma.PaymentPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentPlanInclude<ExtArgs> | null
}
