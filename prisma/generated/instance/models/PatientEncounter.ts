
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PatientEncounter` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PatientEncounter
 * 
 */
export type PatientEncounterModel = runtime.Types.Result.DefaultSelection<Prisma.$PatientEncounterPayload>

export type AggregatePatientEncounter = {
  _count: PatientEncounterCountAggregateOutputType | null
  _min: PatientEncounterMinAggregateOutputType | null
  _max: PatientEncounterMaxAggregateOutputType | null
}

export type PatientEncounterMinAggregateOutputType = {
  id: string | null
  encounterId: string | null
  patientProfileId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PatientEncounterMaxAggregateOutputType = {
  id: string | null
  encounterId: string | null
  patientProfileId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PatientEncounterCountAggregateOutputType = {
  id: number
  encounterId: number
  patientProfileId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PatientEncounterMinAggregateInputType = {
  id?: true
  encounterId?: true
  patientProfileId?: true
  createdAt?: true
  updatedAt?: true
}

export type PatientEncounterMaxAggregateInputType = {
  id?: true
  encounterId?: true
  patientProfileId?: true
  createdAt?: true
  updatedAt?: true
}

export type PatientEncounterCountAggregateInputType = {
  id?: true
  encounterId?: true
  patientProfileId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PatientEncounterAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PatientEncounter to aggregate.
   */
  where?: Prisma.PatientEncounterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PatientEncounters to fetch.
   */
  orderBy?: Prisma.PatientEncounterOrderByWithRelationInput | Prisma.PatientEncounterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PatientEncounterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PatientEncounters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PatientEncounters.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PatientEncounters
  **/
  _count?: true | PatientEncounterCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PatientEncounterMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PatientEncounterMaxAggregateInputType
}

export type GetPatientEncounterAggregateType<T extends PatientEncounterAggregateArgs> = {
      [P in keyof T & keyof AggregatePatientEncounter]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePatientEncounter[P]>
    : Prisma.GetScalarType<T[P], AggregatePatientEncounter[P]>
}




export type PatientEncounterGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PatientEncounterWhereInput
  orderBy?: Prisma.PatientEncounterOrderByWithAggregationInput | Prisma.PatientEncounterOrderByWithAggregationInput[]
  by: Prisma.PatientEncounterScalarFieldEnum[] | Prisma.PatientEncounterScalarFieldEnum
  having?: Prisma.PatientEncounterScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PatientEncounterCountAggregateInputType | true
  _min?: PatientEncounterMinAggregateInputType
  _max?: PatientEncounterMaxAggregateInputType
}

export type PatientEncounterGroupByOutputType = {
  id: string
  encounterId: string
  patientProfileId: string
  createdAt: Date
  updatedAt: Date
  _count: PatientEncounterCountAggregateOutputType | null
  _min: PatientEncounterMinAggregateOutputType | null
  _max: PatientEncounterMaxAggregateOutputType | null
}

type GetPatientEncounterGroupByPayload<T extends PatientEncounterGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PatientEncounterGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PatientEncounterGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PatientEncounterGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PatientEncounterGroupByOutputType[P]>
      }
    >
  > 



export type PatientEncounterWhereInput = {
  AND?: Prisma.PatientEncounterWhereInput | Prisma.PatientEncounterWhereInput[]
  OR?: Prisma.PatientEncounterWhereInput[]
  NOT?: Prisma.PatientEncounterWhereInput | Prisma.PatientEncounterWhereInput[]
  id?: Prisma.UuidFilter<"PatientEncounter"> | string
  encounterId?: Prisma.UuidFilter<"PatientEncounter"> | string
  patientProfileId?: Prisma.UuidFilter<"PatientEncounter"> | string
  createdAt?: Prisma.DateTimeFilter<"PatientEncounter"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PatientEncounter"> | Date | string
  patientProfile?: Prisma.XOR<Prisma.PatientProfileScalarRelationFilter, Prisma.PatientProfileWhereInput>
  transaction?: Prisma.XOR<Prisma.TransactionNullableScalarRelationFilter, Prisma.TransactionWhereInput> | null
}

export type PatientEncounterOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  encounterId?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  patientProfile?: Prisma.PatientProfileOrderByWithRelationInput
  transaction?: Prisma.TransactionOrderByWithRelationInput
}

export type PatientEncounterWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  encounterId?: string
  AND?: Prisma.PatientEncounterWhereInput | Prisma.PatientEncounterWhereInput[]
  OR?: Prisma.PatientEncounterWhereInput[]
  NOT?: Prisma.PatientEncounterWhereInput | Prisma.PatientEncounterWhereInput[]
  patientProfileId?: Prisma.UuidFilter<"PatientEncounter"> | string
  createdAt?: Prisma.DateTimeFilter<"PatientEncounter"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PatientEncounter"> | Date | string
  patientProfile?: Prisma.XOR<Prisma.PatientProfileScalarRelationFilter, Prisma.PatientProfileWhereInput>
  transaction?: Prisma.XOR<Prisma.TransactionNullableScalarRelationFilter, Prisma.TransactionWhereInput> | null
}, "id" | "encounterId">

export type PatientEncounterOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  encounterId?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PatientEncounterCountOrderByAggregateInput
  _max?: Prisma.PatientEncounterMaxOrderByAggregateInput
  _min?: Prisma.PatientEncounterMinOrderByAggregateInput
}

export type PatientEncounterScalarWhereWithAggregatesInput = {
  AND?: Prisma.PatientEncounterScalarWhereWithAggregatesInput | Prisma.PatientEncounterScalarWhereWithAggregatesInput[]
  OR?: Prisma.PatientEncounterScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PatientEncounterScalarWhereWithAggregatesInput | Prisma.PatientEncounterScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"PatientEncounter"> | string
  encounterId?: Prisma.UuidWithAggregatesFilter<"PatientEncounter"> | string
  patientProfileId?: Prisma.UuidWithAggregatesFilter<"PatientEncounter"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PatientEncounter"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PatientEncounter"> | Date | string
}

export type PatientEncounterCreateInput = {
  id?: string
  encounterId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  patientProfile: Prisma.PatientProfileCreateNestedOneWithoutPatientEncountersInput
  transaction?: Prisma.TransactionCreateNestedOneWithoutEncounterInput
}

export type PatientEncounterUncheckedCreateInput = {
  id?: string
  encounterId: string
  patientProfileId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  transaction?: Prisma.TransactionUncheckedCreateNestedOneWithoutEncounterInput
}

export type PatientEncounterUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  encounterId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  patientProfile?: Prisma.PatientProfileUpdateOneRequiredWithoutPatientEncountersNestedInput
  transaction?: Prisma.TransactionUpdateOneWithoutEncounterNestedInput
}

export type PatientEncounterUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  encounterId?: Prisma.StringFieldUpdateOperationsInput | string
  patientProfileId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transaction?: Prisma.TransactionUncheckedUpdateOneWithoutEncounterNestedInput
}

export type PatientEncounterCreateManyInput = {
  id?: string
  encounterId: string
  patientProfileId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PatientEncounterUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  encounterId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PatientEncounterUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  encounterId?: Prisma.StringFieldUpdateOperationsInput | string
  patientProfileId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PatientEncounterScalarRelationFilter = {
  is?: Prisma.PatientEncounterWhereInput
  isNot?: Prisma.PatientEncounterWhereInput
}

export type PatientEncounterCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  encounterId?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PatientEncounterMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  encounterId?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PatientEncounterMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  encounterId?: Prisma.SortOrder
  patientProfileId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PatientEncounterListRelationFilter = {
  every?: Prisma.PatientEncounterWhereInput
  some?: Prisma.PatientEncounterWhereInput
  none?: Prisma.PatientEncounterWhereInput
}

export type PatientEncounterOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PatientEncounterCreateNestedOneWithoutTransactionInput = {
  create?: Prisma.XOR<Prisma.PatientEncounterCreateWithoutTransactionInput, Prisma.PatientEncounterUncheckedCreateWithoutTransactionInput>
  connectOrCreate?: Prisma.PatientEncounterCreateOrConnectWithoutTransactionInput
  connect?: Prisma.PatientEncounterWhereUniqueInput
}

export type PatientEncounterUpdateOneRequiredWithoutTransactionNestedInput = {
  create?: Prisma.XOR<Prisma.PatientEncounterCreateWithoutTransactionInput, Prisma.PatientEncounterUncheckedCreateWithoutTransactionInput>
  connectOrCreate?: Prisma.PatientEncounterCreateOrConnectWithoutTransactionInput
  upsert?: Prisma.PatientEncounterUpsertWithoutTransactionInput
  connect?: Prisma.PatientEncounterWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PatientEncounterUpdateToOneWithWhereWithoutTransactionInput, Prisma.PatientEncounterUpdateWithoutTransactionInput>, Prisma.PatientEncounterUncheckedUpdateWithoutTransactionInput>
}

export type PatientEncounterCreateNestedManyWithoutPatientProfileInput = {
  create?: Prisma.XOR<Prisma.PatientEncounterCreateWithoutPatientProfileInput, Prisma.PatientEncounterUncheckedCreateWithoutPatientProfileInput> | Prisma.PatientEncounterCreateWithoutPatientProfileInput[] | Prisma.PatientEncounterUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.PatientEncounterCreateOrConnectWithoutPatientProfileInput | Prisma.PatientEncounterCreateOrConnectWithoutPatientProfileInput[]
  createMany?: Prisma.PatientEncounterCreateManyPatientProfileInputEnvelope
  connect?: Prisma.PatientEncounterWhereUniqueInput | Prisma.PatientEncounterWhereUniqueInput[]
}

export type PatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput = {
  create?: Prisma.XOR<Prisma.PatientEncounterCreateWithoutPatientProfileInput, Prisma.PatientEncounterUncheckedCreateWithoutPatientProfileInput> | Prisma.PatientEncounterCreateWithoutPatientProfileInput[] | Prisma.PatientEncounterUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.PatientEncounterCreateOrConnectWithoutPatientProfileInput | Prisma.PatientEncounterCreateOrConnectWithoutPatientProfileInput[]
  createMany?: Prisma.PatientEncounterCreateManyPatientProfileInputEnvelope
  connect?: Prisma.PatientEncounterWhereUniqueInput | Prisma.PatientEncounterWhereUniqueInput[]
}

export type PatientEncounterUpdateManyWithoutPatientProfileNestedInput = {
  create?: Prisma.XOR<Prisma.PatientEncounterCreateWithoutPatientProfileInput, Prisma.PatientEncounterUncheckedCreateWithoutPatientProfileInput> | Prisma.PatientEncounterCreateWithoutPatientProfileInput[] | Prisma.PatientEncounterUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.PatientEncounterCreateOrConnectWithoutPatientProfileInput | Prisma.PatientEncounterCreateOrConnectWithoutPatientProfileInput[]
  upsert?: Prisma.PatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput | Prisma.PatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput[]
  createMany?: Prisma.PatientEncounterCreateManyPatientProfileInputEnvelope
  set?: Prisma.PatientEncounterWhereUniqueInput | Prisma.PatientEncounterWhereUniqueInput[]
  disconnect?: Prisma.PatientEncounterWhereUniqueInput | Prisma.PatientEncounterWhereUniqueInput[]
  delete?: Prisma.PatientEncounterWhereUniqueInput | Prisma.PatientEncounterWhereUniqueInput[]
  connect?: Prisma.PatientEncounterWhereUniqueInput | Prisma.PatientEncounterWhereUniqueInput[]
  update?: Prisma.PatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput | Prisma.PatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput[]
  updateMany?: Prisma.PatientEncounterUpdateManyWithWhereWithoutPatientProfileInput | Prisma.PatientEncounterUpdateManyWithWhereWithoutPatientProfileInput[]
  deleteMany?: Prisma.PatientEncounterScalarWhereInput | Prisma.PatientEncounterScalarWhereInput[]
}

export type PatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput = {
  create?: Prisma.XOR<Prisma.PatientEncounterCreateWithoutPatientProfileInput, Prisma.PatientEncounterUncheckedCreateWithoutPatientProfileInput> | Prisma.PatientEncounterCreateWithoutPatientProfileInput[] | Prisma.PatientEncounterUncheckedCreateWithoutPatientProfileInput[]
  connectOrCreate?: Prisma.PatientEncounterCreateOrConnectWithoutPatientProfileInput | Prisma.PatientEncounterCreateOrConnectWithoutPatientProfileInput[]
  upsert?: Prisma.PatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput | Prisma.PatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput[]
  createMany?: Prisma.PatientEncounterCreateManyPatientProfileInputEnvelope
  set?: Prisma.PatientEncounterWhereUniqueInput | Prisma.PatientEncounterWhereUniqueInput[]
  disconnect?: Prisma.PatientEncounterWhereUniqueInput | Prisma.PatientEncounterWhereUniqueInput[]
  delete?: Prisma.PatientEncounterWhereUniqueInput | Prisma.PatientEncounterWhereUniqueInput[]
  connect?: Prisma.PatientEncounterWhereUniqueInput | Prisma.PatientEncounterWhereUniqueInput[]
  update?: Prisma.PatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput | Prisma.PatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput[]
  updateMany?: Prisma.PatientEncounterUpdateManyWithWhereWithoutPatientProfileInput | Prisma.PatientEncounterUpdateManyWithWhereWithoutPatientProfileInput[]
  deleteMany?: Prisma.PatientEncounterScalarWhereInput | Prisma.PatientEncounterScalarWhereInput[]
}

export type PatientEncounterCreateWithoutTransactionInput = {
  id?: string
  encounterId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  patientProfile: Prisma.PatientProfileCreateNestedOneWithoutPatientEncountersInput
}

export type PatientEncounterUncheckedCreateWithoutTransactionInput = {
  id?: string
  encounterId: string
  patientProfileId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PatientEncounterCreateOrConnectWithoutTransactionInput = {
  where: Prisma.PatientEncounterWhereUniqueInput
  create: Prisma.XOR<Prisma.PatientEncounterCreateWithoutTransactionInput, Prisma.PatientEncounterUncheckedCreateWithoutTransactionInput>
}

export type PatientEncounterUpsertWithoutTransactionInput = {
  update: Prisma.XOR<Prisma.PatientEncounterUpdateWithoutTransactionInput, Prisma.PatientEncounterUncheckedUpdateWithoutTransactionInput>
  create: Prisma.XOR<Prisma.PatientEncounterCreateWithoutTransactionInput, Prisma.PatientEncounterUncheckedCreateWithoutTransactionInput>
  where?: Prisma.PatientEncounterWhereInput
}

export type PatientEncounterUpdateToOneWithWhereWithoutTransactionInput = {
  where?: Prisma.PatientEncounterWhereInput
  data: Prisma.XOR<Prisma.PatientEncounterUpdateWithoutTransactionInput, Prisma.PatientEncounterUncheckedUpdateWithoutTransactionInput>
}

export type PatientEncounterUpdateWithoutTransactionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  encounterId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  patientProfile?: Prisma.PatientProfileUpdateOneRequiredWithoutPatientEncountersNestedInput
}

export type PatientEncounterUncheckedUpdateWithoutTransactionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  encounterId?: Prisma.StringFieldUpdateOperationsInput | string
  patientProfileId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PatientEncounterCreateWithoutPatientProfileInput = {
  id?: string
  encounterId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  transaction?: Prisma.TransactionCreateNestedOneWithoutEncounterInput
}

export type PatientEncounterUncheckedCreateWithoutPatientProfileInput = {
  id?: string
  encounterId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  transaction?: Prisma.TransactionUncheckedCreateNestedOneWithoutEncounterInput
}

export type PatientEncounterCreateOrConnectWithoutPatientProfileInput = {
  where: Prisma.PatientEncounterWhereUniqueInput
  create: Prisma.XOR<Prisma.PatientEncounterCreateWithoutPatientProfileInput, Prisma.PatientEncounterUncheckedCreateWithoutPatientProfileInput>
}

export type PatientEncounterCreateManyPatientProfileInputEnvelope = {
  data: Prisma.PatientEncounterCreateManyPatientProfileInput | Prisma.PatientEncounterCreateManyPatientProfileInput[]
  skipDuplicates?: boolean
}

export type PatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput = {
  where: Prisma.PatientEncounterWhereUniqueInput
  update: Prisma.XOR<Prisma.PatientEncounterUpdateWithoutPatientProfileInput, Prisma.PatientEncounterUncheckedUpdateWithoutPatientProfileInput>
  create: Prisma.XOR<Prisma.PatientEncounterCreateWithoutPatientProfileInput, Prisma.PatientEncounterUncheckedCreateWithoutPatientProfileInput>
}

export type PatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput = {
  where: Prisma.PatientEncounterWhereUniqueInput
  data: Prisma.XOR<Prisma.PatientEncounterUpdateWithoutPatientProfileInput, Prisma.PatientEncounterUncheckedUpdateWithoutPatientProfileInput>
}

export type PatientEncounterUpdateManyWithWhereWithoutPatientProfileInput = {
  where: Prisma.PatientEncounterScalarWhereInput
  data: Prisma.XOR<Prisma.PatientEncounterUpdateManyMutationInput, Prisma.PatientEncounterUncheckedUpdateManyWithoutPatientProfileInput>
}

export type PatientEncounterScalarWhereInput = {
  AND?: Prisma.PatientEncounterScalarWhereInput | Prisma.PatientEncounterScalarWhereInput[]
  OR?: Prisma.PatientEncounterScalarWhereInput[]
  NOT?: Prisma.PatientEncounterScalarWhereInput | Prisma.PatientEncounterScalarWhereInput[]
  id?: Prisma.UuidFilter<"PatientEncounter"> | string
  encounterId?: Prisma.UuidFilter<"PatientEncounter"> | string
  patientProfileId?: Prisma.UuidFilter<"PatientEncounter"> | string
  createdAt?: Prisma.DateTimeFilter<"PatientEncounter"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PatientEncounter"> | Date | string
}

export type PatientEncounterCreateManyPatientProfileInput = {
  id?: string
  encounterId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PatientEncounterUpdateWithoutPatientProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  encounterId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transaction?: Prisma.TransactionUpdateOneWithoutEncounterNestedInput
}

export type PatientEncounterUncheckedUpdateWithoutPatientProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  encounterId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transaction?: Prisma.TransactionUncheckedUpdateOneWithoutEncounterNestedInput
}

export type PatientEncounterUncheckedUpdateManyWithoutPatientProfileInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  encounterId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PatientEncounterSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  encounterId?: boolean
  patientProfileId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
  transaction?: boolean | Prisma.PatientEncounter$transactionArgs<ExtArgs>
}, ExtArgs["result"]["patientEncounter"]>

export type PatientEncounterSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  encounterId?: boolean
  patientProfileId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["patientEncounter"]>

export type PatientEncounterSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  encounterId?: boolean
  patientProfileId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["patientEncounter"]>

export type PatientEncounterSelectScalar = {
  id?: boolean
  encounterId?: boolean
  patientProfileId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PatientEncounterOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "encounterId" | "patientProfileId" | "createdAt" | "updatedAt", ExtArgs["result"]["patientEncounter"]>
export type PatientEncounterInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
  transaction?: boolean | Prisma.PatientEncounter$transactionArgs<ExtArgs>
}
export type PatientEncounterIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}
export type PatientEncounterIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  patientProfile?: boolean | Prisma.PatientProfileDefaultArgs<ExtArgs>
}

export type $PatientEncounterPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PatientEncounter"
  objects: {
    patientProfile: Prisma.$PatientProfilePayload<ExtArgs>
    transaction: Prisma.$TransactionPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    encounterId: string
    patientProfileId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["patientEncounter"]>
  composites: {}
}

export type PatientEncounterGetPayload<S extends boolean | null | undefined | PatientEncounterDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PatientEncounterPayload, S>

export type PatientEncounterCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PatientEncounterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PatientEncounterCountAggregateInputType | true
  }

export interface PatientEncounterDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientEncounter'], meta: { name: 'PatientEncounter' } }
  /**
   * Find zero or one PatientEncounter that matches the filter.
   * @param {PatientEncounterFindUniqueArgs} args - Arguments to find a PatientEncounter
   * @example
   * // Get one PatientEncounter
   * const patientEncounter = await prisma.patientEncounter.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PatientEncounterFindUniqueArgs>(args: Prisma.SelectSubset<T, PatientEncounterFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PatientEncounter that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PatientEncounterFindUniqueOrThrowArgs} args - Arguments to find a PatientEncounter
   * @example
   * // Get one PatientEncounter
   * const patientEncounter = await prisma.patientEncounter.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PatientEncounterFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PatientEncounterFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PatientEncounter that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PatientEncounterFindFirstArgs} args - Arguments to find a PatientEncounter
   * @example
   * // Get one PatientEncounter
   * const patientEncounter = await prisma.patientEncounter.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PatientEncounterFindFirstArgs>(args?: Prisma.SelectSubset<T, PatientEncounterFindFirstArgs<ExtArgs>>): Prisma.Prisma__PatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PatientEncounter that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PatientEncounterFindFirstOrThrowArgs} args - Arguments to find a PatientEncounter
   * @example
   * // Get one PatientEncounter
   * const patientEncounter = await prisma.patientEncounter.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PatientEncounterFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PatientEncounterFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PatientEncounters that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PatientEncounterFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PatientEncounters
   * const patientEncounters = await prisma.patientEncounter.findMany()
   * 
   * // Get first 10 PatientEncounters
   * const patientEncounters = await prisma.patientEncounter.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const patientEncounterWithIdOnly = await prisma.patientEncounter.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PatientEncounterFindManyArgs>(args?: Prisma.SelectSubset<T, PatientEncounterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PatientEncounter.
   * @param {PatientEncounterCreateArgs} args - Arguments to create a PatientEncounter.
   * @example
   * // Create one PatientEncounter
   * const PatientEncounter = await prisma.patientEncounter.create({
   *   data: {
   *     // ... data to create a PatientEncounter
   *   }
   * })
   * 
   */
  create<T extends PatientEncounterCreateArgs>(args: Prisma.SelectSubset<T, PatientEncounterCreateArgs<ExtArgs>>): Prisma.Prisma__PatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PatientEncounters.
   * @param {PatientEncounterCreateManyArgs} args - Arguments to create many PatientEncounters.
   * @example
   * // Create many PatientEncounters
   * const patientEncounter = await prisma.patientEncounter.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PatientEncounterCreateManyArgs>(args?: Prisma.SelectSubset<T, PatientEncounterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PatientEncounters and returns the data saved in the database.
   * @param {PatientEncounterCreateManyAndReturnArgs} args - Arguments to create many PatientEncounters.
   * @example
   * // Create many PatientEncounters
   * const patientEncounter = await prisma.patientEncounter.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PatientEncounters and only return the `id`
   * const patientEncounterWithIdOnly = await prisma.patientEncounter.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PatientEncounterCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PatientEncounterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PatientEncounter.
   * @param {PatientEncounterDeleteArgs} args - Arguments to delete one PatientEncounter.
   * @example
   * // Delete one PatientEncounter
   * const PatientEncounter = await prisma.patientEncounter.delete({
   *   where: {
   *     // ... filter to delete one PatientEncounter
   *   }
   * })
   * 
   */
  delete<T extends PatientEncounterDeleteArgs>(args: Prisma.SelectSubset<T, PatientEncounterDeleteArgs<ExtArgs>>): Prisma.Prisma__PatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PatientEncounter.
   * @param {PatientEncounterUpdateArgs} args - Arguments to update one PatientEncounter.
   * @example
   * // Update one PatientEncounter
   * const patientEncounter = await prisma.patientEncounter.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PatientEncounterUpdateArgs>(args: Prisma.SelectSubset<T, PatientEncounterUpdateArgs<ExtArgs>>): Prisma.Prisma__PatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PatientEncounters.
   * @param {PatientEncounterDeleteManyArgs} args - Arguments to filter PatientEncounters to delete.
   * @example
   * // Delete a few PatientEncounters
   * const { count } = await prisma.patientEncounter.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PatientEncounterDeleteManyArgs>(args?: Prisma.SelectSubset<T, PatientEncounterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PatientEncounters.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PatientEncounterUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PatientEncounters
   * const patientEncounter = await prisma.patientEncounter.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PatientEncounterUpdateManyArgs>(args: Prisma.SelectSubset<T, PatientEncounterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PatientEncounters and returns the data updated in the database.
   * @param {PatientEncounterUpdateManyAndReturnArgs} args - Arguments to update many PatientEncounters.
   * @example
   * // Update many PatientEncounters
   * const patientEncounter = await prisma.patientEncounter.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PatientEncounters and only return the `id`
   * const patientEncounterWithIdOnly = await prisma.patientEncounter.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PatientEncounterUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PatientEncounterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PatientEncounter.
   * @param {PatientEncounterUpsertArgs} args - Arguments to update or create a PatientEncounter.
   * @example
   * // Update or create a PatientEncounter
   * const patientEncounter = await prisma.patientEncounter.upsert({
   *   create: {
   *     // ... data to create a PatientEncounter
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PatientEncounter we want to update
   *   }
   * })
   */
  upsert<T extends PatientEncounterUpsertArgs>(args: Prisma.SelectSubset<T, PatientEncounterUpsertArgs<ExtArgs>>): Prisma.Prisma__PatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PatientEncounters.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PatientEncounterCountArgs} args - Arguments to filter PatientEncounters to count.
   * @example
   * // Count the number of PatientEncounters
   * const count = await prisma.patientEncounter.count({
   *   where: {
   *     // ... the filter for the PatientEncounters we want to count
   *   }
   * })
  **/
  count<T extends PatientEncounterCountArgs>(
    args?: Prisma.Subset<T, PatientEncounterCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PatientEncounterCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PatientEncounter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PatientEncounterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PatientEncounterAggregateArgs>(args: Prisma.Subset<T, PatientEncounterAggregateArgs>): Prisma.PrismaPromise<GetPatientEncounterAggregateType<T>>

  /**
   * Group by PatientEncounter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PatientEncounterGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PatientEncounterGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PatientEncounterGroupByArgs['orderBy'] }
      : { orderBy?: PatientEncounterGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PatientEncounterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientEncounterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PatientEncounter model
 */
readonly fields: PatientEncounterFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PatientEncounter.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PatientEncounterClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  patientProfile<T extends Prisma.PatientProfileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PatientProfileDefaultArgs<ExtArgs>>): Prisma.Prisma__PatientProfileClient<runtime.Types.Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  transaction<T extends Prisma.PatientEncounter$transactionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PatientEncounter$transactionArgs<ExtArgs>>): Prisma.Prisma__TransactionClient<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PatientEncounter model
 */
export interface PatientEncounterFieldRefs {
  readonly id: Prisma.FieldRef<"PatientEncounter", 'String'>
  readonly encounterId: Prisma.FieldRef<"PatientEncounter", 'String'>
  readonly patientProfileId: Prisma.FieldRef<"PatientEncounter", 'String'>
  readonly createdAt: Prisma.FieldRef<"PatientEncounter", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PatientEncounter", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PatientEncounter findUnique
 */
export type PatientEncounterFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientEncounter
   */
  select?: Prisma.PatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PatientEncounter
   */
  omit?: Prisma.PatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientEncounterInclude<ExtArgs> | null
  /**
   * Filter, which PatientEncounter to fetch.
   */
  where: Prisma.PatientEncounterWhereUniqueInput
}

/**
 * PatientEncounter findUniqueOrThrow
 */
export type PatientEncounterFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientEncounter
   */
  select?: Prisma.PatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PatientEncounter
   */
  omit?: Prisma.PatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientEncounterInclude<ExtArgs> | null
  /**
   * Filter, which PatientEncounter to fetch.
   */
  where: Prisma.PatientEncounterWhereUniqueInput
}

/**
 * PatientEncounter findFirst
 */
export type PatientEncounterFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientEncounter
   */
  select?: Prisma.PatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PatientEncounter
   */
  omit?: Prisma.PatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientEncounterInclude<ExtArgs> | null
  /**
   * Filter, which PatientEncounter to fetch.
   */
  where?: Prisma.PatientEncounterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PatientEncounters to fetch.
   */
  orderBy?: Prisma.PatientEncounterOrderByWithRelationInput | Prisma.PatientEncounterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PatientEncounters.
   */
  cursor?: Prisma.PatientEncounterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PatientEncounters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PatientEncounters.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PatientEncounters.
   */
  distinct?: Prisma.PatientEncounterScalarFieldEnum | Prisma.PatientEncounterScalarFieldEnum[]
}

/**
 * PatientEncounter findFirstOrThrow
 */
export type PatientEncounterFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientEncounter
   */
  select?: Prisma.PatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PatientEncounter
   */
  omit?: Prisma.PatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientEncounterInclude<ExtArgs> | null
  /**
   * Filter, which PatientEncounter to fetch.
   */
  where?: Prisma.PatientEncounterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PatientEncounters to fetch.
   */
  orderBy?: Prisma.PatientEncounterOrderByWithRelationInput | Prisma.PatientEncounterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PatientEncounters.
   */
  cursor?: Prisma.PatientEncounterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PatientEncounters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PatientEncounters.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PatientEncounters.
   */
  distinct?: Prisma.PatientEncounterScalarFieldEnum | Prisma.PatientEncounterScalarFieldEnum[]
}

/**
 * PatientEncounter findMany
 */
export type PatientEncounterFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientEncounter
   */
  select?: Prisma.PatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PatientEncounter
   */
  omit?: Prisma.PatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientEncounterInclude<ExtArgs> | null
  /**
   * Filter, which PatientEncounters to fetch.
   */
  where?: Prisma.PatientEncounterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PatientEncounters to fetch.
   */
  orderBy?: Prisma.PatientEncounterOrderByWithRelationInput | Prisma.PatientEncounterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PatientEncounters.
   */
  cursor?: Prisma.PatientEncounterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PatientEncounters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PatientEncounters.
   */
  skip?: number
  distinct?: Prisma.PatientEncounterScalarFieldEnum | Prisma.PatientEncounterScalarFieldEnum[]
}

/**
 * PatientEncounter create
 */
export type PatientEncounterCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientEncounter
   */
  select?: Prisma.PatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PatientEncounter
   */
  omit?: Prisma.PatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientEncounterInclude<ExtArgs> | null
  /**
   * The data needed to create a PatientEncounter.
   */
  data: Prisma.XOR<Prisma.PatientEncounterCreateInput, Prisma.PatientEncounterUncheckedCreateInput>
}

/**
 * PatientEncounter createMany
 */
export type PatientEncounterCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PatientEncounters.
   */
  data: Prisma.PatientEncounterCreateManyInput | Prisma.PatientEncounterCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PatientEncounter createManyAndReturn
 */
export type PatientEncounterCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientEncounter
   */
  select?: Prisma.PatientEncounterSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PatientEncounter
   */
  omit?: Prisma.PatientEncounterOmit<ExtArgs> | null
  /**
   * The data used to create many PatientEncounters.
   */
  data: Prisma.PatientEncounterCreateManyInput | Prisma.PatientEncounterCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientEncounterIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PatientEncounter update
 */
export type PatientEncounterUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientEncounter
   */
  select?: Prisma.PatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PatientEncounter
   */
  omit?: Prisma.PatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientEncounterInclude<ExtArgs> | null
  /**
   * The data needed to update a PatientEncounter.
   */
  data: Prisma.XOR<Prisma.PatientEncounterUpdateInput, Prisma.PatientEncounterUncheckedUpdateInput>
  /**
   * Choose, which PatientEncounter to update.
   */
  where: Prisma.PatientEncounterWhereUniqueInput
}

/**
 * PatientEncounter updateMany
 */
export type PatientEncounterUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PatientEncounters.
   */
  data: Prisma.XOR<Prisma.PatientEncounterUpdateManyMutationInput, Prisma.PatientEncounterUncheckedUpdateManyInput>
  /**
   * Filter which PatientEncounters to update
   */
  where?: Prisma.PatientEncounterWhereInput
  /**
   * Limit how many PatientEncounters to update.
   */
  limit?: number
}

/**
 * PatientEncounter updateManyAndReturn
 */
export type PatientEncounterUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientEncounter
   */
  select?: Prisma.PatientEncounterSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PatientEncounter
   */
  omit?: Prisma.PatientEncounterOmit<ExtArgs> | null
  /**
   * The data used to update PatientEncounters.
   */
  data: Prisma.XOR<Prisma.PatientEncounterUpdateManyMutationInput, Prisma.PatientEncounterUncheckedUpdateManyInput>
  /**
   * Filter which PatientEncounters to update
   */
  where?: Prisma.PatientEncounterWhereInput
  /**
   * Limit how many PatientEncounters to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientEncounterIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PatientEncounter upsert
 */
export type PatientEncounterUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientEncounter
   */
  select?: Prisma.PatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PatientEncounter
   */
  omit?: Prisma.PatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientEncounterInclude<ExtArgs> | null
  /**
   * The filter to search for the PatientEncounter to update in case it exists.
   */
  where: Prisma.PatientEncounterWhereUniqueInput
  /**
   * In case the PatientEncounter found by the `where` argument doesn't exist, create a new PatientEncounter with this data.
   */
  create: Prisma.XOR<Prisma.PatientEncounterCreateInput, Prisma.PatientEncounterUncheckedCreateInput>
  /**
   * In case the PatientEncounter was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PatientEncounterUpdateInput, Prisma.PatientEncounterUncheckedUpdateInput>
}

/**
 * PatientEncounter delete
 */
export type PatientEncounterDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientEncounter
   */
  select?: Prisma.PatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PatientEncounter
   */
  omit?: Prisma.PatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientEncounterInclude<ExtArgs> | null
  /**
   * Filter which PatientEncounter to delete.
   */
  where: Prisma.PatientEncounterWhereUniqueInput
}

/**
 * PatientEncounter deleteMany
 */
export type PatientEncounterDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PatientEncounters to delete
   */
  where?: Prisma.PatientEncounterWhereInput
  /**
   * Limit how many PatientEncounters to delete.
   */
  limit?: number
}

/**
 * PatientEncounter.transaction
 */
export type PatientEncounter$transactionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null
  where?: Prisma.TransactionWhereInput
}

/**
 * PatientEncounter without action
 */
export type PatientEncounterDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PatientEncounter
   */
  select?: Prisma.PatientEncounterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PatientEncounter
   */
  omit?: Prisma.PatientEncounterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PatientEncounterInclude<ExtArgs> | null
}
