
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TransactionItem` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TransactionItem
 * 
 */
export type TransactionItemModel = runtime.Types.Result.DefaultSelection<Prisma.$TransactionItemPayload>

export type AggregateTransactionItem = {
  _count: TransactionItemCountAggregateOutputType | null
  _avg: TransactionItemAvgAggregateOutputType | null
  _sum: TransactionItemSumAggregateOutputType | null
  _min: TransactionItemMinAggregateOutputType | null
  _max: TransactionItemMaxAggregateOutputType | null
}

export type TransactionItemAvgAggregateOutputType = {
  amount: number | null
}

export type TransactionItemSumAggregateOutputType = {
  amount: number | null
}

export type TransactionItemMinAggregateOutputType = {
  id: string | null
  transactionId: string | null
  name: string | null
  description: string | null
  amount: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TransactionItemMaxAggregateOutputType = {
  id: string | null
  transactionId: string | null
  name: string | null
  description: string | null
  amount: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TransactionItemCountAggregateOutputType = {
  id: number
  transactionId: number
  name: number
  description: number
  amount: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type TransactionItemAvgAggregateInputType = {
  amount?: true
}

export type TransactionItemSumAggregateInputType = {
  amount?: true
}

export type TransactionItemMinAggregateInputType = {
  id?: true
  transactionId?: true
  name?: true
  description?: true
  amount?: true
  createdAt?: true
  updatedAt?: true
}

export type TransactionItemMaxAggregateInputType = {
  id?: true
  transactionId?: true
  name?: true
  description?: true
  amount?: true
  createdAt?: true
  updatedAt?: true
}

export type TransactionItemCountAggregateInputType = {
  id?: true
  transactionId?: true
  name?: true
  description?: true
  amount?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type TransactionItemAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TransactionItem to aggregate.
   */
  where?: Prisma.TransactionItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TransactionItems to fetch.
   */
  orderBy?: Prisma.TransactionItemOrderByWithRelationInput | Prisma.TransactionItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TransactionItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TransactionItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TransactionItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TransactionItems
  **/
  _count?: true | TransactionItemCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TransactionItemAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TransactionItemSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TransactionItemMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TransactionItemMaxAggregateInputType
}

export type GetTransactionItemAggregateType<T extends TransactionItemAggregateArgs> = {
      [P in keyof T & keyof AggregateTransactionItem]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTransactionItem[P]>
    : Prisma.GetScalarType<T[P], AggregateTransactionItem[P]>
}




export type TransactionItemGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TransactionItemWhereInput
  orderBy?: Prisma.TransactionItemOrderByWithAggregationInput | Prisma.TransactionItemOrderByWithAggregationInput[]
  by: Prisma.TransactionItemScalarFieldEnum[] | Prisma.TransactionItemScalarFieldEnum
  having?: Prisma.TransactionItemScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TransactionItemCountAggregateInputType | true
  _avg?: TransactionItemAvgAggregateInputType
  _sum?: TransactionItemSumAggregateInputType
  _min?: TransactionItemMinAggregateInputType
  _max?: TransactionItemMaxAggregateInputType
}

export type TransactionItemGroupByOutputType = {
  id: string
  transactionId: string
  name: string
  description: string | null
  amount: number
  createdAt: Date
  updatedAt: Date
  _count: TransactionItemCountAggregateOutputType | null
  _avg: TransactionItemAvgAggregateOutputType | null
  _sum: TransactionItemSumAggregateOutputType | null
  _min: TransactionItemMinAggregateOutputType | null
  _max: TransactionItemMaxAggregateOutputType | null
}

type GetTransactionItemGroupByPayload<T extends TransactionItemGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TransactionItemGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TransactionItemGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TransactionItemGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TransactionItemGroupByOutputType[P]>
      }
    >
  > 



export type TransactionItemWhereInput = {
  AND?: Prisma.TransactionItemWhereInput | Prisma.TransactionItemWhereInput[]
  OR?: Prisma.TransactionItemWhereInput[]
  NOT?: Prisma.TransactionItemWhereInput | Prisma.TransactionItemWhereInput[]
  id?: Prisma.UuidFilter<"TransactionItem"> | string
  transactionId?: Prisma.UuidFilter<"TransactionItem"> | string
  name?: Prisma.StringFilter<"TransactionItem"> | string
  description?: Prisma.StringNullableFilter<"TransactionItem"> | string | null
  amount?: Prisma.IntFilter<"TransactionItem"> | number
  createdAt?: Prisma.DateTimeFilter<"TransactionItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TransactionItem"> | Date | string
  transaction?: Prisma.XOR<Prisma.TransactionScalarRelationFilter, Prisma.TransactionWhereInput>
}

export type TransactionItemOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  transactionId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  transaction?: Prisma.TransactionOrderByWithRelationInput
}

export type TransactionItemWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TransactionItemWhereInput | Prisma.TransactionItemWhereInput[]
  OR?: Prisma.TransactionItemWhereInput[]
  NOT?: Prisma.TransactionItemWhereInput | Prisma.TransactionItemWhereInput[]
  transactionId?: Prisma.UuidFilter<"TransactionItem"> | string
  name?: Prisma.StringFilter<"TransactionItem"> | string
  description?: Prisma.StringNullableFilter<"TransactionItem"> | string | null
  amount?: Prisma.IntFilter<"TransactionItem"> | number
  createdAt?: Prisma.DateTimeFilter<"TransactionItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TransactionItem"> | Date | string
  transaction?: Prisma.XOR<Prisma.TransactionScalarRelationFilter, Prisma.TransactionWhereInput>
}, "id">

export type TransactionItemOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  transactionId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TransactionItemCountOrderByAggregateInput
  _avg?: Prisma.TransactionItemAvgOrderByAggregateInput
  _max?: Prisma.TransactionItemMaxOrderByAggregateInput
  _min?: Prisma.TransactionItemMinOrderByAggregateInput
  _sum?: Prisma.TransactionItemSumOrderByAggregateInput
}

export type TransactionItemScalarWhereWithAggregatesInput = {
  AND?: Prisma.TransactionItemScalarWhereWithAggregatesInput | Prisma.TransactionItemScalarWhereWithAggregatesInput[]
  OR?: Prisma.TransactionItemScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TransactionItemScalarWhereWithAggregatesInput | Prisma.TransactionItemScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"TransactionItem"> | string
  transactionId?: Prisma.UuidWithAggregatesFilter<"TransactionItem"> | string
  name?: Prisma.StringWithAggregatesFilter<"TransactionItem"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"TransactionItem"> | string | null
  amount?: Prisma.IntWithAggregatesFilter<"TransactionItem"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TransactionItem"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TransactionItem"> | Date | string
}

export type TransactionItemCreateInput = {
  id?: string
  name: string
  description?: string | null
  amount: number
  createdAt?: Date | string
  updatedAt?: Date | string
  transaction: Prisma.TransactionCreateNestedOneWithoutItemsInput
}

export type TransactionItemUncheckedCreateInput = {
  id?: string
  transactionId: string
  name: string
  description?: string | null
  amount: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TransactionItemUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transaction?: Prisma.TransactionUpdateOneRequiredWithoutItemsNestedInput
}

export type TransactionItemUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  transactionId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransactionItemCreateManyInput = {
  id?: string
  transactionId: string
  name: string
  description?: string | null
  amount: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TransactionItemUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransactionItemUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  transactionId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransactionItemListRelationFilter = {
  every?: Prisma.TransactionItemWhereInput
  some?: Prisma.TransactionItemWhereInput
  none?: Prisma.TransactionItemWhereInput
}

export type TransactionItemOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TransactionItemCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  transactionId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TransactionItemAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type TransactionItemMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  transactionId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TransactionItemMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  transactionId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TransactionItemSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type TransactionItemCreateNestedManyWithoutTransactionInput = {
  create?: Prisma.XOR<Prisma.TransactionItemCreateWithoutTransactionInput, Prisma.TransactionItemUncheckedCreateWithoutTransactionInput> | Prisma.TransactionItemCreateWithoutTransactionInput[] | Prisma.TransactionItemUncheckedCreateWithoutTransactionInput[]
  connectOrCreate?: Prisma.TransactionItemCreateOrConnectWithoutTransactionInput | Prisma.TransactionItemCreateOrConnectWithoutTransactionInput[]
  createMany?: Prisma.TransactionItemCreateManyTransactionInputEnvelope
  connect?: Prisma.TransactionItemWhereUniqueInput | Prisma.TransactionItemWhereUniqueInput[]
}

export type TransactionItemUncheckedCreateNestedManyWithoutTransactionInput = {
  create?: Prisma.XOR<Prisma.TransactionItemCreateWithoutTransactionInput, Prisma.TransactionItemUncheckedCreateWithoutTransactionInput> | Prisma.TransactionItemCreateWithoutTransactionInput[] | Prisma.TransactionItemUncheckedCreateWithoutTransactionInput[]
  connectOrCreate?: Prisma.TransactionItemCreateOrConnectWithoutTransactionInput | Prisma.TransactionItemCreateOrConnectWithoutTransactionInput[]
  createMany?: Prisma.TransactionItemCreateManyTransactionInputEnvelope
  connect?: Prisma.TransactionItemWhereUniqueInput | Prisma.TransactionItemWhereUniqueInput[]
}

export type TransactionItemUpdateManyWithoutTransactionNestedInput = {
  create?: Prisma.XOR<Prisma.TransactionItemCreateWithoutTransactionInput, Prisma.TransactionItemUncheckedCreateWithoutTransactionInput> | Prisma.TransactionItemCreateWithoutTransactionInput[] | Prisma.TransactionItemUncheckedCreateWithoutTransactionInput[]
  connectOrCreate?: Prisma.TransactionItemCreateOrConnectWithoutTransactionInput | Prisma.TransactionItemCreateOrConnectWithoutTransactionInput[]
  upsert?: Prisma.TransactionItemUpsertWithWhereUniqueWithoutTransactionInput | Prisma.TransactionItemUpsertWithWhereUniqueWithoutTransactionInput[]
  createMany?: Prisma.TransactionItemCreateManyTransactionInputEnvelope
  set?: Prisma.TransactionItemWhereUniqueInput | Prisma.TransactionItemWhereUniqueInput[]
  disconnect?: Prisma.TransactionItemWhereUniqueInput | Prisma.TransactionItemWhereUniqueInput[]
  delete?: Prisma.TransactionItemWhereUniqueInput | Prisma.TransactionItemWhereUniqueInput[]
  connect?: Prisma.TransactionItemWhereUniqueInput | Prisma.TransactionItemWhereUniqueInput[]
  update?: Prisma.TransactionItemUpdateWithWhereUniqueWithoutTransactionInput | Prisma.TransactionItemUpdateWithWhereUniqueWithoutTransactionInput[]
  updateMany?: Prisma.TransactionItemUpdateManyWithWhereWithoutTransactionInput | Prisma.TransactionItemUpdateManyWithWhereWithoutTransactionInput[]
  deleteMany?: Prisma.TransactionItemScalarWhereInput | Prisma.TransactionItemScalarWhereInput[]
}

export type TransactionItemUncheckedUpdateManyWithoutTransactionNestedInput = {
  create?: Prisma.XOR<Prisma.TransactionItemCreateWithoutTransactionInput, Prisma.TransactionItemUncheckedCreateWithoutTransactionInput> | Prisma.TransactionItemCreateWithoutTransactionInput[] | Prisma.TransactionItemUncheckedCreateWithoutTransactionInput[]
  connectOrCreate?: Prisma.TransactionItemCreateOrConnectWithoutTransactionInput | Prisma.TransactionItemCreateOrConnectWithoutTransactionInput[]
  upsert?: Prisma.TransactionItemUpsertWithWhereUniqueWithoutTransactionInput | Prisma.TransactionItemUpsertWithWhereUniqueWithoutTransactionInput[]
  createMany?: Prisma.TransactionItemCreateManyTransactionInputEnvelope
  set?: Prisma.TransactionItemWhereUniqueInput | Prisma.TransactionItemWhereUniqueInput[]
  disconnect?: Prisma.TransactionItemWhereUniqueInput | Prisma.TransactionItemWhereUniqueInput[]
  delete?: Prisma.TransactionItemWhereUniqueInput | Prisma.TransactionItemWhereUniqueInput[]
  connect?: Prisma.TransactionItemWhereUniqueInput | Prisma.TransactionItemWhereUniqueInput[]
  update?: Prisma.TransactionItemUpdateWithWhereUniqueWithoutTransactionInput | Prisma.TransactionItemUpdateWithWhereUniqueWithoutTransactionInput[]
  updateMany?: Prisma.TransactionItemUpdateManyWithWhereWithoutTransactionInput | Prisma.TransactionItemUpdateManyWithWhereWithoutTransactionInput[]
  deleteMany?: Prisma.TransactionItemScalarWhereInput | Prisma.TransactionItemScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type TransactionItemCreateWithoutTransactionInput = {
  id?: string
  name: string
  description?: string | null
  amount: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TransactionItemUncheckedCreateWithoutTransactionInput = {
  id?: string
  name: string
  description?: string | null
  amount: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TransactionItemCreateOrConnectWithoutTransactionInput = {
  where: Prisma.TransactionItemWhereUniqueInput
  create: Prisma.XOR<Prisma.TransactionItemCreateWithoutTransactionInput, Prisma.TransactionItemUncheckedCreateWithoutTransactionInput>
}

export type TransactionItemCreateManyTransactionInputEnvelope = {
  data: Prisma.TransactionItemCreateManyTransactionInput | Prisma.TransactionItemCreateManyTransactionInput[]
  skipDuplicates?: boolean
}

export type TransactionItemUpsertWithWhereUniqueWithoutTransactionInput = {
  where: Prisma.TransactionItemWhereUniqueInput
  update: Prisma.XOR<Prisma.TransactionItemUpdateWithoutTransactionInput, Prisma.TransactionItemUncheckedUpdateWithoutTransactionInput>
  create: Prisma.XOR<Prisma.TransactionItemCreateWithoutTransactionInput, Prisma.TransactionItemUncheckedCreateWithoutTransactionInput>
}

export type TransactionItemUpdateWithWhereUniqueWithoutTransactionInput = {
  where: Prisma.TransactionItemWhereUniqueInput
  data: Prisma.XOR<Prisma.TransactionItemUpdateWithoutTransactionInput, Prisma.TransactionItemUncheckedUpdateWithoutTransactionInput>
}

export type TransactionItemUpdateManyWithWhereWithoutTransactionInput = {
  where: Prisma.TransactionItemScalarWhereInput
  data: Prisma.XOR<Prisma.TransactionItemUpdateManyMutationInput, Prisma.TransactionItemUncheckedUpdateManyWithoutTransactionInput>
}

export type TransactionItemScalarWhereInput = {
  AND?: Prisma.TransactionItemScalarWhereInput | Prisma.TransactionItemScalarWhereInput[]
  OR?: Prisma.TransactionItemScalarWhereInput[]
  NOT?: Prisma.TransactionItemScalarWhereInput | Prisma.TransactionItemScalarWhereInput[]
  id?: Prisma.UuidFilter<"TransactionItem"> | string
  transactionId?: Prisma.UuidFilter<"TransactionItem"> | string
  name?: Prisma.StringFilter<"TransactionItem"> | string
  description?: Prisma.StringNullableFilter<"TransactionItem"> | string | null
  amount?: Prisma.IntFilter<"TransactionItem"> | number
  createdAt?: Prisma.DateTimeFilter<"TransactionItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TransactionItem"> | Date | string
}

export type TransactionItemCreateManyTransactionInput = {
  id?: string
  name: string
  description?: string | null
  amount: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TransactionItemUpdateWithoutTransactionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransactionItemUncheckedUpdateWithoutTransactionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransactionItemUncheckedUpdateManyWithoutTransactionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type TransactionItemSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  transactionId?: boolean
  name?: boolean
  description?: boolean
  amount?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  transaction?: boolean | Prisma.TransactionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["transactionItem"]>

export type TransactionItemSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  transactionId?: boolean
  name?: boolean
  description?: boolean
  amount?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  transaction?: boolean | Prisma.TransactionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["transactionItem"]>

export type TransactionItemSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  transactionId?: boolean
  name?: boolean
  description?: boolean
  amount?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  transaction?: boolean | Prisma.TransactionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["transactionItem"]>

export type TransactionItemSelectScalar = {
  id?: boolean
  transactionId?: boolean
  name?: boolean
  description?: boolean
  amount?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type TransactionItemOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "transactionId" | "name" | "description" | "amount" | "createdAt" | "updatedAt", ExtArgs["result"]["transactionItem"]>
export type TransactionItemInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transaction?: boolean | Prisma.TransactionDefaultArgs<ExtArgs>
}
export type TransactionItemIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transaction?: boolean | Prisma.TransactionDefaultArgs<ExtArgs>
}
export type TransactionItemIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transaction?: boolean | Prisma.TransactionDefaultArgs<ExtArgs>
}

export type $TransactionItemPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TransactionItem"
  objects: {
    transaction: Prisma.$TransactionPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    transactionId: string
    name: string
    description: string | null
    amount: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["transactionItem"]>
  composites: {}
}

export type TransactionItemGetPayload<S extends boolean | null | undefined | TransactionItemDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TransactionItemPayload, S>

export type TransactionItemCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TransactionItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TransactionItemCountAggregateInputType | true
  }

export interface TransactionItemDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TransactionItem'], meta: { name: 'TransactionItem' } }
  /**
   * Find zero or one TransactionItem that matches the filter.
   * @param {TransactionItemFindUniqueArgs} args - Arguments to find a TransactionItem
   * @example
   * // Get one TransactionItem
   * const transactionItem = await prisma.transactionItem.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TransactionItemFindUniqueArgs>(args: Prisma.SelectSubset<T, TransactionItemFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TransactionItemClient<runtime.Types.Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TransactionItem that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TransactionItemFindUniqueOrThrowArgs} args - Arguments to find a TransactionItem
   * @example
   * // Get one TransactionItem
   * const transactionItem = await prisma.transactionItem.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TransactionItemFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TransactionItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TransactionItemClient<runtime.Types.Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TransactionItem that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionItemFindFirstArgs} args - Arguments to find a TransactionItem
   * @example
   * // Get one TransactionItem
   * const transactionItem = await prisma.transactionItem.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TransactionItemFindFirstArgs>(args?: Prisma.SelectSubset<T, TransactionItemFindFirstArgs<ExtArgs>>): Prisma.Prisma__TransactionItemClient<runtime.Types.Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TransactionItem that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionItemFindFirstOrThrowArgs} args - Arguments to find a TransactionItem
   * @example
   * // Get one TransactionItem
   * const transactionItem = await prisma.transactionItem.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TransactionItemFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TransactionItemFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TransactionItemClient<runtime.Types.Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TransactionItems that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionItemFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TransactionItems
   * const transactionItems = await prisma.transactionItem.findMany()
   * 
   * // Get first 10 TransactionItems
   * const transactionItems = await prisma.transactionItem.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const transactionItemWithIdOnly = await prisma.transactionItem.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TransactionItemFindManyArgs>(args?: Prisma.SelectSubset<T, TransactionItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TransactionItem.
   * @param {TransactionItemCreateArgs} args - Arguments to create a TransactionItem.
   * @example
   * // Create one TransactionItem
   * const TransactionItem = await prisma.transactionItem.create({
   *   data: {
   *     // ... data to create a TransactionItem
   *   }
   * })
   * 
   */
  create<T extends TransactionItemCreateArgs>(args: Prisma.SelectSubset<T, TransactionItemCreateArgs<ExtArgs>>): Prisma.Prisma__TransactionItemClient<runtime.Types.Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TransactionItems.
   * @param {TransactionItemCreateManyArgs} args - Arguments to create many TransactionItems.
   * @example
   * // Create many TransactionItems
   * const transactionItem = await prisma.transactionItem.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TransactionItemCreateManyArgs>(args?: Prisma.SelectSubset<T, TransactionItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TransactionItems and returns the data saved in the database.
   * @param {TransactionItemCreateManyAndReturnArgs} args - Arguments to create many TransactionItems.
   * @example
   * // Create many TransactionItems
   * const transactionItem = await prisma.transactionItem.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TransactionItems and only return the `id`
   * const transactionItemWithIdOnly = await prisma.transactionItem.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TransactionItemCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TransactionItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TransactionItem.
   * @param {TransactionItemDeleteArgs} args - Arguments to delete one TransactionItem.
   * @example
   * // Delete one TransactionItem
   * const TransactionItem = await prisma.transactionItem.delete({
   *   where: {
   *     // ... filter to delete one TransactionItem
   *   }
   * })
   * 
   */
  delete<T extends TransactionItemDeleteArgs>(args: Prisma.SelectSubset<T, TransactionItemDeleteArgs<ExtArgs>>): Prisma.Prisma__TransactionItemClient<runtime.Types.Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TransactionItem.
   * @param {TransactionItemUpdateArgs} args - Arguments to update one TransactionItem.
   * @example
   * // Update one TransactionItem
   * const transactionItem = await prisma.transactionItem.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TransactionItemUpdateArgs>(args: Prisma.SelectSubset<T, TransactionItemUpdateArgs<ExtArgs>>): Prisma.Prisma__TransactionItemClient<runtime.Types.Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TransactionItems.
   * @param {TransactionItemDeleteManyArgs} args - Arguments to filter TransactionItems to delete.
   * @example
   * // Delete a few TransactionItems
   * const { count } = await prisma.transactionItem.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TransactionItemDeleteManyArgs>(args?: Prisma.SelectSubset<T, TransactionItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TransactionItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionItemUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TransactionItems
   * const transactionItem = await prisma.transactionItem.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TransactionItemUpdateManyArgs>(args: Prisma.SelectSubset<T, TransactionItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TransactionItems and returns the data updated in the database.
   * @param {TransactionItemUpdateManyAndReturnArgs} args - Arguments to update many TransactionItems.
   * @example
   * // Update many TransactionItems
   * const transactionItem = await prisma.transactionItem.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TransactionItems and only return the `id`
   * const transactionItemWithIdOnly = await prisma.transactionItem.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TransactionItemUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TransactionItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TransactionItem.
   * @param {TransactionItemUpsertArgs} args - Arguments to update or create a TransactionItem.
   * @example
   * // Update or create a TransactionItem
   * const transactionItem = await prisma.transactionItem.upsert({
   *   create: {
   *     // ... data to create a TransactionItem
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TransactionItem we want to update
   *   }
   * })
   */
  upsert<T extends TransactionItemUpsertArgs>(args: Prisma.SelectSubset<T, TransactionItemUpsertArgs<ExtArgs>>): Prisma.Prisma__TransactionItemClient<runtime.Types.Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TransactionItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionItemCountArgs} args - Arguments to filter TransactionItems to count.
   * @example
   * // Count the number of TransactionItems
   * const count = await prisma.transactionItem.count({
   *   where: {
   *     // ... the filter for the TransactionItems we want to count
   *   }
   * })
  **/
  count<T extends TransactionItemCountArgs>(
    args?: Prisma.Subset<T, TransactionItemCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TransactionItemCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TransactionItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TransactionItemAggregateArgs>(args: Prisma.Subset<T, TransactionItemAggregateArgs>): Prisma.PrismaPromise<GetTransactionItemAggregateType<T>>

  /**
   * Group by TransactionItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionItemGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TransactionItemGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TransactionItemGroupByArgs['orderBy'] }
      : { orderBy?: TransactionItemGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TransactionItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TransactionItem model
 */
readonly fields: TransactionItemFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TransactionItem.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TransactionItemClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  transaction<T extends Prisma.TransactionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TransactionDefaultArgs<ExtArgs>>): Prisma.Prisma__TransactionClient<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TransactionItem model
 */
export interface TransactionItemFieldRefs {
  readonly id: Prisma.FieldRef<"TransactionItem", 'String'>
  readonly transactionId: Prisma.FieldRef<"TransactionItem", 'String'>
  readonly name: Prisma.FieldRef<"TransactionItem", 'String'>
  readonly description: Prisma.FieldRef<"TransactionItem", 'String'>
  readonly amount: Prisma.FieldRef<"TransactionItem", 'Int'>
  readonly createdAt: Prisma.FieldRef<"TransactionItem", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"TransactionItem", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TransactionItem findUnique
 */
export type TransactionItemFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionItem
   */
  select?: Prisma.TransactionItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionItem
   */
  omit?: Prisma.TransactionItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionItemInclude<ExtArgs> | null
  /**
   * Filter, which TransactionItem to fetch.
   */
  where: Prisma.TransactionItemWhereUniqueInput
}

/**
 * TransactionItem findUniqueOrThrow
 */
export type TransactionItemFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionItem
   */
  select?: Prisma.TransactionItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionItem
   */
  omit?: Prisma.TransactionItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionItemInclude<ExtArgs> | null
  /**
   * Filter, which TransactionItem to fetch.
   */
  where: Prisma.TransactionItemWhereUniqueInput
}

/**
 * TransactionItem findFirst
 */
export type TransactionItemFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionItem
   */
  select?: Prisma.TransactionItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionItem
   */
  omit?: Prisma.TransactionItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionItemInclude<ExtArgs> | null
  /**
   * Filter, which TransactionItem to fetch.
   */
  where?: Prisma.TransactionItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TransactionItems to fetch.
   */
  orderBy?: Prisma.TransactionItemOrderByWithRelationInput | Prisma.TransactionItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TransactionItems.
   */
  cursor?: Prisma.TransactionItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TransactionItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TransactionItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TransactionItems.
   */
  distinct?: Prisma.TransactionItemScalarFieldEnum | Prisma.TransactionItemScalarFieldEnum[]
}

/**
 * TransactionItem findFirstOrThrow
 */
export type TransactionItemFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionItem
   */
  select?: Prisma.TransactionItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionItem
   */
  omit?: Prisma.TransactionItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionItemInclude<ExtArgs> | null
  /**
   * Filter, which TransactionItem to fetch.
   */
  where?: Prisma.TransactionItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TransactionItems to fetch.
   */
  orderBy?: Prisma.TransactionItemOrderByWithRelationInput | Prisma.TransactionItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TransactionItems.
   */
  cursor?: Prisma.TransactionItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TransactionItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TransactionItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TransactionItems.
   */
  distinct?: Prisma.TransactionItemScalarFieldEnum | Prisma.TransactionItemScalarFieldEnum[]
}

/**
 * TransactionItem findMany
 */
export type TransactionItemFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionItem
   */
  select?: Prisma.TransactionItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionItem
   */
  omit?: Prisma.TransactionItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionItemInclude<ExtArgs> | null
  /**
   * Filter, which TransactionItems to fetch.
   */
  where?: Prisma.TransactionItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TransactionItems to fetch.
   */
  orderBy?: Prisma.TransactionItemOrderByWithRelationInput | Prisma.TransactionItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TransactionItems.
   */
  cursor?: Prisma.TransactionItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TransactionItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TransactionItems.
   */
  skip?: number
  distinct?: Prisma.TransactionItemScalarFieldEnum | Prisma.TransactionItemScalarFieldEnum[]
}

/**
 * TransactionItem create
 */
export type TransactionItemCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionItem
   */
  select?: Prisma.TransactionItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionItem
   */
  omit?: Prisma.TransactionItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionItemInclude<ExtArgs> | null
  /**
   * The data needed to create a TransactionItem.
   */
  data: Prisma.XOR<Prisma.TransactionItemCreateInput, Prisma.TransactionItemUncheckedCreateInput>
}

/**
 * TransactionItem createMany
 */
export type TransactionItemCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TransactionItems.
   */
  data: Prisma.TransactionItemCreateManyInput | Prisma.TransactionItemCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TransactionItem createManyAndReturn
 */
export type TransactionItemCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionItem
   */
  select?: Prisma.TransactionItemSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionItem
   */
  omit?: Prisma.TransactionItemOmit<ExtArgs> | null
  /**
   * The data used to create many TransactionItems.
   */
  data: Prisma.TransactionItemCreateManyInput | Prisma.TransactionItemCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionItemIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TransactionItem update
 */
export type TransactionItemUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionItem
   */
  select?: Prisma.TransactionItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionItem
   */
  omit?: Prisma.TransactionItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionItemInclude<ExtArgs> | null
  /**
   * The data needed to update a TransactionItem.
   */
  data: Prisma.XOR<Prisma.TransactionItemUpdateInput, Prisma.TransactionItemUncheckedUpdateInput>
  /**
   * Choose, which TransactionItem to update.
   */
  where: Prisma.TransactionItemWhereUniqueInput
}

/**
 * TransactionItem updateMany
 */
export type TransactionItemUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TransactionItems.
   */
  data: Prisma.XOR<Prisma.TransactionItemUpdateManyMutationInput, Prisma.TransactionItemUncheckedUpdateManyInput>
  /**
   * Filter which TransactionItems to update
   */
  where?: Prisma.TransactionItemWhereInput
  /**
   * Limit how many TransactionItems to update.
   */
  limit?: number
}

/**
 * TransactionItem updateManyAndReturn
 */
export type TransactionItemUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionItem
   */
  select?: Prisma.TransactionItemSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionItem
   */
  omit?: Prisma.TransactionItemOmit<ExtArgs> | null
  /**
   * The data used to update TransactionItems.
   */
  data: Prisma.XOR<Prisma.TransactionItemUpdateManyMutationInput, Prisma.TransactionItemUncheckedUpdateManyInput>
  /**
   * Filter which TransactionItems to update
   */
  where?: Prisma.TransactionItemWhereInput
  /**
   * Limit how many TransactionItems to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionItemIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TransactionItem upsert
 */
export type TransactionItemUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionItem
   */
  select?: Prisma.TransactionItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionItem
   */
  omit?: Prisma.TransactionItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionItemInclude<ExtArgs> | null
  /**
   * The filter to search for the TransactionItem to update in case it exists.
   */
  where: Prisma.TransactionItemWhereUniqueInput
  /**
   * In case the TransactionItem found by the `where` argument doesn't exist, create a new TransactionItem with this data.
   */
  create: Prisma.XOR<Prisma.TransactionItemCreateInput, Prisma.TransactionItemUncheckedCreateInput>
  /**
   * In case the TransactionItem was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TransactionItemUpdateInput, Prisma.TransactionItemUncheckedUpdateInput>
}

/**
 * TransactionItem delete
 */
export type TransactionItemDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionItem
   */
  select?: Prisma.TransactionItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionItem
   */
  omit?: Prisma.TransactionItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionItemInclude<ExtArgs> | null
  /**
   * Filter which TransactionItem to delete.
   */
  where: Prisma.TransactionItemWhereUniqueInput
}

/**
 * TransactionItem deleteMany
 */
export type TransactionItemDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TransactionItems to delete
   */
  where?: Prisma.TransactionItemWhereInput
  /**
   * Limit how many TransactionItems to delete.
   */
  limit?: number
}

/**
 * TransactionItem without action
 */
export type TransactionItemDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionItem
   */
  select?: Prisma.TransactionItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionItem
   */
  omit?: Prisma.TransactionItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionItemInclude<ExtArgs> | null
}
