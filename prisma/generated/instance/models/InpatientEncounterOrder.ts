
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `InpatientEncounterOrder` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model InpatientEncounterOrder
 * 
 */
export type InpatientEncounterOrderModel = runtime.Types.Result.DefaultSelection<Prisma.$InpatientEncounterOrderPayload>

export type AggregateInpatientEncounterOrder = {
  _count: InpatientEncounterOrderCountAggregateOutputType | null
  _min: InpatientEncounterOrderMinAggregateOutputType | null
  _max: InpatientEncounterOrderMaxAggregateOutputType | null
}

export type InpatientEncounterOrderMinAggregateOutputType = {
  id: string | null
  encounterId: string | null
  type: $Enums.InpatientEncounterOrderType | null
  order: string | null
  status: $Enums.InpatientEncounterOrderStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InpatientEncounterOrderMaxAggregateOutputType = {
  id: string | null
  encounterId: string | null
  type: $Enums.InpatientEncounterOrderType | null
  order: string | null
  status: $Enums.InpatientEncounterOrderStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InpatientEncounterOrderCountAggregateOutputType = {
  id: number
  encounterId: number
  type: number
  order: number
  status: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type InpatientEncounterOrderMinAggregateInputType = {
  id?: true
  encounterId?: true
  type?: true
  order?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type InpatientEncounterOrderMaxAggregateInputType = {
  id?: true
  encounterId?: true
  type?: true
  order?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type InpatientEncounterOrderCountAggregateInputType = {
  id?: true
  encounterId?: true
  type?: true
  order?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type InpatientEncounterOrderAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InpatientEncounterOrder to aggregate.
   */
  where?: Prisma.InpatientEncounterOrderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InpatientEncounterOrders to fetch.
   */
  orderBy?: Prisma.InpatientEncounterOrderOrderByWithRelationInput | Prisma.InpatientEncounterOrderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.InpatientEncounterOrderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InpatientEncounterOrders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InpatientEncounterOrders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned InpatientEncounterOrders
  **/
  _count?: true | InpatientEncounterOrderCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: InpatientEncounterOrderMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: InpatientEncounterOrderMaxAggregateInputType
}

export type GetInpatientEncounterOrderAggregateType<T extends InpatientEncounterOrderAggregateArgs> = {
      [P in keyof T & keyof AggregateInpatientEncounterOrder]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInpatientEncounterOrder[P]>
    : Prisma.GetScalarType<T[P], AggregateInpatientEncounterOrder[P]>
}




export type InpatientEncounterOrderGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InpatientEncounterOrderWhereInput
  orderBy?: Prisma.InpatientEncounterOrderOrderByWithAggregationInput | Prisma.InpatientEncounterOrderOrderByWithAggregationInput[]
  by: Prisma.InpatientEncounterOrderScalarFieldEnum[] | Prisma.InpatientEncounterOrderScalarFieldEnum
  having?: Prisma.InpatientEncounterOrderScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: InpatientEncounterOrderCountAggregateInputType | true
  _min?: InpatientEncounterOrderMinAggregateInputType
  _max?: InpatientEncounterOrderMaxAggregateInputType
}

export type InpatientEncounterOrderGroupByOutputType = {
  id: string
  encounterId: string
  type: $Enums.InpatientEncounterOrderType
  order: string
  status: $Enums.InpatientEncounterOrderStatus
  createdAt: Date
  updatedAt: Date
  _count: InpatientEncounterOrderCountAggregateOutputType | null
  _min: InpatientEncounterOrderMinAggregateOutputType | null
  _max: InpatientEncounterOrderMaxAggregateOutputType | null
}

type GetInpatientEncounterOrderGroupByPayload<T extends InpatientEncounterOrderGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InpatientEncounterOrderGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof InpatientEncounterOrderGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InpatientEncounterOrderGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InpatientEncounterOrderGroupByOutputType[P]>
      }
    >
  >



export type InpatientEncounterOrderWhereInput = {
  AND?: Prisma.InpatientEncounterOrderWhereInput | Prisma.InpatientEncounterOrderWhereInput[]
  OR?: Prisma.InpatientEncounterOrderWhereInput[]
  NOT?: Prisma.InpatientEncounterOrderWhereInput | Prisma.InpatientEncounterOrderWhereInput[]
  id?: Prisma.UuidFilter<"InpatientEncounterOrder"> | string
  encounterId?: Prisma.UuidFilter<"InpatientEncounterOrder"> | string
  type?: Prisma.EnumInpatientEncounterOrderTypeFilter<"InpatientEncounterOrder"> | $Enums.InpatientEncounterOrderType
  order?: Prisma.StringFilter<"InpatientEncounterOrder"> | string
  status?: Prisma.EnumInpatientEncounterOrderStatusFilter<"InpatientEncounterOrder"> | $Enums.InpatientEncounterOrderStatus
  createdAt?: Prisma.DateTimeFilter<"InpatientEncounterOrder"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InpatientEncounterOrder"> | Date | string
  encounter?: Prisma.XOR<Prisma.InpatientEncounterScalarRelationFilter, Prisma.InpatientEncounterWhereInput>
}

export type InpatientEncounterOrderOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  encounterId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  order?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  encounter?: Prisma.InpatientEncounterOrderByWithRelationInput
}

export type InpatientEncounterOrderWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.InpatientEncounterOrderWhereInput | Prisma.InpatientEncounterOrderWhereInput[]
  OR?: Prisma.InpatientEncounterOrderWhereInput[]
  NOT?: Prisma.InpatientEncounterOrderWhereInput | Prisma.InpatientEncounterOrderWhereInput[]
  encounterId?: Prisma.UuidFilter<"InpatientEncounterOrder"> | string
  type?: Prisma.EnumInpatientEncounterOrderTypeFilter<"InpatientEncounterOrder"> | $Enums.InpatientEncounterOrderType
  order?: Prisma.StringFilter<"InpatientEncounterOrder"> | string
  status?: Prisma.EnumInpatientEncounterOrderStatusFilter<"InpatientEncounterOrder"> | $Enums.InpatientEncounterOrderStatus
  createdAt?: Prisma.DateTimeFilter<"InpatientEncounterOrder"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InpatientEncounterOrder"> | Date | string
  encounter?: Prisma.XOR<Prisma.InpatientEncounterScalarRelationFilter, Prisma.InpatientEncounterWhereInput>
}, "id">

export type InpatientEncounterOrderOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  encounterId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  order?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.InpatientEncounterOrderCountOrderByAggregateInput
  _max?: Prisma.InpatientEncounterOrderMaxOrderByAggregateInput
  _min?: Prisma.InpatientEncounterOrderMinOrderByAggregateInput
}

export type InpatientEncounterOrderScalarWhereWithAggregatesInput = {
  AND?: Prisma.InpatientEncounterOrderScalarWhereWithAggregatesInput | Prisma.InpatientEncounterOrderScalarWhereWithAggregatesInput[]
  OR?: Prisma.InpatientEncounterOrderScalarWhereWithAggregatesInput[]
  NOT?: Prisma.InpatientEncounterOrderScalarWhereWithAggregatesInput | Prisma.InpatientEncounterOrderScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"InpatientEncounterOrder"> | string
  encounterId?: Prisma.UuidWithAggregatesFilter<"InpatientEncounterOrder"> | string
  type?: Prisma.EnumInpatientEncounterOrderTypeWithAggregatesFilter<"InpatientEncounterOrder"> | $Enums.InpatientEncounterOrderType
  order?: Prisma.StringWithAggregatesFilter<"InpatientEncounterOrder"> | string
  status?: Prisma.EnumInpatientEncounterOrderStatusWithAggregatesFilter<"InpatientEncounterOrder"> | $Enums.InpatientEncounterOrderStatus
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"InpatientEncounterOrder"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"InpatientEncounterOrder"> | Date | string
}

export type InpatientEncounterOrderCreateInput = {
  id?: string
  type: $Enums.InpatientEncounterOrderType
  order: string
  status: $Enums.InpatientEncounterOrderStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  encounter: Prisma.InpatientEncounterCreateNestedOneWithoutOrdersInput
}

export type InpatientEncounterOrderUncheckedCreateInput = {
  id?: string
  encounterId: string
  type: $Enums.InpatientEncounterOrderType
  order: string
  status: $Enums.InpatientEncounterOrderStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InpatientEncounterOrderUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumInpatientEncounterOrderTypeFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderType
  order?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumInpatientEncounterOrderStatusFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  encounter?: Prisma.InpatientEncounterUpdateOneRequiredWithoutOrdersNestedInput
}

export type InpatientEncounterOrderUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  encounterId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumInpatientEncounterOrderTypeFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderType
  order?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumInpatientEncounterOrderStatusFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InpatientEncounterOrderCreateManyInput = {
  id?: string
  encounterId: string
  type: $Enums.InpatientEncounterOrderType
  order: string
  status: $Enums.InpatientEncounterOrderStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InpatientEncounterOrderUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumInpatientEncounterOrderTypeFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderType
  order?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumInpatientEncounterOrderStatusFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InpatientEncounterOrderUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  encounterId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumInpatientEncounterOrderTypeFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderType
  order?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumInpatientEncounterOrderStatusFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InpatientEncounterOrderListRelationFilter = {
  every?: Prisma.InpatientEncounterOrderWhereInput
  some?: Prisma.InpatientEncounterOrderWhereInput
  none?: Prisma.InpatientEncounterOrderWhereInput
}

export type InpatientEncounterOrderOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type InpatientEncounterOrderCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  encounterId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  order?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InpatientEncounterOrderMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  encounterId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  order?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InpatientEncounterOrderMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  encounterId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  order?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InpatientEncounterOrderCreateNestedManyWithoutEncounterInput = {
  create?: Prisma.XOR<Prisma.InpatientEncounterOrderCreateWithoutEncounterInput, Prisma.InpatientEncounterOrderUncheckedCreateWithoutEncounterInput> | Prisma.InpatientEncounterOrderCreateWithoutEncounterInput[] | Prisma.InpatientEncounterOrderUncheckedCreateWithoutEncounterInput[]
  connectOrCreate?: Prisma.InpatientEncounterOrderCreateOrConnectWithoutEncounterInput | Prisma.InpatientEncounterOrderCreateOrConnectWithoutEncounterInput[]
  createMany?: Prisma.InpatientEncounterOrderCreateManyEncounterInputEnvelope
  connect?: Prisma.InpatientEncounterOrderWhereUniqueInput | Prisma.InpatientEncounterOrderWhereUniqueInput[]
}

export type InpatientEncounterOrderUncheckedCreateNestedManyWithoutEncounterInput = {
  create?: Prisma.XOR<Prisma.InpatientEncounterOrderCreateWithoutEncounterInput, Prisma.InpatientEncounterOrderUncheckedCreateWithoutEncounterInput> | Prisma.InpatientEncounterOrderCreateWithoutEncounterInput[] | Prisma.InpatientEncounterOrderUncheckedCreateWithoutEncounterInput[]
  connectOrCreate?: Prisma.InpatientEncounterOrderCreateOrConnectWithoutEncounterInput | Prisma.InpatientEncounterOrderCreateOrConnectWithoutEncounterInput[]
  createMany?: Prisma.InpatientEncounterOrderCreateManyEncounterInputEnvelope
  connect?: Prisma.InpatientEncounterOrderWhereUniqueInput | Prisma.InpatientEncounterOrderWhereUniqueInput[]
}

export type InpatientEncounterOrderUpdateManyWithoutEncounterNestedInput = {
  create?: Prisma.XOR<Prisma.InpatientEncounterOrderCreateWithoutEncounterInput, Prisma.InpatientEncounterOrderUncheckedCreateWithoutEncounterInput> | Prisma.InpatientEncounterOrderCreateWithoutEncounterInput[] | Prisma.InpatientEncounterOrderUncheckedCreateWithoutEncounterInput[]
  connectOrCreate?: Prisma.InpatientEncounterOrderCreateOrConnectWithoutEncounterInput | Prisma.InpatientEncounterOrderCreateOrConnectWithoutEncounterInput[]
  upsert?: Prisma.InpatientEncounterOrderUpsertWithWhereUniqueWithoutEncounterInput | Prisma.InpatientEncounterOrderUpsertWithWhereUniqueWithoutEncounterInput[]
  createMany?: Prisma.InpatientEncounterOrderCreateManyEncounterInputEnvelope
  set?: Prisma.InpatientEncounterOrderWhereUniqueInput | Prisma.InpatientEncounterOrderWhereUniqueInput[]
  disconnect?: Prisma.InpatientEncounterOrderWhereUniqueInput | Prisma.InpatientEncounterOrderWhereUniqueInput[]
  delete?: Prisma.InpatientEncounterOrderWhereUniqueInput | Prisma.InpatientEncounterOrderWhereUniqueInput[]
  connect?: Prisma.InpatientEncounterOrderWhereUniqueInput | Prisma.InpatientEncounterOrderWhereUniqueInput[]
  update?: Prisma.InpatientEncounterOrderUpdateWithWhereUniqueWithoutEncounterInput | Prisma.InpatientEncounterOrderUpdateWithWhereUniqueWithoutEncounterInput[]
  updateMany?: Prisma.InpatientEncounterOrderUpdateManyWithWhereWithoutEncounterInput | Prisma.InpatientEncounterOrderUpdateManyWithWhereWithoutEncounterInput[]
  deleteMany?: Prisma.InpatientEncounterOrderScalarWhereInput | Prisma.InpatientEncounterOrderScalarWhereInput[]
}

export type InpatientEncounterOrderUncheckedUpdateManyWithoutEncounterNestedInput = {
  create?: Prisma.XOR<Prisma.InpatientEncounterOrderCreateWithoutEncounterInput, Prisma.InpatientEncounterOrderUncheckedCreateWithoutEncounterInput> | Prisma.InpatientEncounterOrderCreateWithoutEncounterInput[] | Prisma.InpatientEncounterOrderUncheckedCreateWithoutEncounterInput[]
  connectOrCreate?: Prisma.InpatientEncounterOrderCreateOrConnectWithoutEncounterInput | Prisma.InpatientEncounterOrderCreateOrConnectWithoutEncounterInput[]
  upsert?: Prisma.InpatientEncounterOrderUpsertWithWhereUniqueWithoutEncounterInput | Prisma.InpatientEncounterOrderUpsertWithWhereUniqueWithoutEncounterInput[]
  createMany?: Prisma.InpatientEncounterOrderCreateManyEncounterInputEnvelope
  set?: Prisma.InpatientEncounterOrderWhereUniqueInput | Prisma.InpatientEncounterOrderWhereUniqueInput[]
  disconnect?: Prisma.InpatientEncounterOrderWhereUniqueInput | Prisma.InpatientEncounterOrderWhereUniqueInput[]
  delete?: Prisma.InpatientEncounterOrderWhereUniqueInput | Prisma.InpatientEncounterOrderWhereUniqueInput[]
  connect?: Prisma.InpatientEncounterOrderWhereUniqueInput | Prisma.InpatientEncounterOrderWhereUniqueInput[]
  update?: Prisma.InpatientEncounterOrderUpdateWithWhereUniqueWithoutEncounterInput | Prisma.InpatientEncounterOrderUpdateWithWhereUniqueWithoutEncounterInput[]
  updateMany?: Prisma.InpatientEncounterOrderUpdateManyWithWhereWithoutEncounterInput | Prisma.InpatientEncounterOrderUpdateManyWithWhereWithoutEncounterInput[]
  deleteMany?: Prisma.InpatientEncounterOrderScalarWhereInput | Prisma.InpatientEncounterOrderScalarWhereInput[]
}

export type EnumInpatientEncounterOrderTypeFieldUpdateOperationsInput = {
  set?: $Enums.InpatientEncounterOrderType
}

export type EnumInpatientEncounterOrderStatusFieldUpdateOperationsInput = {
  set?: $Enums.InpatientEncounterOrderStatus
}

export type InpatientEncounterOrderCreateWithoutEncounterInput = {
  id?: string
  type: $Enums.InpatientEncounterOrderType
  order: string
  status: $Enums.InpatientEncounterOrderStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InpatientEncounterOrderUncheckedCreateWithoutEncounterInput = {
  id?: string
  type: $Enums.InpatientEncounterOrderType
  order: string
  status: $Enums.InpatientEncounterOrderStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InpatientEncounterOrderCreateOrConnectWithoutEncounterInput = {
  where: Prisma.InpatientEncounterOrderWhereUniqueInput
  create: Prisma.XOR<Prisma.InpatientEncounterOrderCreateWithoutEncounterInput, Prisma.InpatientEncounterOrderUncheckedCreateWithoutEncounterInput>
}

export type InpatientEncounterOrderCreateManyEncounterInputEnvelope = {
  data: Prisma.InpatientEncounterOrderCreateManyEncounterInput | Prisma.InpatientEncounterOrderCreateManyEncounterInput[]
  skipDuplicates?: boolean
}

export type InpatientEncounterOrderUpsertWithWhereUniqueWithoutEncounterInput = {
  where: Prisma.InpatientEncounterOrderWhereUniqueInput
  update: Prisma.XOR<Prisma.InpatientEncounterOrderUpdateWithoutEncounterInput, Prisma.InpatientEncounterOrderUncheckedUpdateWithoutEncounterInput>
  create: Prisma.XOR<Prisma.InpatientEncounterOrderCreateWithoutEncounterInput, Prisma.InpatientEncounterOrderUncheckedCreateWithoutEncounterInput>
}

export type InpatientEncounterOrderUpdateWithWhereUniqueWithoutEncounterInput = {
  where: Prisma.InpatientEncounterOrderWhereUniqueInput
  data: Prisma.XOR<Prisma.InpatientEncounterOrderUpdateWithoutEncounterInput, Prisma.InpatientEncounterOrderUncheckedUpdateWithoutEncounterInput>
}

export type InpatientEncounterOrderUpdateManyWithWhereWithoutEncounterInput = {
  where: Prisma.InpatientEncounterOrderScalarWhereInput
  data: Prisma.XOR<Prisma.InpatientEncounterOrderUpdateManyMutationInput, Prisma.InpatientEncounterOrderUncheckedUpdateManyWithoutEncounterInput>
}

export type InpatientEncounterOrderScalarWhereInput = {
  AND?: Prisma.InpatientEncounterOrderScalarWhereInput | Prisma.InpatientEncounterOrderScalarWhereInput[]
  OR?: Prisma.InpatientEncounterOrderScalarWhereInput[]
  NOT?: Prisma.InpatientEncounterOrderScalarWhereInput | Prisma.InpatientEncounterOrderScalarWhereInput[]
  id?: Prisma.UuidFilter<"InpatientEncounterOrder"> | string
  encounterId?: Prisma.UuidFilter<"InpatientEncounterOrder"> | string
  type?: Prisma.EnumInpatientEncounterOrderTypeFilter<"InpatientEncounterOrder"> | $Enums.InpatientEncounterOrderType
  order?: Prisma.StringFilter<"InpatientEncounterOrder"> | string
  status?: Prisma.EnumInpatientEncounterOrderStatusFilter<"InpatientEncounterOrder"> | $Enums.InpatientEncounterOrderStatus
  createdAt?: Prisma.DateTimeFilter<"InpatientEncounterOrder"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InpatientEncounterOrder"> | Date | string
}

export type InpatientEncounterOrderCreateManyEncounterInput = {
  id?: string
  type: $Enums.InpatientEncounterOrderType
  order: string
  status: $Enums.InpatientEncounterOrderStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InpatientEncounterOrderUpdateWithoutEncounterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumInpatientEncounterOrderTypeFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderType
  order?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumInpatientEncounterOrderStatusFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InpatientEncounterOrderUncheckedUpdateWithoutEncounterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumInpatientEncounterOrderTypeFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderType
  order?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumInpatientEncounterOrderStatusFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InpatientEncounterOrderUncheckedUpdateManyWithoutEncounterInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumInpatientEncounterOrderTypeFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderType
  order?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumInpatientEncounterOrderStatusFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type InpatientEncounterOrderSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  encounterId?: boolean
  type?: boolean
  order?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  encounter?: boolean | Prisma.InpatientEncounterDefaultArgs<ExtArgs>
}, ExtArgs["result"]["inpatientEncounterOrder"]>

export type InpatientEncounterOrderSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  encounterId?: boolean
  type?: boolean
  order?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  encounter?: boolean | Prisma.InpatientEncounterDefaultArgs<ExtArgs>
}, ExtArgs["result"]["inpatientEncounterOrder"]>

export type InpatientEncounterOrderSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  encounterId?: boolean
  type?: boolean
  order?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  encounter?: boolean | Prisma.InpatientEncounterDefaultArgs<ExtArgs>
}, ExtArgs["result"]["inpatientEncounterOrder"]>

export type InpatientEncounterOrderSelectScalar = {
  id?: boolean
  encounterId?: boolean
  type?: boolean
  order?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type InpatientEncounterOrderOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "encounterId" | "type" | "order" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["inpatientEncounterOrder"]>
export type InpatientEncounterOrderInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  encounter?: boolean | Prisma.InpatientEncounterDefaultArgs<ExtArgs>
}
export type InpatientEncounterOrderIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  encounter?: boolean | Prisma.InpatientEncounterDefaultArgs<ExtArgs>
}
export type InpatientEncounterOrderIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  encounter?: boolean | Prisma.InpatientEncounterDefaultArgs<ExtArgs>
}

export type $InpatientEncounterOrderPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "InpatientEncounterOrder"
  objects: {
    encounter: Prisma.$InpatientEncounterPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    encounterId: string
    type: $Enums.InpatientEncounterOrderType
    order: string
    status: $Enums.InpatientEncounterOrderStatus
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["inpatientEncounterOrder"]>
  composites: {}
}

export type InpatientEncounterOrderGetPayload<S extends boolean | null | undefined | InpatientEncounterOrderDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$InpatientEncounterOrderPayload, S>

export type InpatientEncounterOrderCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<InpatientEncounterOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: InpatientEncounterOrderCountAggregateInputType | true
  }

export interface InpatientEncounterOrderDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InpatientEncounterOrder'], meta: { name: 'InpatientEncounterOrder' } }
  /**
   * Find zero or one InpatientEncounterOrder that matches the filter.
   * @param {InpatientEncounterOrderFindUniqueArgs} args - Arguments to find a InpatientEncounterOrder
   * @example
   * // Get one InpatientEncounterOrder
   * const inpatientEncounterOrder = await prisma.inpatientEncounterOrder.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InpatientEncounterOrderFindUniqueArgs>(args: Prisma.SelectSubset<T, InpatientEncounterOrderFindUniqueArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterOrderClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one InpatientEncounterOrder that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InpatientEncounterOrderFindUniqueOrThrowArgs} args - Arguments to find a InpatientEncounterOrder
   * @example
   * // Get one InpatientEncounterOrder
   * const inpatientEncounterOrder = await prisma.inpatientEncounterOrder.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InpatientEncounterOrderFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, InpatientEncounterOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterOrderClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InpatientEncounterOrder that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InpatientEncounterOrderFindFirstArgs} args - Arguments to find a InpatientEncounterOrder
   * @example
   * // Get one InpatientEncounterOrder
   * const inpatientEncounterOrder = await prisma.inpatientEncounterOrder.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InpatientEncounterOrderFindFirstArgs>(args?: Prisma.SelectSubset<T, InpatientEncounterOrderFindFirstArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterOrderClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InpatientEncounterOrder that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InpatientEncounterOrderFindFirstOrThrowArgs} args - Arguments to find a InpatientEncounterOrder
   * @example
   * // Get one InpatientEncounterOrder
   * const inpatientEncounterOrder = await prisma.inpatientEncounterOrder.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InpatientEncounterOrderFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, InpatientEncounterOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterOrderClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more InpatientEncounterOrders that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InpatientEncounterOrderFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all InpatientEncounterOrders
   * const inpatientEncounterOrders = await prisma.inpatientEncounterOrder.findMany()
   * 
   * // Get first 10 InpatientEncounterOrders
   * const inpatientEncounterOrders = await prisma.inpatientEncounterOrder.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const inpatientEncounterOrderWithIdOnly = await prisma.inpatientEncounterOrder.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends InpatientEncounterOrderFindManyArgs>(args?: Prisma.SelectSubset<T, InpatientEncounterOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a InpatientEncounterOrder.
   * @param {InpatientEncounterOrderCreateArgs} args - Arguments to create a InpatientEncounterOrder.
   * @example
   * // Create one InpatientEncounterOrder
   * const InpatientEncounterOrder = await prisma.inpatientEncounterOrder.create({
   *   data: {
   *     // ... data to create a InpatientEncounterOrder
   *   }
   * })
   * 
   */
  create<T extends InpatientEncounterOrderCreateArgs>(args: Prisma.SelectSubset<T, InpatientEncounterOrderCreateArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterOrderClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many InpatientEncounterOrders.
   * @param {InpatientEncounterOrderCreateManyArgs} args - Arguments to create many InpatientEncounterOrders.
   * @example
   * // Create many InpatientEncounterOrders
   * const inpatientEncounterOrder = await prisma.inpatientEncounterOrder.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends InpatientEncounterOrderCreateManyArgs>(args?: Prisma.SelectSubset<T, InpatientEncounterOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many InpatientEncounterOrders and returns the data saved in the database.
   * @param {InpatientEncounterOrderCreateManyAndReturnArgs} args - Arguments to create many InpatientEncounterOrders.
   * @example
   * // Create many InpatientEncounterOrders
   * const inpatientEncounterOrder = await prisma.inpatientEncounterOrder.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many InpatientEncounterOrders and only return the `id`
   * const inpatientEncounterOrderWithIdOnly = await prisma.inpatientEncounterOrder.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends InpatientEncounterOrderCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, InpatientEncounterOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a InpatientEncounterOrder.
   * @param {InpatientEncounterOrderDeleteArgs} args - Arguments to delete one InpatientEncounterOrder.
   * @example
   * // Delete one InpatientEncounterOrder
   * const InpatientEncounterOrder = await prisma.inpatientEncounterOrder.delete({
   *   where: {
   *     // ... filter to delete one InpatientEncounterOrder
   *   }
   * })
   * 
   */
  delete<T extends InpatientEncounterOrderDeleteArgs>(args: Prisma.SelectSubset<T, InpatientEncounterOrderDeleteArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterOrderClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one InpatientEncounterOrder.
   * @param {InpatientEncounterOrderUpdateArgs} args - Arguments to update one InpatientEncounterOrder.
   * @example
   * // Update one InpatientEncounterOrder
   * const inpatientEncounterOrder = await prisma.inpatientEncounterOrder.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends InpatientEncounterOrderUpdateArgs>(args: Prisma.SelectSubset<T, InpatientEncounterOrderUpdateArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterOrderClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more InpatientEncounterOrders.
   * @param {InpatientEncounterOrderDeleteManyArgs} args - Arguments to filter InpatientEncounterOrders to delete.
   * @example
   * // Delete a few InpatientEncounterOrders
   * const { count } = await prisma.inpatientEncounterOrder.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends InpatientEncounterOrderDeleteManyArgs>(args?: Prisma.SelectSubset<T, InpatientEncounterOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InpatientEncounterOrders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InpatientEncounterOrderUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many InpatientEncounterOrders
   * const inpatientEncounterOrder = await prisma.inpatientEncounterOrder.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends InpatientEncounterOrderUpdateManyArgs>(args: Prisma.SelectSubset<T, InpatientEncounterOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InpatientEncounterOrders and returns the data updated in the database.
   * @param {InpatientEncounterOrderUpdateManyAndReturnArgs} args - Arguments to update many InpatientEncounterOrders.
   * @example
   * // Update many InpatientEncounterOrders
   * const inpatientEncounterOrder = await prisma.inpatientEncounterOrder.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more InpatientEncounterOrders and only return the `id`
   * const inpatientEncounterOrderWithIdOnly = await prisma.inpatientEncounterOrder.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends InpatientEncounterOrderUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, InpatientEncounterOrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one InpatientEncounterOrder.
   * @param {InpatientEncounterOrderUpsertArgs} args - Arguments to update or create a InpatientEncounterOrder.
   * @example
   * // Update or create a InpatientEncounterOrder
   * const inpatientEncounterOrder = await prisma.inpatientEncounterOrder.upsert({
   *   create: {
   *     // ... data to create a InpatientEncounterOrder
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the InpatientEncounterOrder we want to update
   *   }
   * })
   */
  upsert<T extends InpatientEncounterOrderUpsertArgs>(args: Prisma.SelectSubset<T, InpatientEncounterOrderUpsertArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterOrderClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of InpatientEncounterOrders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InpatientEncounterOrderCountArgs} args - Arguments to filter InpatientEncounterOrders to count.
   * @example
   * // Count the number of InpatientEncounterOrders
   * const count = await prisma.inpatientEncounterOrder.count({
   *   where: {
   *     // ... the filter for the InpatientEncounterOrders we want to count
   *   }
   * })
  **/
  count<T extends InpatientEncounterOrderCountArgs>(
    args?: Prisma.Subset<T, InpatientEncounterOrderCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], InpatientEncounterOrderCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a InpatientEncounterOrder.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InpatientEncounterOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends InpatientEncounterOrderAggregateArgs>(args: Prisma.Subset<T, InpatientEncounterOrderAggregateArgs>): Prisma.PrismaPromise<GetInpatientEncounterOrderAggregateType<T>>

  /**
   * Group by InpatientEncounterOrder.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InpatientEncounterOrderGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends InpatientEncounterOrderGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InpatientEncounterOrderGroupByArgs['orderBy'] }
      : { orderBy?: InpatientEncounterOrderGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, InpatientEncounterOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInpatientEncounterOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the InpatientEncounterOrder model
 */
readonly fields: InpatientEncounterOrderFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for InpatientEncounterOrder.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InpatientEncounterOrderClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  encounter<T extends Prisma.InpatientEncounterDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.InpatientEncounterDefaultArgs<ExtArgs>>): Prisma.Prisma__InpatientEncounterClient<runtime.Types.Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the InpatientEncounterOrder model
 */
export interface InpatientEncounterOrderFieldRefs {
  readonly id: Prisma.FieldRef<"InpatientEncounterOrder", 'String'>
  readonly encounterId: Prisma.FieldRef<"InpatientEncounterOrder", 'String'>
  readonly type: Prisma.FieldRef<"InpatientEncounterOrder", 'InpatientEncounterOrderType'>
  readonly order: Prisma.FieldRef<"InpatientEncounterOrder", 'String'>
  readonly status: Prisma.FieldRef<"InpatientEncounterOrder", 'InpatientEncounterOrderStatus'>
  readonly createdAt: Prisma.FieldRef<"InpatientEncounterOrder", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"InpatientEncounterOrder", 'DateTime'>
}
    

// Custom InputTypes
/**
 * InpatientEncounterOrder findUnique
 */
export type InpatientEncounterOrderFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterOrder
   */
  select?: Prisma.InpatientEncounterOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterOrder
   */
  omit?: Prisma.InpatientEncounterOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterOrderInclude<ExtArgs> | null
  /**
   * Filter, which InpatientEncounterOrder to fetch.
   */
  where: Prisma.InpatientEncounterOrderWhereUniqueInput
}

/**
 * InpatientEncounterOrder findUniqueOrThrow
 */
export type InpatientEncounterOrderFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterOrder
   */
  select?: Prisma.InpatientEncounterOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterOrder
   */
  omit?: Prisma.InpatientEncounterOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterOrderInclude<ExtArgs> | null
  /**
   * Filter, which InpatientEncounterOrder to fetch.
   */
  where: Prisma.InpatientEncounterOrderWhereUniqueInput
}

/**
 * InpatientEncounterOrder findFirst
 */
export type InpatientEncounterOrderFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterOrder
   */
  select?: Prisma.InpatientEncounterOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterOrder
   */
  omit?: Prisma.InpatientEncounterOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterOrderInclude<ExtArgs> | null
  /**
   * Filter, which InpatientEncounterOrder to fetch.
   */
  where?: Prisma.InpatientEncounterOrderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InpatientEncounterOrders to fetch.
   */
  orderBy?: Prisma.InpatientEncounterOrderOrderByWithRelationInput | Prisma.InpatientEncounterOrderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InpatientEncounterOrders.
   */
  cursor?: Prisma.InpatientEncounterOrderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InpatientEncounterOrders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InpatientEncounterOrders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InpatientEncounterOrders.
   */
  distinct?: Prisma.InpatientEncounterOrderScalarFieldEnum | Prisma.InpatientEncounterOrderScalarFieldEnum[]
}

/**
 * InpatientEncounterOrder findFirstOrThrow
 */
export type InpatientEncounterOrderFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterOrder
   */
  select?: Prisma.InpatientEncounterOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterOrder
   */
  omit?: Prisma.InpatientEncounterOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterOrderInclude<ExtArgs> | null
  /**
   * Filter, which InpatientEncounterOrder to fetch.
   */
  where?: Prisma.InpatientEncounterOrderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InpatientEncounterOrders to fetch.
   */
  orderBy?: Prisma.InpatientEncounterOrderOrderByWithRelationInput | Prisma.InpatientEncounterOrderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InpatientEncounterOrders.
   */
  cursor?: Prisma.InpatientEncounterOrderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InpatientEncounterOrders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InpatientEncounterOrders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InpatientEncounterOrders.
   */
  distinct?: Prisma.InpatientEncounterOrderScalarFieldEnum | Prisma.InpatientEncounterOrderScalarFieldEnum[]
}

/**
 * InpatientEncounterOrder findMany
 */
export type InpatientEncounterOrderFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterOrder
   */
  select?: Prisma.InpatientEncounterOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterOrder
   */
  omit?: Prisma.InpatientEncounterOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterOrderInclude<ExtArgs> | null
  /**
   * Filter, which InpatientEncounterOrders to fetch.
   */
  where?: Prisma.InpatientEncounterOrderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InpatientEncounterOrders to fetch.
   */
  orderBy?: Prisma.InpatientEncounterOrderOrderByWithRelationInput | Prisma.InpatientEncounterOrderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing InpatientEncounterOrders.
   */
  cursor?: Prisma.InpatientEncounterOrderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InpatientEncounterOrders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InpatientEncounterOrders.
   */
  skip?: number
  distinct?: Prisma.InpatientEncounterOrderScalarFieldEnum | Prisma.InpatientEncounterOrderScalarFieldEnum[]
}

/**
 * InpatientEncounterOrder create
 */
export type InpatientEncounterOrderCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterOrder
   */
  select?: Prisma.InpatientEncounterOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterOrder
   */
  omit?: Prisma.InpatientEncounterOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterOrderInclude<ExtArgs> | null
  /**
   * The data needed to create a InpatientEncounterOrder.
   */
  data: Prisma.XOR<Prisma.InpatientEncounterOrderCreateInput, Prisma.InpatientEncounterOrderUncheckedCreateInput>
}

/**
 * InpatientEncounterOrder createMany
 */
export type InpatientEncounterOrderCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many InpatientEncounterOrders.
   */
  data: Prisma.InpatientEncounterOrderCreateManyInput | Prisma.InpatientEncounterOrderCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * InpatientEncounterOrder createManyAndReturn
 */
export type InpatientEncounterOrderCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterOrder
   */
  select?: Prisma.InpatientEncounterOrderSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterOrder
   */
  omit?: Prisma.InpatientEncounterOrderOmit<ExtArgs> | null
  /**
   * The data used to create many InpatientEncounterOrders.
   */
  data: Prisma.InpatientEncounterOrderCreateManyInput | Prisma.InpatientEncounterOrderCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterOrderIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * InpatientEncounterOrder update
 */
export type InpatientEncounterOrderUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterOrder
   */
  select?: Prisma.InpatientEncounterOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterOrder
   */
  omit?: Prisma.InpatientEncounterOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterOrderInclude<ExtArgs> | null
  /**
   * The data needed to update a InpatientEncounterOrder.
   */
  data: Prisma.XOR<Prisma.InpatientEncounterOrderUpdateInput, Prisma.InpatientEncounterOrderUncheckedUpdateInput>
  /**
   * Choose, which InpatientEncounterOrder to update.
   */
  where: Prisma.InpatientEncounterOrderWhereUniqueInput
}

/**
 * InpatientEncounterOrder updateMany
 */
export type InpatientEncounterOrderUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update InpatientEncounterOrders.
   */
  data: Prisma.XOR<Prisma.InpatientEncounterOrderUpdateManyMutationInput, Prisma.InpatientEncounterOrderUncheckedUpdateManyInput>
  /**
   * Filter which InpatientEncounterOrders to update
   */
  where?: Prisma.InpatientEncounterOrderWhereInput
  /**
   * Limit how many InpatientEncounterOrders to update.
   */
  limit?: number
}

/**
 * InpatientEncounterOrder updateManyAndReturn
 */
export type InpatientEncounterOrderUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterOrder
   */
  select?: Prisma.InpatientEncounterOrderSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterOrder
   */
  omit?: Prisma.InpatientEncounterOrderOmit<ExtArgs> | null
  /**
   * The data used to update InpatientEncounterOrders.
   */
  data: Prisma.XOR<Prisma.InpatientEncounterOrderUpdateManyMutationInput, Prisma.InpatientEncounterOrderUncheckedUpdateManyInput>
  /**
   * Filter which InpatientEncounterOrders to update
   */
  where?: Prisma.InpatientEncounterOrderWhereInput
  /**
   * Limit how many InpatientEncounterOrders to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterOrderIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * InpatientEncounterOrder upsert
 */
export type InpatientEncounterOrderUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterOrder
   */
  select?: Prisma.InpatientEncounterOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterOrder
   */
  omit?: Prisma.InpatientEncounterOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterOrderInclude<ExtArgs> | null
  /**
   * The filter to search for the InpatientEncounterOrder to update in case it exists.
   */
  where: Prisma.InpatientEncounterOrderWhereUniqueInput
  /**
   * In case the InpatientEncounterOrder found by the `where` argument doesn't exist, create a new InpatientEncounterOrder with this data.
   */
  create: Prisma.XOR<Prisma.InpatientEncounterOrderCreateInput, Prisma.InpatientEncounterOrderUncheckedCreateInput>
  /**
   * In case the InpatientEncounterOrder was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.InpatientEncounterOrderUpdateInput, Prisma.InpatientEncounterOrderUncheckedUpdateInput>
}

/**
 * InpatientEncounterOrder delete
 */
export type InpatientEncounterOrderDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterOrder
   */
  select?: Prisma.InpatientEncounterOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterOrder
   */
  omit?: Prisma.InpatientEncounterOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterOrderInclude<ExtArgs> | null
  /**
   * Filter which InpatientEncounterOrder to delete.
   */
  where: Prisma.InpatientEncounterOrderWhereUniqueInput
}

/**
 * InpatientEncounterOrder deleteMany
 */
export type InpatientEncounterOrderDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InpatientEncounterOrders to delete
   */
  where?: Prisma.InpatientEncounterOrderWhereInput
  /**
   * Limit how many InpatientEncounterOrders to delete.
   */
  limit?: number
}

/**
 * InpatientEncounterOrder without action
 */
export type InpatientEncounterOrderDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InpatientEncounterOrder
   */
  select?: Prisma.InpatientEncounterOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InpatientEncounterOrder
   */
  omit?: Prisma.InpatientEncounterOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InpatientEncounterOrderInclude<ExtArgs> | null
}
