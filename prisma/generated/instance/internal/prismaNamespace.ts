
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 * 
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 * 
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 * 
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective 
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
export const prismaVersion: PrismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  Appointment: 'Appointment',
  PatientAppointment: 'PatientAppointment',
  Transaction: 'Transaction',
  TransactionItem: 'TransactionItem',
  PaymentPlan: 'PaymentPlan',
  Payment: 'Payment',
  PaymentInstalment: 'PaymentInstalment',
  Clinic: 'Clinic',
  ClinicSchedule: 'ClinicSchedule',
  PatientEncounter: 'PatientEncounter',
  OutpatientEncounter: 'OutpatientEncounter',
  InpatientEncounter: 'InpatientEncounter',
  InpatientEncounterChart: 'InpatientEncounterChart',
  InpatientEncounterOrder: 'InpatientEncounterOrder',
  Building: 'Building',
  Room: 'Room',
  FacilityLog: 'FacilityLog',
  InsuranceProvider: 'InsuranceProvider',
  InsuranceClaim: 'InsuranceClaim',
  InsuranceClaimItem: 'InsuranceClaimItem',
  Log: 'Log',
  PatientProfile: 'PatientProfile',
  Address: 'Address',
  Contact: 'Contact',
  Employment: 'Employment',
  EmergencyContact: 'EmergencyContact',
  Consent: 'Consent',
  MedicalRecordRequest: 'MedicalRecordRequest',
  PharmacySupplier: 'PharmacySupplier',
  PharmacyBrand: 'PharmacyBrand',
  PharmacyItemCategory: 'PharmacyItemCategory',
  PharmacyItem: 'PharmacyItem'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<ClientOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "appointment" | "patientAppointment" | "transaction" | "transactionItem" | "paymentPlan" | "payment" | "paymentInstalment" | "clinic" | "clinicSchedule" | "patientEncounter" | "outpatientEncounter" | "inpatientEncounter" | "inpatientEncounterChart" | "inpatientEncounterOrder" | "building" | "room" | "facilityLog" | "insuranceProvider" | "insuranceClaim" | "insuranceClaimItem" | "log" | "patientProfile" | "address" | "contact" | "employment" | "emergencyContact" | "consent" | "medicalRecordRequest" | "pharmacySupplier" | "pharmacyBrand" | "pharmacyItemCategory" | "pharmacyItem"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    Appointment: {
      payload: Prisma.$AppointmentPayload<ExtArgs>
      fields: Prisma.AppointmentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AppointmentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AppointmentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppointmentPayload>
        }
        findFirst: {
          args: Prisma.AppointmentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AppointmentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppointmentPayload>
        }
        findMany: {
          args: Prisma.AppointmentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
        }
        create: {
          args: Prisma.AppointmentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppointmentPayload>
        }
        createMany: {
          args: Prisma.AppointmentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AppointmentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
        }
        delete: {
          args: Prisma.AppointmentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppointmentPayload>
        }
        update: {
          args: Prisma.AppointmentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppointmentPayload>
        }
        deleteMany: {
          args: Prisma.AppointmentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AppointmentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AppointmentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
        }
        upsert: {
          args: Prisma.AppointmentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppointmentPayload>
        }
        aggregate: {
          args: Prisma.AppointmentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAppointment>
        }
        groupBy: {
          args: Prisma.AppointmentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AppointmentGroupByOutputType>[]
        }
        count: {
          args: Prisma.AppointmentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AppointmentCountAggregateOutputType> | number
        }
      }
    }
    PatientAppointment: {
      payload: Prisma.$PatientAppointmentPayload<ExtArgs>
      fields: Prisma.PatientAppointmentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PatientAppointmentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientAppointmentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PatientAppointmentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientAppointmentPayload>
        }
        findFirst: {
          args: Prisma.PatientAppointmentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientAppointmentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PatientAppointmentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientAppointmentPayload>
        }
        findMany: {
          args: Prisma.PatientAppointmentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientAppointmentPayload>[]
        }
        create: {
          args: Prisma.PatientAppointmentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientAppointmentPayload>
        }
        createMany: {
          args: Prisma.PatientAppointmentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PatientAppointmentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientAppointmentPayload>[]
        }
        delete: {
          args: Prisma.PatientAppointmentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientAppointmentPayload>
        }
        update: {
          args: Prisma.PatientAppointmentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientAppointmentPayload>
        }
        deleteMany: {
          args: Prisma.PatientAppointmentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PatientAppointmentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PatientAppointmentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientAppointmentPayload>[]
        }
        upsert: {
          args: Prisma.PatientAppointmentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientAppointmentPayload>
        }
        aggregate: {
          args: Prisma.PatientAppointmentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePatientAppointment>
        }
        groupBy: {
          args: Prisma.PatientAppointmentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PatientAppointmentGroupByOutputType>[]
        }
        count: {
          args: Prisma.PatientAppointmentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PatientAppointmentCountAggregateOutputType> | number
        }
      }
    }
    Transaction: {
      payload: Prisma.$TransactionPayload<ExtArgs>
      fields: Prisma.TransactionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TransactionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>
        }
        findFirst: {
          args: Prisma.TransactionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>
        }
        findMany: {
          args: Prisma.TransactionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>[]
        }
        create: {
          args: Prisma.TransactionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>
        }
        createMany: {
          args: Prisma.TransactionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TransactionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>[]
        }
        delete: {
          args: Prisma.TransactionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>
        }
        update: {
          args: Prisma.TransactionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>
        }
        deleteMany: {
          args: Prisma.TransactionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TransactionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TransactionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>[]
        }
        upsert: {
          args: Prisma.TransactionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>
        }
        aggregate: {
          args: Prisma.TransactionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTransaction>
        }
        groupBy: {
          args: Prisma.TransactionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TransactionGroupByOutputType>[]
        }
        count: {
          args: Prisma.TransactionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TransactionCountAggregateOutputType> | number
        }
      }
    }
    TransactionItem: {
      payload: Prisma.$TransactionItemPayload<ExtArgs>
      fields: Prisma.TransactionItemFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TransactionItemFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionItemPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TransactionItemFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionItemPayload>
        }
        findFirst: {
          args: Prisma.TransactionItemFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionItemPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TransactionItemFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionItemPayload>
        }
        findMany: {
          args: Prisma.TransactionItemFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionItemPayload>[]
        }
        create: {
          args: Prisma.TransactionItemCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionItemPayload>
        }
        createMany: {
          args: Prisma.TransactionItemCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TransactionItemCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionItemPayload>[]
        }
        delete: {
          args: Prisma.TransactionItemDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionItemPayload>
        }
        update: {
          args: Prisma.TransactionItemUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionItemPayload>
        }
        deleteMany: {
          args: Prisma.TransactionItemDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TransactionItemUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TransactionItemUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionItemPayload>[]
        }
        upsert: {
          args: Prisma.TransactionItemUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionItemPayload>
        }
        aggregate: {
          args: Prisma.TransactionItemAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTransactionItem>
        }
        groupBy: {
          args: Prisma.TransactionItemGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TransactionItemGroupByOutputType>[]
        }
        count: {
          args: Prisma.TransactionItemCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TransactionItemCountAggregateOutputType> | number
        }
      }
    }
    PaymentPlan: {
      payload: Prisma.$PaymentPlanPayload<ExtArgs>
      fields: Prisma.PaymentPlanFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PaymentPlanFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPlanPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PaymentPlanFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPlanPayload>
        }
        findFirst: {
          args: Prisma.PaymentPlanFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPlanPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PaymentPlanFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPlanPayload>
        }
        findMany: {
          args: Prisma.PaymentPlanFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPlanPayload>[]
        }
        create: {
          args: Prisma.PaymentPlanCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPlanPayload>
        }
        createMany: {
          args: Prisma.PaymentPlanCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PaymentPlanCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPlanPayload>[]
        }
        delete: {
          args: Prisma.PaymentPlanDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPlanPayload>
        }
        update: {
          args: Prisma.PaymentPlanUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPlanPayload>
        }
        deleteMany: {
          args: Prisma.PaymentPlanDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PaymentPlanUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PaymentPlanUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPlanPayload>[]
        }
        upsert: {
          args: Prisma.PaymentPlanUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPlanPayload>
        }
        aggregate: {
          args: Prisma.PaymentPlanAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePaymentPlan>
        }
        groupBy: {
          args: Prisma.PaymentPlanGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PaymentPlanGroupByOutputType>[]
        }
        count: {
          args: Prisma.PaymentPlanCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PaymentPlanCountAggregateOutputType> | number
        }
      }
    }
    Payment: {
      payload: Prisma.$PaymentPayload<ExtArgs>
      fields: Prisma.PaymentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PaymentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>
        }
        findFirst: {
          args: Prisma.PaymentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>
        }
        findMany: {
          args: Prisma.PaymentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>[]
        }
        create: {
          args: Prisma.PaymentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>
        }
        createMany: {
          args: Prisma.PaymentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>[]
        }
        delete: {
          args: Prisma.PaymentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>
        }
        update: {
          args: Prisma.PaymentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>
        }
        deleteMany: {
          args: Prisma.PaymentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PaymentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PaymentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>[]
        }
        upsert: {
          args: Prisma.PaymentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>
        }
        aggregate: {
          args: Prisma.PaymentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePayment>
        }
        groupBy: {
          args: Prisma.PaymentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PaymentGroupByOutputType>[]
        }
        count: {
          args: Prisma.PaymentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PaymentCountAggregateOutputType> | number
        }
      }
    }
    PaymentInstalment: {
      payload: Prisma.$PaymentInstalmentPayload<ExtArgs>
      fields: Prisma.PaymentInstalmentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PaymentInstalmentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PaymentInstalmentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload>
        }
        findFirst: {
          args: Prisma.PaymentInstalmentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PaymentInstalmentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload>
        }
        findMany: {
          args: Prisma.PaymentInstalmentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload>[]
        }
        create: {
          args: Prisma.PaymentInstalmentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload>
        }
        createMany: {
          args: Prisma.PaymentInstalmentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PaymentInstalmentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload>[]
        }
        delete: {
          args: Prisma.PaymentInstalmentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload>
        }
        update: {
          args: Prisma.PaymentInstalmentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload>
        }
        deleteMany: {
          args: Prisma.PaymentInstalmentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PaymentInstalmentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PaymentInstalmentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload>[]
        }
        upsert: {
          args: Prisma.PaymentInstalmentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload>
        }
        aggregate: {
          args: Prisma.PaymentInstalmentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePaymentInstalment>
        }
        groupBy: {
          args: Prisma.PaymentInstalmentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PaymentInstalmentGroupByOutputType>[]
        }
        count: {
          args: Prisma.PaymentInstalmentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PaymentInstalmentCountAggregateOutputType> | number
        }
      }
    }
    Clinic: {
      payload: Prisma.$ClinicPayload<ExtArgs>
      fields: Prisma.ClinicFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ClinicFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ClinicFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicPayload>
        }
        findFirst: {
          args: Prisma.ClinicFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ClinicFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicPayload>
        }
        findMany: {
          args: Prisma.ClinicFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicPayload>[]
        }
        create: {
          args: Prisma.ClinicCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicPayload>
        }
        createMany: {
          args: Prisma.ClinicCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ClinicCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicPayload>[]
        }
        delete: {
          args: Prisma.ClinicDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicPayload>
        }
        update: {
          args: Prisma.ClinicUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicPayload>
        }
        deleteMany: {
          args: Prisma.ClinicDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ClinicUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ClinicUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicPayload>[]
        }
        upsert: {
          args: Prisma.ClinicUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicPayload>
        }
        aggregate: {
          args: Prisma.ClinicAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateClinic>
        }
        groupBy: {
          args: Prisma.ClinicGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClinicGroupByOutputType>[]
        }
        count: {
          args: Prisma.ClinicCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClinicCountAggregateOutputType> | number
        }
      }
    }
    ClinicSchedule: {
      payload: Prisma.$ClinicSchedulePayload<ExtArgs>
      fields: Prisma.ClinicScheduleFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ClinicScheduleFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicSchedulePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ClinicScheduleFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicSchedulePayload>
        }
        findFirst: {
          args: Prisma.ClinicScheduleFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicSchedulePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ClinicScheduleFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicSchedulePayload>
        }
        findMany: {
          args: Prisma.ClinicScheduleFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicSchedulePayload>[]
        }
        create: {
          args: Prisma.ClinicScheduleCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicSchedulePayload>
        }
        createMany: {
          args: Prisma.ClinicScheduleCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ClinicScheduleCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicSchedulePayload>[]
        }
        delete: {
          args: Prisma.ClinicScheduleDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicSchedulePayload>
        }
        update: {
          args: Prisma.ClinicScheduleUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicSchedulePayload>
        }
        deleteMany: {
          args: Prisma.ClinicScheduleDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ClinicScheduleUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ClinicScheduleUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicSchedulePayload>[]
        }
        upsert: {
          args: Prisma.ClinicScheduleUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClinicSchedulePayload>
        }
        aggregate: {
          args: Prisma.ClinicScheduleAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateClinicSchedule>
        }
        groupBy: {
          args: Prisma.ClinicScheduleGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClinicScheduleGroupByOutputType>[]
        }
        count: {
          args: Prisma.ClinicScheduleCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClinicScheduleCountAggregateOutputType> | number
        }
      }
    }
    PatientEncounter: {
      payload: Prisma.$PatientEncounterPayload<ExtArgs>
      fields: Prisma.PatientEncounterFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PatientEncounterFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientEncounterPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PatientEncounterFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientEncounterPayload>
        }
        findFirst: {
          args: Prisma.PatientEncounterFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientEncounterPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PatientEncounterFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientEncounterPayload>
        }
        findMany: {
          args: Prisma.PatientEncounterFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientEncounterPayload>[]
        }
        create: {
          args: Prisma.PatientEncounterCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientEncounterPayload>
        }
        createMany: {
          args: Prisma.PatientEncounterCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PatientEncounterCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientEncounterPayload>[]
        }
        delete: {
          args: Prisma.PatientEncounterDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientEncounterPayload>
        }
        update: {
          args: Prisma.PatientEncounterUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientEncounterPayload>
        }
        deleteMany: {
          args: Prisma.PatientEncounterDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PatientEncounterUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PatientEncounterUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientEncounterPayload>[]
        }
        upsert: {
          args: Prisma.PatientEncounterUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientEncounterPayload>
        }
        aggregate: {
          args: Prisma.PatientEncounterAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePatientEncounter>
        }
        groupBy: {
          args: Prisma.PatientEncounterGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PatientEncounterGroupByOutputType>[]
        }
        count: {
          args: Prisma.PatientEncounterCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PatientEncounterCountAggregateOutputType> | number
        }
      }
    }
    OutpatientEncounter: {
      payload: Prisma.$OutpatientEncounterPayload<ExtArgs>
      fields: Prisma.OutpatientEncounterFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OutpatientEncounterFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OutpatientEncounterFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload>
        }
        findFirst: {
          args: Prisma.OutpatientEncounterFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OutpatientEncounterFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload>
        }
        findMany: {
          args: Prisma.OutpatientEncounterFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload>[]
        }
        create: {
          args: Prisma.OutpatientEncounterCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload>
        }
        createMany: {
          args: Prisma.OutpatientEncounterCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OutpatientEncounterCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload>[]
        }
        delete: {
          args: Prisma.OutpatientEncounterDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload>
        }
        update: {
          args: Prisma.OutpatientEncounterUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload>
        }
        deleteMany: {
          args: Prisma.OutpatientEncounterDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OutpatientEncounterUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OutpatientEncounterUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload>[]
        }
        upsert: {
          args: Prisma.OutpatientEncounterUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload>
        }
        aggregate: {
          args: Prisma.OutpatientEncounterAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOutpatientEncounter>
        }
        groupBy: {
          args: Prisma.OutpatientEncounterGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OutpatientEncounterGroupByOutputType>[]
        }
        count: {
          args: Prisma.OutpatientEncounterCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OutpatientEncounterCountAggregateOutputType> | number
        }
      }
    }
    InpatientEncounter: {
      payload: Prisma.$InpatientEncounterPayload<ExtArgs>
      fields: Prisma.InpatientEncounterFieldRefs
      operations: {
        findUnique: {
          args: Prisma.InpatientEncounterFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.InpatientEncounterFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterPayload>
        }
        findFirst: {
          args: Prisma.InpatientEncounterFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.InpatientEncounterFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterPayload>
        }
        findMany: {
          args: Prisma.InpatientEncounterFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterPayload>[]
        }
        create: {
          args: Prisma.InpatientEncounterCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterPayload>
        }
        createMany: {
          args: Prisma.InpatientEncounterCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.InpatientEncounterCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterPayload>[]
        }
        delete: {
          args: Prisma.InpatientEncounterDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterPayload>
        }
        update: {
          args: Prisma.InpatientEncounterUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterPayload>
        }
        deleteMany: {
          args: Prisma.InpatientEncounterDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.InpatientEncounterUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.InpatientEncounterUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterPayload>[]
        }
        upsert: {
          args: Prisma.InpatientEncounterUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterPayload>
        }
        aggregate: {
          args: Prisma.InpatientEncounterAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateInpatientEncounter>
        }
        groupBy: {
          args: Prisma.InpatientEncounterGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InpatientEncounterGroupByOutputType>[]
        }
        count: {
          args: Prisma.InpatientEncounterCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InpatientEncounterCountAggregateOutputType> | number
        }
      }
    }
    InpatientEncounterChart: {
      payload: Prisma.$InpatientEncounterChartPayload<ExtArgs>
      fields: Prisma.InpatientEncounterChartFieldRefs
      operations: {
        findUnique: {
          args: Prisma.InpatientEncounterChartFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.InpatientEncounterChartFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload>
        }
        findFirst: {
          args: Prisma.InpatientEncounterChartFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.InpatientEncounterChartFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload>
        }
        findMany: {
          args: Prisma.InpatientEncounterChartFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload>[]
        }
        create: {
          args: Prisma.InpatientEncounterChartCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload>
        }
        createMany: {
          args: Prisma.InpatientEncounterChartCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.InpatientEncounterChartCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload>[]
        }
        delete: {
          args: Prisma.InpatientEncounterChartDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload>
        }
        update: {
          args: Prisma.InpatientEncounterChartUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload>
        }
        deleteMany: {
          args: Prisma.InpatientEncounterChartDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.InpatientEncounterChartUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.InpatientEncounterChartUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload>[]
        }
        upsert: {
          args: Prisma.InpatientEncounterChartUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload>
        }
        aggregate: {
          args: Prisma.InpatientEncounterChartAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateInpatientEncounterChart>
        }
        groupBy: {
          args: Prisma.InpatientEncounterChartGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InpatientEncounterChartGroupByOutputType>[]
        }
        count: {
          args: Prisma.InpatientEncounterChartCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InpatientEncounterChartCountAggregateOutputType> | number
        }
      }
    }
    InpatientEncounterOrder: {
      payload: Prisma.$InpatientEncounterOrderPayload<ExtArgs>
      fields: Prisma.InpatientEncounterOrderFieldRefs
      operations: {
        findUnique: {
          args: Prisma.InpatientEncounterOrderFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.InpatientEncounterOrderFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload>
        }
        findFirst: {
          args: Prisma.InpatientEncounterOrderFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.InpatientEncounterOrderFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload>
        }
        findMany: {
          args: Prisma.InpatientEncounterOrderFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload>[]
        }
        create: {
          args: Prisma.InpatientEncounterOrderCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload>
        }
        createMany: {
          args: Prisma.InpatientEncounterOrderCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.InpatientEncounterOrderCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload>[]
        }
        delete: {
          args: Prisma.InpatientEncounterOrderDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload>
        }
        update: {
          args: Prisma.InpatientEncounterOrderUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload>
        }
        deleteMany: {
          args: Prisma.InpatientEncounterOrderDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.InpatientEncounterOrderUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.InpatientEncounterOrderUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload>[]
        }
        upsert: {
          args: Prisma.InpatientEncounterOrderUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload>
        }
        aggregate: {
          args: Prisma.InpatientEncounterOrderAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateInpatientEncounterOrder>
        }
        groupBy: {
          args: Prisma.InpatientEncounterOrderGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InpatientEncounterOrderGroupByOutputType>[]
        }
        count: {
          args: Prisma.InpatientEncounterOrderCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InpatientEncounterOrderCountAggregateOutputType> | number
        }
      }
    }
    Building: {
      payload: Prisma.$BuildingPayload<ExtArgs>
      fields: Prisma.BuildingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.BuildingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BuildingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.BuildingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BuildingPayload>
        }
        findFirst: {
          args: Prisma.BuildingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BuildingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.BuildingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BuildingPayload>
        }
        findMany: {
          args: Prisma.BuildingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BuildingPayload>[]
        }
        create: {
          args: Prisma.BuildingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BuildingPayload>
        }
        createMany: {
          args: Prisma.BuildingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.BuildingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BuildingPayload>[]
        }
        delete: {
          args: Prisma.BuildingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BuildingPayload>
        }
        update: {
          args: Prisma.BuildingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BuildingPayload>
        }
        deleteMany: {
          args: Prisma.BuildingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.BuildingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.BuildingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BuildingPayload>[]
        }
        upsert: {
          args: Prisma.BuildingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BuildingPayload>
        }
        aggregate: {
          args: Prisma.BuildingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateBuilding>
        }
        groupBy: {
          args: Prisma.BuildingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BuildingGroupByOutputType>[]
        }
        count: {
          args: Prisma.BuildingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BuildingCountAggregateOutputType> | number
        }
      }
    }
    Room: {
      payload: Prisma.$RoomPayload<ExtArgs>
      fields: Prisma.RoomFieldRefs
      operations: {
        findUnique: {
          args: Prisma.RoomFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.RoomFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload>
        }
        findFirst: {
          args: Prisma.RoomFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.RoomFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload>
        }
        findMany: {
          args: Prisma.RoomFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload>[]
        }
        create: {
          args: Prisma.RoomCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload>
        }
        createMany: {
          args: Prisma.RoomCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.RoomCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload>[]
        }
        delete: {
          args: Prisma.RoomDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload>
        }
        update: {
          args: Prisma.RoomUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload>
        }
        deleteMany: {
          args: Prisma.RoomDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.RoomUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.RoomUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload>[]
        }
        upsert: {
          args: Prisma.RoomUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RoomPayload>
        }
        aggregate: {
          args: Prisma.RoomAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateRoom>
        }
        groupBy: {
          args: Prisma.RoomGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RoomGroupByOutputType>[]
        }
        count: {
          args: Prisma.RoomCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RoomCountAggregateOutputType> | number
        }
      }
    }
    FacilityLog: {
      payload: Prisma.$FacilityLogPayload<ExtArgs>
      fields: Prisma.FacilityLogFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FacilityLogFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacilityLogPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FacilityLogFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacilityLogPayload>
        }
        findFirst: {
          args: Prisma.FacilityLogFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacilityLogPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FacilityLogFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacilityLogPayload>
        }
        findMany: {
          args: Prisma.FacilityLogFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacilityLogPayload>[]
        }
        create: {
          args: Prisma.FacilityLogCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacilityLogPayload>
        }
        createMany: {
          args: Prisma.FacilityLogCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FacilityLogCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacilityLogPayload>[]
        }
        delete: {
          args: Prisma.FacilityLogDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacilityLogPayload>
        }
        update: {
          args: Prisma.FacilityLogUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacilityLogPayload>
        }
        deleteMany: {
          args: Prisma.FacilityLogDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FacilityLogUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FacilityLogUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacilityLogPayload>[]
        }
        upsert: {
          args: Prisma.FacilityLogUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacilityLogPayload>
        }
        aggregate: {
          args: Prisma.FacilityLogAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFacilityLog>
        }
        groupBy: {
          args: Prisma.FacilityLogGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FacilityLogGroupByOutputType>[]
        }
        count: {
          args: Prisma.FacilityLogCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FacilityLogCountAggregateOutputType> | number
        }
      }
    }
    InsuranceProvider: {
      payload: Prisma.$InsuranceProviderPayload<ExtArgs>
      fields: Prisma.InsuranceProviderFieldRefs
      operations: {
        findUnique: {
          args: Prisma.InsuranceProviderFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceProviderPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.InsuranceProviderFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceProviderPayload>
        }
        findFirst: {
          args: Prisma.InsuranceProviderFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceProviderPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.InsuranceProviderFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceProviderPayload>
        }
        findMany: {
          args: Prisma.InsuranceProviderFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceProviderPayload>[]
        }
        create: {
          args: Prisma.InsuranceProviderCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceProviderPayload>
        }
        createMany: {
          args: Prisma.InsuranceProviderCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.InsuranceProviderCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceProviderPayload>[]
        }
        delete: {
          args: Prisma.InsuranceProviderDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceProviderPayload>
        }
        update: {
          args: Prisma.InsuranceProviderUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceProviderPayload>
        }
        deleteMany: {
          args: Prisma.InsuranceProviderDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.InsuranceProviderUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.InsuranceProviderUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceProviderPayload>[]
        }
        upsert: {
          args: Prisma.InsuranceProviderUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceProviderPayload>
        }
        aggregate: {
          args: Prisma.InsuranceProviderAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateInsuranceProvider>
        }
        groupBy: {
          args: Prisma.InsuranceProviderGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InsuranceProviderGroupByOutputType>[]
        }
        count: {
          args: Prisma.InsuranceProviderCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InsuranceProviderCountAggregateOutputType> | number
        }
      }
    }
    InsuranceClaim: {
      payload: Prisma.$InsuranceClaimPayload<ExtArgs>
      fields: Prisma.InsuranceClaimFieldRefs
      operations: {
        findUnique: {
          args: Prisma.InsuranceClaimFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.InsuranceClaimFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimPayload>
        }
        findFirst: {
          args: Prisma.InsuranceClaimFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.InsuranceClaimFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimPayload>
        }
        findMany: {
          args: Prisma.InsuranceClaimFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimPayload>[]
        }
        create: {
          args: Prisma.InsuranceClaimCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimPayload>
        }
        createMany: {
          args: Prisma.InsuranceClaimCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.InsuranceClaimCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimPayload>[]
        }
        delete: {
          args: Prisma.InsuranceClaimDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimPayload>
        }
        update: {
          args: Prisma.InsuranceClaimUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimPayload>
        }
        deleteMany: {
          args: Prisma.InsuranceClaimDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.InsuranceClaimUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.InsuranceClaimUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimPayload>[]
        }
        upsert: {
          args: Prisma.InsuranceClaimUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimPayload>
        }
        aggregate: {
          args: Prisma.InsuranceClaimAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateInsuranceClaim>
        }
        groupBy: {
          args: Prisma.InsuranceClaimGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InsuranceClaimGroupByOutputType>[]
        }
        count: {
          args: Prisma.InsuranceClaimCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InsuranceClaimCountAggregateOutputType> | number
        }
      }
    }
    InsuranceClaimItem: {
      payload: Prisma.$InsuranceClaimItemPayload<ExtArgs>
      fields: Prisma.InsuranceClaimItemFieldRefs
      operations: {
        findUnique: {
          args: Prisma.InsuranceClaimItemFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.InsuranceClaimItemFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload>
        }
        findFirst: {
          args: Prisma.InsuranceClaimItemFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.InsuranceClaimItemFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload>
        }
        findMany: {
          args: Prisma.InsuranceClaimItemFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload>[]
        }
        create: {
          args: Prisma.InsuranceClaimItemCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload>
        }
        createMany: {
          args: Prisma.InsuranceClaimItemCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.InsuranceClaimItemCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload>[]
        }
        delete: {
          args: Prisma.InsuranceClaimItemDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload>
        }
        update: {
          args: Prisma.InsuranceClaimItemUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload>
        }
        deleteMany: {
          args: Prisma.InsuranceClaimItemDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.InsuranceClaimItemUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.InsuranceClaimItemUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload>[]
        }
        upsert: {
          args: Prisma.InsuranceClaimItemUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload>
        }
        aggregate: {
          args: Prisma.InsuranceClaimItemAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateInsuranceClaimItem>
        }
        groupBy: {
          args: Prisma.InsuranceClaimItemGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InsuranceClaimItemGroupByOutputType>[]
        }
        count: {
          args: Prisma.InsuranceClaimItemCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InsuranceClaimItemCountAggregateOutputType> | number
        }
      }
    }
    Log: {
      payload: Prisma.$LogPayload<ExtArgs>
      fields: Prisma.LogFieldRefs
      operations: {
        findUnique: {
          args: Prisma.LogFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LogPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.LogFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LogPayload>
        }
        findFirst: {
          args: Prisma.LogFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LogPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.LogFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LogPayload>
        }
        findMany: {
          args: Prisma.LogFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LogPayload>[]
        }
        create: {
          args: Prisma.LogCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LogPayload>
        }
        createMany: {
          args: Prisma.LogCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.LogCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LogPayload>[]
        }
        delete: {
          args: Prisma.LogDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LogPayload>
        }
        update: {
          args: Prisma.LogUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LogPayload>
        }
        deleteMany: {
          args: Prisma.LogDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.LogUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.LogUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LogPayload>[]
        }
        upsert: {
          args: Prisma.LogUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LogPayload>
        }
        aggregate: {
          args: Prisma.LogAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLog>
        }
        groupBy: {
          args: Prisma.LogGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LogGroupByOutputType>[]
        }
        count: {
          args: Prisma.LogCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LogCountAggregateOutputType> | number
        }
      }
    }
    PatientProfile: {
      payload: Prisma.$PatientProfilePayload<ExtArgs>
      fields: Prisma.PatientProfileFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PatientProfileFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientProfilePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PatientProfileFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientProfilePayload>
        }
        findFirst: {
          args: Prisma.PatientProfileFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientProfilePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PatientProfileFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientProfilePayload>
        }
        findMany: {
          args: Prisma.PatientProfileFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientProfilePayload>[]
        }
        create: {
          args: Prisma.PatientProfileCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientProfilePayload>
        }
        createMany: {
          args: Prisma.PatientProfileCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PatientProfileCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientProfilePayload>[]
        }
        delete: {
          args: Prisma.PatientProfileDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientProfilePayload>
        }
        update: {
          args: Prisma.PatientProfileUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientProfilePayload>
        }
        deleteMany: {
          args: Prisma.PatientProfileDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PatientProfileUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PatientProfileUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientProfilePayload>[]
        }
        upsert: {
          args: Prisma.PatientProfileUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PatientProfilePayload>
        }
        aggregate: {
          args: Prisma.PatientProfileAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePatientProfile>
        }
        groupBy: {
          args: Prisma.PatientProfileGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PatientProfileGroupByOutputType>[]
        }
        count: {
          args: Prisma.PatientProfileCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PatientProfileCountAggregateOutputType> | number
        }
      }
    }
    Address: {
      payload: Prisma.$AddressPayload<ExtArgs>
      fields: Prisma.AddressFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AddressFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        findFirst: {
          args: Prisma.AddressFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        findMany: {
          args: Prisma.AddressFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>[]
        }
        create: {
          args: Prisma.AddressCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        createMany: {
          args: Prisma.AddressCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AddressCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>[]
        }
        delete: {
          args: Prisma.AddressDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        update: {
          args: Prisma.AddressUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        deleteMany: {
          args: Prisma.AddressDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AddressUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AddressUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>[]
        }
        upsert: {
          args: Prisma.AddressUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        aggregate: {
          args: Prisma.AddressAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAddress>
        }
        groupBy: {
          args: Prisma.AddressGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AddressGroupByOutputType>[]
        }
        count: {
          args: Prisma.AddressCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AddressCountAggregateOutputType> | number
        }
      }
    }
    Contact: {
      payload: Prisma.$ContactPayload<ExtArgs>
      fields: Prisma.ContactFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ContactFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ContactFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactPayload>
        }
        findFirst: {
          args: Prisma.ContactFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ContactFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactPayload>
        }
        findMany: {
          args: Prisma.ContactFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactPayload>[]
        }
        create: {
          args: Prisma.ContactCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactPayload>
        }
        createMany: {
          args: Prisma.ContactCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ContactCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactPayload>[]
        }
        delete: {
          args: Prisma.ContactDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactPayload>
        }
        update: {
          args: Prisma.ContactUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactPayload>
        }
        deleteMany: {
          args: Prisma.ContactDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ContactUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ContactUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactPayload>[]
        }
        upsert: {
          args: Prisma.ContactUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ContactPayload>
        }
        aggregate: {
          args: Prisma.ContactAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateContact>
        }
        groupBy: {
          args: Prisma.ContactGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ContactGroupByOutputType>[]
        }
        count: {
          args: Prisma.ContactCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ContactCountAggregateOutputType> | number
        }
      }
    }
    Employment: {
      payload: Prisma.$EmploymentPayload<ExtArgs>
      fields: Prisma.EmploymentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.EmploymentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmploymentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.EmploymentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmploymentPayload>
        }
        findFirst: {
          args: Prisma.EmploymentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmploymentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.EmploymentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmploymentPayload>
        }
        findMany: {
          args: Prisma.EmploymentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmploymentPayload>[]
        }
        create: {
          args: Prisma.EmploymentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmploymentPayload>
        }
        createMany: {
          args: Prisma.EmploymentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.EmploymentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmploymentPayload>[]
        }
        delete: {
          args: Prisma.EmploymentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmploymentPayload>
        }
        update: {
          args: Prisma.EmploymentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmploymentPayload>
        }
        deleteMany: {
          args: Prisma.EmploymentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.EmploymentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.EmploymentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmploymentPayload>[]
        }
        upsert: {
          args: Prisma.EmploymentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmploymentPayload>
        }
        aggregate: {
          args: Prisma.EmploymentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateEmployment>
        }
        groupBy: {
          args: Prisma.EmploymentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EmploymentGroupByOutputType>[]
        }
        count: {
          args: Prisma.EmploymentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EmploymentCountAggregateOutputType> | number
        }
      }
    }
    EmergencyContact: {
      payload: Prisma.$EmergencyContactPayload<ExtArgs>
      fields: Prisma.EmergencyContactFieldRefs
      operations: {
        findUnique: {
          args: Prisma.EmergencyContactFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmergencyContactPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.EmergencyContactFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmergencyContactPayload>
        }
        findFirst: {
          args: Prisma.EmergencyContactFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmergencyContactPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.EmergencyContactFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmergencyContactPayload>
        }
        findMany: {
          args: Prisma.EmergencyContactFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmergencyContactPayload>[]
        }
        create: {
          args: Prisma.EmergencyContactCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmergencyContactPayload>
        }
        createMany: {
          args: Prisma.EmergencyContactCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.EmergencyContactCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmergencyContactPayload>[]
        }
        delete: {
          args: Prisma.EmergencyContactDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmergencyContactPayload>
        }
        update: {
          args: Prisma.EmergencyContactUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmergencyContactPayload>
        }
        deleteMany: {
          args: Prisma.EmergencyContactDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.EmergencyContactUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.EmergencyContactUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmergencyContactPayload>[]
        }
        upsert: {
          args: Prisma.EmergencyContactUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmergencyContactPayload>
        }
        aggregate: {
          args: Prisma.EmergencyContactAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateEmergencyContact>
        }
        groupBy: {
          args: Prisma.EmergencyContactGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EmergencyContactGroupByOutputType>[]
        }
        count: {
          args: Prisma.EmergencyContactCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EmergencyContactCountAggregateOutputType> | number
        }
      }
    }
    Consent: {
      payload: Prisma.$ConsentPayload<ExtArgs>
      fields: Prisma.ConsentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ConsentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConsentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ConsentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConsentPayload>
        }
        findFirst: {
          args: Prisma.ConsentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConsentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ConsentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConsentPayload>
        }
        findMany: {
          args: Prisma.ConsentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConsentPayload>[]
        }
        create: {
          args: Prisma.ConsentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConsentPayload>
        }
        createMany: {
          args: Prisma.ConsentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ConsentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConsentPayload>[]
        }
        delete: {
          args: Prisma.ConsentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConsentPayload>
        }
        update: {
          args: Prisma.ConsentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConsentPayload>
        }
        deleteMany: {
          args: Prisma.ConsentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ConsentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ConsentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConsentPayload>[]
        }
        upsert: {
          args: Prisma.ConsentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConsentPayload>
        }
        aggregate: {
          args: Prisma.ConsentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateConsent>
        }
        groupBy: {
          args: Prisma.ConsentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ConsentGroupByOutputType>[]
        }
        count: {
          args: Prisma.ConsentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ConsentCountAggregateOutputType> | number
        }
      }
    }
    MedicalRecordRequest: {
      payload: Prisma.$MedicalRecordRequestPayload<ExtArgs>
      fields: Prisma.MedicalRecordRequestFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MedicalRecordRequestFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MedicalRecordRequestFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload>
        }
        findFirst: {
          args: Prisma.MedicalRecordRequestFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MedicalRecordRequestFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload>
        }
        findMany: {
          args: Prisma.MedicalRecordRequestFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload>[]
        }
        create: {
          args: Prisma.MedicalRecordRequestCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload>
        }
        createMany: {
          args: Prisma.MedicalRecordRequestCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MedicalRecordRequestCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload>[]
        }
        delete: {
          args: Prisma.MedicalRecordRequestDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload>
        }
        update: {
          args: Prisma.MedicalRecordRequestUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload>
        }
        deleteMany: {
          args: Prisma.MedicalRecordRequestDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MedicalRecordRequestUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MedicalRecordRequestUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload>[]
        }
        upsert: {
          args: Prisma.MedicalRecordRequestUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload>
        }
        aggregate: {
          args: Prisma.MedicalRecordRequestAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMedicalRecordRequest>
        }
        groupBy: {
          args: Prisma.MedicalRecordRequestGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MedicalRecordRequestGroupByOutputType>[]
        }
        count: {
          args: Prisma.MedicalRecordRequestCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MedicalRecordRequestCountAggregateOutputType> | number
        }
      }
    }
    PharmacySupplier: {
      payload: Prisma.$PharmacySupplierPayload<ExtArgs>
      fields: Prisma.PharmacySupplierFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PharmacySupplierFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacySupplierPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PharmacySupplierFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacySupplierPayload>
        }
        findFirst: {
          args: Prisma.PharmacySupplierFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacySupplierPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PharmacySupplierFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacySupplierPayload>
        }
        findMany: {
          args: Prisma.PharmacySupplierFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacySupplierPayload>[]
        }
        create: {
          args: Prisma.PharmacySupplierCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacySupplierPayload>
        }
        createMany: {
          args: Prisma.PharmacySupplierCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PharmacySupplierCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacySupplierPayload>[]
        }
        delete: {
          args: Prisma.PharmacySupplierDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacySupplierPayload>
        }
        update: {
          args: Prisma.PharmacySupplierUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacySupplierPayload>
        }
        deleteMany: {
          args: Prisma.PharmacySupplierDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PharmacySupplierUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PharmacySupplierUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacySupplierPayload>[]
        }
        upsert: {
          args: Prisma.PharmacySupplierUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacySupplierPayload>
        }
        aggregate: {
          args: Prisma.PharmacySupplierAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePharmacySupplier>
        }
        groupBy: {
          args: Prisma.PharmacySupplierGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PharmacySupplierGroupByOutputType>[]
        }
        count: {
          args: Prisma.PharmacySupplierCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PharmacySupplierCountAggregateOutputType> | number
        }
      }
    }
    PharmacyBrand: {
      payload: Prisma.$PharmacyBrandPayload<ExtArgs>
      fields: Prisma.PharmacyBrandFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PharmacyBrandFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyBrandPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PharmacyBrandFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyBrandPayload>
        }
        findFirst: {
          args: Prisma.PharmacyBrandFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyBrandPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PharmacyBrandFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyBrandPayload>
        }
        findMany: {
          args: Prisma.PharmacyBrandFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyBrandPayload>[]
        }
        create: {
          args: Prisma.PharmacyBrandCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyBrandPayload>
        }
        createMany: {
          args: Prisma.PharmacyBrandCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PharmacyBrandCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyBrandPayload>[]
        }
        delete: {
          args: Prisma.PharmacyBrandDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyBrandPayload>
        }
        update: {
          args: Prisma.PharmacyBrandUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyBrandPayload>
        }
        deleteMany: {
          args: Prisma.PharmacyBrandDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PharmacyBrandUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PharmacyBrandUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyBrandPayload>[]
        }
        upsert: {
          args: Prisma.PharmacyBrandUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyBrandPayload>
        }
        aggregate: {
          args: Prisma.PharmacyBrandAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePharmacyBrand>
        }
        groupBy: {
          args: Prisma.PharmacyBrandGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PharmacyBrandGroupByOutputType>[]
        }
        count: {
          args: Prisma.PharmacyBrandCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PharmacyBrandCountAggregateOutputType> | number
        }
      }
    }
    PharmacyItemCategory: {
      payload: Prisma.$PharmacyItemCategoryPayload<ExtArgs>
      fields: Prisma.PharmacyItemCategoryFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PharmacyItemCategoryFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PharmacyItemCategoryFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload>
        }
        findFirst: {
          args: Prisma.PharmacyItemCategoryFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PharmacyItemCategoryFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload>
        }
        findMany: {
          args: Prisma.PharmacyItemCategoryFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload>[]
        }
        create: {
          args: Prisma.PharmacyItemCategoryCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload>
        }
        createMany: {
          args: Prisma.PharmacyItemCategoryCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PharmacyItemCategoryCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload>[]
        }
        delete: {
          args: Prisma.PharmacyItemCategoryDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload>
        }
        update: {
          args: Prisma.PharmacyItemCategoryUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload>
        }
        deleteMany: {
          args: Prisma.PharmacyItemCategoryDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PharmacyItemCategoryUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PharmacyItemCategoryUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload>[]
        }
        upsert: {
          args: Prisma.PharmacyItemCategoryUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload>
        }
        aggregate: {
          args: Prisma.PharmacyItemCategoryAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePharmacyItemCategory>
        }
        groupBy: {
          args: Prisma.PharmacyItemCategoryGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PharmacyItemCategoryGroupByOutputType>[]
        }
        count: {
          args: Prisma.PharmacyItemCategoryCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PharmacyItemCategoryCountAggregateOutputType> | number
        }
      }
    }
    PharmacyItem: {
      payload: Prisma.$PharmacyItemPayload<ExtArgs>
      fields: Prisma.PharmacyItemFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PharmacyItemFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PharmacyItemFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemPayload>
        }
        findFirst: {
          args: Prisma.PharmacyItemFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PharmacyItemFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemPayload>
        }
        findMany: {
          args: Prisma.PharmacyItemFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemPayload>[]
        }
        create: {
          args: Prisma.PharmacyItemCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemPayload>
        }
        createMany: {
          args: Prisma.PharmacyItemCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PharmacyItemCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemPayload>[]
        }
        delete: {
          args: Prisma.PharmacyItemDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemPayload>
        }
        update: {
          args: Prisma.PharmacyItemUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemPayload>
        }
        deleteMany: {
          args: Prisma.PharmacyItemDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PharmacyItemUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PharmacyItemUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemPayload>[]
        }
        upsert: {
          args: Prisma.PharmacyItemUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PharmacyItemPayload>
        }
        aggregate: {
          args: Prisma.PharmacyItemAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePharmacyItem>
        }
        groupBy: {
          args: Prisma.PharmacyItemGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PharmacyItemGroupByOutputType>[]
        }
        count: {
          args: Prisma.PharmacyItemCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PharmacyItemCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const AppointmentScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  facilityId: 'facilityId',
  date: 'date',
  time: 'time',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum]


export const PatientAppointmentScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  date: 'date',
  time: 'time',
  status: 'status',
  name: 'name',
  appointmentId: 'appointmentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PatientAppointmentScalarFieldEnum = (typeof PatientAppointmentScalarFieldEnum)[keyof typeof PatientAppointmentScalarFieldEnum]


export const TransactionScalarFieldEnum = {
  id: 'id',
  encounterId: 'encounterId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


export const TransactionItemScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  name: 'name',
  description: 'description',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type TransactionItemScalarFieldEnum = (typeof TransactionItemScalarFieldEnum)[keyof typeof TransactionItemScalarFieldEnum]


export const PaymentPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  cycle: 'cycle',
  numberOfPayments: 'numberOfPayments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PaymentPlanScalarFieldEnum = (typeof PaymentPlanScalarFieldEnum)[keyof typeof PaymentPlanScalarFieldEnum]


export const PaymentScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


export const PaymentInstalmentScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  planId: 'planId',
  instalmentNumber: 'instalmentNumber',
  amountDue: 'amountDue',
  amountPaid: 'amountPaid',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PaymentInstalmentScalarFieldEnum = (typeof PaymentInstalmentScalarFieldEnum)[keyof typeof PaymentInstalmentScalarFieldEnum]


export const ClinicScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ClinicScalarFieldEnum = (typeof ClinicScalarFieldEnum)[keyof typeof ClinicScalarFieldEnum]


export const ClinicScheduleScalarFieldEnum = {
  id: 'id',
  clinicId: 'clinicId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ClinicScheduleScalarFieldEnum = (typeof ClinicScheduleScalarFieldEnum)[keyof typeof ClinicScheduleScalarFieldEnum]


export const PatientEncounterScalarFieldEnum = {
  id: 'id',
  encounterId: 'encounterId',
  patientProfileId: 'patientProfileId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PatientEncounterScalarFieldEnum = (typeof PatientEncounterScalarFieldEnum)[keyof typeof PatientEncounterScalarFieldEnum]


export const OutpatientEncounterScalarFieldEnum = {
  id: 'id',
  patientProfileId: 'patientProfileId',
  date: 'date',
  time: 'time',
  chiefComplaint: 'chiefComplaint',
  doctorDiagnosis: 'doctorDiagnosis',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type OutpatientEncounterScalarFieldEnum = (typeof OutpatientEncounterScalarFieldEnum)[keyof typeof OutpatientEncounterScalarFieldEnum]


export const InpatientEncounterScalarFieldEnum = {
  id: 'id',
  patientProfileId: 'patientProfileId',
  date: 'date',
  time: 'time',
  chiefComplaint: 'chiefComplaint',
  doctorDiagnosis: 'doctorDiagnosis',
  triage: 'triage',
  disposition: 'disposition',
  dispositionDate: 'dispositionDate',
  dispositionTime: 'dispositionTime',
  dispositionNote: 'dispositionNote',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type InpatientEncounterScalarFieldEnum = (typeof InpatientEncounterScalarFieldEnum)[keyof typeof InpatientEncounterScalarFieldEnum]


export const InpatientEncounterChartScalarFieldEnum = {
  id: 'id',
  encounterId: 'encounterId',
  staffId: 'staffId',
  chart: 'chart',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type InpatientEncounterChartScalarFieldEnum = (typeof InpatientEncounterChartScalarFieldEnum)[keyof typeof InpatientEncounterChartScalarFieldEnum]


export const InpatientEncounterOrderScalarFieldEnum = {
  id: 'id',
  encounterId: 'encounterId',
  type: 'type',
  order: 'order',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type InpatientEncounterOrderScalarFieldEnum = (typeof InpatientEncounterOrderScalarFieldEnum)[keyof typeof InpatientEncounterOrderScalarFieldEnum]


export const BuildingScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type BuildingScalarFieldEnum = (typeof BuildingScalarFieldEnum)[keyof typeof BuildingScalarFieldEnum]


export const RoomScalarFieldEnum = {
  id: 'id',
  buildingId: 'buildingId',
  type: 'type',
  identifier: 'identifier',
  description: 'description',
  capacity: 'capacity',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type RoomScalarFieldEnum = (typeof RoomScalarFieldEnum)[keyof typeof RoomScalarFieldEnum]


export const FacilityLogScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  user: 'user',
  role: 'role',
  action: 'action',
  roomIdentifier: 'roomIdentifier',
  type: 'type',
  oldStatus: 'oldStatus',
  newStatus: 'newStatus'
} as const

export type FacilityLogScalarFieldEnum = (typeof FacilityLogScalarFieldEnum)[keyof typeof FacilityLogScalarFieldEnum]


export const InsuranceProviderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  zip: 'zip',
  country: 'country',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type InsuranceProviderScalarFieldEnum = (typeof InsuranceProviderScalarFieldEnum)[keyof typeof InsuranceProviderScalarFieldEnum]


export const InsuranceClaimScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  status: 'status',
  message: 'message',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type InsuranceClaimScalarFieldEnum = (typeof InsuranceClaimScalarFieldEnum)[keyof typeof InsuranceClaimScalarFieldEnum]


export const InsuranceClaimItemScalarFieldEnum = {
  id: 'id',
  claimId: 'claimId',
  name: 'name',
  description: 'description',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type InsuranceClaimItemScalarFieldEnum = (typeof InsuranceClaimItemScalarFieldEnum)[keyof typeof InsuranceClaimItemScalarFieldEnum]


export const LogScalarFieldEnum = {
  id: 'id',
  user: 'user',
  action: 'action',
  entity: 'entity',
  data: 'data',
  ipAddress: 'ipAddress',
  timestamp: 'timestamp'
} as const

export type LogScalarFieldEnum = (typeof LogScalarFieldEnum)[keyof typeof LogScalarFieldEnum]


export const PatientProfileScalarFieldEnum = {
  id: 'id',
  lastName: 'lastName',
  firstName: 'firstName',
  middleName: 'middleName',
  suffix: 'suffix',
  birthdate: 'birthdate',
  birthplace: 'birthplace',
  sex: 'sex',
  maritalStatus: 'maritalStatus',
  nationality: 'nationality',
  religion: 'religion',
  bloodType: 'bloodType',
  archived: 'archived',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PatientProfileScalarFieldEnum = (typeof PatientProfileScalarFieldEnum)[keyof typeof PatientProfileScalarFieldEnum]


export const AddressScalarFieldEnum = {
  id: 'id',
  patientProfileId: 'patientProfileId',
  label: 'label',
  country: 'country',
  state: 'state',
  zipCode: 'zipCode',
  city: 'city',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


export const ContactScalarFieldEnum = {
  id: 'id',
  patientProfileId: 'patientProfileId',
  type: 'type',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ContactScalarFieldEnum = (typeof ContactScalarFieldEnum)[keyof typeof ContactScalarFieldEnum]


export const EmploymentScalarFieldEnum = {
  id: 'id',
  patientProfileId: 'patientProfileId',
  employer: 'employer',
  contactPerson: 'contactPerson',
  address: 'address',
  phone: 'phone',
  email: 'email',
  website: 'website',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type EmploymentScalarFieldEnum = (typeof EmploymentScalarFieldEnum)[keyof typeof EmploymentScalarFieldEnum]


export const EmergencyContactScalarFieldEnum = {
  id: 'id',
  patientProfileId: 'patientProfileId',
  lastName: 'lastName',
  firstName: 'firstName',
  middleName: 'middleName',
  suffix: 'suffix',
  relationship: 'relationship',
  phone: 'phone',
  email: 'email',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type EmergencyContactScalarFieldEnum = (typeof EmergencyContactScalarFieldEnum)[keyof typeof EmergencyContactScalarFieldEnum]


export const ConsentScalarFieldEnum = {
  id: 'id',
  patientProfileId: 'patientProfileId',
  documentUrl: 'documentUrl',
  signature: 'signature',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ConsentScalarFieldEnum = (typeof ConsentScalarFieldEnum)[keyof typeof ConsentScalarFieldEnum]


export const MedicalRecordRequestScalarFieldEnum = {
  id: 'id',
  patientProfileId: 'patientProfileId',
  inpatientEncounterId: 'inpatientEncounterId',
  type: 'type',
  status: 'status',
  fileUrl: 'fileUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type MedicalRecordRequestScalarFieldEnum = (typeof MedicalRecordRequestScalarFieldEnum)[keyof typeof MedicalRecordRequestScalarFieldEnum]


export const PharmacySupplierScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  contact: 'contact',
  address: 'address',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PharmacySupplierScalarFieldEnum = (typeof PharmacySupplierScalarFieldEnum)[keyof typeof PharmacySupplierScalarFieldEnum]


export const PharmacyBrandScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PharmacyBrandScalarFieldEnum = (typeof PharmacyBrandScalarFieldEnum)[keyof typeof PharmacyBrandScalarFieldEnum]


export const PharmacyItemCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PharmacyItemCategoryScalarFieldEnum = (typeof PharmacyItemCategoryScalarFieldEnum)[keyof typeof PharmacyItemCategoryScalarFieldEnum]


export const PharmacyItemScalarFieldEnum = {
  id: 'id',
  brandId: 'brandId',
  categoryId: 'categoryId',
  name: 'name',
  form: 'form',
  route: 'route',
  strength: 'strength',
  stock: 'stock',
  unit: 'unit',
  sku: 'sku',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PharmacyItemScalarFieldEnum = (typeof PharmacyItemScalarFieldEnum)[keyof typeof PharmacyItemScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const JsonNullValueInput = {
  JsonNull: JsonNull
} as const

export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]



/**
 * Field references 
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'AppointmentStatus'
 */
export type EnumAppointmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentStatus'>
    


/**
 * Reference to a field of type 'AppointmentStatus[]'
 */
export type ListEnumAppointmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentStatus[]'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'OutpatientEncounterType'
 */
export type EnumOutpatientEncounterTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OutpatientEncounterType'>
    


/**
 * Reference to a field of type 'OutpatientEncounterType[]'
 */
export type ListEnumOutpatientEncounterTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OutpatientEncounterType[]'>
    


/**
 * Reference to a field of type 'InpatientTriage'
 */
export type EnumInpatientTriageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InpatientTriage'>
    


/**
 * Reference to a field of type 'InpatientTriage[]'
 */
export type ListEnumInpatientTriageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InpatientTriage[]'>
    


/**
 * Reference to a field of type 'InpatientDisposition'
 */
export type EnumInpatientDispositionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InpatientDisposition'>
    


/**
 * Reference to a field of type 'InpatientDisposition[]'
 */
export type ListEnumInpatientDispositionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InpatientDisposition[]'>
    


/**
 * Reference to a field of type 'InpatientEncounterOrderType'
 */
export type EnumInpatientEncounterOrderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InpatientEncounterOrderType'>
    


/**
 * Reference to a field of type 'InpatientEncounterOrderType[]'
 */
export type ListEnumInpatientEncounterOrderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InpatientEncounterOrderType[]'>
    


/**
 * Reference to a field of type 'InpatientEncounterOrderStatus'
 */
export type EnumInpatientEncounterOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InpatientEncounterOrderStatus'>
    


/**
 * Reference to a field of type 'InpatientEncounterOrderStatus[]'
 */
export type ListEnumInpatientEncounterOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InpatientEncounterOrderStatus[]'>
    


/**
 * Reference to a field of type 'RoomType'
 */
export type EnumRoomTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoomType'>
    


/**
 * Reference to a field of type 'RoomType[]'
 */
export type ListEnumRoomTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoomType[]'>
    


/**
 * Reference to a field of type 'RoomStatus'
 */
export type EnumRoomStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoomStatus'>
    


/**
 * Reference to a field of type 'RoomStatus[]'
 */
export type ListEnumRoomStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoomStatus[]'>
    


/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


/**
 * Reference to a field of type 'Sex'
 */
export type EnumSexFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Sex'>
    


/**
 * Reference to a field of type 'Sex[]'
 */
export type ListEnumSexFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Sex[]'>
    


/**
 * Reference to a field of type 'MaritalStatus'
 */
export type EnumMaritalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaritalStatus'>
    


/**
 * Reference to a field of type 'MaritalStatus[]'
 */
export type ListEnumMaritalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaritalStatus[]'>
    


/**
 * Reference to a field of type 'BloodType'
 */
export type EnumBloodTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BloodType'>
    


/**
 * Reference to a field of type 'BloodType[]'
 */
export type ListEnumBloodTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BloodType[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'ContactType'
 */
export type EnumContactTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContactType'>
    


/**
 * Reference to a field of type 'ContactType[]'
 */
export type ListEnumContactTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContactType[]'>
    


/**
 * Reference to a field of type 'Relationship'
 */
export type EnumRelationshipFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Relationship'>
    


/**
 * Reference to a field of type 'Relationship[]'
 */
export type ListEnumRelationshipFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Relationship[]'>
    


/**
 * Reference to a field of type 'PharmacyItemForm'
 */
export type EnumPharmacyItemFormFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PharmacyItemForm'>
    


/**
 * Reference to a field of type 'PharmacyItemForm[]'
 */
export type ListEnumPharmacyItemFormFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PharmacyItemForm[]'>
    


/**
 * Reference to a field of type 'PharmacyItemRoute'
 */
export type EnumPharmacyItemRouteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PharmacyItemRoute'>
    


/**
 * Reference to a field of type 'PharmacyItemRoute[]'
 */
export type ListEnumPharmacyItemRouteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PharmacyItemRoute[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *   { emit: 'stdout', level: 'query' },
   *   { emit: 'stdout', level: 'info' },
   *   { emit: 'stdout', level: 'warn' }
   *   { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  appointment?: Prisma.AppointmentOmit
  patientAppointment?: Prisma.PatientAppointmentOmit
  transaction?: Prisma.TransactionOmit
  transactionItem?: Prisma.TransactionItemOmit
  paymentPlan?: Prisma.PaymentPlanOmit
  payment?: Prisma.PaymentOmit
  paymentInstalment?: Prisma.PaymentInstalmentOmit
  clinic?: Prisma.ClinicOmit
  clinicSchedule?: Prisma.ClinicScheduleOmit
  patientEncounter?: Prisma.PatientEncounterOmit
  outpatientEncounter?: Prisma.OutpatientEncounterOmit
  inpatientEncounter?: Prisma.InpatientEncounterOmit
  inpatientEncounterChart?: Prisma.InpatientEncounterChartOmit
  inpatientEncounterOrder?: Prisma.InpatientEncounterOrderOmit
  building?: Prisma.BuildingOmit
  room?: Prisma.RoomOmit
  facilityLog?: Prisma.FacilityLogOmit
  insuranceProvider?: Prisma.InsuranceProviderOmit
  insuranceClaim?: Prisma.InsuranceClaimOmit
  insuranceClaimItem?: Prisma.InsuranceClaimItemOmit
  log?: Prisma.LogOmit
  patientProfile?: Prisma.PatientProfileOmit
  address?: Prisma.AddressOmit
  contact?: Prisma.ContactOmit
  employment?: Prisma.EmploymentOmit
  emergencyContact?: Prisma.EmergencyContactOmit
  consent?: Prisma.ConsentOmit
  medicalRecordRequest?: Prisma.MedicalRecordRequestOmit
  pharmacySupplier?: Prisma.PharmacySupplierOmit
  pharmacyBrand?: Prisma.PharmacyBrandOmit
  pharmacyItemCategory?: Prisma.PharmacyItemCategoryOmit
  pharmacyItem?: Prisma.PharmacyItemOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw' 
  | 'groupBy'

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

