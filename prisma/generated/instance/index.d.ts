
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Appointment
 * 
 */
export type Appointment = $Result.DefaultSelection<Prisma.$AppointmentPayload>
/**
 * Model PatientAppointment
 * 
 */
export type PatientAppointment = $Result.DefaultSelection<Prisma.$PatientAppointmentPayload>
/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>
/**
 * Model TransactionItem
 * 
 */
export type TransactionItem = $Result.DefaultSelection<Prisma.$TransactionItemPayload>
/**
 * Model PaymentPlan
 * 
 */
export type PaymentPlan = $Result.DefaultSelection<Prisma.$PaymentPlanPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model PaymentInstalment
 * 
 */
export type PaymentInstalment = $Result.DefaultSelection<Prisma.$PaymentInstalmentPayload>
/**
 * Model Clinic
 * 
 */
export type Clinic = $Result.DefaultSelection<Prisma.$ClinicPayload>
/**
 * Model ClinicSchedule
 * 
 */
export type ClinicSchedule = $Result.DefaultSelection<Prisma.$ClinicSchedulePayload>
/**
 * Model PatientEncounter
 * 
 */
export type PatientEncounter = $Result.DefaultSelection<Prisma.$PatientEncounterPayload>
/**
 * Model OutpatientEncounter
 * 
 */
export type OutpatientEncounter = $Result.DefaultSelection<Prisma.$OutpatientEncounterPayload>
/**
 * Model InpatientEncounter
 * 
 */
export type InpatientEncounter = $Result.DefaultSelection<Prisma.$InpatientEncounterPayload>
/**
 * Model InpatientEncounterChart
 * 
 */
export type InpatientEncounterChart = $Result.DefaultSelection<Prisma.$InpatientEncounterChartPayload>
/**
 * Model InpatientEncounterOrder
 * 
 */
export type InpatientEncounterOrder = $Result.DefaultSelection<Prisma.$InpatientEncounterOrderPayload>
/**
 * Model Building
 * 
 */
export type Building = $Result.DefaultSelection<Prisma.$BuildingPayload>
/**
 * Model Room
 * 
 */
export type Room = $Result.DefaultSelection<Prisma.$RoomPayload>
/**
 * Model FacilityLog
 * 
 */
export type FacilityLog = $Result.DefaultSelection<Prisma.$FacilityLogPayload>
/**
 * Model InsuranceProvider
 * 
 */
export type InsuranceProvider = $Result.DefaultSelection<Prisma.$InsuranceProviderPayload>
/**
 * Model InsuranceClaim
 * 
 */
export type InsuranceClaim = $Result.DefaultSelection<Prisma.$InsuranceClaimPayload>
/**
 * Model InsuranceClaimItem
 * 
 */
export type InsuranceClaimItem = $Result.DefaultSelection<Prisma.$InsuranceClaimItemPayload>
/**
 * Model Log
 * 
 */
export type Log = $Result.DefaultSelection<Prisma.$LogPayload>
/**
 * Model PatientProfile
 * 
 */
export type PatientProfile = $Result.DefaultSelection<Prisma.$PatientProfilePayload>
/**
 * Model Address
 * 
 */
export type Address = $Result.DefaultSelection<Prisma.$AddressPayload>
/**
 * Model Contact
 * 
 */
export type Contact = $Result.DefaultSelection<Prisma.$ContactPayload>
/**
 * Model Employment
 * 
 */
export type Employment = $Result.DefaultSelection<Prisma.$EmploymentPayload>
/**
 * Model EmergencyContact
 * 
 */
export type EmergencyContact = $Result.DefaultSelection<Prisma.$EmergencyContactPayload>
/**
 * Model Consent
 * 
 */
export type Consent = $Result.DefaultSelection<Prisma.$ConsentPayload>
/**
 * Model MedicalRecordRequest
 * 
 */
export type MedicalRecordRequest = $Result.DefaultSelection<Prisma.$MedicalRecordRequestPayload>
/**
 * Model PharmacySupplier
 * 
 */
export type PharmacySupplier = $Result.DefaultSelection<Prisma.$PharmacySupplierPayload>
/**
 * Model PharmacyBrand
 * 
 */
export type PharmacyBrand = $Result.DefaultSelection<Prisma.$PharmacyBrandPayload>
/**
 * Model PharmacyItemCategory
 * 
 */
export type PharmacyItemCategory = $Result.DefaultSelection<Prisma.$PharmacyItemCategoryPayload>
/**
 * Model PharmacyItem
 * 
 */
export type PharmacyItem = $Result.DefaultSelection<Prisma.$PharmacyItemPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model RefreshToken
 * 
 */
export type RefreshToken = $Result.DefaultSelection<Prisma.$RefreshTokenPayload>
/**
 * Model Patient
 * 
 */
export type Patient = $Result.DefaultSelection<Prisma.$PatientPayload>
/**
 * Model Staff
 * 
 */
export type Staff = $Result.DefaultSelection<Prisma.$StaffPayload>
/**
 * Model Doctor
 * 
 */
export type Doctor = $Result.DefaultSelection<Prisma.$DoctorPayload>
/**
 * Model Partner
 * 
 */
export type Partner = $Result.DefaultSelection<Prisma.$PartnerPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AppointmentStatus: {
  PENDING: 'PENDING',
  SCHEDULED: 'SCHEDULED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED'
};

export type AppointmentStatus = (typeof AppointmentStatus)[keyof typeof AppointmentStatus]


export const OutpatientEncounterType: {
  CONSULTATION: 'CONSULTATION',
  FOLLOW_UP: 'FOLLOW_UP',
  LABORATORY: 'LABORATORY',
  RADIOLOGY: 'RADIOLOGY',
  OTHER: 'OTHER'
};

export type OutpatientEncounterType = (typeof OutpatientEncounterType)[keyof typeof OutpatientEncounterType]


export const InpatientTriage: {
  HIGH_PRIORITY: 'HIGH_PRIORITY',
  MEDIUM_PRIORITY: 'MEDIUM_PRIORITY',
  LOW_PRIORITY: 'LOW_PRIORITY',
  NON_URGENT: 'NON_URGENT'
};

export type InpatientTriage = (typeof InpatientTriage)[keyof typeof InpatientTriage]


export const InpatientDisposition: {
  ADMITTED: 'ADMITTED',
  DISCHARGED: 'DISCHARGED',
  DISCONTINUED: 'DISCONTINUED',
  TRANSFERRED: 'TRANSFERRED',
  DECEASED: 'DECEASED',
  OTHER: 'OTHER'
};

export type InpatientDisposition = (typeof InpatientDisposition)[keyof typeof InpatientDisposition]


export const InpatientEncounterOrderType: {
  PRESCRIPTION: 'PRESCRIPTION',
  LABORATORY: 'LABORATORY',
  RADIOLOGY: 'RADIOLOGY',
  OPERATION: 'OPERATION',
  OTHER: 'OTHER'
};

export type InpatientEncounterOrderType = (typeof InpatientEncounterOrderType)[keyof typeof InpatientEncounterOrderType]


export const InpatientEncounterOrderStatus: {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type InpatientEncounterOrderStatus = (typeof InpatientEncounterOrderStatus)[keyof typeof InpatientEncounterOrderStatus]


export const RoomType: {
  WARD: 'WARD',
  CLINIC: 'CLINIC',
  LABORATORY: 'LABORATORY',
  PHARMACY: 'PHARMACY',
  OFFICE: 'OFFICE'
};

export type RoomType = (typeof RoomType)[keyof typeof RoomType]


export const RoomStatus: {
  AVAILABLE: 'AVAILABLE',
  OCCUPIED: 'OCCUPIED',
  PREPARING: 'PREPARING'
};

export type RoomStatus = (typeof RoomStatus)[keyof typeof RoomStatus]


export const Sex: {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

export type Sex = (typeof Sex)[keyof typeof Sex]


export const MaritalStatus: {
  SINGLE: 'SINGLE',
  MARRIED: 'MARRIED',
  WIDOWED: 'WIDOWED',
  DIVORCED: 'DIVORCED',
  SEPARATED: 'SEPARATED'
};

export type MaritalStatus = (typeof MaritalStatus)[keyof typeof MaritalStatus]


export const BloodType: {
  A_POSITIVE: 'A_POSITIVE',
  A_NEGATIVE: 'A_NEGATIVE',
  B_POSITIVE: 'B_POSITIVE',
  B_NEGATIVE: 'B_NEGATIVE',
  AB_POSITIVE: 'AB_POSITIVE',
  AB_NEGATIVE: 'AB_NEGATIVE',
  O_POSITIVE: 'O_POSITIVE',
  O_NEGATIVE: 'O_NEGATIVE'
};

export type BloodType = (typeof BloodType)[keyof typeof BloodType]


export const ContactType: {
  HOME: 'HOME',
  WORK: 'WORK',
  MOBILE: 'MOBILE',
  EMAIL: 'EMAIL',
  FAX: 'FAX',
  OTHER: 'OTHER'
};

export type ContactType = (typeof ContactType)[keyof typeof ContactType]


export const Relationship: {
  FATHER: 'FATHER',
  MOTHER: 'MOTHER',
  SPOUSE: 'SPOUSE',
  SON: 'SON',
  DAUGHTER: 'DAUGHTER',
  SIBLING: 'SIBLING',
  GRANDMOTHER: 'GRANDMOTHER',
  GRANDFATHER: 'GRANDFATHER',
  GRANDCHILD: 'GRANDCHILD',
  COUSIN: 'COUSIN',
  UNCLE: 'UNCLE',
  GUARDIAN: 'GUARDIAN',
  AUXILIARY: 'AUXILIARY',
  OTHER: 'OTHER'
};

export type Relationship = (typeof Relationship)[keyof typeof Relationship]


export const PharmacyItemForm: {
  TABLET: 'TABLET',
  CAPSULE: 'CAPSULE',
  SYRUP: 'SYRUP',
  OINTMENT: 'OINTMENT',
  CREAM: 'CREAM',
  INJECTION: 'INJECTION',
  DROPS: 'DROPS',
  INHALER: 'INHALER',
  MEDICAL_DEVICE: 'MEDICAL_DEVICE',
  SUPPLEMENTS: 'SUPPLEMENTS',
  COSMETICS: 'COSMETICS',
  MISCELLANEOUS: 'MISCELLANEOUS'
};

export type PharmacyItemForm = (typeof PharmacyItemForm)[keyof typeof PharmacyItemForm]


export const PharmacyItemRoute: {
  INJECTION: 'INJECTION',
  TOPICAL: 'TOPICAL',
  TRANSDERMAL: 'TRANSDERMAL',
  OCULAR: 'OCULAR',
  OTIC: 'OTIC',
  NASAL: 'NASAL',
  ORAL: 'ORAL',
  INHALATIONAL: 'INHALATIONAL',
  RECTAL: 'RECTAL',
  VAGINAL: 'VAGINAL'
};

export type PharmacyItemRoute = (typeof PharmacyItemRoute)[keyof typeof PharmacyItemRoute]


export const UserRole: {
  ADMIN: 'ADMIN',
  STAFF: 'STAFF',
  PATIENT: 'PATIENT',
  PARTNER: 'PARTNER'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const UserStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  PENDING_APPROVAL: 'PENDING_APPROVAL'
};

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]


export const Gender: {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
  PREFER_NOT_TO_SAY: 'PREFER_NOT_TO_SAY'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const PartnerType: {
  HOSPITAL: 'HOSPITAL',
  CLINIC: 'CLINIC',
  LABORATORY: 'LABORATORY',
  PHARMACY: 'PHARMACY',
  DIAGNOSTIC_CENTER: 'DIAGNOSTIC_CENTER'
};

export type PartnerType = (typeof PartnerType)[keyof typeof PartnerType]

}

export type AppointmentStatus = $Enums.AppointmentStatus

export const AppointmentStatus: typeof $Enums.AppointmentStatus

export type OutpatientEncounterType = $Enums.OutpatientEncounterType

export const OutpatientEncounterType: typeof $Enums.OutpatientEncounterType

export type InpatientTriage = $Enums.InpatientTriage

export const InpatientTriage: typeof $Enums.InpatientTriage

export type InpatientDisposition = $Enums.InpatientDisposition

export const InpatientDisposition: typeof $Enums.InpatientDisposition

export type InpatientEncounterOrderType = $Enums.InpatientEncounterOrderType

export const InpatientEncounterOrderType: typeof $Enums.InpatientEncounterOrderType

export type InpatientEncounterOrderStatus = $Enums.InpatientEncounterOrderStatus

export const InpatientEncounterOrderStatus: typeof $Enums.InpatientEncounterOrderStatus

export type RoomType = $Enums.RoomType

export const RoomType: typeof $Enums.RoomType

export type RoomStatus = $Enums.RoomStatus

export const RoomStatus: typeof $Enums.RoomStatus

export type Sex = $Enums.Sex

export const Sex: typeof $Enums.Sex

export type MaritalStatus = $Enums.MaritalStatus

export const MaritalStatus: typeof $Enums.MaritalStatus

export type BloodType = $Enums.BloodType

export const BloodType: typeof $Enums.BloodType

export type ContactType = $Enums.ContactType

export const ContactType: typeof $Enums.ContactType

export type Relationship = $Enums.Relationship

export const Relationship: typeof $Enums.Relationship

export type PharmacyItemForm = $Enums.PharmacyItemForm

export const PharmacyItemForm: typeof $Enums.PharmacyItemForm

export type PharmacyItemRoute = $Enums.PharmacyItemRoute

export const PharmacyItemRoute: typeof $Enums.PharmacyItemRoute

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type UserStatus = $Enums.UserStatus

export const UserStatus: typeof $Enums.UserStatus

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type PartnerType = $Enums.PartnerType

export const PartnerType: typeof $Enums.PartnerType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Appointments
 * const appointments = await prisma.appointment.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Appointments
   * const appointments = await prisma.appointment.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.appointment`: Exposes CRUD operations for the **Appointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointment.findMany()
    * ```
    */
  get appointment(): Prisma.AppointmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patientAppointment`: Exposes CRUD operations for the **PatientAppointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientAppointments
    * const patientAppointments = await prisma.patientAppointment.findMany()
    * ```
    */
  get patientAppointment(): Prisma.PatientAppointmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transactionItem`: Exposes CRUD operations for the **TransactionItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TransactionItems
    * const transactionItems = await prisma.transactionItem.findMany()
    * ```
    */
  get transactionItem(): Prisma.TransactionItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.paymentPlan`: Exposes CRUD operations for the **PaymentPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentPlans
    * const paymentPlans = await prisma.paymentPlan.findMany()
    * ```
    */
  get paymentPlan(): Prisma.PaymentPlanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.paymentInstalment`: Exposes CRUD operations for the **PaymentInstalment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentInstalments
    * const paymentInstalments = await prisma.paymentInstalment.findMany()
    * ```
    */
  get paymentInstalment(): Prisma.PaymentInstalmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clinic`: Exposes CRUD operations for the **Clinic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clinics
    * const clinics = await prisma.clinic.findMany()
    * ```
    */
  get clinic(): Prisma.ClinicDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clinicSchedule`: Exposes CRUD operations for the **ClinicSchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClinicSchedules
    * const clinicSchedules = await prisma.clinicSchedule.findMany()
    * ```
    */
  get clinicSchedule(): Prisma.ClinicScheduleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patientEncounter`: Exposes CRUD operations for the **PatientEncounter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientEncounters
    * const patientEncounters = await prisma.patientEncounter.findMany()
    * ```
    */
  get patientEncounter(): Prisma.PatientEncounterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.outpatientEncounter`: Exposes CRUD operations for the **OutpatientEncounter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OutpatientEncounters
    * const outpatientEncounters = await prisma.outpatientEncounter.findMany()
    * ```
    */
  get outpatientEncounter(): Prisma.OutpatientEncounterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inpatientEncounter`: Exposes CRUD operations for the **InpatientEncounter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InpatientEncounters
    * const inpatientEncounters = await prisma.inpatientEncounter.findMany()
    * ```
    */
  get inpatientEncounter(): Prisma.InpatientEncounterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inpatientEncounterChart`: Exposes CRUD operations for the **InpatientEncounterChart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InpatientEncounterCharts
    * const inpatientEncounterCharts = await prisma.inpatientEncounterChart.findMany()
    * ```
    */
  get inpatientEncounterChart(): Prisma.InpatientEncounterChartDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inpatientEncounterOrder`: Exposes CRUD operations for the **InpatientEncounterOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InpatientEncounterOrders
    * const inpatientEncounterOrders = await prisma.inpatientEncounterOrder.findMany()
    * ```
    */
  get inpatientEncounterOrder(): Prisma.InpatientEncounterOrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.building`: Exposes CRUD operations for the **Building** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Buildings
    * const buildings = await prisma.building.findMany()
    * ```
    */
  get building(): Prisma.BuildingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.room`: Exposes CRUD operations for the **Room** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rooms
    * const rooms = await prisma.room.findMany()
    * ```
    */
  get room(): Prisma.RoomDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.facilityLog`: Exposes CRUD operations for the **FacilityLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacilityLogs
    * const facilityLogs = await prisma.facilityLog.findMany()
    * ```
    */
  get facilityLog(): Prisma.FacilityLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.insuranceProvider`: Exposes CRUD operations for the **InsuranceProvider** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InsuranceProviders
    * const insuranceProviders = await prisma.insuranceProvider.findMany()
    * ```
    */
  get insuranceProvider(): Prisma.InsuranceProviderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.insuranceClaim`: Exposes CRUD operations for the **InsuranceClaim** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InsuranceClaims
    * const insuranceClaims = await prisma.insuranceClaim.findMany()
    * ```
    */
  get insuranceClaim(): Prisma.InsuranceClaimDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.insuranceClaimItem`: Exposes CRUD operations for the **InsuranceClaimItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InsuranceClaimItems
    * const insuranceClaimItems = await prisma.insuranceClaimItem.findMany()
    * ```
    */
  get insuranceClaimItem(): Prisma.InsuranceClaimItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.log`: Exposes CRUD operations for the **Log** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logs
    * const logs = await prisma.log.findMany()
    * ```
    */
  get log(): Prisma.LogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patientProfile`: Exposes CRUD operations for the **PatientProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientProfiles
    * const patientProfiles = await prisma.patientProfile.findMany()
    * ```
    */
  get patientProfile(): Prisma.PatientProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contact.findMany()
    * ```
    */
  get contact(): Prisma.ContactDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.employment`: Exposes CRUD operations for the **Employment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employments
    * const employments = await prisma.employment.findMany()
    * ```
    */
  get employment(): Prisma.EmploymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emergencyContact`: Exposes CRUD operations for the **EmergencyContact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmergencyContacts
    * const emergencyContacts = await prisma.emergencyContact.findMany()
    * ```
    */
  get emergencyContact(): Prisma.EmergencyContactDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.consent`: Exposes CRUD operations for the **Consent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Consents
    * const consents = await prisma.consent.findMany()
    * ```
    */
  get consent(): Prisma.ConsentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.medicalRecordRequest`: Exposes CRUD operations for the **MedicalRecordRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MedicalRecordRequests
    * const medicalRecordRequests = await prisma.medicalRecordRequest.findMany()
    * ```
    */
  get medicalRecordRequest(): Prisma.MedicalRecordRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pharmacySupplier`: Exposes CRUD operations for the **PharmacySupplier** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PharmacySuppliers
    * const pharmacySuppliers = await prisma.pharmacySupplier.findMany()
    * ```
    */
  get pharmacySupplier(): Prisma.PharmacySupplierDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pharmacyBrand`: Exposes CRUD operations for the **PharmacyBrand** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PharmacyBrands
    * const pharmacyBrands = await prisma.pharmacyBrand.findMany()
    * ```
    */
  get pharmacyBrand(): Prisma.PharmacyBrandDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pharmacyItemCategory`: Exposes CRUD operations for the **PharmacyItemCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PharmacyItemCategories
    * const pharmacyItemCategories = await prisma.pharmacyItemCategory.findMany()
    * ```
    */
  get pharmacyItemCategory(): Prisma.PharmacyItemCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pharmacyItem`: Exposes CRUD operations for the **PharmacyItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PharmacyItems
    * const pharmacyItems = await prisma.pharmacyItem.findMany()
    * ```
    */
  get pharmacyItem(): Prisma.PharmacyItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.refreshToken`: Exposes CRUD operations for the **RefreshToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RefreshTokens
    * const refreshTokens = await prisma.refreshToken.findMany()
    * ```
    */
  get refreshToken(): Prisma.RefreshTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.staff`: Exposes CRUD operations for the **Staff** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Staff
    * const staff = await prisma.staff.findMany()
    * ```
    */
  get staff(): Prisma.StaffDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.doctor`: Exposes CRUD operations for the **Doctor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doctors
    * const doctors = await prisma.doctor.findMany()
    * ```
    */
  get doctor(): Prisma.DoctorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.partner`: Exposes CRUD operations for the **Partner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Partners
    * const partners = await prisma.partner.findMany()
    * ```
    */
  get partner(): Prisma.PartnerDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.3
   * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Appointment: 'Appointment',
    PatientAppointment: 'PatientAppointment',
    Transaction: 'Transaction',
    TransactionItem: 'TransactionItem',
    PaymentPlan: 'PaymentPlan',
    Payment: 'Payment',
    PaymentInstalment: 'PaymentInstalment',
    Clinic: 'Clinic',
    ClinicSchedule: 'ClinicSchedule',
    PatientEncounter: 'PatientEncounter',
    OutpatientEncounter: 'OutpatientEncounter',
    InpatientEncounter: 'InpatientEncounter',
    InpatientEncounterChart: 'InpatientEncounterChart',
    InpatientEncounterOrder: 'InpatientEncounterOrder',
    Building: 'Building',
    Room: 'Room',
    FacilityLog: 'FacilityLog',
    InsuranceProvider: 'InsuranceProvider',
    InsuranceClaim: 'InsuranceClaim',
    InsuranceClaimItem: 'InsuranceClaimItem',
    Log: 'Log',
    PatientProfile: 'PatientProfile',
    Address: 'Address',
    Contact: 'Contact',
    Employment: 'Employment',
    EmergencyContact: 'EmergencyContact',
    Consent: 'Consent',
    MedicalRecordRequest: 'MedicalRecordRequest',
    PharmacySupplier: 'PharmacySupplier',
    PharmacyBrand: 'PharmacyBrand',
    PharmacyItemCategory: 'PharmacyItemCategory',
    PharmacyItem: 'PharmacyItem',
    User: 'User',
    RefreshToken: 'RefreshToken',
    Patient: 'Patient',
    Staff: 'Staff',
    Doctor: 'Doctor',
    Partner: 'Partner'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "appointment" | "patientAppointment" | "transaction" | "transactionItem" | "paymentPlan" | "payment" | "paymentInstalment" | "clinic" | "clinicSchedule" | "patientEncounter" | "outpatientEncounter" | "inpatientEncounter" | "inpatientEncounterChart" | "inpatientEncounterOrder" | "building" | "room" | "facilityLog" | "insuranceProvider" | "insuranceClaim" | "insuranceClaimItem" | "log" | "patientProfile" | "address" | "contact" | "employment" | "emergencyContact" | "consent" | "medicalRecordRequest" | "pharmacySupplier" | "pharmacyBrand" | "pharmacyItemCategory" | "pharmacyItem" | "user" | "refreshToken" | "patient" | "staff" | "doctor" | "partner"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Appointment: {
        payload: Prisma.$AppointmentPayload<ExtArgs>
        fields: Prisma.AppointmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppointmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppointmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findFirst: {
            args: Prisma.AppointmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppointmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findMany: {
            args: Prisma.AppointmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          create: {
            args: Prisma.AppointmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          createMany: {
            args: Prisma.AppointmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppointmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          delete: {
            args: Prisma.AppointmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          update: {
            args: Prisma.AppointmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          deleteMany: {
            args: Prisma.AppointmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppointmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AppointmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          upsert: {
            args: Prisma.AppointmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          aggregate: {
            args: Prisma.AppointmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppointment>
          }
          groupBy: {
            args: Prisma.AppointmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppointmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppointmentCountArgs<ExtArgs>
            result: $Utils.Optional<AppointmentCountAggregateOutputType> | number
          }
        }
      }
      PatientAppointment: {
        payload: Prisma.$PatientAppointmentPayload<ExtArgs>
        fields: Prisma.PatientAppointmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientAppointmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientAppointmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientAppointmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientAppointmentPayload>
          }
          findFirst: {
            args: Prisma.PatientAppointmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientAppointmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientAppointmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientAppointmentPayload>
          }
          findMany: {
            args: Prisma.PatientAppointmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientAppointmentPayload>[]
          }
          create: {
            args: Prisma.PatientAppointmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientAppointmentPayload>
          }
          createMany: {
            args: Prisma.PatientAppointmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientAppointmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientAppointmentPayload>[]
          }
          delete: {
            args: Prisma.PatientAppointmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientAppointmentPayload>
          }
          update: {
            args: Prisma.PatientAppointmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientAppointmentPayload>
          }
          deleteMany: {
            args: Prisma.PatientAppointmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientAppointmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PatientAppointmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientAppointmentPayload>[]
          }
          upsert: {
            args: Prisma.PatientAppointmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientAppointmentPayload>
          }
          aggregate: {
            args: Prisma.PatientAppointmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientAppointment>
          }
          groupBy: {
            args: Prisma.PatientAppointmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientAppointmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientAppointmentCountArgs<ExtArgs>
            result: $Utils.Optional<PatientAppointmentCountAggregateOutputType> | number
          }
        }
      }
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
      TransactionItem: {
        payload: Prisma.$TransactionItemPayload<ExtArgs>
        fields: Prisma.TransactionItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionItemPayload>
          }
          findFirst: {
            args: Prisma.TransactionItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionItemPayload>
          }
          findMany: {
            args: Prisma.TransactionItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionItemPayload>[]
          }
          create: {
            args: Prisma.TransactionItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionItemPayload>
          }
          createMany: {
            args: Prisma.TransactionItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionItemPayload>[]
          }
          delete: {
            args: Prisma.TransactionItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionItemPayload>
          }
          update: {
            args: Prisma.TransactionItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionItemPayload>
          }
          deleteMany: {
            args: Prisma.TransactionItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TransactionItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionItemPayload>[]
          }
          upsert: {
            args: Prisma.TransactionItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionItemPayload>
          }
          aggregate: {
            args: Prisma.TransactionItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransactionItem>
          }
          groupBy: {
            args: Prisma.TransactionItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionItemCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionItemCountAggregateOutputType> | number
          }
        }
      }
      PaymentPlan: {
        payload: Prisma.$PaymentPlanPayload<ExtArgs>
        fields: Prisma.PaymentPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentPlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentPlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPlanPayload>
          }
          findFirst: {
            args: Prisma.PaymentPlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentPlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPlanPayload>
          }
          findMany: {
            args: Prisma.PaymentPlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPlanPayload>[]
          }
          create: {
            args: Prisma.PaymentPlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPlanPayload>
          }
          createMany: {
            args: Prisma.PaymentPlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentPlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPlanPayload>[]
          }
          delete: {
            args: Prisma.PaymentPlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPlanPayload>
          }
          update: {
            args: Prisma.PaymentPlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPlanPayload>
          }
          deleteMany: {
            args: Prisma.PaymentPlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentPlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentPlanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPlanPayload>[]
          }
          upsert: {
            args: Prisma.PaymentPlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPlanPayload>
          }
          aggregate: {
            args: Prisma.PaymentPlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentPlan>
          }
          groupBy: {
            args: Prisma.PaymentPlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentPlanCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentPlanCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      PaymentInstalment: {
        payload: Prisma.$PaymentInstalmentPayload<ExtArgs>
        fields: Prisma.PaymentInstalmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentInstalmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentInstalmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload>
          }
          findFirst: {
            args: Prisma.PaymentInstalmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentInstalmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload>
          }
          findMany: {
            args: Prisma.PaymentInstalmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload>[]
          }
          create: {
            args: Prisma.PaymentInstalmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload>
          }
          createMany: {
            args: Prisma.PaymentInstalmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentInstalmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload>[]
          }
          delete: {
            args: Prisma.PaymentInstalmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload>
          }
          update: {
            args: Prisma.PaymentInstalmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentInstalmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentInstalmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentInstalmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload>[]
          }
          upsert: {
            args: Prisma.PaymentInstalmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInstalmentPayload>
          }
          aggregate: {
            args: Prisma.PaymentInstalmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentInstalment>
          }
          groupBy: {
            args: Prisma.PaymentInstalmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentInstalmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentInstalmentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentInstalmentCountAggregateOutputType> | number
          }
        }
      }
      Clinic: {
        payload: Prisma.$ClinicPayload<ExtArgs>
        fields: Prisma.ClinicFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClinicFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClinicFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload>
          }
          findFirst: {
            args: Prisma.ClinicFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClinicFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload>
          }
          findMany: {
            args: Prisma.ClinicFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload>[]
          }
          create: {
            args: Prisma.ClinicCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload>
          }
          createMany: {
            args: Prisma.ClinicCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClinicCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload>[]
          }
          delete: {
            args: Prisma.ClinicDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload>
          }
          update: {
            args: Prisma.ClinicUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload>
          }
          deleteMany: {
            args: Prisma.ClinicDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClinicUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClinicUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload>[]
          }
          upsert: {
            args: Prisma.ClinicUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload>
          }
          aggregate: {
            args: Prisma.ClinicAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClinic>
          }
          groupBy: {
            args: Prisma.ClinicGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClinicGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClinicCountArgs<ExtArgs>
            result: $Utils.Optional<ClinicCountAggregateOutputType> | number
          }
        }
      }
      ClinicSchedule: {
        payload: Prisma.$ClinicSchedulePayload<ExtArgs>
        fields: Prisma.ClinicScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClinicScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicSchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClinicScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicSchedulePayload>
          }
          findFirst: {
            args: Prisma.ClinicScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicSchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClinicScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicSchedulePayload>
          }
          findMany: {
            args: Prisma.ClinicScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicSchedulePayload>[]
          }
          create: {
            args: Prisma.ClinicScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicSchedulePayload>
          }
          createMany: {
            args: Prisma.ClinicScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClinicScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicSchedulePayload>[]
          }
          delete: {
            args: Prisma.ClinicScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicSchedulePayload>
          }
          update: {
            args: Prisma.ClinicScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicSchedulePayload>
          }
          deleteMany: {
            args: Prisma.ClinicScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClinicScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClinicScheduleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicSchedulePayload>[]
          }
          upsert: {
            args: Prisma.ClinicScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicSchedulePayload>
          }
          aggregate: {
            args: Prisma.ClinicScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClinicSchedule>
          }
          groupBy: {
            args: Prisma.ClinicScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClinicScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClinicScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<ClinicScheduleCountAggregateOutputType> | number
          }
        }
      }
      PatientEncounter: {
        payload: Prisma.$PatientEncounterPayload<ExtArgs>
        fields: Prisma.PatientEncounterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientEncounterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEncounterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientEncounterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEncounterPayload>
          }
          findFirst: {
            args: Prisma.PatientEncounterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEncounterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientEncounterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEncounterPayload>
          }
          findMany: {
            args: Prisma.PatientEncounterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEncounterPayload>[]
          }
          create: {
            args: Prisma.PatientEncounterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEncounterPayload>
          }
          createMany: {
            args: Prisma.PatientEncounterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientEncounterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEncounterPayload>[]
          }
          delete: {
            args: Prisma.PatientEncounterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEncounterPayload>
          }
          update: {
            args: Prisma.PatientEncounterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEncounterPayload>
          }
          deleteMany: {
            args: Prisma.PatientEncounterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientEncounterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PatientEncounterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEncounterPayload>[]
          }
          upsert: {
            args: Prisma.PatientEncounterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEncounterPayload>
          }
          aggregate: {
            args: Prisma.PatientEncounterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientEncounter>
          }
          groupBy: {
            args: Prisma.PatientEncounterGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientEncounterGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientEncounterCountArgs<ExtArgs>
            result: $Utils.Optional<PatientEncounterCountAggregateOutputType> | number
          }
        }
      }
      OutpatientEncounter: {
        payload: Prisma.$OutpatientEncounterPayload<ExtArgs>
        fields: Prisma.OutpatientEncounterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OutpatientEncounterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OutpatientEncounterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload>
          }
          findFirst: {
            args: Prisma.OutpatientEncounterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OutpatientEncounterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload>
          }
          findMany: {
            args: Prisma.OutpatientEncounterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload>[]
          }
          create: {
            args: Prisma.OutpatientEncounterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload>
          }
          createMany: {
            args: Prisma.OutpatientEncounterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OutpatientEncounterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload>[]
          }
          delete: {
            args: Prisma.OutpatientEncounterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload>
          }
          update: {
            args: Prisma.OutpatientEncounterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload>
          }
          deleteMany: {
            args: Prisma.OutpatientEncounterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OutpatientEncounterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OutpatientEncounterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload>[]
          }
          upsert: {
            args: Prisma.OutpatientEncounterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutpatientEncounterPayload>
          }
          aggregate: {
            args: Prisma.OutpatientEncounterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOutpatientEncounter>
          }
          groupBy: {
            args: Prisma.OutpatientEncounterGroupByArgs<ExtArgs>
            result: $Utils.Optional<OutpatientEncounterGroupByOutputType>[]
          }
          count: {
            args: Prisma.OutpatientEncounterCountArgs<ExtArgs>
            result: $Utils.Optional<OutpatientEncounterCountAggregateOutputType> | number
          }
        }
      }
      InpatientEncounter: {
        payload: Prisma.$InpatientEncounterPayload<ExtArgs>
        fields: Prisma.InpatientEncounterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InpatientEncounterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InpatientEncounterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterPayload>
          }
          findFirst: {
            args: Prisma.InpatientEncounterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InpatientEncounterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterPayload>
          }
          findMany: {
            args: Prisma.InpatientEncounterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterPayload>[]
          }
          create: {
            args: Prisma.InpatientEncounterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterPayload>
          }
          createMany: {
            args: Prisma.InpatientEncounterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InpatientEncounterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterPayload>[]
          }
          delete: {
            args: Prisma.InpatientEncounterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterPayload>
          }
          update: {
            args: Prisma.InpatientEncounterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterPayload>
          }
          deleteMany: {
            args: Prisma.InpatientEncounterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InpatientEncounterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InpatientEncounterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterPayload>[]
          }
          upsert: {
            args: Prisma.InpatientEncounterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterPayload>
          }
          aggregate: {
            args: Prisma.InpatientEncounterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInpatientEncounter>
          }
          groupBy: {
            args: Prisma.InpatientEncounterGroupByArgs<ExtArgs>
            result: $Utils.Optional<InpatientEncounterGroupByOutputType>[]
          }
          count: {
            args: Prisma.InpatientEncounterCountArgs<ExtArgs>
            result: $Utils.Optional<InpatientEncounterCountAggregateOutputType> | number
          }
        }
      }
      InpatientEncounterChart: {
        payload: Prisma.$InpatientEncounterChartPayload<ExtArgs>
        fields: Prisma.InpatientEncounterChartFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InpatientEncounterChartFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InpatientEncounterChartFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload>
          }
          findFirst: {
            args: Prisma.InpatientEncounterChartFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InpatientEncounterChartFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload>
          }
          findMany: {
            args: Prisma.InpatientEncounterChartFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload>[]
          }
          create: {
            args: Prisma.InpatientEncounterChartCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload>
          }
          createMany: {
            args: Prisma.InpatientEncounterChartCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InpatientEncounterChartCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload>[]
          }
          delete: {
            args: Prisma.InpatientEncounterChartDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload>
          }
          update: {
            args: Prisma.InpatientEncounterChartUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload>
          }
          deleteMany: {
            args: Prisma.InpatientEncounterChartDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InpatientEncounterChartUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InpatientEncounterChartUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload>[]
          }
          upsert: {
            args: Prisma.InpatientEncounterChartUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterChartPayload>
          }
          aggregate: {
            args: Prisma.InpatientEncounterChartAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInpatientEncounterChart>
          }
          groupBy: {
            args: Prisma.InpatientEncounterChartGroupByArgs<ExtArgs>
            result: $Utils.Optional<InpatientEncounterChartGroupByOutputType>[]
          }
          count: {
            args: Prisma.InpatientEncounterChartCountArgs<ExtArgs>
            result: $Utils.Optional<InpatientEncounterChartCountAggregateOutputType> | number
          }
        }
      }
      InpatientEncounterOrder: {
        payload: Prisma.$InpatientEncounterOrderPayload<ExtArgs>
        fields: Prisma.InpatientEncounterOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InpatientEncounterOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InpatientEncounterOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload>
          }
          findFirst: {
            args: Prisma.InpatientEncounterOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InpatientEncounterOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload>
          }
          findMany: {
            args: Prisma.InpatientEncounterOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload>[]
          }
          create: {
            args: Prisma.InpatientEncounterOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload>
          }
          createMany: {
            args: Prisma.InpatientEncounterOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InpatientEncounterOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload>[]
          }
          delete: {
            args: Prisma.InpatientEncounterOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload>
          }
          update: {
            args: Prisma.InpatientEncounterOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload>
          }
          deleteMany: {
            args: Prisma.InpatientEncounterOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InpatientEncounterOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InpatientEncounterOrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload>[]
          }
          upsert: {
            args: Prisma.InpatientEncounterOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InpatientEncounterOrderPayload>
          }
          aggregate: {
            args: Prisma.InpatientEncounterOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInpatientEncounterOrder>
          }
          groupBy: {
            args: Prisma.InpatientEncounterOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<InpatientEncounterOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.InpatientEncounterOrderCountArgs<ExtArgs>
            result: $Utils.Optional<InpatientEncounterOrderCountAggregateOutputType> | number
          }
        }
      }
      Building: {
        payload: Prisma.$BuildingPayload<ExtArgs>
        fields: Prisma.BuildingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BuildingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BuildingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>
          }
          findFirst: {
            args: Prisma.BuildingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BuildingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>
          }
          findMany: {
            args: Prisma.BuildingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>[]
          }
          create: {
            args: Prisma.BuildingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>
          }
          createMany: {
            args: Prisma.BuildingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BuildingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>[]
          }
          delete: {
            args: Prisma.BuildingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>
          }
          update: {
            args: Prisma.BuildingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>
          }
          deleteMany: {
            args: Prisma.BuildingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BuildingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BuildingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>[]
          }
          upsert: {
            args: Prisma.BuildingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildingPayload>
          }
          aggregate: {
            args: Prisma.BuildingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBuilding>
          }
          groupBy: {
            args: Prisma.BuildingGroupByArgs<ExtArgs>
            result: $Utils.Optional<BuildingGroupByOutputType>[]
          }
          count: {
            args: Prisma.BuildingCountArgs<ExtArgs>
            result: $Utils.Optional<BuildingCountAggregateOutputType> | number
          }
        }
      }
      Room: {
        payload: Prisma.$RoomPayload<ExtArgs>
        fields: Prisma.RoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          findFirst: {
            args: Prisma.RoomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          findMany: {
            args: Prisma.RoomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          create: {
            args: Prisma.RoomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          createMany: {
            args: Prisma.RoomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoomCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          delete: {
            args: Prisma.RoomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          update: {
            args: Prisma.RoomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          deleteMany: {
            args: Prisma.RoomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoomUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          upsert: {
            args: Prisma.RoomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          aggregate: {
            args: Prisma.RoomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoom>
          }
          groupBy: {
            args: Prisma.RoomGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoomCountArgs<ExtArgs>
            result: $Utils.Optional<RoomCountAggregateOutputType> | number
          }
        }
      }
      FacilityLog: {
        payload: Prisma.$FacilityLogPayload<ExtArgs>
        fields: Prisma.FacilityLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FacilityLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacilityLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FacilityLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacilityLogPayload>
          }
          findFirst: {
            args: Prisma.FacilityLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacilityLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FacilityLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacilityLogPayload>
          }
          findMany: {
            args: Prisma.FacilityLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacilityLogPayload>[]
          }
          create: {
            args: Prisma.FacilityLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacilityLogPayload>
          }
          createMany: {
            args: Prisma.FacilityLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FacilityLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacilityLogPayload>[]
          }
          delete: {
            args: Prisma.FacilityLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacilityLogPayload>
          }
          update: {
            args: Prisma.FacilityLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacilityLogPayload>
          }
          deleteMany: {
            args: Prisma.FacilityLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FacilityLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FacilityLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacilityLogPayload>[]
          }
          upsert: {
            args: Prisma.FacilityLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacilityLogPayload>
          }
          aggregate: {
            args: Prisma.FacilityLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFacilityLog>
          }
          groupBy: {
            args: Prisma.FacilityLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<FacilityLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.FacilityLogCountArgs<ExtArgs>
            result: $Utils.Optional<FacilityLogCountAggregateOutputType> | number
          }
        }
      }
      InsuranceProvider: {
        payload: Prisma.$InsuranceProviderPayload<ExtArgs>
        fields: Prisma.InsuranceProviderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InsuranceProviderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceProviderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InsuranceProviderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceProviderPayload>
          }
          findFirst: {
            args: Prisma.InsuranceProviderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceProviderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InsuranceProviderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceProviderPayload>
          }
          findMany: {
            args: Prisma.InsuranceProviderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceProviderPayload>[]
          }
          create: {
            args: Prisma.InsuranceProviderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceProviderPayload>
          }
          createMany: {
            args: Prisma.InsuranceProviderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InsuranceProviderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceProviderPayload>[]
          }
          delete: {
            args: Prisma.InsuranceProviderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceProviderPayload>
          }
          update: {
            args: Prisma.InsuranceProviderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceProviderPayload>
          }
          deleteMany: {
            args: Prisma.InsuranceProviderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InsuranceProviderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InsuranceProviderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceProviderPayload>[]
          }
          upsert: {
            args: Prisma.InsuranceProviderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceProviderPayload>
          }
          aggregate: {
            args: Prisma.InsuranceProviderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInsuranceProvider>
          }
          groupBy: {
            args: Prisma.InsuranceProviderGroupByArgs<ExtArgs>
            result: $Utils.Optional<InsuranceProviderGroupByOutputType>[]
          }
          count: {
            args: Prisma.InsuranceProviderCountArgs<ExtArgs>
            result: $Utils.Optional<InsuranceProviderCountAggregateOutputType> | number
          }
        }
      }
      InsuranceClaim: {
        payload: Prisma.$InsuranceClaimPayload<ExtArgs>
        fields: Prisma.InsuranceClaimFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InsuranceClaimFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InsuranceClaimFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimPayload>
          }
          findFirst: {
            args: Prisma.InsuranceClaimFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InsuranceClaimFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimPayload>
          }
          findMany: {
            args: Prisma.InsuranceClaimFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimPayload>[]
          }
          create: {
            args: Prisma.InsuranceClaimCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimPayload>
          }
          createMany: {
            args: Prisma.InsuranceClaimCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InsuranceClaimCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimPayload>[]
          }
          delete: {
            args: Prisma.InsuranceClaimDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimPayload>
          }
          update: {
            args: Prisma.InsuranceClaimUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimPayload>
          }
          deleteMany: {
            args: Prisma.InsuranceClaimDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InsuranceClaimUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InsuranceClaimUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimPayload>[]
          }
          upsert: {
            args: Prisma.InsuranceClaimUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimPayload>
          }
          aggregate: {
            args: Prisma.InsuranceClaimAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInsuranceClaim>
          }
          groupBy: {
            args: Prisma.InsuranceClaimGroupByArgs<ExtArgs>
            result: $Utils.Optional<InsuranceClaimGroupByOutputType>[]
          }
          count: {
            args: Prisma.InsuranceClaimCountArgs<ExtArgs>
            result: $Utils.Optional<InsuranceClaimCountAggregateOutputType> | number
          }
        }
      }
      InsuranceClaimItem: {
        payload: Prisma.$InsuranceClaimItemPayload<ExtArgs>
        fields: Prisma.InsuranceClaimItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InsuranceClaimItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InsuranceClaimItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload>
          }
          findFirst: {
            args: Prisma.InsuranceClaimItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InsuranceClaimItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload>
          }
          findMany: {
            args: Prisma.InsuranceClaimItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload>[]
          }
          create: {
            args: Prisma.InsuranceClaimItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload>
          }
          createMany: {
            args: Prisma.InsuranceClaimItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InsuranceClaimItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload>[]
          }
          delete: {
            args: Prisma.InsuranceClaimItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload>
          }
          update: {
            args: Prisma.InsuranceClaimItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload>
          }
          deleteMany: {
            args: Prisma.InsuranceClaimItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InsuranceClaimItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InsuranceClaimItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload>[]
          }
          upsert: {
            args: Prisma.InsuranceClaimItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsuranceClaimItemPayload>
          }
          aggregate: {
            args: Prisma.InsuranceClaimItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInsuranceClaimItem>
          }
          groupBy: {
            args: Prisma.InsuranceClaimItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<InsuranceClaimItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.InsuranceClaimItemCountArgs<ExtArgs>
            result: $Utils.Optional<InsuranceClaimItemCountAggregateOutputType> | number
          }
        }
      }
      Log: {
        payload: Prisma.$LogPayload<ExtArgs>
        fields: Prisma.LogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          findFirst: {
            args: Prisma.LogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          findMany: {
            args: Prisma.LogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>[]
          }
          create: {
            args: Prisma.LogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          createMany: {
            args: Prisma.LogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>[]
          }
          delete: {
            args: Prisma.LogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          update: {
            args: Prisma.LogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          deleteMany: {
            args: Prisma.LogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>[]
          }
          upsert: {
            args: Prisma.LogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          aggregate: {
            args: Prisma.LogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLog>
          }
          groupBy: {
            args: Prisma.LogGroupByArgs<ExtArgs>
            result: $Utils.Optional<LogGroupByOutputType>[]
          }
          count: {
            args: Prisma.LogCountArgs<ExtArgs>
            result: $Utils.Optional<LogCountAggregateOutputType> | number
          }
        }
      }
      PatientProfile: {
        payload: Prisma.$PatientProfilePayload<ExtArgs>
        fields: Prisma.PatientProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientProfilePayload>
          }
          findFirst: {
            args: Prisma.PatientProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientProfilePayload>
          }
          findMany: {
            args: Prisma.PatientProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientProfilePayload>[]
          }
          create: {
            args: Prisma.PatientProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientProfilePayload>
          }
          createMany: {
            args: Prisma.PatientProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientProfilePayload>[]
          }
          delete: {
            args: Prisma.PatientProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientProfilePayload>
          }
          update: {
            args: Prisma.PatientProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientProfilePayload>
          }
          deleteMany: {
            args: Prisma.PatientProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PatientProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientProfilePayload>[]
          }
          upsert: {
            args: Prisma.PatientProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientProfilePayload>
          }
          aggregate: {
            args: Prisma.PatientProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientProfile>
          }
          groupBy: {
            args: Prisma.PatientProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientProfileCountArgs<ExtArgs>
            result: $Utils.Optional<PatientProfileCountAggregateOutputType> | number
          }
        }
      }
      Address: {
        payload: Prisma.$AddressPayload<ExtArgs>
        fields: Prisma.AddressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AddressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findFirst: {
            args: Prisma.AddressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findMany: {
            args: Prisma.AddressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          create: {
            args: Prisma.AddressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          createMany: {
            args: Prisma.AddressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AddressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          delete: {
            args: Prisma.AddressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          update: {
            args: Prisma.AddressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          deleteMany: {
            args: Prisma.AddressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AddressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AddressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          upsert: {
            args: Prisma.AddressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          aggregate: {
            args: Prisma.AddressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAddress>
          }
          groupBy: {
            args: Prisma.AddressGroupByArgs<ExtArgs>
            result: $Utils.Optional<AddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.AddressCountArgs<ExtArgs>
            result: $Utils.Optional<AddressCountAggregateOutputType> | number
          }
        }
      }
      Contact: {
        payload: Prisma.$ContactPayload<ExtArgs>
        fields: Prisma.ContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findFirst: {
            args: Prisma.ContactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findMany: {
            args: Prisma.ContactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          create: {
            args: Prisma.ContactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          createMany: {
            args: Prisma.ContactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          delete: {
            args: Prisma.ContactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          update: {
            args: Prisma.ContactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          deleteMany: {
            args: Prisma.ContactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContactUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          upsert: {
            args: Prisma.ContactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          aggregate: {
            args: Prisma.ContactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContact>
          }
          groupBy: {
            args: Prisma.ContactGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactCountArgs<ExtArgs>
            result: $Utils.Optional<ContactCountAggregateOutputType> | number
          }
        }
      }
      Employment: {
        payload: Prisma.$EmploymentPayload<ExtArgs>
        fields: Prisma.EmploymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmploymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmploymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload>
          }
          findFirst: {
            args: Prisma.EmploymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmploymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload>
          }
          findMany: {
            args: Prisma.EmploymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload>[]
          }
          create: {
            args: Prisma.EmploymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload>
          }
          createMany: {
            args: Prisma.EmploymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmploymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload>[]
          }
          delete: {
            args: Prisma.EmploymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload>
          }
          update: {
            args: Prisma.EmploymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload>
          }
          deleteMany: {
            args: Prisma.EmploymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmploymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmploymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload>[]
          }
          upsert: {
            args: Prisma.EmploymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmploymentPayload>
          }
          aggregate: {
            args: Prisma.EmploymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployment>
          }
          groupBy: {
            args: Prisma.EmploymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmploymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmploymentCountArgs<ExtArgs>
            result: $Utils.Optional<EmploymentCountAggregateOutputType> | number
          }
        }
      }
      EmergencyContact: {
        payload: Prisma.$EmergencyContactPayload<ExtArgs>
        fields: Prisma.EmergencyContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmergencyContactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmergencyContactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload>
          }
          findFirst: {
            args: Prisma.EmergencyContactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmergencyContactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload>
          }
          findMany: {
            args: Prisma.EmergencyContactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload>[]
          }
          create: {
            args: Prisma.EmergencyContactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload>
          }
          createMany: {
            args: Prisma.EmergencyContactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmergencyContactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload>[]
          }
          delete: {
            args: Prisma.EmergencyContactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload>
          }
          update: {
            args: Prisma.EmergencyContactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload>
          }
          deleteMany: {
            args: Prisma.EmergencyContactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmergencyContactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmergencyContactUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload>[]
          }
          upsert: {
            args: Prisma.EmergencyContactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmergencyContactPayload>
          }
          aggregate: {
            args: Prisma.EmergencyContactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmergencyContact>
          }
          groupBy: {
            args: Prisma.EmergencyContactGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmergencyContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmergencyContactCountArgs<ExtArgs>
            result: $Utils.Optional<EmergencyContactCountAggregateOutputType> | number
          }
        }
      }
      Consent: {
        payload: Prisma.$ConsentPayload<ExtArgs>
        fields: Prisma.ConsentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentPayload>
          }
          findFirst: {
            args: Prisma.ConsentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentPayload>
          }
          findMany: {
            args: Prisma.ConsentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentPayload>[]
          }
          create: {
            args: Prisma.ConsentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentPayload>
          }
          createMany: {
            args: Prisma.ConsentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConsentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentPayload>[]
          }
          delete: {
            args: Prisma.ConsentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentPayload>
          }
          update: {
            args: Prisma.ConsentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentPayload>
          }
          deleteMany: {
            args: Prisma.ConsentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConsentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentPayload>[]
          }
          upsert: {
            args: Prisma.ConsentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentPayload>
          }
          aggregate: {
            args: Prisma.ConsentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsent>
          }
          groupBy: {
            args: Prisma.ConsentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsentCountArgs<ExtArgs>
            result: $Utils.Optional<ConsentCountAggregateOutputType> | number
          }
        }
      }
      MedicalRecordRequest: {
        payload: Prisma.$MedicalRecordRequestPayload<ExtArgs>
        fields: Prisma.MedicalRecordRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedicalRecordRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicalRecordRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload>
          }
          findFirst: {
            args: Prisma.MedicalRecordRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicalRecordRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload>
          }
          findMany: {
            args: Prisma.MedicalRecordRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload>[]
          }
          create: {
            args: Prisma.MedicalRecordRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload>
          }
          createMany: {
            args: Prisma.MedicalRecordRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MedicalRecordRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload>[]
          }
          delete: {
            args: Prisma.MedicalRecordRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload>
          }
          update: {
            args: Prisma.MedicalRecordRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload>
          }
          deleteMany: {
            args: Prisma.MedicalRecordRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MedicalRecordRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MedicalRecordRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload>[]
          }
          upsert: {
            args: Prisma.MedicalRecordRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordRequestPayload>
          }
          aggregate: {
            args: Prisma.MedicalRecordRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMedicalRecordRequest>
          }
          groupBy: {
            args: Prisma.MedicalRecordRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<MedicalRecordRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicalRecordRequestCountArgs<ExtArgs>
            result: $Utils.Optional<MedicalRecordRequestCountAggregateOutputType> | number
          }
        }
      }
      PharmacySupplier: {
        payload: Prisma.$PharmacySupplierPayload<ExtArgs>
        fields: Prisma.PharmacySupplierFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PharmacySupplierFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacySupplierPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PharmacySupplierFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacySupplierPayload>
          }
          findFirst: {
            args: Prisma.PharmacySupplierFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacySupplierPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PharmacySupplierFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacySupplierPayload>
          }
          findMany: {
            args: Prisma.PharmacySupplierFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacySupplierPayload>[]
          }
          create: {
            args: Prisma.PharmacySupplierCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacySupplierPayload>
          }
          createMany: {
            args: Prisma.PharmacySupplierCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PharmacySupplierCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacySupplierPayload>[]
          }
          delete: {
            args: Prisma.PharmacySupplierDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacySupplierPayload>
          }
          update: {
            args: Prisma.PharmacySupplierUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacySupplierPayload>
          }
          deleteMany: {
            args: Prisma.PharmacySupplierDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PharmacySupplierUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PharmacySupplierUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacySupplierPayload>[]
          }
          upsert: {
            args: Prisma.PharmacySupplierUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacySupplierPayload>
          }
          aggregate: {
            args: Prisma.PharmacySupplierAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePharmacySupplier>
          }
          groupBy: {
            args: Prisma.PharmacySupplierGroupByArgs<ExtArgs>
            result: $Utils.Optional<PharmacySupplierGroupByOutputType>[]
          }
          count: {
            args: Prisma.PharmacySupplierCountArgs<ExtArgs>
            result: $Utils.Optional<PharmacySupplierCountAggregateOutputType> | number
          }
        }
      }
      PharmacyBrand: {
        payload: Prisma.$PharmacyBrandPayload<ExtArgs>
        fields: Prisma.PharmacyBrandFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PharmacyBrandFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyBrandPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PharmacyBrandFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyBrandPayload>
          }
          findFirst: {
            args: Prisma.PharmacyBrandFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyBrandPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PharmacyBrandFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyBrandPayload>
          }
          findMany: {
            args: Prisma.PharmacyBrandFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyBrandPayload>[]
          }
          create: {
            args: Prisma.PharmacyBrandCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyBrandPayload>
          }
          createMany: {
            args: Prisma.PharmacyBrandCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PharmacyBrandCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyBrandPayload>[]
          }
          delete: {
            args: Prisma.PharmacyBrandDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyBrandPayload>
          }
          update: {
            args: Prisma.PharmacyBrandUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyBrandPayload>
          }
          deleteMany: {
            args: Prisma.PharmacyBrandDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PharmacyBrandUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PharmacyBrandUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyBrandPayload>[]
          }
          upsert: {
            args: Prisma.PharmacyBrandUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyBrandPayload>
          }
          aggregate: {
            args: Prisma.PharmacyBrandAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePharmacyBrand>
          }
          groupBy: {
            args: Prisma.PharmacyBrandGroupByArgs<ExtArgs>
            result: $Utils.Optional<PharmacyBrandGroupByOutputType>[]
          }
          count: {
            args: Prisma.PharmacyBrandCountArgs<ExtArgs>
            result: $Utils.Optional<PharmacyBrandCountAggregateOutputType> | number
          }
        }
      }
      PharmacyItemCategory: {
        payload: Prisma.$PharmacyItemCategoryPayload<ExtArgs>
        fields: Prisma.PharmacyItemCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PharmacyItemCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PharmacyItemCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload>
          }
          findFirst: {
            args: Prisma.PharmacyItemCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PharmacyItemCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload>
          }
          findMany: {
            args: Prisma.PharmacyItemCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload>[]
          }
          create: {
            args: Prisma.PharmacyItemCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload>
          }
          createMany: {
            args: Prisma.PharmacyItemCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PharmacyItemCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload>[]
          }
          delete: {
            args: Prisma.PharmacyItemCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload>
          }
          update: {
            args: Prisma.PharmacyItemCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload>
          }
          deleteMany: {
            args: Prisma.PharmacyItemCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PharmacyItemCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PharmacyItemCategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload>[]
          }
          upsert: {
            args: Prisma.PharmacyItemCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemCategoryPayload>
          }
          aggregate: {
            args: Prisma.PharmacyItemCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePharmacyItemCategory>
          }
          groupBy: {
            args: Prisma.PharmacyItemCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<PharmacyItemCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.PharmacyItemCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<PharmacyItemCategoryCountAggregateOutputType> | number
          }
        }
      }
      PharmacyItem: {
        payload: Prisma.$PharmacyItemPayload<ExtArgs>
        fields: Prisma.PharmacyItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PharmacyItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PharmacyItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemPayload>
          }
          findFirst: {
            args: Prisma.PharmacyItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PharmacyItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemPayload>
          }
          findMany: {
            args: Prisma.PharmacyItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemPayload>[]
          }
          create: {
            args: Prisma.PharmacyItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemPayload>
          }
          createMany: {
            args: Prisma.PharmacyItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PharmacyItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemPayload>[]
          }
          delete: {
            args: Prisma.PharmacyItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemPayload>
          }
          update: {
            args: Prisma.PharmacyItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemPayload>
          }
          deleteMany: {
            args: Prisma.PharmacyItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PharmacyItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PharmacyItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemPayload>[]
          }
          upsert: {
            args: Prisma.PharmacyItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacyItemPayload>
          }
          aggregate: {
            args: Prisma.PharmacyItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePharmacyItem>
          }
          groupBy: {
            args: Prisma.PharmacyItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<PharmacyItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.PharmacyItemCountArgs<ExtArgs>
            result: $Utils.Optional<PharmacyItemCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      RefreshToken: {
        payload: Prisma.$RefreshTokenPayload<ExtArgs>
        fields: Prisma.RefreshTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefreshTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefreshTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findFirst: {
            args: Prisma.RefreshTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefreshTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findMany: {
            args: Prisma.RefreshTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          create: {
            args: Prisma.RefreshTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          createMany: {
            args: Prisma.RefreshTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RefreshTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          delete: {
            args: Prisma.RefreshTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          update: {
            args: Prisma.RefreshTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          deleteMany: {
            args: Prisma.RefreshTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RefreshTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RefreshTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          upsert: {
            args: Prisma.RefreshTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          aggregate: {
            args: Prisma.RefreshTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRefreshToken>
          }
          groupBy: {
            args: Prisma.RefreshTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefreshTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefreshTokenCountArgs<ExtArgs>
            result: $Utils.Optional<RefreshTokenCountAggregateOutputType> | number
          }
        }
      }
      Patient: {
        payload: Prisma.$PatientPayload<ExtArgs>
        fields: Prisma.PatientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findFirst: {
            args: Prisma.PatientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findMany: {
            args: Prisma.PatientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          create: {
            args: Prisma.PatientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          createMany: {
            args: Prisma.PatientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          delete: {
            args: Prisma.PatientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          update: {
            args: Prisma.PatientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          deleteMany: {
            args: Prisma.PatientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PatientUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          upsert: {
            args: Prisma.PatientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          aggregate: {
            args: Prisma.PatientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatient>
          }
          groupBy: {
            args: Prisma.PatientGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientCountArgs<ExtArgs>
            result: $Utils.Optional<PatientCountAggregateOutputType> | number
          }
        }
      }
      Staff: {
        payload: Prisma.$StaffPayload<ExtArgs>
        fields: Prisma.StaffFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          findFirst: {
            args: Prisma.StaffFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          findMany: {
            args: Prisma.StaffFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>[]
          }
          create: {
            args: Prisma.StaffCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          createMany: {
            args: Prisma.StaffCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StaffCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>[]
          }
          delete: {
            args: Prisma.StaffDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          update: {
            args: Prisma.StaffUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          deleteMany: {
            args: Prisma.StaffDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaffUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StaffUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>[]
          }
          upsert: {
            args: Prisma.StaffUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          aggregate: {
            args: Prisma.StaffAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaff>
          }
          groupBy: {
            args: Prisma.StaffGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaffCountArgs<ExtArgs>
            result: $Utils.Optional<StaffCountAggregateOutputType> | number
          }
        }
      }
      Doctor: {
        payload: Prisma.$DoctorPayload<ExtArgs>
        fields: Prisma.DoctorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          findFirst: {
            args: Prisma.DoctorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          findMany: {
            args: Prisma.DoctorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>[]
          }
          create: {
            args: Prisma.DoctorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          createMany: {
            args: Prisma.DoctorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoctorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>[]
          }
          delete: {
            args: Prisma.DoctorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          update: {
            args: Prisma.DoctorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          deleteMany: {
            args: Prisma.DoctorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DoctorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>[]
          }
          upsert: {
            args: Prisma.DoctorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          aggregate: {
            args: Prisma.DoctorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctor>
          }
          groupBy: {
            args: Prisma.DoctorGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoctorGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorCountArgs<ExtArgs>
            result: $Utils.Optional<DoctorCountAggregateOutputType> | number
          }
        }
      }
      Partner: {
        payload: Prisma.$PartnerPayload<ExtArgs>
        fields: Prisma.PartnerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartnerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartnerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          findFirst: {
            args: Prisma.PartnerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartnerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          findMany: {
            args: Prisma.PartnerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>[]
          }
          create: {
            args: Prisma.PartnerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          createMany: {
            args: Prisma.PartnerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PartnerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>[]
          }
          delete: {
            args: Prisma.PartnerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          update: {
            args: Prisma.PartnerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          deleteMany: {
            args: Prisma.PartnerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartnerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PartnerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>[]
          }
          upsert: {
            args: Prisma.PartnerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartnerPayload>
          }
          aggregate: {
            args: Prisma.PartnerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePartner>
          }
          groupBy: {
            args: Prisma.PartnerGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartnerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartnerCountArgs<ExtArgs>
            result: $Utils.Optional<PartnerCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    appointment?: AppointmentOmit
    patientAppointment?: PatientAppointmentOmit
    transaction?: TransactionOmit
    transactionItem?: TransactionItemOmit
    paymentPlan?: PaymentPlanOmit
    payment?: PaymentOmit
    paymentInstalment?: PaymentInstalmentOmit
    clinic?: ClinicOmit
    clinicSchedule?: ClinicScheduleOmit
    patientEncounter?: PatientEncounterOmit
    outpatientEncounter?: OutpatientEncounterOmit
    inpatientEncounter?: InpatientEncounterOmit
    inpatientEncounterChart?: InpatientEncounterChartOmit
    inpatientEncounterOrder?: InpatientEncounterOrderOmit
    building?: BuildingOmit
    room?: RoomOmit
    facilityLog?: FacilityLogOmit
    insuranceProvider?: InsuranceProviderOmit
    insuranceClaim?: InsuranceClaimOmit
    insuranceClaimItem?: InsuranceClaimItemOmit
    log?: LogOmit
    patientProfile?: PatientProfileOmit
    address?: AddressOmit
    contact?: ContactOmit
    employment?: EmploymentOmit
    emergencyContact?: EmergencyContactOmit
    consent?: ConsentOmit
    medicalRecordRequest?: MedicalRecordRequestOmit
    pharmacySupplier?: PharmacySupplierOmit
    pharmacyBrand?: PharmacyBrandOmit
    pharmacyItemCategory?: PharmacyItemCategoryOmit
    pharmacyItem?: PharmacyItemOmit
    user?: UserOmit
    refreshToken?: RefreshTokenOmit
    patient?: PatientOmit
    staff?: StaffOmit
    doctor?: DoctorOmit
    partner?: PartnerOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TransactionCountOutputType
   */

  export type TransactionCountOutputType = {
    items: number
    payments: number
  }

  export type TransactionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | TransactionCountOutputTypeCountItemsArgs
    payments?: boolean | TransactionCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * TransactionCountOutputType without action
   */
  export type TransactionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionCountOutputType
     */
    select?: TransactionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TransactionCountOutputType without action
   */
  export type TransactionCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionItemWhereInput
  }

  /**
   * TransactionCountOutputType without action
   */
  export type TransactionCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }


  /**
   * Count Type PaymentPlanCountOutputType
   */

  export type PaymentPlanCountOutputType = {
    instalments: number
  }

  export type PaymentPlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instalments?: boolean | PaymentPlanCountOutputTypeCountInstalmentsArgs
  }

  // Custom InputTypes
  /**
   * PaymentPlanCountOutputType without action
   */
  export type PaymentPlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentPlanCountOutputType
     */
    select?: PaymentPlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PaymentPlanCountOutputType without action
   */
  export type PaymentPlanCountOutputTypeCountInstalmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentInstalmentWhereInput
  }


  /**
   * Count Type PaymentCountOutputType
   */

  export type PaymentCountOutputType = {
    instalments: number
  }

  export type PaymentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instalments?: boolean | PaymentCountOutputTypeCountInstalmentsArgs
  }

  // Custom InputTypes
  /**
   * PaymentCountOutputType without action
   */
  export type PaymentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentCountOutputType
     */
    select?: PaymentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PaymentCountOutputType without action
   */
  export type PaymentCountOutputTypeCountInstalmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentInstalmentWhereInput
  }


  /**
   * Count Type ClinicCountOutputType
   */

  export type ClinicCountOutputType = {
    schedules: number
  }

  export type ClinicCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedules?: boolean | ClinicCountOutputTypeCountSchedulesArgs
  }

  // Custom InputTypes
  /**
   * ClinicCountOutputType without action
   */
  export type ClinicCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicCountOutputType
     */
    select?: ClinicCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClinicCountOutputType without action
   */
  export type ClinicCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClinicScheduleWhereInput
  }


  /**
   * Count Type InpatientEncounterCountOutputType
   */

  export type InpatientEncounterCountOutputType = {
    charts: number
    orders: number
    medicalRecordRequest: number
  }

  export type InpatientEncounterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    charts?: boolean | InpatientEncounterCountOutputTypeCountChartsArgs
    orders?: boolean | InpatientEncounterCountOutputTypeCountOrdersArgs
    medicalRecordRequest?: boolean | InpatientEncounterCountOutputTypeCountMedicalRecordRequestArgs
  }

  // Custom InputTypes
  /**
   * InpatientEncounterCountOutputType without action
   */
  export type InpatientEncounterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterCountOutputType
     */
    select?: InpatientEncounterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InpatientEncounterCountOutputType without action
   */
  export type InpatientEncounterCountOutputTypeCountChartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InpatientEncounterChartWhereInput
  }

  /**
   * InpatientEncounterCountOutputType without action
   */
  export type InpatientEncounterCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InpatientEncounterOrderWhereInput
  }

  /**
   * InpatientEncounterCountOutputType without action
   */
  export type InpatientEncounterCountOutputTypeCountMedicalRecordRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalRecordRequestWhereInput
  }


  /**
   * Count Type BuildingCountOutputType
   */

  export type BuildingCountOutputType = {
    rooms: number
  }

  export type BuildingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rooms?: boolean | BuildingCountOutputTypeCountRoomsArgs
  }

  // Custom InputTypes
  /**
   * BuildingCountOutputType without action
   */
  export type BuildingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildingCountOutputType
     */
    select?: BuildingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BuildingCountOutputType without action
   */
  export type BuildingCountOutputTypeCountRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomWhereInput
  }


  /**
   * Count Type RoomCountOutputType
   */

  export type RoomCountOutputType = {
    appointments: number
  }

  export type RoomCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointments?: boolean | RoomCountOutputTypeCountAppointmentsArgs
  }

  // Custom InputTypes
  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomCountOutputType
     */
    select?: RoomCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }


  /**
   * Count Type InsuranceProviderCountOutputType
   */

  export type InsuranceProviderCountOutputType = {
    claims: number
  }

  export type InsuranceProviderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    claims?: boolean | InsuranceProviderCountOutputTypeCountClaimsArgs
  }

  // Custom InputTypes
  /**
   * InsuranceProviderCountOutputType without action
   */
  export type InsuranceProviderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceProviderCountOutputType
     */
    select?: InsuranceProviderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InsuranceProviderCountOutputType without action
   */
  export type InsuranceProviderCountOutputTypeCountClaimsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InsuranceClaimWhereInput
  }


  /**
   * Count Type InsuranceClaimCountOutputType
   */

  export type InsuranceClaimCountOutputType = {
    items: number
  }

  export type InsuranceClaimCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | InsuranceClaimCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * InsuranceClaimCountOutputType without action
   */
  export type InsuranceClaimCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaimCountOutputType
     */
    select?: InsuranceClaimCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InsuranceClaimCountOutputType without action
   */
  export type InsuranceClaimCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InsuranceClaimItemWhereInput
  }


  /**
   * Count Type PatientProfileCountOutputType
   */

  export type PatientProfileCountOutputType = {
    patientEncounters: number
    inpatientEncounters: number
    outpatientEncounters: number
    appointments: number
    patientAppointments: number
    addresses: number
    contacts: number
    employments: number
    emergencyContacts: number
    medicalRecordRequests: number
  }

  export type PatientProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientEncounters?: boolean | PatientProfileCountOutputTypeCountPatientEncountersArgs
    inpatientEncounters?: boolean | PatientProfileCountOutputTypeCountInpatientEncountersArgs
    outpatientEncounters?: boolean | PatientProfileCountOutputTypeCountOutpatientEncountersArgs
    appointments?: boolean | PatientProfileCountOutputTypeCountAppointmentsArgs
    patientAppointments?: boolean | PatientProfileCountOutputTypeCountPatientAppointmentsArgs
    addresses?: boolean | PatientProfileCountOutputTypeCountAddressesArgs
    contacts?: boolean | PatientProfileCountOutputTypeCountContactsArgs
    employments?: boolean | PatientProfileCountOutputTypeCountEmploymentsArgs
    emergencyContacts?: boolean | PatientProfileCountOutputTypeCountEmergencyContactsArgs
    medicalRecordRequests?: boolean | PatientProfileCountOutputTypeCountMedicalRecordRequestsArgs
  }

  // Custom InputTypes
  /**
   * PatientProfileCountOutputType without action
   */
  export type PatientProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientProfileCountOutputType
     */
    select?: PatientProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientProfileCountOutputType without action
   */
  export type PatientProfileCountOutputTypeCountPatientEncountersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientEncounterWhereInput
  }

  /**
   * PatientProfileCountOutputType without action
   */
  export type PatientProfileCountOutputTypeCountInpatientEncountersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InpatientEncounterWhereInput
  }

  /**
   * PatientProfileCountOutputType without action
   */
  export type PatientProfileCountOutputTypeCountOutpatientEncountersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OutpatientEncounterWhereInput
  }

  /**
   * PatientProfileCountOutputType without action
   */
  export type PatientProfileCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * PatientProfileCountOutputType without action
   */
  export type PatientProfileCountOutputTypeCountPatientAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientAppointmentWhereInput
  }

  /**
   * PatientProfileCountOutputType without action
   */
  export type PatientProfileCountOutputTypeCountAddressesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
  }

  /**
   * PatientProfileCountOutputType without action
   */
  export type PatientProfileCountOutputTypeCountContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
  }

  /**
   * PatientProfileCountOutputType without action
   */
  export type PatientProfileCountOutputTypeCountEmploymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmploymentWhereInput
  }

  /**
   * PatientProfileCountOutputType without action
   */
  export type PatientProfileCountOutputTypeCountEmergencyContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmergencyContactWhereInput
  }

  /**
   * PatientProfileCountOutputType without action
   */
  export type PatientProfileCountOutputTypeCountMedicalRecordRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalRecordRequestWhereInput
  }


  /**
   * Count Type PharmacyBrandCountOutputType
   */

  export type PharmacyBrandCountOutputType = {
    items: number
  }

  export type PharmacyBrandCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | PharmacyBrandCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * PharmacyBrandCountOutputType without action
   */
  export type PharmacyBrandCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyBrandCountOutputType
     */
    select?: PharmacyBrandCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PharmacyBrandCountOutputType without action
   */
  export type PharmacyBrandCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PharmacyItemWhereInput
  }


  /**
   * Count Type PharmacyItemCategoryCountOutputType
   */

  export type PharmacyItemCategoryCountOutputType = {
    items: number
  }

  export type PharmacyItemCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | PharmacyItemCategoryCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * PharmacyItemCategoryCountOutputType without action
   */
  export type PharmacyItemCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItemCategoryCountOutputType
     */
    select?: PharmacyItemCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PharmacyItemCategoryCountOutputType without action
   */
  export type PharmacyItemCategoryCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PharmacyItemWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    refreshTokens: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    refreshTokens?: boolean | UserCountOutputTypeCountRefreshTokensArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRefreshTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefreshTokenWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Appointment
   */

  export type AggregateAppointment = {
    _count: AppointmentCountAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  export type AppointmentMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    doctorId: string | null
    facilityId: string | null
    date: string | null
    time: string | null
    status: $Enums.AppointmentStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    doctorId: string | null
    facilityId: string | null
    date: string | null
    time: string | null
    status: $Enums.AppointmentStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentCountAggregateOutputType = {
    id: number
    patientId: number
    doctorId: number
    facilityId: number
    date: number
    time: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AppointmentMinAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    facilityId?: true
    date?: true
    time?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentMaxAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    facilityId?: true
    date?: true
    time?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentCountAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    facilityId?: true
    date?: true
    time?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AppointmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointment to aggregate.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appointments
    **/
    _count?: true | AppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentMaxAggregateInputType
  }

  export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointment[P]>
      : GetScalarType<T[P], AggregateAppointment[P]>
  }




  export type AppointmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithAggregationInput | AppointmentOrderByWithAggregationInput[]
    by: AppointmentScalarFieldEnum[] | AppointmentScalarFieldEnum
    having?: AppointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentCountAggregateInputType | true
    _min?: AppointmentMinAggregateInputType
    _max?: AppointmentMaxAggregateInputType
  }

  export type AppointmentGroupByOutputType = {
    id: string
    patientId: string
    doctorId: string
    facilityId: string | null
    date: string
    time: string
    status: $Enums.AppointmentStatus
    createdAt: Date
    updatedAt: Date
    _count: AppointmentCountAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
        }
      >
    >


  export type AppointmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    facilityId?: boolean
    date?: boolean
    time?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientProfileDefaultArgs<ExtArgs>
    facility?: boolean | Appointment$facilityArgs<ExtArgs>
    patientAppointment?: boolean | Appointment$patientAppointmentArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    facilityId?: boolean
    date?: boolean
    time?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientProfileDefaultArgs<ExtArgs>
    facility?: boolean | Appointment$facilityArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    facilityId?: boolean
    date?: boolean
    time?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientProfileDefaultArgs<ExtArgs>
    facility?: boolean | Appointment$facilityArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectScalar = {
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    facilityId?: boolean
    date?: boolean
    time?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AppointmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "doctorId" | "facilityId" | "date" | "time" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["appointment"]>
  export type AppointmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientProfileDefaultArgs<ExtArgs>
    facility?: boolean | Appointment$facilityArgs<ExtArgs>
    patientAppointment?: boolean | Appointment$patientAppointmentArgs<ExtArgs>
  }
  export type AppointmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientProfileDefaultArgs<ExtArgs>
    facility?: boolean | Appointment$facilityArgs<ExtArgs>
  }
  export type AppointmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientProfileDefaultArgs<ExtArgs>
    facility?: boolean | Appointment$facilityArgs<ExtArgs>
  }

  export type $AppointmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Appointment"
    objects: {
      patient: Prisma.$PatientProfilePayload<ExtArgs>
      facility: Prisma.$RoomPayload<ExtArgs> | null
      patientAppointment: Prisma.$PatientAppointmentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      doctorId: string
      facilityId: string | null
      date: string
      time: string
      status: $Enums.AppointmentStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["appointment"]>
    composites: {}
  }

  type AppointmentGetPayload<S extends boolean | null | undefined | AppointmentDefaultArgs> = $Result.GetResult<Prisma.$AppointmentPayload, S>

  type AppointmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppointmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppointmentCountAggregateInputType | true
    }

  export interface AppointmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appointment'], meta: { name: 'Appointment' } }
    /**
     * Find zero or one Appointment that matches the filter.
     * @param {AppointmentFindUniqueArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppointmentFindUniqueArgs>(args: SelectSubset<T, AppointmentFindUniqueArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Appointment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppointmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AppointmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppointmentFindFirstArgs>(args?: SelectSubset<T, AppointmentFindFirstArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppointmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AppointmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointment.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentWithIdOnly = await prisma.appointment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppointmentFindManyArgs>(args?: SelectSubset<T, AppointmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Appointment.
     * @param {AppointmentCreateArgs} args - Arguments to create a Appointment.
     * @example
     * // Create one Appointment
     * const Appointment = await prisma.appointment.create({
     *   data: {
     *     // ... data to create a Appointment
     *   }
     * })
     * 
     */
    create<T extends AppointmentCreateArgs>(args: SelectSubset<T, AppointmentCreateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Appointments.
     * @param {AppointmentCreateManyArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppointmentCreateManyArgs>(args?: SelectSubset<T, AppointmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Appointments and returns the data saved in the database.
     * @param {AppointmentCreateManyAndReturnArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppointmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AppointmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Appointment.
     * @param {AppointmentDeleteArgs} args - Arguments to delete one Appointment.
     * @example
     * // Delete one Appointment
     * const Appointment = await prisma.appointment.delete({
     *   where: {
     *     // ... filter to delete one Appointment
     *   }
     * })
     * 
     */
    delete<T extends AppointmentDeleteArgs>(args: SelectSubset<T, AppointmentDeleteArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Appointment.
     * @param {AppointmentUpdateArgs} args - Arguments to update one Appointment.
     * @example
     * // Update one Appointment
     * const appointment = await prisma.appointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppointmentUpdateArgs>(args: SelectSubset<T, AppointmentUpdateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Appointments.
     * @param {AppointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppointmentDeleteManyArgs>(args?: SelectSubset<T, AppointmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppointmentUpdateManyArgs>(args: SelectSubset<T, AppointmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments and returns the data updated in the database.
     * @param {AppointmentUpdateManyAndReturnArgs} args - Arguments to update many Appointments.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AppointmentUpdateManyAndReturnArgs>(args: SelectSubset<T, AppointmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Appointment.
     * @param {AppointmentUpsertArgs} args - Arguments to update or create a Appointment.
     * @example
     * // Update or create a Appointment
     * const appointment = await prisma.appointment.upsert({
     *   create: {
     *     // ... data to create a Appointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointment we want to update
     *   }
     * })
     */
    upsert<T extends AppointmentUpsertArgs>(args: SelectSubset<T, AppointmentUpsertArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointment.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends AppointmentCountArgs>(
      args?: Subset<T, AppointmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentAggregateArgs>(args: Subset<T, AppointmentAggregateArgs>): Prisma.PrismaPromise<GetAppointmentAggregateType<T>>

    /**
     * Group by Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Appointment model
   */
  readonly fields: AppointmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Appointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppointmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfileDefaultArgs<ExtArgs>>): Prisma__PatientProfileClient<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    facility<T extends Appointment$facilityArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$facilityArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    patientAppointment<T extends Appointment$patientAppointmentArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$patientAppointmentArgs<ExtArgs>>): Prisma__PatientAppointmentClient<$Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Appointment model
   */
  interface AppointmentFieldRefs {
    readonly id: FieldRef<"Appointment", 'String'>
    readonly patientId: FieldRef<"Appointment", 'String'>
    readonly doctorId: FieldRef<"Appointment", 'String'>
    readonly facilityId: FieldRef<"Appointment", 'String'>
    readonly date: FieldRef<"Appointment", 'String'>
    readonly time: FieldRef<"Appointment", 'String'>
    readonly status: FieldRef<"Appointment", 'AppointmentStatus'>
    readonly createdAt: FieldRef<"Appointment", 'DateTime'>
    readonly updatedAt: FieldRef<"Appointment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Appointment findUnique
   */
  export type AppointmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findUniqueOrThrow
   */
  export type AppointmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findFirst
   */
  export type AppointmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findFirstOrThrow
   */
  export type AppointmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findMany
   */
  export type AppointmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointments to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment create
   */
  export type AppointmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Appointment.
     */
    data: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
  }

  /**
   * Appointment createMany
   */
  export type AppointmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Appointment createManyAndReturn
   */
  export type AppointmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appointment update
   */
  export type AppointmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Appointment.
     */
    data: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
    /**
     * Choose, which Appointment to update.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment updateMany
   */
  export type AppointmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to update.
     */
    limit?: number
  }

  /**
   * Appointment updateManyAndReturn
   */
  export type AppointmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appointment upsert
   */
  export type AppointmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Appointment to update in case it exists.
     */
    where: AppointmentWhereUniqueInput
    /**
     * In case the Appointment found by the `where` argument doesn't exist, create a new Appointment with this data.
     */
    create: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
    /**
     * In case the Appointment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
  }

  /**
   * Appointment delete
   */
  export type AppointmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter which Appointment to delete.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment deleteMany
   */
  export type AppointmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointments to delete
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to delete.
     */
    limit?: number
  }

  /**
   * Appointment.facility
   */
  export type Appointment$facilityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    where?: RoomWhereInput
  }

  /**
   * Appointment.patientAppointment
   */
  export type Appointment$patientAppointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAppointment
     */
    select?: PatientAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientAppointment
     */
    omit?: PatientAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAppointmentInclude<ExtArgs> | null
    where?: PatientAppointmentWhereInput
  }

  /**
   * Appointment without action
   */
  export type AppointmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
  }


  /**
   * Model PatientAppointment
   */

  export type AggregatePatientAppointment = {
    _count: PatientAppointmentCountAggregateOutputType | null
    _min: PatientAppointmentMinAggregateOutputType | null
    _max: PatientAppointmentMaxAggregateOutputType | null
  }

  export type PatientAppointmentMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    doctorId: string | null
    date: string | null
    time: string | null
    status: $Enums.AppointmentStatus | null
    name: string | null
    appointmentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientAppointmentMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    doctorId: string | null
    date: string | null
    time: string | null
    status: $Enums.AppointmentStatus | null
    name: string | null
    appointmentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientAppointmentCountAggregateOutputType = {
    id: number
    patientId: number
    doctorId: number
    date: number
    time: number
    status: number
    name: number
    appointmentId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PatientAppointmentMinAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    date?: true
    time?: true
    status?: true
    name?: true
    appointmentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientAppointmentMaxAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    date?: true
    time?: true
    status?: true
    name?: true
    appointmentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientAppointmentCountAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    date?: true
    time?: true
    status?: true
    name?: true
    appointmentId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PatientAppointmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientAppointment to aggregate.
     */
    where?: PatientAppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientAppointments to fetch.
     */
    orderBy?: PatientAppointmentOrderByWithRelationInput | PatientAppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientAppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientAppointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientAppointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientAppointments
    **/
    _count?: true | PatientAppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientAppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientAppointmentMaxAggregateInputType
  }

  export type GetPatientAppointmentAggregateType<T extends PatientAppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientAppointment[P]>
      : GetScalarType<T[P], AggregatePatientAppointment[P]>
  }




  export type PatientAppointmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientAppointmentWhereInput
    orderBy?: PatientAppointmentOrderByWithAggregationInput | PatientAppointmentOrderByWithAggregationInput[]
    by: PatientAppointmentScalarFieldEnum[] | PatientAppointmentScalarFieldEnum
    having?: PatientAppointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientAppointmentCountAggregateInputType | true
    _min?: PatientAppointmentMinAggregateInputType
    _max?: PatientAppointmentMaxAggregateInputType
  }

  export type PatientAppointmentGroupByOutputType = {
    id: string
    patientId: string
    doctorId: string
    date: string
    time: string
    status: $Enums.AppointmentStatus
    name: string | null
    appointmentId: string | null
    createdAt: Date
    updatedAt: Date
    _count: PatientAppointmentCountAggregateOutputType | null
    _min: PatientAppointmentMinAggregateOutputType | null
    _max: PatientAppointmentMaxAggregateOutputType | null
  }

  type GetPatientAppointmentGroupByPayload<T extends PatientAppointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientAppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientAppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientAppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], PatientAppointmentGroupByOutputType[P]>
        }
      >
    >


  export type PatientAppointmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    date?: boolean
    time?: boolean
    status?: boolean
    name?: boolean
    appointmentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientProfileDefaultArgs<ExtArgs>
    appointment?: boolean | PatientAppointment$appointmentArgs<ExtArgs>
  }, ExtArgs["result"]["patientAppointment"]>

  export type PatientAppointmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    date?: boolean
    time?: boolean
    status?: boolean
    name?: boolean
    appointmentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientProfileDefaultArgs<ExtArgs>
    appointment?: boolean | PatientAppointment$appointmentArgs<ExtArgs>
  }, ExtArgs["result"]["patientAppointment"]>

  export type PatientAppointmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    date?: boolean
    time?: boolean
    status?: boolean
    name?: boolean
    appointmentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientProfileDefaultArgs<ExtArgs>
    appointment?: boolean | PatientAppointment$appointmentArgs<ExtArgs>
  }, ExtArgs["result"]["patientAppointment"]>

  export type PatientAppointmentSelectScalar = {
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    date?: boolean
    time?: boolean
    status?: boolean
    name?: boolean
    appointmentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PatientAppointmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "doctorId" | "date" | "time" | "status" | "name" | "appointmentId" | "createdAt" | "updatedAt", ExtArgs["result"]["patientAppointment"]>
  export type PatientAppointmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientProfileDefaultArgs<ExtArgs>
    appointment?: boolean | PatientAppointment$appointmentArgs<ExtArgs>
  }
  export type PatientAppointmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientProfileDefaultArgs<ExtArgs>
    appointment?: boolean | PatientAppointment$appointmentArgs<ExtArgs>
  }
  export type PatientAppointmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientProfileDefaultArgs<ExtArgs>
    appointment?: boolean | PatientAppointment$appointmentArgs<ExtArgs>
  }

  export type $PatientAppointmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientAppointment"
    objects: {
      patient: Prisma.$PatientProfilePayload<ExtArgs>
      appointment: Prisma.$AppointmentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      doctorId: string
      date: string
      time: string
      status: $Enums.AppointmentStatus
      name: string | null
      appointmentId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["patientAppointment"]>
    composites: {}
  }

  type PatientAppointmentGetPayload<S extends boolean | null | undefined | PatientAppointmentDefaultArgs> = $Result.GetResult<Prisma.$PatientAppointmentPayload, S>

  type PatientAppointmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientAppointmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientAppointmentCountAggregateInputType | true
    }

  export interface PatientAppointmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientAppointment'], meta: { name: 'PatientAppointment' } }
    /**
     * Find zero or one PatientAppointment that matches the filter.
     * @param {PatientAppointmentFindUniqueArgs} args - Arguments to find a PatientAppointment
     * @example
     * // Get one PatientAppointment
     * const patientAppointment = await prisma.patientAppointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientAppointmentFindUniqueArgs>(args: SelectSubset<T, PatientAppointmentFindUniqueArgs<ExtArgs>>): Prisma__PatientAppointmentClient<$Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PatientAppointment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientAppointmentFindUniqueOrThrowArgs} args - Arguments to find a PatientAppointment
     * @example
     * // Get one PatientAppointment
     * const patientAppointment = await prisma.patientAppointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientAppointmentFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientAppointmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientAppointmentClient<$Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientAppointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAppointmentFindFirstArgs} args - Arguments to find a PatientAppointment
     * @example
     * // Get one PatientAppointment
     * const patientAppointment = await prisma.patientAppointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientAppointmentFindFirstArgs>(args?: SelectSubset<T, PatientAppointmentFindFirstArgs<ExtArgs>>): Prisma__PatientAppointmentClient<$Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientAppointment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAppointmentFindFirstOrThrowArgs} args - Arguments to find a PatientAppointment
     * @example
     * // Get one PatientAppointment
     * const patientAppointment = await prisma.patientAppointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientAppointmentFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientAppointmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientAppointmentClient<$Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PatientAppointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAppointmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientAppointments
     * const patientAppointments = await prisma.patientAppointment.findMany()
     * 
     * // Get first 10 PatientAppointments
     * const patientAppointments = await prisma.patientAppointment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientAppointmentWithIdOnly = await prisma.patientAppointment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientAppointmentFindManyArgs>(args?: SelectSubset<T, PatientAppointmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PatientAppointment.
     * @param {PatientAppointmentCreateArgs} args - Arguments to create a PatientAppointment.
     * @example
     * // Create one PatientAppointment
     * const PatientAppointment = await prisma.patientAppointment.create({
     *   data: {
     *     // ... data to create a PatientAppointment
     *   }
     * })
     * 
     */
    create<T extends PatientAppointmentCreateArgs>(args: SelectSubset<T, PatientAppointmentCreateArgs<ExtArgs>>): Prisma__PatientAppointmentClient<$Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PatientAppointments.
     * @param {PatientAppointmentCreateManyArgs} args - Arguments to create many PatientAppointments.
     * @example
     * // Create many PatientAppointments
     * const patientAppointment = await prisma.patientAppointment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientAppointmentCreateManyArgs>(args?: SelectSubset<T, PatientAppointmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatientAppointments and returns the data saved in the database.
     * @param {PatientAppointmentCreateManyAndReturnArgs} args - Arguments to create many PatientAppointments.
     * @example
     * // Create many PatientAppointments
     * const patientAppointment = await prisma.patientAppointment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatientAppointments and only return the `id`
     * const patientAppointmentWithIdOnly = await prisma.patientAppointment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientAppointmentCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientAppointmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PatientAppointment.
     * @param {PatientAppointmentDeleteArgs} args - Arguments to delete one PatientAppointment.
     * @example
     * // Delete one PatientAppointment
     * const PatientAppointment = await prisma.patientAppointment.delete({
     *   where: {
     *     // ... filter to delete one PatientAppointment
     *   }
     * })
     * 
     */
    delete<T extends PatientAppointmentDeleteArgs>(args: SelectSubset<T, PatientAppointmentDeleteArgs<ExtArgs>>): Prisma__PatientAppointmentClient<$Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PatientAppointment.
     * @param {PatientAppointmentUpdateArgs} args - Arguments to update one PatientAppointment.
     * @example
     * // Update one PatientAppointment
     * const patientAppointment = await prisma.patientAppointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientAppointmentUpdateArgs>(args: SelectSubset<T, PatientAppointmentUpdateArgs<ExtArgs>>): Prisma__PatientAppointmentClient<$Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PatientAppointments.
     * @param {PatientAppointmentDeleteManyArgs} args - Arguments to filter PatientAppointments to delete.
     * @example
     * // Delete a few PatientAppointments
     * const { count } = await prisma.patientAppointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientAppointmentDeleteManyArgs>(args?: SelectSubset<T, PatientAppointmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientAppointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientAppointments
     * const patientAppointment = await prisma.patientAppointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientAppointmentUpdateManyArgs>(args: SelectSubset<T, PatientAppointmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientAppointments and returns the data updated in the database.
     * @param {PatientAppointmentUpdateManyAndReturnArgs} args - Arguments to update many PatientAppointments.
     * @example
     * // Update many PatientAppointments
     * const patientAppointment = await prisma.patientAppointment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PatientAppointments and only return the `id`
     * const patientAppointmentWithIdOnly = await prisma.patientAppointment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PatientAppointmentUpdateManyAndReturnArgs>(args: SelectSubset<T, PatientAppointmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PatientAppointment.
     * @param {PatientAppointmentUpsertArgs} args - Arguments to update or create a PatientAppointment.
     * @example
     * // Update or create a PatientAppointment
     * const patientAppointment = await prisma.patientAppointment.upsert({
     *   create: {
     *     // ... data to create a PatientAppointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientAppointment we want to update
     *   }
     * })
     */
    upsert<T extends PatientAppointmentUpsertArgs>(args: SelectSubset<T, PatientAppointmentUpsertArgs<ExtArgs>>): Prisma__PatientAppointmentClient<$Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PatientAppointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAppointmentCountArgs} args - Arguments to filter PatientAppointments to count.
     * @example
     * // Count the number of PatientAppointments
     * const count = await prisma.patientAppointment.count({
     *   where: {
     *     // ... the filter for the PatientAppointments we want to count
     *   }
     * })
    **/
    count<T extends PatientAppointmentCountArgs>(
      args?: Subset<T, PatientAppointmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientAppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientAppointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAppointmentAggregateArgs>(args: Subset<T, PatientAppointmentAggregateArgs>): Prisma.PrismaPromise<GetPatientAppointmentAggregateType<T>>

    /**
     * Group by PatientAppointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientAppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientAppointmentGroupByArgs['orderBy'] }
        : { orderBy?: PatientAppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientAppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientAppointment model
   */
  readonly fields: PatientAppointmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientAppointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientAppointmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfileDefaultArgs<ExtArgs>>): Prisma__PatientProfileClient<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    appointment<T extends PatientAppointment$appointmentArgs<ExtArgs> = {}>(args?: Subset<T, PatientAppointment$appointmentArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientAppointment model
   */
  interface PatientAppointmentFieldRefs {
    readonly id: FieldRef<"PatientAppointment", 'String'>
    readonly patientId: FieldRef<"PatientAppointment", 'String'>
    readonly doctorId: FieldRef<"PatientAppointment", 'String'>
    readonly date: FieldRef<"PatientAppointment", 'String'>
    readonly time: FieldRef<"PatientAppointment", 'String'>
    readonly status: FieldRef<"PatientAppointment", 'AppointmentStatus'>
    readonly name: FieldRef<"PatientAppointment", 'String'>
    readonly appointmentId: FieldRef<"PatientAppointment", 'String'>
    readonly createdAt: FieldRef<"PatientAppointment", 'DateTime'>
    readonly updatedAt: FieldRef<"PatientAppointment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PatientAppointment findUnique
   */
  export type PatientAppointmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAppointment
     */
    select?: PatientAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientAppointment
     */
    omit?: PatientAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAppointmentInclude<ExtArgs> | null
    /**
     * Filter, which PatientAppointment to fetch.
     */
    where: PatientAppointmentWhereUniqueInput
  }

  /**
   * PatientAppointment findUniqueOrThrow
   */
  export type PatientAppointmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAppointment
     */
    select?: PatientAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientAppointment
     */
    omit?: PatientAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAppointmentInclude<ExtArgs> | null
    /**
     * Filter, which PatientAppointment to fetch.
     */
    where: PatientAppointmentWhereUniqueInput
  }

  /**
   * PatientAppointment findFirst
   */
  export type PatientAppointmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAppointment
     */
    select?: PatientAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientAppointment
     */
    omit?: PatientAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAppointmentInclude<ExtArgs> | null
    /**
     * Filter, which PatientAppointment to fetch.
     */
    where?: PatientAppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientAppointments to fetch.
     */
    orderBy?: PatientAppointmentOrderByWithRelationInput | PatientAppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientAppointments.
     */
    cursor?: PatientAppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientAppointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientAppointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientAppointments.
     */
    distinct?: PatientAppointmentScalarFieldEnum | PatientAppointmentScalarFieldEnum[]
  }

  /**
   * PatientAppointment findFirstOrThrow
   */
  export type PatientAppointmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAppointment
     */
    select?: PatientAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientAppointment
     */
    omit?: PatientAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAppointmentInclude<ExtArgs> | null
    /**
     * Filter, which PatientAppointment to fetch.
     */
    where?: PatientAppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientAppointments to fetch.
     */
    orderBy?: PatientAppointmentOrderByWithRelationInput | PatientAppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientAppointments.
     */
    cursor?: PatientAppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientAppointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientAppointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientAppointments.
     */
    distinct?: PatientAppointmentScalarFieldEnum | PatientAppointmentScalarFieldEnum[]
  }

  /**
   * PatientAppointment findMany
   */
  export type PatientAppointmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAppointment
     */
    select?: PatientAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientAppointment
     */
    omit?: PatientAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAppointmentInclude<ExtArgs> | null
    /**
     * Filter, which PatientAppointments to fetch.
     */
    where?: PatientAppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientAppointments to fetch.
     */
    orderBy?: PatientAppointmentOrderByWithRelationInput | PatientAppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientAppointments.
     */
    cursor?: PatientAppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientAppointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientAppointments.
     */
    skip?: number
    distinct?: PatientAppointmentScalarFieldEnum | PatientAppointmentScalarFieldEnum[]
  }

  /**
   * PatientAppointment create
   */
  export type PatientAppointmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAppointment
     */
    select?: PatientAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientAppointment
     */
    omit?: PatientAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAppointmentInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientAppointment.
     */
    data: XOR<PatientAppointmentCreateInput, PatientAppointmentUncheckedCreateInput>
  }

  /**
   * PatientAppointment createMany
   */
  export type PatientAppointmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientAppointments.
     */
    data: PatientAppointmentCreateManyInput | PatientAppointmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientAppointment createManyAndReturn
   */
  export type PatientAppointmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAppointment
     */
    select?: PatientAppointmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientAppointment
     */
    omit?: PatientAppointmentOmit<ExtArgs> | null
    /**
     * The data used to create many PatientAppointments.
     */
    data: PatientAppointmentCreateManyInput | PatientAppointmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAppointmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientAppointment update
   */
  export type PatientAppointmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAppointment
     */
    select?: PatientAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientAppointment
     */
    omit?: PatientAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAppointmentInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientAppointment.
     */
    data: XOR<PatientAppointmentUpdateInput, PatientAppointmentUncheckedUpdateInput>
    /**
     * Choose, which PatientAppointment to update.
     */
    where: PatientAppointmentWhereUniqueInput
  }

  /**
   * PatientAppointment updateMany
   */
  export type PatientAppointmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientAppointments.
     */
    data: XOR<PatientAppointmentUpdateManyMutationInput, PatientAppointmentUncheckedUpdateManyInput>
    /**
     * Filter which PatientAppointments to update
     */
    where?: PatientAppointmentWhereInput
    /**
     * Limit how many PatientAppointments to update.
     */
    limit?: number
  }

  /**
   * PatientAppointment updateManyAndReturn
   */
  export type PatientAppointmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAppointment
     */
    select?: PatientAppointmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientAppointment
     */
    omit?: PatientAppointmentOmit<ExtArgs> | null
    /**
     * The data used to update PatientAppointments.
     */
    data: XOR<PatientAppointmentUpdateManyMutationInput, PatientAppointmentUncheckedUpdateManyInput>
    /**
     * Filter which PatientAppointments to update
     */
    where?: PatientAppointmentWhereInput
    /**
     * Limit how many PatientAppointments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAppointmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientAppointment upsert
   */
  export type PatientAppointmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAppointment
     */
    select?: PatientAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientAppointment
     */
    omit?: PatientAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAppointmentInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientAppointment to update in case it exists.
     */
    where: PatientAppointmentWhereUniqueInput
    /**
     * In case the PatientAppointment found by the `where` argument doesn't exist, create a new PatientAppointment with this data.
     */
    create: XOR<PatientAppointmentCreateInput, PatientAppointmentUncheckedCreateInput>
    /**
     * In case the PatientAppointment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientAppointmentUpdateInput, PatientAppointmentUncheckedUpdateInput>
  }

  /**
   * PatientAppointment delete
   */
  export type PatientAppointmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAppointment
     */
    select?: PatientAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientAppointment
     */
    omit?: PatientAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAppointmentInclude<ExtArgs> | null
    /**
     * Filter which PatientAppointment to delete.
     */
    where: PatientAppointmentWhereUniqueInput
  }

  /**
   * PatientAppointment deleteMany
   */
  export type PatientAppointmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientAppointments to delete
     */
    where?: PatientAppointmentWhereInput
    /**
     * Limit how many PatientAppointments to delete.
     */
    limit?: number
  }

  /**
   * PatientAppointment.appointment
   */
  export type PatientAppointment$appointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
  }

  /**
   * PatientAppointment without action
   */
  export type PatientAppointmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAppointment
     */
    select?: PatientAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientAppointment
     */
    omit?: PatientAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAppointmentInclude<ExtArgs> | null
  }


  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionMinAggregateOutputType = {
    id: string | null
    encounterId: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: string | null
    encounterId: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    encounterId: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TransactionMinAggregateInputType = {
    id?: true
    encounterId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    encounterId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    encounterId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: string
    encounterId: string
    status: string
    createdAt: Date
    updatedAt: Date
    _count: TransactionCountAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    encounterId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    encounter?: boolean | PatientEncounterDefaultArgs<ExtArgs>
    items?: boolean | Transaction$itemsArgs<ExtArgs>
    payments?: boolean | Transaction$paymentsArgs<ExtArgs>
    _count?: boolean | TransactionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    encounterId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    encounter?: boolean | PatientEncounterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    encounterId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    encounter?: boolean | PatientEncounterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectScalar = {
    id?: boolean
    encounterId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "encounterId" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["transaction"]>
  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    encounter?: boolean | PatientEncounterDefaultArgs<ExtArgs>
    items?: boolean | Transaction$itemsArgs<ExtArgs>
    payments?: boolean | Transaction$paymentsArgs<ExtArgs>
    _count?: boolean | TransactionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    encounter?: boolean | PatientEncounterDefaultArgs<ExtArgs>
  }
  export type TransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    encounter?: boolean | PatientEncounterDefaultArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      encounter: Prisma.$PatientEncounterPayload<ExtArgs>
      items: Prisma.$TransactionItemPayload<ExtArgs>[]
      payments: Prisma.$PaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      encounterId: string
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {TransactionCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions and returns the data updated in the database.
     * @param {TransactionUpdateManyAndReturnArgs} args - Arguments to update many Transactions.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, TransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    encounter<T extends PatientEncounterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientEncounterDefaultArgs<ExtArgs>>): Prisma__PatientEncounterClient<$Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    items<T extends Transaction$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payments<T extends Transaction$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'String'>
    readonly encounterId: FieldRef<"Transaction", 'String'>
    readonly status: FieldRef<"Transaction", 'String'>
    readonly createdAt: FieldRef<"Transaction", 'DateTime'>
    readonly updatedAt: FieldRef<"Transaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transaction createManyAndReturn
   */
  export type TransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
  }

  /**
   * Transaction updateManyAndReturn
   */
  export type TransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to delete.
     */
    limit?: number
  }

  /**
   * Transaction.items
   */
  export type Transaction$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionItem
     */
    select?: TransactionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionItem
     */
    omit?: TransactionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionItemInclude<ExtArgs> | null
    where?: TransactionItemWhereInput
    orderBy?: TransactionItemOrderByWithRelationInput | TransactionItemOrderByWithRelationInput[]
    cursor?: TransactionItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionItemScalarFieldEnum | TransactionItemScalarFieldEnum[]
  }

  /**
   * Transaction.payments
   */
  export type Transaction$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
   * Model TransactionItem
   */

  export type AggregateTransactionItem = {
    _count: TransactionItemCountAggregateOutputType | null
    _avg: TransactionItemAvgAggregateOutputType | null
    _sum: TransactionItemSumAggregateOutputType | null
    _min: TransactionItemMinAggregateOutputType | null
    _max: TransactionItemMaxAggregateOutputType | null
  }

  export type TransactionItemAvgAggregateOutputType = {
    amount: number | null
  }

  export type TransactionItemSumAggregateOutputType = {
    amount: number | null
  }

  export type TransactionItemMinAggregateOutputType = {
    id: string | null
    transactionId: string | null
    name: string | null
    description: string | null
    amount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionItemMaxAggregateOutputType = {
    id: string | null
    transactionId: string | null
    name: string | null
    description: string | null
    amount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionItemCountAggregateOutputType = {
    id: number
    transactionId: number
    name: number
    description: number
    amount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TransactionItemAvgAggregateInputType = {
    amount?: true
  }

  export type TransactionItemSumAggregateInputType = {
    amount?: true
  }

  export type TransactionItemMinAggregateInputType = {
    id?: true
    transactionId?: true
    name?: true
    description?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionItemMaxAggregateInputType = {
    id?: true
    transactionId?: true
    name?: true
    description?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionItemCountAggregateInputType = {
    id?: true
    transactionId?: true
    name?: true
    description?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TransactionItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransactionItem to aggregate.
     */
    where?: TransactionItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionItems to fetch.
     */
    orderBy?: TransactionItemOrderByWithRelationInput | TransactionItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TransactionItems
    **/
    _count?: true | TransactionItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionItemMaxAggregateInputType
  }

  export type GetTransactionItemAggregateType<T extends TransactionItemAggregateArgs> = {
        [P in keyof T & keyof AggregateTransactionItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransactionItem[P]>
      : GetScalarType<T[P], AggregateTransactionItem[P]>
  }




  export type TransactionItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionItemWhereInput
    orderBy?: TransactionItemOrderByWithAggregationInput | TransactionItemOrderByWithAggregationInput[]
    by: TransactionItemScalarFieldEnum[] | TransactionItemScalarFieldEnum
    having?: TransactionItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionItemCountAggregateInputType | true
    _avg?: TransactionItemAvgAggregateInputType
    _sum?: TransactionItemSumAggregateInputType
    _min?: TransactionItemMinAggregateInputType
    _max?: TransactionItemMaxAggregateInputType
  }

  export type TransactionItemGroupByOutputType = {
    id: string
    transactionId: string
    name: string
    description: string | null
    amount: number
    createdAt: Date
    updatedAt: Date
    _count: TransactionItemCountAggregateOutputType | null
    _avg: TransactionItemAvgAggregateOutputType | null
    _sum: TransactionItemSumAggregateOutputType | null
    _min: TransactionItemMinAggregateOutputType | null
    _max: TransactionItemMaxAggregateOutputType | null
  }

  type GetTransactionItemGroupByPayload<T extends TransactionItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionItemGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionItemGroupByOutputType[P]>
        }
      >
    >


  export type TransactionItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transactionId?: boolean
    name?: boolean
    description?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactionItem"]>

  export type TransactionItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transactionId?: boolean
    name?: boolean
    description?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactionItem"]>

  export type TransactionItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transactionId?: boolean
    name?: boolean
    description?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactionItem"]>

  export type TransactionItemSelectScalar = {
    id?: boolean
    transactionId?: boolean
    name?: boolean
    description?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TransactionItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "transactionId" | "name" | "description" | "amount" | "createdAt" | "updatedAt", ExtArgs["result"]["transactionItem"]>
  export type TransactionItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }
  export type TransactionItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }
  export type TransactionItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }

  export type $TransactionItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TransactionItem"
    objects: {
      transaction: Prisma.$TransactionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      transactionId: string
      name: string
      description: string | null
      amount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["transactionItem"]>
    composites: {}
  }

  type TransactionItemGetPayload<S extends boolean | null | undefined | TransactionItemDefaultArgs> = $Result.GetResult<Prisma.$TransactionItemPayload, S>

  type TransactionItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransactionItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransactionItemCountAggregateInputType | true
    }

  export interface TransactionItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TransactionItem'], meta: { name: 'TransactionItem' } }
    /**
     * Find zero or one TransactionItem that matches the filter.
     * @param {TransactionItemFindUniqueArgs} args - Arguments to find a TransactionItem
     * @example
     * // Get one TransactionItem
     * const transactionItem = await prisma.transactionItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionItemFindUniqueArgs>(args: SelectSubset<T, TransactionItemFindUniqueArgs<ExtArgs>>): Prisma__TransactionItemClient<$Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TransactionItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransactionItemFindUniqueOrThrowArgs} args - Arguments to find a TransactionItem
     * @example
     * // Get one TransactionItem
     * const transactionItem = await prisma.transactionItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionItemFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionItemClient<$Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TransactionItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionItemFindFirstArgs} args - Arguments to find a TransactionItem
     * @example
     * // Get one TransactionItem
     * const transactionItem = await prisma.transactionItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionItemFindFirstArgs>(args?: SelectSubset<T, TransactionItemFindFirstArgs<ExtArgs>>): Prisma__TransactionItemClient<$Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TransactionItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionItemFindFirstOrThrowArgs} args - Arguments to find a TransactionItem
     * @example
     * // Get one TransactionItem
     * const transactionItem = await prisma.transactionItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionItemFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionItemClient<$Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TransactionItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TransactionItems
     * const transactionItems = await prisma.transactionItem.findMany()
     * 
     * // Get first 10 TransactionItems
     * const transactionItems = await prisma.transactionItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionItemWithIdOnly = await prisma.transactionItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionItemFindManyArgs>(args?: SelectSubset<T, TransactionItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TransactionItem.
     * @param {TransactionItemCreateArgs} args - Arguments to create a TransactionItem.
     * @example
     * // Create one TransactionItem
     * const TransactionItem = await prisma.transactionItem.create({
     *   data: {
     *     // ... data to create a TransactionItem
     *   }
     * })
     * 
     */
    create<T extends TransactionItemCreateArgs>(args: SelectSubset<T, TransactionItemCreateArgs<ExtArgs>>): Prisma__TransactionItemClient<$Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TransactionItems.
     * @param {TransactionItemCreateManyArgs} args - Arguments to create many TransactionItems.
     * @example
     * // Create many TransactionItems
     * const transactionItem = await prisma.transactionItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionItemCreateManyArgs>(args?: SelectSubset<T, TransactionItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TransactionItems and returns the data saved in the database.
     * @param {TransactionItemCreateManyAndReturnArgs} args - Arguments to create many TransactionItems.
     * @example
     * // Create many TransactionItems
     * const transactionItem = await prisma.transactionItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TransactionItems and only return the `id`
     * const transactionItemWithIdOnly = await prisma.transactionItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionItemCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TransactionItem.
     * @param {TransactionItemDeleteArgs} args - Arguments to delete one TransactionItem.
     * @example
     * // Delete one TransactionItem
     * const TransactionItem = await prisma.transactionItem.delete({
     *   where: {
     *     // ... filter to delete one TransactionItem
     *   }
     * })
     * 
     */
    delete<T extends TransactionItemDeleteArgs>(args: SelectSubset<T, TransactionItemDeleteArgs<ExtArgs>>): Prisma__TransactionItemClient<$Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TransactionItem.
     * @param {TransactionItemUpdateArgs} args - Arguments to update one TransactionItem.
     * @example
     * // Update one TransactionItem
     * const transactionItem = await prisma.transactionItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionItemUpdateArgs>(args: SelectSubset<T, TransactionItemUpdateArgs<ExtArgs>>): Prisma__TransactionItemClient<$Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TransactionItems.
     * @param {TransactionItemDeleteManyArgs} args - Arguments to filter TransactionItems to delete.
     * @example
     * // Delete a few TransactionItems
     * const { count } = await prisma.transactionItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionItemDeleteManyArgs>(args?: SelectSubset<T, TransactionItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TransactionItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TransactionItems
     * const transactionItem = await prisma.transactionItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionItemUpdateManyArgs>(args: SelectSubset<T, TransactionItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TransactionItems and returns the data updated in the database.
     * @param {TransactionItemUpdateManyAndReturnArgs} args - Arguments to update many TransactionItems.
     * @example
     * // Update many TransactionItems
     * const transactionItem = await prisma.transactionItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TransactionItems and only return the `id`
     * const transactionItemWithIdOnly = await prisma.transactionItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TransactionItemUpdateManyAndReturnArgs>(args: SelectSubset<T, TransactionItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TransactionItem.
     * @param {TransactionItemUpsertArgs} args - Arguments to update or create a TransactionItem.
     * @example
     * // Update or create a TransactionItem
     * const transactionItem = await prisma.transactionItem.upsert({
     *   create: {
     *     // ... data to create a TransactionItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TransactionItem we want to update
     *   }
     * })
     */
    upsert<T extends TransactionItemUpsertArgs>(args: SelectSubset<T, TransactionItemUpsertArgs<ExtArgs>>): Prisma__TransactionItemClient<$Result.GetResult<Prisma.$TransactionItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TransactionItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionItemCountArgs} args - Arguments to filter TransactionItems to count.
     * @example
     * // Count the number of TransactionItems
     * const count = await prisma.transactionItem.count({
     *   where: {
     *     // ... the filter for the TransactionItems we want to count
     *   }
     * })
    **/
    count<T extends TransactionItemCountArgs>(
      args?: Subset<T, TransactionItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TransactionItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionItemAggregateArgs>(args: Subset<T, TransactionItemAggregateArgs>): Prisma.PrismaPromise<GetTransactionItemAggregateType<T>>

    /**
     * Group by TransactionItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionItemGroupByArgs['orderBy'] }
        : { orderBy?: TransactionItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TransactionItem model
   */
  readonly fields: TransactionItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TransactionItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    transaction<T extends TransactionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TransactionDefaultArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TransactionItem model
   */
  interface TransactionItemFieldRefs {
    readonly id: FieldRef<"TransactionItem", 'String'>
    readonly transactionId: FieldRef<"TransactionItem", 'String'>
    readonly name: FieldRef<"TransactionItem", 'String'>
    readonly description: FieldRef<"TransactionItem", 'String'>
    readonly amount: FieldRef<"TransactionItem", 'Int'>
    readonly createdAt: FieldRef<"TransactionItem", 'DateTime'>
    readonly updatedAt: FieldRef<"TransactionItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TransactionItem findUnique
   */
  export type TransactionItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionItem
     */
    select?: TransactionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionItem
     */
    omit?: TransactionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionItemInclude<ExtArgs> | null
    /**
     * Filter, which TransactionItem to fetch.
     */
    where: TransactionItemWhereUniqueInput
  }

  /**
   * TransactionItem findUniqueOrThrow
   */
  export type TransactionItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionItem
     */
    select?: TransactionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionItem
     */
    omit?: TransactionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionItemInclude<ExtArgs> | null
    /**
     * Filter, which TransactionItem to fetch.
     */
    where: TransactionItemWhereUniqueInput
  }

  /**
   * TransactionItem findFirst
   */
  export type TransactionItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionItem
     */
    select?: TransactionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionItem
     */
    omit?: TransactionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionItemInclude<ExtArgs> | null
    /**
     * Filter, which TransactionItem to fetch.
     */
    where?: TransactionItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionItems to fetch.
     */
    orderBy?: TransactionItemOrderByWithRelationInput | TransactionItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransactionItems.
     */
    cursor?: TransactionItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransactionItems.
     */
    distinct?: TransactionItemScalarFieldEnum | TransactionItemScalarFieldEnum[]
  }

  /**
   * TransactionItem findFirstOrThrow
   */
  export type TransactionItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionItem
     */
    select?: TransactionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionItem
     */
    omit?: TransactionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionItemInclude<ExtArgs> | null
    /**
     * Filter, which TransactionItem to fetch.
     */
    where?: TransactionItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionItems to fetch.
     */
    orderBy?: TransactionItemOrderByWithRelationInput | TransactionItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransactionItems.
     */
    cursor?: TransactionItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransactionItems.
     */
    distinct?: TransactionItemScalarFieldEnum | TransactionItemScalarFieldEnum[]
  }

  /**
   * TransactionItem findMany
   */
  export type TransactionItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionItem
     */
    select?: TransactionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionItem
     */
    omit?: TransactionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionItemInclude<ExtArgs> | null
    /**
     * Filter, which TransactionItems to fetch.
     */
    where?: TransactionItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionItems to fetch.
     */
    orderBy?: TransactionItemOrderByWithRelationInput | TransactionItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TransactionItems.
     */
    cursor?: TransactionItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionItems.
     */
    skip?: number
    distinct?: TransactionItemScalarFieldEnum | TransactionItemScalarFieldEnum[]
  }

  /**
   * TransactionItem create
   */
  export type TransactionItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionItem
     */
    select?: TransactionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionItem
     */
    omit?: TransactionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionItemInclude<ExtArgs> | null
    /**
     * The data needed to create a TransactionItem.
     */
    data: XOR<TransactionItemCreateInput, TransactionItemUncheckedCreateInput>
  }

  /**
   * TransactionItem createMany
   */
  export type TransactionItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TransactionItems.
     */
    data: TransactionItemCreateManyInput | TransactionItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TransactionItem createManyAndReturn
   */
  export type TransactionItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionItem
     */
    select?: TransactionItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionItem
     */
    omit?: TransactionItemOmit<ExtArgs> | null
    /**
     * The data used to create many TransactionItems.
     */
    data: TransactionItemCreateManyInput | TransactionItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TransactionItem update
   */
  export type TransactionItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionItem
     */
    select?: TransactionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionItem
     */
    omit?: TransactionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionItemInclude<ExtArgs> | null
    /**
     * The data needed to update a TransactionItem.
     */
    data: XOR<TransactionItemUpdateInput, TransactionItemUncheckedUpdateInput>
    /**
     * Choose, which TransactionItem to update.
     */
    where: TransactionItemWhereUniqueInput
  }

  /**
   * TransactionItem updateMany
   */
  export type TransactionItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TransactionItems.
     */
    data: XOR<TransactionItemUpdateManyMutationInput, TransactionItemUncheckedUpdateManyInput>
    /**
     * Filter which TransactionItems to update
     */
    where?: TransactionItemWhereInput
    /**
     * Limit how many TransactionItems to update.
     */
    limit?: number
  }

  /**
   * TransactionItem updateManyAndReturn
   */
  export type TransactionItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionItem
     */
    select?: TransactionItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionItem
     */
    omit?: TransactionItemOmit<ExtArgs> | null
    /**
     * The data used to update TransactionItems.
     */
    data: XOR<TransactionItemUpdateManyMutationInput, TransactionItemUncheckedUpdateManyInput>
    /**
     * Filter which TransactionItems to update
     */
    where?: TransactionItemWhereInput
    /**
     * Limit how many TransactionItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TransactionItem upsert
   */
  export type TransactionItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionItem
     */
    select?: TransactionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionItem
     */
    omit?: TransactionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionItemInclude<ExtArgs> | null
    /**
     * The filter to search for the TransactionItem to update in case it exists.
     */
    where: TransactionItemWhereUniqueInput
    /**
     * In case the TransactionItem found by the `where` argument doesn't exist, create a new TransactionItem with this data.
     */
    create: XOR<TransactionItemCreateInput, TransactionItemUncheckedCreateInput>
    /**
     * In case the TransactionItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionItemUpdateInput, TransactionItemUncheckedUpdateInput>
  }

  /**
   * TransactionItem delete
   */
  export type TransactionItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionItem
     */
    select?: TransactionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionItem
     */
    omit?: TransactionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionItemInclude<ExtArgs> | null
    /**
     * Filter which TransactionItem to delete.
     */
    where: TransactionItemWhereUniqueInput
  }

  /**
   * TransactionItem deleteMany
   */
  export type TransactionItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransactionItems to delete
     */
    where?: TransactionItemWhereInput
    /**
     * Limit how many TransactionItems to delete.
     */
    limit?: number
  }

  /**
   * TransactionItem without action
   */
  export type TransactionItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionItem
     */
    select?: TransactionItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionItem
     */
    omit?: TransactionItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionItemInclude<ExtArgs> | null
  }


  /**
   * Model PaymentPlan
   */

  export type AggregatePaymentPlan = {
    _count: PaymentPlanCountAggregateOutputType | null
    _avg: PaymentPlanAvgAggregateOutputType | null
    _sum: PaymentPlanSumAggregateOutputType | null
    _min: PaymentPlanMinAggregateOutputType | null
    _max: PaymentPlanMaxAggregateOutputType | null
  }

  export type PaymentPlanAvgAggregateOutputType = {
    numberOfPayments: number | null
  }

  export type PaymentPlanSumAggregateOutputType = {
    numberOfPayments: number | null
  }

  export type PaymentPlanMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    cycle: string | null
    numberOfPayments: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentPlanMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    cycle: string | null
    numberOfPayments: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentPlanCountAggregateOutputType = {
    id: number
    name: number
    description: number
    cycle: number
    numberOfPayments: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentPlanAvgAggregateInputType = {
    numberOfPayments?: true
  }

  export type PaymentPlanSumAggregateInputType = {
    numberOfPayments?: true
  }

  export type PaymentPlanMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    cycle?: true
    numberOfPayments?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentPlanMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    cycle?: true
    numberOfPayments?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentPlanCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    cycle?: true
    numberOfPayments?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentPlan to aggregate.
     */
    where?: PaymentPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentPlans to fetch.
     */
    orderBy?: PaymentPlanOrderByWithRelationInput | PaymentPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentPlans
    **/
    _count?: true | PaymentPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentPlanMaxAggregateInputType
  }

  export type GetPaymentPlanAggregateType<T extends PaymentPlanAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentPlan[P]>
      : GetScalarType<T[P], AggregatePaymentPlan[P]>
  }




  export type PaymentPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentPlanWhereInput
    orderBy?: PaymentPlanOrderByWithAggregationInput | PaymentPlanOrderByWithAggregationInput[]
    by: PaymentPlanScalarFieldEnum[] | PaymentPlanScalarFieldEnum
    having?: PaymentPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentPlanCountAggregateInputType | true
    _avg?: PaymentPlanAvgAggregateInputType
    _sum?: PaymentPlanSumAggregateInputType
    _min?: PaymentPlanMinAggregateInputType
    _max?: PaymentPlanMaxAggregateInputType
  }

  export type PaymentPlanGroupByOutputType = {
    id: string
    name: string
    description: string | null
    cycle: string
    numberOfPayments: number
    createdAt: Date
    updatedAt: Date
    _count: PaymentPlanCountAggregateOutputType | null
    _avg: PaymentPlanAvgAggregateOutputType | null
    _sum: PaymentPlanSumAggregateOutputType | null
    _min: PaymentPlanMinAggregateOutputType | null
    _max: PaymentPlanMaxAggregateOutputType | null
  }

  type GetPaymentPlanGroupByPayload<T extends PaymentPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentPlanGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentPlanGroupByOutputType[P]>
        }
      >
    >


  export type PaymentPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    cycle?: boolean
    numberOfPayments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    instalments?: boolean | PaymentPlan$instalmentsArgs<ExtArgs>
    _count?: boolean | PaymentPlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentPlan"]>

  export type PaymentPlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    cycle?: boolean
    numberOfPayments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["paymentPlan"]>

  export type PaymentPlanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    cycle?: boolean
    numberOfPayments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["paymentPlan"]>

  export type PaymentPlanSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    cycle?: boolean
    numberOfPayments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PaymentPlanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "cycle" | "numberOfPayments" | "createdAt" | "updatedAt", ExtArgs["result"]["paymentPlan"]>
  export type PaymentPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instalments?: boolean | PaymentPlan$instalmentsArgs<ExtArgs>
    _count?: boolean | PaymentPlanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PaymentPlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PaymentPlanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PaymentPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentPlan"
    objects: {
      instalments: Prisma.$PaymentInstalmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      cycle: string
      numberOfPayments: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["paymentPlan"]>
    composites: {}
  }

  type PaymentPlanGetPayload<S extends boolean | null | undefined | PaymentPlanDefaultArgs> = $Result.GetResult<Prisma.$PaymentPlanPayload, S>

  type PaymentPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentPlanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentPlanCountAggregateInputType | true
    }

  export interface PaymentPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentPlan'], meta: { name: 'PaymentPlan' } }
    /**
     * Find zero or one PaymentPlan that matches the filter.
     * @param {PaymentPlanFindUniqueArgs} args - Arguments to find a PaymentPlan
     * @example
     * // Get one PaymentPlan
     * const paymentPlan = await prisma.paymentPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentPlanFindUniqueArgs>(args: SelectSubset<T, PaymentPlanFindUniqueArgs<ExtArgs>>): Prisma__PaymentPlanClient<$Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PaymentPlan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentPlanFindUniqueOrThrowArgs} args - Arguments to find a PaymentPlan
     * @example
     * // Get one PaymentPlan
     * const paymentPlan = await prisma.paymentPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentPlanFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentPlanClient<$Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaymentPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentPlanFindFirstArgs} args - Arguments to find a PaymentPlan
     * @example
     * // Get one PaymentPlan
     * const paymentPlan = await prisma.paymentPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentPlanFindFirstArgs>(args?: SelectSubset<T, PaymentPlanFindFirstArgs<ExtArgs>>): Prisma__PaymentPlanClient<$Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaymentPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentPlanFindFirstOrThrowArgs} args - Arguments to find a PaymentPlan
     * @example
     * // Get one PaymentPlan
     * const paymentPlan = await prisma.paymentPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentPlanFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentPlanClient<$Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PaymentPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentPlans
     * const paymentPlans = await prisma.paymentPlan.findMany()
     * 
     * // Get first 10 PaymentPlans
     * const paymentPlans = await prisma.paymentPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentPlanWithIdOnly = await prisma.paymentPlan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentPlanFindManyArgs>(args?: SelectSubset<T, PaymentPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PaymentPlan.
     * @param {PaymentPlanCreateArgs} args - Arguments to create a PaymentPlan.
     * @example
     * // Create one PaymentPlan
     * const PaymentPlan = await prisma.paymentPlan.create({
     *   data: {
     *     // ... data to create a PaymentPlan
     *   }
     * })
     * 
     */
    create<T extends PaymentPlanCreateArgs>(args: SelectSubset<T, PaymentPlanCreateArgs<ExtArgs>>): Prisma__PaymentPlanClient<$Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PaymentPlans.
     * @param {PaymentPlanCreateManyArgs} args - Arguments to create many PaymentPlans.
     * @example
     * // Create many PaymentPlans
     * const paymentPlan = await prisma.paymentPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentPlanCreateManyArgs>(args?: SelectSubset<T, PaymentPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PaymentPlans and returns the data saved in the database.
     * @param {PaymentPlanCreateManyAndReturnArgs} args - Arguments to create many PaymentPlans.
     * @example
     * // Create many PaymentPlans
     * const paymentPlan = await prisma.paymentPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PaymentPlans and only return the `id`
     * const paymentPlanWithIdOnly = await prisma.paymentPlan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentPlanCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PaymentPlan.
     * @param {PaymentPlanDeleteArgs} args - Arguments to delete one PaymentPlan.
     * @example
     * // Delete one PaymentPlan
     * const PaymentPlan = await prisma.paymentPlan.delete({
     *   where: {
     *     // ... filter to delete one PaymentPlan
     *   }
     * })
     * 
     */
    delete<T extends PaymentPlanDeleteArgs>(args: SelectSubset<T, PaymentPlanDeleteArgs<ExtArgs>>): Prisma__PaymentPlanClient<$Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PaymentPlan.
     * @param {PaymentPlanUpdateArgs} args - Arguments to update one PaymentPlan.
     * @example
     * // Update one PaymentPlan
     * const paymentPlan = await prisma.paymentPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentPlanUpdateArgs>(args: SelectSubset<T, PaymentPlanUpdateArgs<ExtArgs>>): Prisma__PaymentPlanClient<$Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PaymentPlans.
     * @param {PaymentPlanDeleteManyArgs} args - Arguments to filter PaymentPlans to delete.
     * @example
     * // Delete a few PaymentPlans
     * const { count } = await prisma.paymentPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentPlanDeleteManyArgs>(args?: SelectSubset<T, PaymentPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentPlans
     * const paymentPlan = await prisma.paymentPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentPlanUpdateManyArgs>(args: SelectSubset<T, PaymentPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentPlans and returns the data updated in the database.
     * @param {PaymentPlanUpdateManyAndReturnArgs} args - Arguments to update many PaymentPlans.
     * @example
     * // Update many PaymentPlans
     * const paymentPlan = await prisma.paymentPlan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PaymentPlans and only return the `id`
     * const paymentPlanWithIdOnly = await prisma.paymentPlan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentPlanUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentPlanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PaymentPlan.
     * @param {PaymentPlanUpsertArgs} args - Arguments to update or create a PaymentPlan.
     * @example
     * // Update or create a PaymentPlan
     * const paymentPlan = await prisma.paymentPlan.upsert({
     *   create: {
     *     // ... data to create a PaymentPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentPlan we want to update
     *   }
     * })
     */
    upsert<T extends PaymentPlanUpsertArgs>(args: SelectSubset<T, PaymentPlanUpsertArgs<ExtArgs>>): Prisma__PaymentPlanClient<$Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PaymentPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentPlanCountArgs} args - Arguments to filter PaymentPlans to count.
     * @example
     * // Count the number of PaymentPlans
     * const count = await prisma.paymentPlan.count({
     *   where: {
     *     // ... the filter for the PaymentPlans we want to count
     *   }
     * })
    **/
    count<T extends PaymentPlanCountArgs>(
      args?: Subset<T, PaymentPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentPlanAggregateArgs>(args: Subset<T, PaymentPlanAggregateArgs>): Prisma.PrismaPromise<GetPaymentPlanAggregateType<T>>

    /**
     * Group by PaymentPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentPlanGroupByArgs['orderBy'] }
        : { orderBy?: PaymentPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentPlan model
   */
  readonly fields: PaymentPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    instalments<T extends PaymentPlan$instalmentsArgs<ExtArgs> = {}>(args?: Subset<T, PaymentPlan$instalmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentPlan model
   */
  interface PaymentPlanFieldRefs {
    readonly id: FieldRef<"PaymentPlan", 'String'>
    readonly name: FieldRef<"PaymentPlan", 'String'>
    readonly description: FieldRef<"PaymentPlan", 'String'>
    readonly cycle: FieldRef<"PaymentPlan", 'String'>
    readonly numberOfPayments: FieldRef<"PaymentPlan", 'Int'>
    readonly createdAt: FieldRef<"PaymentPlan", 'DateTime'>
    readonly updatedAt: FieldRef<"PaymentPlan", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PaymentPlan findUnique
   */
  export type PaymentPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentPlan
     */
    select?: PaymentPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentPlan
     */
    omit?: PaymentPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentPlanInclude<ExtArgs> | null
    /**
     * Filter, which PaymentPlan to fetch.
     */
    where: PaymentPlanWhereUniqueInput
  }

  /**
   * PaymentPlan findUniqueOrThrow
   */
  export type PaymentPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentPlan
     */
    select?: PaymentPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentPlan
     */
    omit?: PaymentPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentPlanInclude<ExtArgs> | null
    /**
     * Filter, which PaymentPlan to fetch.
     */
    where: PaymentPlanWhereUniqueInput
  }

  /**
   * PaymentPlan findFirst
   */
  export type PaymentPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentPlan
     */
    select?: PaymentPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentPlan
     */
    omit?: PaymentPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentPlanInclude<ExtArgs> | null
    /**
     * Filter, which PaymentPlan to fetch.
     */
    where?: PaymentPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentPlans to fetch.
     */
    orderBy?: PaymentPlanOrderByWithRelationInput | PaymentPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentPlans.
     */
    cursor?: PaymentPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentPlans.
     */
    distinct?: PaymentPlanScalarFieldEnum | PaymentPlanScalarFieldEnum[]
  }

  /**
   * PaymentPlan findFirstOrThrow
   */
  export type PaymentPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentPlan
     */
    select?: PaymentPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentPlan
     */
    omit?: PaymentPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentPlanInclude<ExtArgs> | null
    /**
     * Filter, which PaymentPlan to fetch.
     */
    where?: PaymentPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentPlans to fetch.
     */
    orderBy?: PaymentPlanOrderByWithRelationInput | PaymentPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentPlans.
     */
    cursor?: PaymentPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentPlans.
     */
    distinct?: PaymentPlanScalarFieldEnum | PaymentPlanScalarFieldEnum[]
  }

  /**
   * PaymentPlan findMany
   */
  export type PaymentPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentPlan
     */
    select?: PaymentPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentPlan
     */
    omit?: PaymentPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentPlanInclude<ExtArgs> | null
    /**
     * Filter, which PaymentPlans to fetch.
     */
    where?: PaymentPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentPlans to fetch.
     */
    orderBy?: PaymentPlanOrderByWithRelationInput | PaymentPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentPlans.
     */
    cursor?: PaymentPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentPlans.
     */
    skip?: number
    distinct?: PaymentPlanScalarFieldEnum | PaymentPlanScalarFieldEnum[]
  }

  /**
   * PaymentPlan create
   */
  export type PaymentPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentPlan
     */
    select?: PaymentPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentPlan
     */
    omit?: PaymentPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentPlan.
     */
    data: XOR<PaymentPlanCreateInput, PaymentPlanUncheckedCreateInput>
  }

  /**
   * PaymentPlan createMany
   */
  export type PaymentPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentPlans.
     */
    data: PaymentPlanCreateManyInput | PaymentPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaymentPlan createManyAndReturn
   */
  export type PaymentPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentPlan
     */
    select?: PaymentPlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentPlan
     */
    omit?: PaymentPlanOmit<ExtArgs> | null
    /**
     * The data used to create many PaymentPlans.
     */
    data: PaymentPlanCreateManyInput | PaymentPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaymentPlan update
   */
  export type PaymentPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentPlan
     */
    select?: PaymentPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentPlan
     */
    omit?: PaymentPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentPlan.
     */
    data: XOR<PaymentPlanUpdateInput, PaymentPlanUncheckedUpdateInput>
    /**
     * Choose, which PaymentPlan to update.
     */
    where: PaymentPlanWhereUniqueInput
  }

  /**
   * PaymentPlan updateMany
   */
  export type PaymentPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentPlans.
     */
    data: XOR<PaymentPlanUpdateManyMutationInput, PaymentPlanUncheckedUpdateManyInput>
    /**
     * Filter which PaymentPlans to update
     */
    where?: PaymentPlanWhereInput
    /**
     * Limit how many PaymentPlans to update.
     */
    limit?: number
  }

  /**
   * PaymentPlan updateManyAndReturn
   */
  export type PaymentPlanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentPlan
     */
    select?: PaymentPlanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentPlan
     */
    omit?: PaymentPlanOmit<ExtArgs> | null
    /**
     * The data used to update PaymentPlans.
     */
    data: XOR<PaymentPlanUpdateManyMutationInput, PaymentPlanUncheckedUpdateManyInput>
    /**
     * Filter which PaymentPlans to update
     */
    where?: PaymentPlanWhereInput
    /**
     * Limit how many PaymentPlans to update.
     */
    limit?: number
  }

  /**
   * PaymentPlan upsert
   */
  export type PaymentPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentPlan
     */
    select?: PaymentPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentPlan
     */
    omit?: PaymentPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentPlan to update in case it exists.
     */
    where: PaymentPlanWhereUniqueInput
    /**
     * In case the PaymentPlan found by the `where` argument doesn't exist, create a new PaymentPlan with this data.
     */
    create: XOR<PaymentPlanCreateInput, PaymentPlanUncheckedCreateInput>
    /**
     * In case the PaymentPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentPlanUpdateInput, PaymentPlanUncheckedUpdateInput>
  }

  /**
   * PaymentPlan delete
   */
  export type PaymentPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentPlan
     */
    select?: PaymentPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentPlan
     */
    omit?: PaymentPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentPlanInclude<ExtArgs> | null
    /**
     * Filter which PaymentPlan to delete.
     */
    where: PaymentPlanWhereUniqueInput
  }

  /**
   * PaymentPlan deleteMany
   */
  export type PaymentPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentPlans to delete
     */
    where?: PaymentPlanWhereInput
    /**
     * Limit how many PaymentPlans to delete.
     */
    limit?: number
  }

  /**
   * PaymentPlan.instalments
   */
  export type PaymentPlan$instalmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInstalment
     */
    select?: PaymentInstalmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInstalment
     */
    omit?: PaymentInstalmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInstalmentInclude<ExtArgs> | null
    where?: PaymentInstalmentWhereInput
    orderBy?: PaymentInstalmentOrderByWithRelationInput | PaymentInstalmentOrderByWithRelationInput[]
    cursor?: PaymentInstalmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentInstalmentScalarFieldEnum | PaymentInstalmentScalarFieldEnum[]
  }

  /**
   * PaymentPlan without action
   */
  export type PaymentPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentPlan
     */
    select?: PaymentPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentPlan
     */
    omit?: PaymentPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentPlanInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    amount: number | null
  }

  export type PaymentSumAggregateOutputType = {
    amount: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: string | null
    transactionId: string | null
    amount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: string | null
    transactionId: string | null
    amount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    transactionId: number
    amount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    amount?: true
  }

  export type PaymentSumAggregateInputType = {
    amount?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    transactionId?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    transactionId?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    transactionId?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: string
    transactionId: string
    amount: number
    createdAt: Date
    updatedAt: Date
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transactionId?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
    instalments?: boolean | Payment$instalmentsArgs<ExtArgs>
    _count?: boolean | PaymentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transactionId?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transactionId?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    transactionId?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "transactionId" | "amount" | "createdAt" | "updatedAt", ExtArgs["result"]["payment"]>
  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
    instalments?: boolean | Payment$instalmentsArgs<ExtArgs>
    _count?: boolean | PaymentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      transaction: Prisma.$TransactionPayload<ExtArgs>
      instalments: Prisma.$PaymentInstalmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      transactionId: string
      amount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments and returns the data updated in the database.
     * @param {PaymentUpdateManyAndReturnArgs} args - Arguments to update many Payments.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    transaction<T extends TransactionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TransactionDefaultArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    instalments<T extends Payment$instalmentsArgs<ExtArgs> = {}>(args?: Subset<T, Payment$instalmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'String'>
    readonly transactionId: FieldRef<"Payment", 'String'>
    readonly amount: FieldRef<"Payment", 'Int'>
    readonly createdAt: FieldRef<"Payment", 'DateTime'>
    readonly updatedAt: FieldRef<"Payment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
  }

  /**
   * Payment updateManyAndReturn
   */
  export type PaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to delete.
     */
    limit?: number
  }

  /**
   * Payment.instalments
   */
  export type Payment$instalmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInstalment
     */
    select?: PaymentInstalmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInstalment
     */
    omit?: PaymentInstalmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInstalmentInclude<ExtArgs> | null
    where?: PaymentInstalmentWhereInput
    orderBy?: PaymentInstalmentOrderByWithRelationInput | PaymentInstalmentOrderByWithRelationInput[]
    cursor?: PaymentInstalmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentInstalmentScalarFieldEnum | PaymentInstalmentScalarFieldEnum[]
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model PaymentInstalment
   */

  export type AggregatePaymentInstalment = {
    _count: PaymentInstalmentCountAggregateOutputType | null
    _avg: PaymentInstalmentAvgAggregateOutputType | null
    _sum: PaymentInstalmentSumAggregateOutputType | null
    _min: PaymentInstalmentMinAggregateOutputType | null
    _max: PaymentInstalmentMaxAggregateOutputType | null
  }

  export type PaymentInstalmentAvgAggregateOutputType = {
    instalmentNumber: number | null
    amountDue: number | null
    amountPaid: number | null
  }

  export type PaymentInstalmentSumAggregateOutputType = {
    instalmentNumber: number | null
    amountDue: number | null
    amountPaid: number | null
  }

  export type PaymentInstalmentMinAggregateOutputType = {
    id: string | null
    paymentId: string | null
    planId: string | null
    instalmentNumber: number | null
    amountDue: number | null
    amountPaid: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentInstalmentMaxAggregateOutputType = {
    id: string | null
    paymentId: string | null
    planId: string | null
    instalmentNumber: number | null
    amountDue: number | null
    amountPaid: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentInstalmentCountAggregateOutputType = {
    id: number
    paymentId: number
    planId: number
    instalmentNumber: number
    amountDue: number
    amountPaid: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentInstalmentAvgAggregateInputType = {
    instalmentNumber?: true
    amountDue?: true
    amountPaid?: true
  }

  export type PaymentInstalmentSumAggregateInputType = {
    instalmentNumber?: true
    amountDue?: true
    amountPaid?: true
  }

  export type PaymentInstalmentMinAggregateInputType = {
    id?: true
    paymentId?: true
    planId?: true
    instalmentNumber?: true
    amountDue?: true
    amountPaid?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentInstalmentMaxAggregateInputType = {
    id?: true
    paymentId?: true
    planId?: true
    instalmentNumber?: true
    amountDue?: true
    amountPaid?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentInstalmentCountAggregateInputType = {
    id?: true
    paymentId?: true
    planId?: true
    instalmentNumber?: true
    amountDue?: true
    amountPaid?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentInstalmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentInstalment to aggregate.
     */
    where?: PaymentInstalmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentInstalments to fetch.
     */
    orderBy?: PaymentInstalmentOrderByWithRelationInput | PaymentInstalmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentInstalmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentInstalments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentInstalments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentInstalments
    **/
    _count?: true | PaymentInstalmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentInstalmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentInstalmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentInstalmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentInstalmentMaxAggregateInputType
  }

  export type GetPaymentInstalmentAggregateType<T extends PaymentInstalmentAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentInstalment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentInstalment[P]>
      : GetScalarType<T[P], AggregatePaymentInstalment[P]>
  }




  export type PaymentInstalmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentInstalmentWhereInput
    orderBy?: PaymentInstalmentOrderByWithAggregationInput | PaymentInstalmentOrderByWithAggregationInput[]
    by: PaymentInstalmentScalarFieldEnum[] | PaymentInstalmentScalarFieldEnum
    having?: PaymentInstalmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentInstalmentCountAggregateInputType | true
    _avg?: PaymentInstalmentAvgAggregateInputType
    _sum?: PaymentInstalmentSumAggregateInputType
    _min?: PaymentInstalmentMinAggregateInputType
    _max?: PaymentInstalmentMaxAggregateInputType
  }

  export type PaymentInstalmentGroupByOutputType = {
    id: string
    paymentId: string
    planId: string
    instalmentNumber: number
    amountDue: number
    amountPaid: number
    createdAt: Date
    updatedAt: Date
    _count: PaymentInstalmentCountAggregateOutputType | null
    _avg: PaymentInstalmentAvgAggregateOutputType | null
    _sum: PaymentInstalmentSumAggregateOutputType | null
    _min: PaymentInstalmentMinAggregateOutputType | null
    _max: PaymentInstalmentMaxAggregateOutputType | null
  }

  type GetPaymentInstalmentGroupByPayload<T extends PaymentInstalmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentInstalmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentInstalmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentInstalmentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentInstalmentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentInstalmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    paymentId?: boolean
    planId?: boolean
    instalmentNumber?: boolean
    amountDue?: boolean
    amountPaid?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
    plan?: boolean | PaymentPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentInstalment"]>

  export type PaymentInstalmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    paymentId?: boolean
    planId?: boolean
    instalmentNumber?: boolean
    amountDue?: boolean
    amountPaid?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
    plan?: boolean | PaymentPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentInstalment"]>

  export type PaymentInstalmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    paymentId?: boolean
    planId?: boolean
    instalmentNumber?: boolean
    amountDue?: boolean
    amountPaid?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
    plan?: boolean | PaymentPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentInstalment"]>

  export type PaymentInstalmentSelectScalar = {
    id?: boolean
    paymentId?: boolean
    planId?: boolean
    instalmentNumber?: boolean
    amountDue?: boolean
    amountPaid?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PaymentInstalmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "paymentId" | "planId" | "instalmentNumber" | "amountDue" | "amountPaid" | "createdAt" | "updatedAt", ExtArgs["result"]["paymentInstalment"]>
  export type PaymentInstalmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
    plan?: boolean | PaymentPlanDefaultArgs<ExtArgs>
  }
  export type PaymentInstalmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
    plan?: boolean | PaymentPlanDefaultArgs<ExtArgs>
  }
  export type PaymentInstalmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
    plan?: boolean | PaymentPlanDefaultArgs<ExtArgs>
  }

  export type $PaymentInstalmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentInstalment"
    objects: {
      payment: Prisma.$PaymentPayload<ExtArgs>
      plan: Prisma.$PaymentPlanPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      paymentId: string
      planId: string
      instalmentNumber: number
      amountDue: number
      amountPaid: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["paymentInstalment"]>
    composites: {}
  }

  type PaymentInstalmentGetPayload<S extends boolean | null | undefined | PaymentInstalmentDefaultArgs> = $Result.GetResult<Prisma.$PaymentInstalmentPayload, S>

  type PaymentInstalmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentInstalmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentInstalmentCountAggregateInputType | true
    }

  export interface PaymentInstalmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentInstalment'], meta: { name: 'PaymentInstalment' } }
    /**
     * Find zero or one PaymentInstalment that matches the filter.
     * @param {PaymentInstalmentFindUniqueArgs} args - Arguments to find a PaymentInstalment
     * @example
     * // Get one PaymentInstalment
     * const paymentInstalment = await prisma.paymentInstalment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentInstalmentFindUniqueArgs>(args: SelectSubset<T, PaymentInstalmentFindUniqueArgs<ExtArgs>>): Prisma__PaymentInstalmentClient<$Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PaymentInstalment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentInstalmentFindUniqueOrThrowArgs} args - Arguments to find a PaymentInstalment
     * @example
     * // Get one PaymentInstalment
     * const paymentInstalment = await prisma.paymentInstalment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentInstalmentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentInstalmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentInstalmentClient<$Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaymentInstalment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentInstalmentFindFirstArgs} args - Arguments to find a PaymentInstalment
     * @example
     * // Get one PaymentInstalment
     * const paymentInstalment = await prisma.paymentInstalment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentInstalmentFindFirstArgs>(args?: SelectSubset<T, PaymentInstalmentFindFirstArgs<ExtArgs>>): Prisma__PaymentInstalmentClient<$Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaymentInstalment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentInstalmentFindFirstOrThrowArgs} args - Arguments to find a PaymentInstalment
     * @example
     * // Get one PaymentInstalment
     * const paymentInstalment = await prisma.paymentInstalment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentInstalmentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentInstalmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentInstalmentClient<$Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PaymentInstalments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentInstalmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentInstalments
     * const paymentInstalments = await prisma.paymentInstalment.findMany()
     * 
     * // Get first 10 PaymentInstalments
     * const paymentInstalments = await prisma.paymentInstalment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentInstalmentWithIdOnly = await prisma.paymentInstalment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentInstalmentFindManyArgs>(args?: SelectSubset<T, PaymentInstalmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PaymentInstalment.
     * @param {PaymentInstalmentCreateArgs} args - Arguments to create a PaymentInstalment.
     * @example
     * // Create one PaymentInstalment
     * const PaymentInstalment = await prisma.paymentInstalment.create({
     *   data: {
     *     // ... data to create a PaymentInstalment
     *   }
     * })
     * 
     */
    create<T extends PaymentInstalmentCreateArgs>(args: SelectSubset<T, PaymentInstalmentCreateArgs<ExtArgs>>): Prisma__PaymentInstalmentClient<$Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PaymentInstalments.
     * @param {PaymentInstalmentCreateManyArgs} args - Arguments to create many PaymentInstalments.
     * @example
     * // Create many PaymentInstalments
     * const paymentInstalment = await prisma.paymentInstalment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentInstalmentCreateManyArgs>(args?: SelectSubset<T, PaymentInstalmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PaymentInstalments and returns the data saved in the database.
     * @param {PaymentInstalmentCreateManyAndReturnArgs} args - Arguments to create many PaymentInstalments.
     * @example
     * // Create many PaymentInstalments
     * const paymentInstalment = await prisma.paymentInstalment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PaymentInstalments and only return the `id`
     * const paymentInstalmentWithIdOnly = await prisma.paymentInstalment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentInstalmentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentInstalmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PaymentInstalment.
     * @param {PaymentInstalmentDeleteArgs} args - Arguments to delete one PaymentInstalment.
     * @example
     * // Delete one PaymentInstalment
     * const PaymentInstalment = await prisma.paymentInstalment.delete({
     *   where: {
     *     // ... filter to delete one PaymentInstalment
     *   }
     * })
     * 
     */
    delete<T extends PaymentInstalmentDeleteArgs>(args: SelectSubset<T, PaymentInstalmentDeleteArgs<ExtArgs>>): Prisma__PaymentInstalmentClient<$Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PaymentInstalment.
     * @param {PaymentInstalmentUpdateArgs} args - Arguments to update one PaymentInstalment.
     * @example
     * // Update one PaymentInstalment
     * const paymentInstalment = await prisma.paymentInstalment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentInstalmentUpdateArgs>(args: SelectSubset<T, PaymentInstalmentUpdateArgs<ExtArgs>>): Prisma__PaymentInstalmentClient<$Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PaymentInstalments.
     * @param {PaymentInstalmentDeleteManyArgs} args - Arguments to filter PaymentInstalments to delete.
     * @example
     * // Delete a few PaymentInstalments
     * const { count } = await prisma.paymentInstalment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentInstalmentDeleteManyArgs>(args?: SelectSubset<T, PaymentInstalmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentInstalments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentInstalmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentInstalments
     * const paymentInstalment = await prisma.paymentInstalment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentInstalmentUpdateManyArgs>(args: SelectSubset<T, PaymentInstalmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentInstalments and returns the data updated in the database.
     * @param {PaymentInstalmentUpdateManyAndReturnArgs} args - Arguments to update many PaymentInstalments.
     * @example
     * // Update many PaymentInstalments
     * const paymentInstalment = await prisma.paymentInstalment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PaymentInstalments and only return the `id`
     * const paymentInstalmentWithIdOnly = await prisma.paymentInstalment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentInstalmentUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentInstalmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PaymentInstalment.
     * @param {PaymentInstalmentUpsertArgs} args - Arguments to update or create a PaymentInstalment.
     * @example
     * // Update or create a PaymentInstalment
     * const paymentInstalment = await prisma.paymentInstalment.upsert({
     *   create: {
     *     // ... data to create a PaymentInstalment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentInstalment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentInstalmentUpsertArgs>(args: SelectSubset<T, PaymentInstalmentUpsertArgs<ExtArgs>>): Prisma__PaymentInstalmentClient<$Result.GetResult<Prisma.$PaymentInstalmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PaymentInstalments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentInstalmentCountArgs} args - Arguments to filter PaymentInstalments to count.
     * @example
     * // Count the number of PaymentInstalments
     * const count = await prisma.paymentInstalment.count({
     *   where: {
     *     // ... the filter for the PaymentInstalments we want to count
     *   }
     * })
    **/
    count<T extends PaymentInstalmentCountArgs>(
      args?: Subset<T, PaymentInstalmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentInstalmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentInstalment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentInstalmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentInstalmentAggregateArgs>(args: Subset<T, PaymentInstalmentAggregateArgs>): Prisma.PrismaPromise<GetPaymentInstalmentAggregateType<T>>

    /**
     * Group by PaymentInstalment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentInstalmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentInstalmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentInstalmentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentInstalmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentInstalmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentInstalmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentInstalment model
   */
  readonly fields: PaymentInstalmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentInstalment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentInstalmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    payment<T extends PaymentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PaymentDefaultArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    plan<T extends PaymentPlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PaymentPlanDefaultArgs<ExtArgs>>): Prisma__PaymentPlanClient<$Result.GetResult<Prisma.$PaymentPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentInstalment model
   */
  interface PaymentInstalmentFieldRefs {
    readonly id: FieldRef<"PaymentInstalment", 'String'>
    readonly paymentId: FieldRef<"PaymentInstalment", 'String'>
    readonly planId: FieldRef<"PaymentInstalment", 'String'>
    readonly instalmentNumber: FieldRef<"PaymentInstalment", 'Int'>
    readonly amountDue: FieldRef<"PaymentInstalment", 'Int'>
    readonly amountPaid: FieldRef<"PaymentInstalment", 'Int'>
    readonly createdAt: FieldRef<"PaymentInstalment", 'DateTime'>
    readonly updatedAt: FieldRef<"PaymentInstalment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PaymentInstalment findUnique
   */
  export type PaymentInstalmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInstalment
     */
    select?: PaymentInstalmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInstalment
     */
    omit?: PaymentInstalmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInstalmentInclude<ExtArgs> | null
    /**
     * Filter, which PaymentInstalment to fetch.
     */
    where: PaymentInstalmentWhereUniqueInput
  }

  /**
   * PaymentInstalment findUniqueOrThrow
   */
  export type PaymentInstalmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInstalment
     */
    select?: PaymentInstalmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInstalment
     */
    omit?: PaymentInstalmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInstalmentInclude<ExtArgs> | null
    /**
     * Filter, which PaymentInstalment to fetch.
     */
    where: PaymentInstalmentWhereUniqueInput
  }

  /**
   * PaymentInstalment findFirst
   */
  export type PaymentInstalmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInstalment
     */
    select?: PaymentInstalmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInstalment
     */
    omit?: PaymentInstalmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInstalmentInclude<ExtArgs> | null
    /**
     * Filter, which PaymentInstalment to fetch.
     */
    where?: PaymentInstalmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentInstalments to fetch.
     */
    orderBy?: PaymentInstalmentOrderByWithRelationInput | PaymentInstalmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentInstalments.
     */
    cursor?: PaymentInstalmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentInstalments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentInstalments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentInstalments.
     */
    distinct?: PaymentInstalmentScalarFieldEnum | PaymentInstalmentScalarFieldEnum[]
  }

  /**
   * PaymentInstalment findFirstOrThrow
   */
  export type PaymentInstalmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInstalment
     */
    select?: PaymentInstalmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInstalment
     */
    omit?: PaymentInstalmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInstalmentInclude<ExtArgs> | null
    /**
     * Filter, which PaymentInstalment to fetch.
     */
    where?: PaymentInstalmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentInstalments to fetch.
     */
    orderBy?: PaymentInstalmentOrderByWithRelationInput | PaymentInstalmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentInstalments.
     */
    cursor?: PaymentInstalmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentInstalments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentInstalments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentInstalments.
     */
    distinct?: PaymentInstalmentScalarFieldEnum | PaymentInstalmentScalarFieldEnum[]
  }

  /**
   * PaymentInstalment findMany
   */
  export type PaymentInstalmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInstalment
     */
    select?: PaymentInstalmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInstalment
     */
    omit?: PaymentInstalmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInstalmentInclude<ExtArgs> | null
    /**
     * Filter, which PaymentInstalments to fetch.
     */
    where?: PaymentInstalmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentInstalments to fetch.
     */
    orderBy?: PaymentInstalmentOrderByWithRelationInput | PaymentInstalmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentInstalments.
     */
    cursor?: PaymentInstalmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentInstalments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentInstalments.
     */
    skip?: number
    distinct?: PaymentInstalmentScalarFieldEnum | PaymentInstalmentScalarFieldEnum[]
  }

  /**
   * PaymentInstalment create
   */
  export type PaymentInstalmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInstalment
     */
    select?: PaymentInstalmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInstalment
     */
    omit?: PaymentInstalmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInstalmentInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentInstalment.
     */
    data: XOR<PaymentInstalmentCreateInput, PaymentInstalmentUncheckedCreateInput>
  }

  /**
   * PaymentInstalment createMany
   */
  export type PaymentInstalmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentInstalments.
     */
    data: PaymentInstalmentCreateManyInput | PaymentInstalmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaymentInstalment createManyAndReturn
   */
  export type PaymentInstalmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInstalment
     */
    select?: PaymentInstalmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInstalment
     */
    omit?: PaymentInstalmentOmit<ExtArgs> | null
    /**
     * The data used to create many PaymentInstalments.
     */
    data: PaymentInstalmentCreateManyInput | PaymentInstalmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInstalmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaymentInstalment update
   */
  export type PaymentInstalmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInstalment
     */
    select?: PaymentInstalmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInstalment
     */
    omit?: PaymentInstalmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInstalmentInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentInstalment.
     */
    data: XOR<PaymentInstalmentUpdateInput, PaymentInstalmentUncheckedUpdateInput>
    /**
     * Choose, which PaymentInstalment to update.
     */
    where: PaymentInstalmentWhereUniqueInput
  }

  /**
   * PaymentInstalment updateMany
   */
  export type PaymentInstalmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentInstalments.
     */
    data: XOR<PaymentInstalmentUpdateManyMutationInput, PaymentInstalmentUncheckedUpdateManyInput>
    /**
     * Filter which PaymentInstalments to update
     */
    where?: PaymentInstalmentWhereInput
    /**
     * Limit how many PaymentInstalments to update.
     */
    limit?: number
  }

  /**
   * PaymentInstalment updateManyAndReturn
   */
  export type PaymentInstalmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInstalment
     */
    select?: PaymentInstalmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInstalment
     */
    omit?: PaymentInstalmentOmit<ExtArgs> | null
    /**
     * The data used to update PaymentInstalments.
     */
    data: XOR<PaymentInstalmentUpdateManyMutationInput, PaymentInstalmentUncheckedUpdateManyInput>
    /**
     * Filter which PaymentInstalments to update
     */
    where?: PaymentInstalmentWhereInput
    /**
     * Limit how many PaymentInstalments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInstalmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaymentInstalment upsert
   */
  export type PaymentInstalmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInstalment
     */
    select?: PaymentInstalmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInstalment
     */
    omit?: PaymentInstalmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInstalmentInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentInstalment to update in case it exists.
     */
    where: PaymentInstalmentWhereUniqueInput
    /**
     * In case the PaymentInstalment found by the `where` argument doesn't exist, create a new PaymentInstalment with this data.
     */
    create: XOR<PaymentInstalmentCreateInput, PaymentInstalmentUncheckedCreateInput>
    /**
     * In case the PaymentInstalment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentInstalmentUpdateInput, PaymentInstalmentUncheckedUpdateInput>
  }

  /**
   * PaymentInstalment delete
   */
  export type PaymentInstalmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInstalment
     */
    select?: PaymentInstalmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInstalment
     */
    omit?: PaymentInstalmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInstalmentInclude<ExtArgs> | null
    /**
     * Filter which PaymentInstalment to delete.
     */
    where: PaymentInstalmentWhereUniqueInput
  }

  /**
   * PaymentInstalment deleteMany
   */
  export type PaymentInstalmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentInstalments to delete
     */
    where?: PaymentInstalmentWhereInput
    /**
     * Limit how many PaymentInstalments to delete.
     */
    limit?: number
  }

  /**
   * PaymentInstalment without action
   */
  export type PaymentInstalmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInstalment
     */
    select?: PaymentInstalmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentInstalment
     */
    omit?: PaymentInstalmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInstalmentInclude<ExtArgs> | null
  }


  /**
   * Model Clinic
   */

  export type AggregateClinic = {
    _count: ClinicCountAggregateOutputType | null
    _min: ClinicMinAggregateOutputType | null
    _max: ClinicMaxAggregateOutputType | null
  }

  export type ClinicMinAggregateOutputType = {
    id: string | null
    roomId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClinicMaxAggregateOutputType = {
    id: string | null
    roomId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClinicCountAggregateOutputType = {
    id: number
    roomId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClinicMinAggregateInputType = {
    id?: true
    roomId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClinicMaxAggregateInputType = {
    id?: true
    roomId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClinicCountAggregateInputType = {
    id?: true
    roomId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClinicAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clinic to aggregate.
     */
    where?: ClinicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clinics to fetch.
     */
    orderBy?: ClinicOrderByWithRelationInput | ClinicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClinicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clinics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clinics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clinics
    **/
    _count?: true | ClinicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClinicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClinicMaxAggregateInputType
  }

  export type GetClinicAggregateType<T extends ClinicAggregateArgs> = {
        [P in keyof T & keyof AggregateClinic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClinic[P]>
      : GetScalarType<T[P], AggregateClinic[P]>
  }




  export type ClinicGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClinicWhereInput
    orderBy?: ClinicOrderByWithAggregationInput | ClinicOrderByWithAggregationInput[]
    by: ClinicScalarFieldEnum[] | ClinicScalarFieldEnum
    having?: ClinicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClinicCountAggregateInputType | true
    _min?: ClinicMinAggregateInputType
    _max?: ClinicMaxAggregateInputType
  }

  export type ClinicGroupByOutputType = {
    id: string
    roomId: string
    createdAt: Date
    updatedAt: Date
    _count: ClinicCountAggregateOutputType | null
    _min: ClinicMinAggregateOutputType | null
    _max: ClinicMaxAggregateOutputType | null
  }

  type GetClinicGroupByPayload<T extends ClinicGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClinicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClinicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClinicGroupByOutputType[P]>
            : GetScalarType<T[P], ClinicGroupByOutputType[P]>
        }
      >
    >


  export type ClinicSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    schedules?: boolean | Clinic$schedulesArgs<ExtArgs>
    _count?: boolean | ClinicCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clinic"]>

  export type ClinicSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["clinic"]>

  export type ClinicSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["clinic"]>

  export type ClinicSelectScalar = {
    id?: boolean
    roomId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClinicOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roomId" | "createdAt" | "updatedAt", ExtArgs["result"]["clinic"]>
  export type ClinicInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedules?: boolean | Clinic$schedulesArgs<ExtArgs>
    _count?: boolean | ClinicCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClinicIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ClinicIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ClinicPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Clinic"
    objects: {
      schedules: Prisma.$ClinicSchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      roomId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["clinic"]>
    composites: {}
  }

  type ClinicGetPayload<S extends boolean | null | undefined | ClinicDefaultArgs> = $Result.GetResult<Prisma.$ClinicPayload, S>

  type ClinicCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClinicFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClinicCountAggregateInputType | true
    }

  export interface ClinicDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Clinic'], meta: { name: 'Clinic' } }
    /**
     * Find zero or one Clinic that matches the filter.
     * @param {ClinicFindUniqueArgs} args - Arguments to find a Clinic
     * @example
     * // Get one Clinic
     * const clinic = await prisma.clinic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClinicFindUniqueArgs>(args: SelectSubset<T, ClinicFindUniqueArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Clinic that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClinicFindUniqueOrThrowArgs} args - Arguments to find a Clinic
     * @example
     * // Get one Clinic
     * const clinic = await prisma.clinic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClinicFindUniqueOrThrowArgs>(args: SelectSubset<T, ClinicFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Clinic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicFindFirstArgs} args - Arguments to find a Clinic
     * @example
     * // Get one Clinic
     * const clinic = await prisma.clinic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClinicFindFirstArgs>(args?: SelectSubset<T, ClinicFindFirstArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Clinic that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicFindFirstOrThrowArgs} args - Arguments to find a Clinic
     * @example
     * // Get one Clinic
     * const clinic = await prisma.clinic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClinicFindFirstOrThrowArgs>(args?: SelectSubset<T, ClinicFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clinics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clinics
     * const clinics = await prisma.clinic.findMany()
     * 
     * // Get first 10 Clinics
     * const clinics = await prisma.clinic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clinicWithIdOnly = await prisma.clinic.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClinicFindManyArgs>(args?: SelectSubset<T, ClinicFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Clinic.
     * @param {ClinicCreateArgs} args - Arguments to create a Clinic.
     * @example
     * // Create one Clinic
     * const Clinic = await prisma.clinic.create({
     *   data: {
     *     // ... data to create a Clinic
     *   }
     * })
     * 
     */
    create<T extends ClinicCreateArgs>(args: SelectSubset<T, ClinicCreateArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clinics.
     * @param {ClinicCreateManyArgs} args - Arguments to create many Clinics.
     * @example
     * // Create many Clinics
     * const clinic = await prisma.clinic.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClinicCreateManyArgs>(args?: SelectSubset<T, ClinicCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clinics and returns the data saved in the database.
     * @param {ClinicCreateManyAndReturnArgs} args - Arguments to create many Clinics.
     * @example
     * // Create many Clinics
     * const clinic = await prisma.clinic.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clinics and only return the `id`
     * const clinicWithIdOnly = await prisma.clinic.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClinicCreateManyAndReturnArgs>(args?: SelectSubset<T, ClinicCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Clinic.
     * @param {ClinicDeleteArgs} args - Arguments to delete one Clinic.
     * @example
     * // Delete one Clinic
     * const Clinic = await prisma.clinic.delete({
     *   where: {
     *     // ... filter to delete one Clinic
     *   }
     * })
     * 
     */
    delete<T extends ClinicDeleteArgs>(args: SelectSubset<T, ClinicDeleteArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Clinic.
     * @param {ClinicUpdateArgs} args - Arguments to update one Clinic.
     * @example
     * // Update one Clinic
     * const clinic = await prisma.clinic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClinicUpdateArgs>(args: SelectSubset<T, ClinicUpdateArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clinics.
     * @param {ClinicDeleteManyArgs} args - Arguments to filter Clinics to delete.
     * @example
     * // Delete a few Clinics
     * const { count } = await prisma.clinic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClinicDeleteManyArgs>(args?: SelectSubset<T, ClinicDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clinics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clinics
     * const clinic = await prisma.clinic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClinicUpdateManyArgs>(args: SelectSubset<T, ClinicUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clinics and returns the data updated in the database.
     * @param {ClinicUpdateManyAndReturnArgs} args - Arguments to update many Clinics.
     * @example
     * // Update many Clinics
     * const clinic = await prisma.clinic.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Clinics and only return the `id`
     * const clinicWithIdOnly = await prisma.clinic.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClinicUpdateManyAndReturnArgs>(args: SelectSubset<T, ClinicUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Clinic.
     * @param {ClinicUpsertArgs} args - Arguments to update or create a Clinic.
     * @example
     * // Update or create a Clinic
     * const clinic = await prisma.clinic.upsert({
     *   create: {
     *     // ... data to create a Clinic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clinic we want to update
     *   }
     * })
     */
    upsert<T extends ClinicUpsertArgs>(args: SelectSubset<T, ClinicUpsertArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clinics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicCountArgs} args - Arguments to filter Clinics to count.
     * @example
     * // Count the number of Clinics
     * const count = await prisma.clinic.count({
     *   where: {
     *     // ... the filter for the Clinics we want to count
     *   }
     * })
    **/
    count<T extends ClinicCountArgs>(
      args?: Subset<T, ClinicCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClinicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clinic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClinicAggregateArgs>(args: Subset<T, ClinicAggregateArgs>): Prisma.PrismaPromise<GetClinicAggregateType<T>>

    /**
     * Group by Clinic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClinicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClinicGroupByArgs['orderBy'] }
        : { orderBy?: ClinicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClinicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClinicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Clinic model
   */
  readonly fields: ClinicFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Clinic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClinicClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    schedules<T extends Clinic$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, Clinic$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Clinic model
   */
  interface ClinicFieldRefs {
    readonly id: FieldRef<"Clinic", 'String'>
    readonly roomId: FieldRef<"Clinic", 'String'>
    readonly createdAt: FieldRef<"Clinic", 'DateTime'>
    readonly updatedAt: FieldRef<"Clinic", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Clinic findUnique
   */
  export type ClinicFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
    /**
     * Filter, which Clinic to fetch.
     */
    where: ClinicWhereUniqueInput
  }

  /**
   * Clinic findUniqueOrThrow
   */
  export type ClinicFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
    /**
     * Filter, which Clinic to fetch.
     */
    where: ClinicWhereUniqueInput
  }

  /**
   * Clinic findFirst
   */
  export type ClinicFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
    /**
     * Filter, which Clinic to fetch.
     */
    where?: ClinicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clinics to fetch.
     */
    orderBy?: ClinicOrderByWithRelationInput | ClinicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clinics.
     */
    cursor?: ClinicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clinics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clinics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clinics.
     */
    distinct?: ClinicScalarFieldEnum | ClinicScalarFieldEnum[]
  }

  /**
   * Clinic findFirstOrThrow
   */
  export type ClinicFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
    /**
     * Filter, which Clinic to fetch.
     */
    where?: ClinicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clinics to fetch.
     */
    orderBy?: ClinicOrderByWithRelationInput | ClinicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clinics.
     */
    cursor?: ClinicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clinics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clinics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clinics.
     */
    distinct?: ClinicScalarFieldEnum | ClinicScalarFieldEnum[]
  }

  /**
   * Clinic findMany
   */
  export type ClinicFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
    /**
     * Filter, which Clinics to fetch.
     */
    where?: ClinicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clinics to fetch.
     */
    orderBy?: ClinicOrderByWithRelationInput | ClinicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clinics.
     */
    cursor?: ClinicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clinics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clinics.
     */
    skip?: number
    distinct?: ClinicScalarFieldEnum | ClinicScalarFieldEnum[]
  }

  /**
   * Clinic create
   */
  export type ClinicCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
    /**
     * The data needed to create a Clinic.
     */
    data: XOR<ClinicCreateInput, ClinicUncheckedCreateInput>
  }

  /**
   * Clinic createMany
   */
  export type ClinicCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clinics.
     */
    data: ClinicCreateManyInput | ClinicCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Clinic createManyAndReturn
   */
  export type ClinicCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * The data used to create many Clinics.
     */
    data: ClinicCreateManyInput | ClinicCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Clinic update
   */
  export type ClinicUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
    /**
     * The data needed to update a Clinic.
     */
    data: XOR<ClinicUpdateInput, ClinicUncheckedUpdateInput>
    /**
     * Choose, which Clinic to update.
     */
    where: ClinicWhereUniqueInput
  }

  /**
   * Clinic updateMany
   */
  export type ClinicUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clinics.
     */
    data: XOR<ClinicUpdateManyMutationInput, ClinicUncheckedUpdateManyInput>
    /**
     * Filter which Clinics to update
     */
    where?: ClinicWhereInput
    /**
     * Limit how many Clinics to update.
     */
    limit?: number
  }

  /**
   * Clinic updateManyAndReturn
   */
  export type ClinicUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * The data used to update Clinics.
     */
    data: XOR<ClinicUpdateManyMutationInput, ClinicUncheckedUpdateManyInput>
    /**
     * Filter which Clinics to update
     */
    where?: ClinicWhereInput
    /**
     * Limit how many Clinics to update.
     */
    limit?: number
  }

  /**
   * Clinic upsert
   */
  export type ClinicUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
    /**
     * The filter to search for the Clinic to update in case it exists.
     */
    where: ClinicWhereUniqueInput
    /**
     * In case the Clinic found by the `where` argument doesn't exist, create a new Clinic with this data.
     */
    create: XOR<ClinicCreateInput, ClinicUncheckedCreateInput>
    /**
     * In case the Clinic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClinicUpdateInput, ClinicUncheckedUpdateInput>
  }

  /**
   * Clinic delete
   */
  export type ClinicDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
    /**
     * Filter which Clinic to delete.
     */
    where: ClinicWhereUniqueInput
  }

  /**
   * Clinic deleteMany
   */
  export type ClinicDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clinics to delete
     */
    where?: ClinicWhereInput
    /**
     * Limit how many Clinics to delete.
     */
    limit?: number
  }

  /**
   * Clinic.schedules
   */
  export type Clinic$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicSchedule
     */
    select?: ClinicScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicSchedule
     */
    omit?: ClinicScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicScheduleInclude<ExtArgs> | null
    where?: ClinicScheduleWhereInput
    orderBy?: ClinicScheduleOrderByWithRelationInput | ClinicScheduleOrderByWithRelationInput[]
    cursor?: ClinicScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClinicScheduleScalarFieldEnum | ClinicScheduleScalarFieldEnum[]
  }

  /**
   * Clinic without action
   */
  export type ClinicDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
  }


  /**
   * Model ClinicSchedule
   */

  export type AggregateClinicSchedule = {
    _count: ClinicScheduleCountAggregateOutputType | null
    _min: ClinicScheduleMinAggregateOutputType | null
    _max: ClinicScheduleMaxAggregateOutputType | null
  }

  export type ClinicScheduleMinAggregateOutputType = {
    id: string | null
    clinicId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClinicScheduleMaxAggregateOutputType = {
    id: string | null
    clinicId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClinicScheduleCountAggregateOutputType = {
    id: number
    clinicId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClinicScheduleMinAggregateInputType = {
    id?: true
    clinicId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClinicScheduleMaxAggregateInputType = {
    id?: true
    clinicId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClinicScheduleCountAggregateInputType = {
    id?: true
    clinicId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClinicScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClinicSchedule to aggregate.
     */
    where?: ClinicScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClinicSchedules to fetch.
     */
    orderBy?: ClinicScheduleOrderByWithRelationInput | ClinicScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClinicScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClinicSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClinicSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClinicSchedules
    **/
    _count?: true | ClinicScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClinicScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClinicScheduleMaxAggregateInputType
  }

  export type GetClinicScheduleAggregateType<T extends ClinicScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateClinicSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClinicSchedule[P]>
      : GetScalarType<T[P], AggregateClinicSchedule[P]>
  }




  export type ClinicScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClinicScheduleWhereInput
    orderBy?: ClinicScheduleOrderByWithAggregationInput | ClinicScheduleOrderByWithAggregationInput[]
    by: ClinicScheduleScalarFieldEnum[] | ClinicScheduleScalarFieldEnum
    having?: ClinicScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClinicScheduleCountAggregateInputType | true
    _min?: ClinicScheduleMinAggregateInputType
    _max?: ClinicScheduleMaxAggregateInputType
  }

  export type ClinicScheduleGroupByOutputType = {
    id: string
    clinicId: string
    createdAt: Date
    updatedAt: Date
    _count: ClinicScheduleCountAggregateOutputType | null
    _min: ClinicScheduleMinAggregateOutputType | null
    _max: ClinicScheduleMaxAggregateOutputType | null
  }

  type GetClinicScheduleGroupByPayload<T extends ClinicScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClinicScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClinicScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClinicScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], ClinicScheduleGroupByOutputType[P]>
        }
      >
    >


  export type ClinicScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clinicSchedule"]>

  export type ClinicScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clinicSchedule"]>

  export type ClinicScheduleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clinicSchedule"]>

  export type ClinicScheduleSelectScalar = {
    id?: boolean
    clinicId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClinicScheduleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clinicId" | "createdAt" | "updatedAt", ExtArgs["result"]["clinicSchedule"]>
  export type ClinicScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
  }
  export type ClinicScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
  }
  export type ClinicScheduleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
  }

  export type $ClinicSchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClinicSchedule"
    objects: {
      clinic: Prisma.$ClinicPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clinicId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["clinicSchedule"]>
    composites: {}
  }

  type ClinicScheduleGetPayload<S extends boolean | null | undefined | ClinicScheduleDefaultArgs> = $Result.GetResult<Prisma.$ClinicSchedulePayload, S>

  type ClinicScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClinicScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClinicScheduleCountAggregateInputType | true
    }

  export interface ClinicScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClinicSchedule'], meta: { name: 'ClinicSchedule' } }
    /**
     * Find zero or one ClinicSchedule that matches the filter.
     * @param {ClinicScheduleFindUniqueArgs} args - Arguments to find a ClinicSchedule
     * @example
     * // Get one ClinicSchedule
     * const clinicSchedule = await prisma.clinicSchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClinicScheduleFindUniqueArgs>(args: SelectSubset<T, ClinicScheduleFindUniqueArgs<ExtArgs>>): Prisma__ClinicScheduleClient<$Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ClinicSchedule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClinicScheduleFindUniqueOrThrowArgs} args - Arguments to find a ClinicSchedule
     * @example
     * // Get one ClinicSchedule
     * const clinicSchedule = await prisma.clinicSchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClinicScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, ClinicScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClinicScheduleClient<$Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClinicSchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicScheduleFindFirstArgs} args - Arguments to find a ClinicSchedule
     * @example
     * // Get one ClinicSchedule
     * const clinicSchedule = await prisma.clinicSchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClinicScheduleFindFirstArgs>(args?: SelectSubset<T, ClinicScheduleFindFirstArgs<ExtArgs>>): Prisma__ClinicScheduleClient<$Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClinicSchedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicScheduleFindFirstOrThrowArgs} args - Arguments to find a ClinicSchedule
     * @example
     * // Get one ClinicSchedule
     * const clinicSchedule = await prisma.clinicSchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClinicScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, ClinicScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClinicScheduleClient<$Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ClinicSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClinicSchedules
     * const clinicSchedules = await prisma.clinicSchedule.findMany()
     * 
     * // Get first 10 ClinicSchedules
     * const clinicSchedules = await prisma.clinicSchedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clinicScheduleWithIdOnly = await prisma.clinicSchedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClinicScheduleFindManyArgs>(args?: SelectSubset<T, ClinicScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ClinicSchedule.
     * @param {ClinicScheduleCreateArgs} args - Arguments to create a ClinicSchedule.
     * @example
     * // Create one ClinicSchedule
     * const ClinicSchedule = await prisma.clinicSchedule.create({
     *   data: {
     *     // ... data to create a ClinicSchedule
     *   }
     * })
     * 
     */
    create<T extends ClinicScheduleCreateArgs>(args: SelectSubset<T, ClinicScheduleCreateArgs<ExtArgs>>): Prisma__ClinicScheduleClient<$Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ClinicSchedules.
     * @param {ClinicScheduleCreateManyArgs} args - Arguments to create many ClinicSchedules.
     * @example
     * // Create many ClinicSchedules
     * const clinicSchedule = await prisma.clinicSchedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClinicScheduleCreateManyArgs>(args?: SelectSubset<T, ClinicScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClinicSchedules and returns the data saved in the database.
     * @param {ClinicScheduleCreateManyAndReturnArgs} args - Arguments to create many ClinicSchedules.
     * @example
     * // Create many ClinicSchedules
     * const clinicSchedule = await prisma.clinicSchedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClinicSchedules and only return the `id`
     * const clinicScheduleWithIdOnly = await prisma.clinicSchedule.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClinicScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, ClinicScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ClinicSchedule.
     * @param {ClinicScheduleDeleteArgs} args - Arguments to delete one ClinicSchedule.
     * @example
     * // Delete one ClinicSchedule
     * const ClinicSchedule = await prisma.clinicSchedule.delete({
     *   where: {
     *     // ... filter to delete one ClinicSchedule
     *   }
     * })
     * 
     */
    delete<T extends ClinicScheduleDeleteArgs>(args: SelectSubset<T, ClinicScheduleDeleteArgs<ExtArgs>>): Prisma__ClinicScheduleClient<$Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ClinicSchedule.
     * @param {ClinicScheduleUpdateArgs} args - Arguments to update one ClinicSchedule.
     * @example
     * // Update one ClinicSchedule
     * const clinicSchedule = await prisma.clinicSchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClinicScheduleUpdateArgs>(args: SelectSubset<T, ClinicScheduleUpdateArgs<ExtArgs>>): Prisma__ClinicScheduleClient<$Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ClinicSchedules.
     * @param {ClinicScheduleDeleteManyArgs} args - Arguments to filter ClinicSchedules to delete.
     * @example
     * // Delete a few ClinicSchedules
     * const { count } = await prisma.clinicSchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClinicScheduleDeleteManyArgs>(args?: SelectSubset<T, ClinicScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClinicSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClinicSchedules
     * const clinicSchedule = await prisma.clinicSchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClinicScheduleUpdateManyArgs>(args: SelectSubset<T, ClinicScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClinicSchedules and returns the data updated in the database.
     * @param {ClinicScheduleUpdateManyAndReturnArgs} args - Arguments to update many ClinicSchedules.
     * @example
     * // Update many ClinicSchedules
     * const clinicSchedule = await prisma.clinicSchedule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ClinicSchedules and only return the `id`
     * const clinicScheduleWithIdOnly = await prisma.clinicSchedule.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClinicScheduleUpdateManyAndReturnArgs>(args: SelectSubset<T, ClinicScheduleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ClinicSchedule.
     * @param {ClinicScheduleUpsertArgs} args - Arguments to update or create a ClinicSchedule.
     * @example
     * // Update or create a ClinicSchedule
     * const clinicSchedule = await prisma.clinicSchedule.upsert({
     *   create: {
     *     // ... data to create a ClinicSchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClinicSchedule we want to update
     *   }
     * })
     */
    upsert<T extends ClinicScheduleUpsertArgs>(args: SelectSubset<T, ClinicScheduleUpsertArgs<ExtArgs>>): Prisma__ClinicScheduleClient<$Result.GetResult<Prisma.$ClinicSchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ClinicSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicScheduleCountArgs} args - Arguments to filter ClinicSchedules to count.
     * @example
     * // Count the number of ClinicSchedules
     * const count = await prisma.clinicSchedule.count({
     *   where: {
     *     // ... the filter for the ClinicSchedules we want to count
     *   }
     * })
    **/
    count<T extends ClinicScheduleCountArgs>(
      args?: Subset<T, ClinicScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClinicScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClinicSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClinicScheduleAggregateArgs>(args: Subset<T, ClinicScheduleAggregateArgs>): Prisma.PrismaPromise<GetClinicScheduleAggregateType<T>>

    /**
     * Group by ClinicSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClinicScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClinicScheduleGroupByArgs['orderBy'] }
        : { orderBy?: ClinicScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClinicScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClinicScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClinicSchedule model
   */
  readonly fields: ClinicScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClinicSchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClinicScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clinic<T extends ClinicDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClinicDefaultArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClinicSchedule model
   */
  interface ClinicScheduleFieldRefs {
    readonly id: FieldRef<"ClinicSchedule", 'String'>
    readonly clinicId: FieldRef<"ClinicSchedule", 'String'>
    readonly createdAt: FieldRef<"ClinicSchedule", 'DateTime'>
    readonly updatedAt: FieldRef<"ClinicSchedule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ClinicSchedule findUnique
   */
  export type ClinicScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicSchedule
     */
    select?: ClinicScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicSchedule
     */
    omit?: ClinicScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicScheduleInclude<ExtArgs> | null
    /**
     * Filter, which ClinicSchedule to fetch.
     */
    where: ClinicScheduleWhereUniqueInput
  }

  /**
   * ClinicSchedule findUniqueOrThrow
   */
  export type ClinicScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicSchedule
     */
    select?: ClinicScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicSchedule
     */
    omit?: ClinicScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicScheduleInclude<ExtArgs> | null
    /**
     * Filter, which ClinicSchedule to fetch.
     */
    where: ClinicScheduleWhereUniqueInput
  }

  /**
   * ClinicSchedule findFirst
   */
  export type ClinicScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicSchedule
     */
    select?: ClinicScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicSchedule
     */
    omit?: ClinicScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicScheduleInclude<ExtArgs> | null
    /**
     * Filter, which ClinicSchedule to fetch.
     */
    where?: ClinicScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClinicSchedules to fetch.
     */
    orderBy?: ClinicScheduleOrderByWithRelationInput | ClinicScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClinicSchedules.
     */
    cursor?: ClinicScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClinicSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClinicSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClinicSchedules.
     */
    distinct?: ClinicScheduleScalarFieldEnum | ClinicScheduleScalarFieldEnum[]
  }

  /**
   * ClinicSchedule findFirstOrThrow
   */
  export type ClinicScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicSchedule
     */
    select?: ClinicScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicSchedule
     */
    omit?: ClinicScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicScheduleInclude<ExtArgs> | null
    /**
     * Filter, which ClinicSchedule to fetch.
     */
    where?: ClinicScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClinicSchedules to fetch.
     */
    orderBy?: ClinicScheduleOrderByWithRelationInput | ClinicScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClinicSchedules.
     */
    cursor?: ClinicScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClinicSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClinicSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClinicSchedules.
     */
    distinct?: ClinicScheduleScalarFieldEnum | ClinicScheduleScalarFieldEnum[]
  }

  /**
   * ClinicSchedule findMany
   */
  export type ClinicScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicSchedule
     */
    select?: ClinicScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicSchedule
     */
    omit?: ClinicScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicScheduleInclude<ExtArgs> | null
    /**
     * Filter, which ClinicSchedules to fetch.
     */
    where?: ClinicScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClinicSchedules to fetch.
     */
    orderBy?: ClinicScheduleOrderByWithRelationInput | ClinicScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClinicSchedules.
     */
    cursor?: ClinicScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClinicSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClinicSchedules.
     */
    skip?: number
    distinct?: ClinicScheduleScalarFieldEnum | ClinicScheduleScalarFieldEnum[]
  }

  /**
   * ClinicSchedule create
   */
  export type ClinicScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicSchedule
     */
    select?: ClinicScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicSchedule
     */
    omit?: ClinicScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a ClinicSchedule.
     */
    data: XOR<ClinicScheduleCreateInput, ClinicScheduleUncheckedCreateInput>
  }

  /**
   * ClinicSchedule createMany
   */
  export type ClinicScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClinicSchedules.
     */
    data: ClinicScheduleCreateManyInput | ClinicScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClinicSchedule createManyAndReturn
   */
  export type ClinicScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicSchedule
     */
    select?: ClinicScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicSchedule
     */
    omit?: ClinicScheduleOmit<ExtArgs> | null
    /**
     * The data used to create many ClinicSchedules.
     */
    data: ClinicScheduleCreateManyInput | ClinicScheduleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicScheduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClinicSchedule update
   */
  export type ClinicScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicSchedule
     */
    select?: ClinicScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicSchedule
     */
    omit?: ClinicScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a ClinicSchedule.
     */
    data: XOR<ClinicScheduleUpdateInput, ClinicScheduleUncheckedUpdateInput>
    /**
     * Choose, which ClinicSchedule to update.
     */
    where: ClinicScheduleWhereUniqueInput
  }

  /**
   * ClinicSchedule updateMany
   */
  export type ClinicScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClinicSchedules.
     */
    data: XOR<ClinicScheduleUpdateManyMutationInput, ClinicScheduleUncheckedUpdateManyInput>
    /**
     * Filter which ClinicSchedules to update
     */
    where?: ClinicScheduleWhereInput
    /**
     * Limit how many ClinicSchedules to update.
     */
    limit?: number
  }

  /**
   * ClinicSchedule updateManyAndReturn
   */
  export type ClinicScheduleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicSchedule
     */
    select?: ClinicScheduleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicSchedule
     */
    omit?: ClinicScheduleOmit<ExtArgs> | null
    /**
     * The data used to update ClinicSchedules.
     */
    data: XOR<ClinicScheduleUpdateManyMutationInput, ClinicScheduleUncheckedUpdateManyInput>
    /**
     * Filter which ClinicSchedules to update
     */
    where?: ClinicScheduleWhereInput
    /**
     * Limit how many ClinicSchedules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicScheduleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClinicSchedule upsert
   */
  export type ClinicScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicSchedule
     */
    select?: ClinicScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicSchedule
     */
    omit?: ClinicScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the ClinicSchedule to update in case it exists.
     */
    where: ClinicScheduleWhereUniqueInput
    /**
     * In case the ClinicSchedule found by the `where` argument doesn't exist, create a new ClinicSchedule with this data.
     */
    create: XOR<ClinicScheduleCreateInput, ClinicScheduleUncheckedCreateInput>
    /**
     * In case the ClinicSchedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClinicScheduleUpdateInput, ClinicScheduleUncheckedUpdateInput>
  }

  /**
   * ClinicSchedule delete
   */
  export type ClinicScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicSchedule
     */
    select?: ClinicScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicSchedule
     */
    omit?: ClinicScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicScheduleInclude<ExtArgs> | null
    /**
     * Filter which ClinicSchedule to delete.
     */
    where: ClinicScheduleWhereUniqueInput
  }

  /**
   * ClinicSchedule deleteMany
   */
  export type ClinicScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClinicSchedules to delete
     */
    where?: ClinicScheduleWhereInput
    /**
     * Limit how many ClinicSchedules to delete.
     */
    limit?: number
  }

  /**
   * ClinicSchedule without action
   */
  export type ClinicScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicSchedule
     */
    select?: ClinicScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClinicSchedule
     */
    omit?: ClinicScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicScheduleInclude<ExtArgs> | null
  }


  /**
   * Model PatientEncounter
   */

  export type AggregatePatientEncounter = {
    _count: PatientEncounterCountAggregateOutputType | null
    _min: PatientEncounterMinAggregateOutputType | null
    _max: PatientEncounterMaxAggregateOutputType | null
  }

  export type PatientEncounterMinAggregateOutputType = {
    id: string | null
    encounterId: string | null
    patientProfileId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientEncounterMaxAggregateOutputType = {
    id: string | null
    encounterId: string | null
    patientProfileId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientEncounterCountAggregateOutputType = {
    id: number
    encounterId: number
    patientProfileId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PatientEncounterMinAggregateInputType = {
    id?: true
    encounterId?: true
    patientProfileId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientEncounterMaxAggregateInputType = {
    id?: true
    encounterId?: true
    patientProfileId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientEncounterCountAggregateInputType = {
    id?: true
    encounterId?: true
    patientProfileId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PatientEncounterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientEncounter to aggregate.
     */
    where?: PatientEncounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientEncounters to fetch.
     */
    orderBy?: PatientEncounterOrderByWithRelationInput | PatientEncounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientEncounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientEncounters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientEncounters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientEncounters
    **/
    _count?: true | PatientEncounterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientEncounterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientEncounterMaxAggregateInputType
  }

  export type GetPatientEncounterAggregateType<T extends PatientEncounterAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientEncounter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientEncounter[P]>
      : GetScalarType<T[P], AggregatePatientEncounter[P]>
  }




  export type PatientEncounterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientEncounterWhereInput
    orderBy?: PatientEncounterOrderByWithAggregationInput | PatientEncounterOrderByWithAggregationInput[]
    by: PatientEncounterScalarFieldEnum[] | PatientEncounterScalarFieldEnum
    having?: PatientEncounterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientEncounterCountAggregateInputType | true
    _min?: PatientEncounterMinAggregateInputType
    _max?: PatientEncounterMaxAggregateInputType
  }

  export type PatientEncounterGroupByOutputType = {
    id: string
    encounterId: string
    patientProfileId: string
    createdAt: Date
    updatedAt: Date
    _count: PatientEncounterCountAggregateOutputType | null
    _min: PatientEncounterMinAggregateOutputType | null
    _max: PatientEncounterMaxAggregateOutputType | null
  }

  type GetPatientEncounterGroupByPayload<T extends PatientEncounterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientEncounterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientEncounterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientEncounterGroupByOutputType[P]>
            : GetScalarType<T[P], PatientEncounterGroupByOutputType[P]>
        }
      >
    >


  export type PatientEncounterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    encounterId?: boolean
    patientProfileId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
    transaction?: boolean | PatientEncounter$transactionArgs<ExtArgs>
  }, ExtArgs["result"]["patientEncounter"]>

  export type PatientEncounterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    encounterId?: boolean
    patientProfileId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientEncounter"]>

  export type PatientEncounterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    encounterId?: boolean
    patientProfileId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientEncounter"]>

  export type PatientEncounterSelectScalar = {
    id?: boolean
    encounterId?: boolean
    patientProfileId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PatientEncounterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "encounterId" | "patientProfileId" | "createdAt" | "updatedAt", ExtArgs["result"]["patientEncounter"]>
  export type PatientEncounterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
    transaction?: boolean | PatientEncounter$transactionArgs<ExtArgs>
  }
  export type PatientEncounterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }
  export type PatientEncounterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }

  export type $PatientEncounterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientEncounter"
    objects: {
      patientProfile: Prisma.$PatientProfilePayload<ExtArgs>
      transaction: Prisma.$TransactionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      encounterId: string
      patientProfileId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["patientEncounter"]>
    composites: {}
  }

  type PatientEncounterGetPayload<S extends boolean | null | undefined | PatientEncounterDefaultArgs> = $Result.GetResult<Prisma.$PatientEncounterPayload, S>

  type PatientEncounterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientEncounterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientEncounterCountAggregateInputType | true
    }

  export interface PatientEncounterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientEncounter'], meta: { name: 'PatientEncounter' } }
    /**
     * Find zero or one PatientEncounter that matches the filter.
     * @param {PatientEncounterFindUniqueArgs} args - Arguments to find a PatientEncounter
     * @example
     * // Get one PatientEncounter
     * const patientEncounter = await prisma.patientEncounter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientEncounterFindUniqueArgs>(args: SelectSubset<T, PatientEncounterFindUniqueArgs<ExtArgs>>): Prisma__PatientEncounterClient<$Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PatientEncounter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientEncounterFindUniqueOrThrowArgs} args - Arguments to find a PatientEncounter
     * @example
     * // Get one PatientEncounter
     * const patientEncounter = await prisma.patientEncounter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientEncounterFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientEncounterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientEncounterClient<$Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientEncounter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientEncounterFindFirstArgs} args - Arguments to find a PatientEncounter
     * @example
     * // Get one PatientEncounter
     * const patientEncounter = await prisma.patientEncounter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientEncounterFindFirstArgs>(args?: SelectSubset<T, PatientEncounterFindFirstArgs<ExtArgs>>): Prisma__PatientEncounterClient<$Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientEncounter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientEncounterFindFirstOrThrowArgs} args - Arguments to find a PatientEncounter
     * @example
     * // Get one PatientEncounter
     * const patientEncounter = await prisma.patientEncounter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientEncounterFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientEncounterFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientEncounterClient<$Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PatientEncounters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientEncounterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientEncounters
     * const patientEncounters = await prisma.patientEncounter.findMany()
     * 
     * // Get first 10 PatientEncounters
     * const patientEncounters = await prisma.patientEncounter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientEncounterWithIdOnly = await prisma.patientEncounter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientEncounterFindManyArgs>(args?: SelectSubset<T, PatientEncounterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PatientEncounter.
     * @param {PatientEncounterCreateArgs} args - Arguments to create a PatientEncounter.
     * @example
     * // Create one PatientEncounter
     * const PatientEncounter = await prisma.patientEncounter.create({
     *   data: {
     *     // ... data to create a PatientEncounter
     *   }
     * })
     * 
     */
    create<T extends PatientEncounterCreateArgs>(args: SelectSubset<T, PatientEncounterCreateArgs<ExtArgs>>): Prisma__PatientEncounterClient<$Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PatientEncounters.
     * @param {PatientEncounterCreateManyArgs} args - Arguments to create many PatientEncounters.
     * @example
     * // Create many PatientEncounters
     * const patientEncounter = await prisma.patientEncounter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientEncounterCreateManyArgs>(args?: SelectSubset<T, PatientEncounterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatientEncounters and returns the data saved in the database.
     * @param {PatientEncounterCreateManyAndReturnArgs} args - Arguments to create many PatientEncounters.
     * @example
     * // Create many PatientEncounters
     * const patientEncounter = await prisma.patientEncounter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatientEncounters and only return the `id`
     * const patientEncounterWithIdOnly = await prisma.patientEncounter.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientEncounterCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientEncounterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PatientEncounter.
     * @param {PatientEncounterDeleteArgs} args - Arguments to delete one PatientEncounter.
     * @example
     * // Delete one PatientEncounter
     * const PatientEncounter = await prisma.patientEncounter.delete({
     *   where: {
     *     // ... filter to delete one PatientEncounter
     *   }
     * })
     * 
     */
    delete<T extends PatientEncounterDeleteArgs>(args: SelectSubset<T, PatientEncounterDeleteArgs<ExtArgs>>): Prisma__PatientEncounterClient<$Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PatientEncounter.
     * @param {PatientEncounterUpdateArgs} args - Arguments to update one PatientEncounter.
     * @example
     * // Update one PatientEncounter
     * const patientEncounter = await prisma.patientEncounter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientEncounterUpdateArgs>(args: SelectSubset<T, PatientEncounterUpdateArgs<ExtArgs>>): Prisma__PatientEncounterClient<$Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PatientEncounters.
     * @param {PatientEncounterDeleteManyArgs} args - Arguments to filter PatientEncounters to delete.
     * @example
     * // Delete a few PatientEncounters
     * const { count } = await prisma.patientEncounter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientEncounterDeleteManyArgs>(args?: SelectSubset<T, PatientEncounterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientEncounters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientEncounterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientEncounters
     * const patientEncounter = await prisma.patientEncounter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientEncounterUpdateManyArgs>(args: SelectSubset<T, PatientEncounterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientEncounters and returns the data updated in the database.
     * @param {PatientEncounterUpdateManyAndReturnArgs} args - Arguments to update many PatientEncounters.
     * @example
     * // Update many PatientEncounters
     * const patientEncounter = await prisma.patientEncounter.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PatientEncounters and only return the `id`
     * const patientEncounterWithIdOnly = await prisma.patientEncounter.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PatientEncounterUpdateManyAndReturnArgs>(args: SelectSubset<T, PatientEncounterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PatientEncounter.
     * @param {PatientEncounterUpsertArgs} args - Arguments to update or create a PatientEncounter.
     * @example
     * // Update or create a PatientEncounter
     * const patientEncounter = await prisma.patientEncounter.upsert({
     *   create: {
     *     // ... data to create a PatientEncounter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientEncounter we want to update
     *   }
     * })
     */
    upsert<T extends PatientEncounterUpsertArgs>(args: SelectSubset<T, PatientEncounterUpsertArgs<ExtArgs>>): Prisma__PatientEncounterClient<$Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PatientEncounters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientEncounterCountArgs} args - Arguments to filter PatientEncounters to count.
     * @example
     * // Count the number of PatientEncounters
     * const count = await prisma.patientEncounter.count({
     *   where: {
     *     // ... the filter for the PatientEncounters we want to count
     *   }
     * })
    **/
    count<T extends PatientEncounterCountArgs>(
      args?: Subset<T, PatientEncounterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientEncounterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientEncounter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientEncounterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientEncounterAggregateArgs>(args: Subset<T, PatientEncounterAggregateArgs>): Prisma.PrismaPromise<GetPatientEncounterAggregateType<T>>

    /**
     * Group by PatientEncounter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientEncounterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientEncounterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientEncounterGroupByArgs['orderBy'] }
        : { orderBy?: PatientEncounterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientEncounterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientEncounterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientEncounter model
   */
  readonly fields: PatientEncounterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientEncounter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientEncounterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patientProfile<T extends PatientProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfileDefaultArgs<ExtArgs>>): Prisma__PatientProfileClient<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    transaction<T extends PatientEncounter$transactionArgs<ExtArgs> = {}>(args?: Subset<T, PatientEncounter$transactionArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientEncounter model
   */
  interface PatientEncounterFieldRefs {
    readonly id: FieldRef<"PatientEncounter", 'String'>
    readonly encounterId: FieldRef<"PatientEncounter", 'String'>
    readonly patientProfileId: FieldRef<"PatientEncounter", 'String'>
    readonly createdAt: FieldRef<"PatientEncounter", 'DateTime'>
    readonly updatedAt: FieldRef<"PatientEncounter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PatientEncounter findUnique
   */
  export type PatientEncounterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEncounter
     */
    select?: PatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEncounter
     */
    omit?: PatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEncounterInclude<ExtArgs> | null
    /**
     * Filter, which PatientEncounter to fetch.
     */
    where: PatientEncounterWhereUniqueInput
  }

  /**
   * PatientEncounter findUniqueOrThrow
   */
  export type PatientEncounterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEncounter
     */
    select?: PatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEncounter
     */
    omit?: PatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEncounterInclude<ExtArgs> | null
    /**
     * Filter, which PatientEncounter to fetch.
     */
    where: PatientEncounterWhereUniqueInput
  }

  /**
   * PatientEncounter findFirst
   */
  export type PatientEncounterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEncounter
     */
    select?: PatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEncounter
     */
    omit?: PatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEncounterInclude<ExtArgs> | null
    /**
     * Filter, which PatientEncounter to fetch.
     */
    where?: PatientEncounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientEncounters to fetch.
     */
    orderBy?: PatientEncounterOrderByWithRelationInput | PatientEncounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientEncounters.
     */
    cursor?: PatientEncounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientEncounters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientEncounters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientEncounters.
     */
    distinct?: PatientEncounterScalarFieldEnum | PatientEncounterScalarFieldEnum[]
  }

  /**
   * PatientEncounter findFirstOrThrow
   */
  export type PatientEncounterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEncounter
     */
    select?: PatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEncounter
     */
    omit?: PatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEncounterInclude<ExtArgs> | null
    /**
     * Filter, which PatientEncounter to fetch.
     */
    where?: PatientEncounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientEncounters to fetch.
     */
    orderBy?: PatientEncounterOrderByWithRelationInput | PatientEncounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientEncounters.
     */
    cursor?: PatientEncounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientEncounters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientEncounters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientEncounters.
     */
    distinct?: PatientEncounterScalarFieldEnum | PatientEncounterScalarFieldEnum[]
  }

  /**
   * PatientEncounter findMany
   */
  export type PatientEncounterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEncounter
     */
    select?: PatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEncounter
     */
    omit?: PatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEncounterInclude<ExtArgs> | null
    /**
     * Filter, which PatientEncounters to fetch.
     */
    where?: PatientEncounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientEncounters to fetch.
     */
    orderBy?: PatientEncounterOrderByWithRelationInput | PatientEncounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientEncounters.
     */
    cursor?: PatientEncounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientEncounters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientEncounters.
     */
    skip?: number
    distinct?: PatientEncounterScalarFieldEnum | PatientEncounterScalarFieldEnum[]
  }

  /**
   * PatientEncounter create
   */
  export type PatientEncounterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEncounter
     */
    select?: PatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEncounter
     */
    omit?: PatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEncounterInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientEncounter.
     */
    data: XOR<PatientEncounterCreateInput, PatientEncounterUncheckedCreateInput>
  }

  /**
   * PatientEncounter createMany
   */
  export type PatientEncounterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientEncounters.
     */
    data: PatientEncounterCreateManyInput | PatientEncounterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientEncounter createManyAndReturn
   */
  export type PatientEncounterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEncounter
     */
    select?: PatientEncounterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEncounter
     */
    omit?: PatientEncounterOmit<ExtArgs> | null
    /**
     * The data used to create many PatientEncounters.
     */
    data: PatientEncounterCreateManyInput | PatientEncounterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEncounterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientEncounter update
   */
  export type PatientEncounterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEncounter
     */
    select?: PatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEncounter
     */
    omit?: PatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEncounterInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientEncounter.
     */
    data: XOR<PatientEncounterUpdateInput, PatientEncounterUncheckedUpdateInput>
    /**
     * Choose, which PatientEncounter to update.
     */
    where: PatientEncounterWhereUniqueInput
  }

  /**
   * PatientEncounter updateMany
   */
  export type PatientEncounterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientEncounters.
     */
    data: XOR<PatientEncounterUpdateManyMutationInput, PatientEncounterUncheckedUpdateManyInput>
    /**
     * Filter which PatientEncounters to update
     */
    where?: PatientEncounterWhereInput
    /**
     * Limit how many PatientEncounters to update.
     */
    limit?: number
  }

  /**
   * PatientEncounter updateManyAndReturn
   */
  export type PatientEncounterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEncounter
     */
    select?: PatientEncounterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEncounter
     */
    omit?: PatientEncounterOmit<ExtArgs> | null
    /**
     * The data used to update PatientEncounters.
     */
    data: XOR<PatientEncounterUpdateManyMutationInput, PatientEncounterUncheckedUpdateManyInput>
    /**
     * Filter which PatientEncounters to update
     */
    where?: PatientEncounterWhereInput
    /**
     * Limit how many PatientEncounters to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEncounterIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientEncounter upsert
   */
  export type PatientEncounterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEncounter
     */
    select?: PatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEncounter
     */
    omit?: PatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEncounterInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientEncounter to update in case it exists.
     */
    where: PatientEncounterWhereUniqueInput
    /**
     * In case the PatientEncounter found by the `where` argument doesn't exist, create a new PatientEncounter with this data.
     */
    create: XOR<PatientEncounterCreateInput, PatientEncounterUncheckedCreateInput>
    /**
     * In case the PatientEncounter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientEncounterUpdateInput, PatientEncounterUncheckedUpdateInput>
  }

  /**
   * PatientEncounter delete
   */
  export type PatientEncounterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEncounter
     */
    select?: PatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEncounter
     */
    omit?: PatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEncounterInclude<ExtArgs> | null
    /**
     * Filter which PatientEncounter to delete.
     */
    where: PatientEncounterWhereUniqueInput
  }

  /**
   * PatientEncounter deleteMany
   */
  export type PatientEncounterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientEncounters to delete
     */
    where?: PatientEncounterWhereInput
    /**
     * Limit how many PatientEncounters to delete.
     */
    limit?: number
  }

  /**
   * PatientEncounter.transaction
   */
  export type PatientEncounter$transactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
  }

  /**
   * PatientEncounter without action
   */
  export type PatientEncounterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEncounter
     */
    select?: PatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEncounter
     */
    omit?: PatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEncounterInclude<ExtArgs> | null
  }


  /**
   * Model OutpatientEncounter
   */

  export type AggregateOutpatientEncounter = {
    _count: OutpatientEncounterCountAggregateOutputType | null
    _min: OutpatientEncounterMinAggregateOutputType | null
    _max: OutpatientEncounterMaxAggregateOutputType | null
  }

  export type OutpatientEncounterMinAggregateOutputType = {
    id: string | null
    patientProfileId: string | null
    date: string | null
    time: string | null
    chiefComplaint: string | null
    doctorDiagnosis: string | null
    type: $Enums.OutpatientEncounterType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OutpatientEncounterMaxAggregateOutputType = {
    id: string | null
    patientProfileId: string | null
    date: string | null
    time: string | null
    chiefComplaint: string | null
    doctorDiagnosis: string | null
    type: $Enums.OutpatientEncounterType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OutpatientEncounterCountAggregateOutputType = {
    id: number
    patientProfileId: number
    date: number
    time: number
    chiefComplaint: number
    doctorDiagnosis: number
    type: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OutpatientEncounterMinAggregateInputType = {
    id?: true
    patientProfileId?: true
    date?: true
    time?: true
    chiefComplaint?: true
    doctorDiagnosis?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OutpatientEncounterMaxAggregateInputType = {
    id?: true
    patientProfileId?: true
    date?: true
    time?: true
    chiefComplaint?: true
    doctorDiagnosis?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OutpatientEncounterCountAggregateInputType = {
    id?: true
    patientProfileId?: true
    date?: true
    time?: true
    chiefComplaint?: true
    doctorDiagnosis?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OutpatientEncounterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OutpatientEncounter to aggregate.
     */
    where?: OutpatientEncounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OutpatientEncounters to fetch.
     */
    orderBy?: OutpatientEncounterOrderByWithRelationInput | OutpatientEncounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OutpatientEncounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OutpatientEncounters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OutpatientEncounters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OutpatientEncounters
    **/
    _count?: true | OutpatientEncounterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OutpatientEncounterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OutpatientEncounterMaxAggregateInputType
  }

  export type GetOutpatientEncounterAggregateType<T extends OutpatientEncounterAggregateArgs> = {
        [P in keyof T & keyof AggregateOutpatientEncounter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOutpatientEncounter[P]>
      : GetScalarType<T[P], AggregateOutpatientEncounter[P]>
  }




  export type OutpatientEncounterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OutpatientEncounterWhereInput
    orderBy?: OutpatientEncounterOrderByWithAggregationInput | OutpatientEncounterOrderByWithAggregationInput[]
    by: OutpatientEncounterScalarFieldEnum[] | OutpatientEncounterScalarFieldEnum
    having?: OutpatientEncounterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OutpatientEncounterCountAggregateInputType | true
    _min?: OutpatientEncounterMinAggregateInputType
    _max?: OutpatientEncounterMaxAggregateInputType
  }

  export type OutpatientEncounterGroupByOutputType = {
    id: string
    patientProfileId: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    type: $Enums.OutpatientEncounterType
    createdAt: Date
    updatedAt: Date
    _count: OutpatientEncounterCountAggregateOutputType | null
    _min: OutpatientEncounterMinAggregateOutputType | null
    _max: OutpatientEncounterMaxAggregateOutputType | null
  }

  type GetOutpatientEncounterGroupByPayload<T extends OutpatientEncounterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OutpatientEncounterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OutpatientEncounterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OutpatientEncounterGroupByOutputType[P]>
            : GetScalarType<T[P], OutpatientEncounterGroupByOutputType[P]>
        }
      >
    >


  export type OutpatientEncounterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    date?: boolean
    time?: boolean
    chiefComplaint?: boolean
    doctorDiagnosis?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["outpatientEncounter"]>

  export type OutpatientEncounterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    date?: boolean
    time?: boolean
    chiefComplaint?: boolean
    doctorDiagnosis?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["outpatientEncounter"]>

  export type OutpatientEncounterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    date?: boolean
    time?: boolean
    chiefComplaint?: boolean
    doctorDiagnosis?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["outpatientEncounter"]>

  export type OutpatientEncounterSelectScalar = {
    id?: boolean
    patientProfileId?: boolean
    date?: boolean
    time?: boolean
    chiefComplaint?: boolean
    doctorDiagnosis?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OutpatientEncounterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientProfileId" | "date" | "time" | "chiefComplaint" | "doctorDiagnosis" | "type" | "createdAt" | "updatedAt", ExtArgs["result"]["outpatientEncounter"]>
  export type OutpatientEncounterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }
  export type OutpatientEncounterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }
  export type OutpatientEncounterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }

  export type $OutpatientEncounterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OutpatientEncounter"
    objects: {
      patientProfile: Prisma.$PatientProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientProfileId: string
      date: string
      time: string
      chiefComplaint: string
      doctorDiagnosis: string
      type: $Enums.OutpatientEncounterType
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["outpatientEncounter"]>
    composites: {}
  }

  type OutpatientEncounterGetPayload<S extends boolean | null | undefined | OutpatientEncounterDefaultArgs> = $Result.GetResult<Prisma.$OutpatientEncounterPayload, S>

  type OutpatientEncounterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OutpatientEncounterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OutpatientEncounterCountAggregateInputType | true
    }

  export interface OutpatientEncounterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OutpatientEncounter'], meta: { name: 'OutpatientEncounter' } }
    /**
     * Find zero or one OutpatientEncounter that matches the filter.
     * @param {OutpatientEncounterFindUniqueArgs} args - Arguments to find a OutpatientEncounter
     * @example
     * // Get one OutpatientEncounter
     * const outpatientEncounter = await prisma.outpatientEncounter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OutpatientEncounterFindUniqueArgs>(args: SelectSubset<T, OutpatientEncounterFindUniqueArgs<ExtArgs>>): Prisma__OutpatientEncounterClient<$Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OutpatientEncounter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OutpatientEncounterFindUniqueOrThrowArgs} args - Arguments to find a OutpatientEncounter
     * @example
     * // Get one OutpatientEncounter
     * const outpatientEncounter = await prisma.outpatientEncounter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OutpatientEncounterFindUniqueOrThrowArgs>(args: SelectSubset<T, OutpatientEncounterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OutpatientEncounterClient<$Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OutpatientEncounter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutpatientEncounterFindFirstArgs} args - Arguments to find a OutpatientEncounter
     * @example
     * // Get one OutpatientEncounter
     * const outpatientEncounter = await prisma.outpatientEncounter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OutpatientEncounterFindFirstArgs>(args?: SelectSubset<T, OutpatientEncounterFindFirstArgs<ExtArgs>>): Prisma__OutpatientEncounterClient<$Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OutpatientEncounter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutpatientEncounterFindFirstOrThrowArgs} args - Arguments to find a OutpatientEncounter
     * @example
     * // Get one OutpatientEncounter
     * const outpatientEncounter = await prisma.outpatientEncounter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OutpatientEncounterFindFirstOrThrowArgs>(args?: SelectSubset<T, OutpatientEncounterFindFirstOrThrowArgs<ExtArgs>>): Prisma__OutpatientEncounterClient<$Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OutpatientEncounters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutpatientEncounterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OutpatientEncounters
     * const outpatientEncounters = await prisma.outpatientEncounter.findMany()
     * 
     * // Get first 10 OutpatientEncounters
     * const outpatientEncounters = await prisma.outpatientEncounter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const outpatientEncounterWithIdOnly = await prisma.outpatientEncounter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OutpatientEncounterFindManyArgs>(args?: SelectSubset<T, OutpatientEncounterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OutpatientEncounter.
     * @param {OutpatientEncounterCreateArgs} args - Arguments to create a OutpatientEncounter.
     * @example
     * // Create one OutpatientEncounter
     * const OutpatientEncounter = await prisma.outpatientEncounter.create({
     *   data: {
     *     // ... data to create a OutpatientEncounter
     *   }
     * })
     * 
     */
    create<T extends OutpatientEncounterCreateArgs>(args: SelectSubset<T, OutpatientEncounterCreateArgs<ExtArgs>>): Prisma__OutpatientEncounterClient<$Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OutpatientEncounters.
     * @param {OutpatientEncounterCreateManyArgs} args - Arguments to create many OutpatientEncounters.
     * @example
     * // Create many OutpatientEncounters
     * const outpatientEncounter = await prisma.outpatientEncounter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OutpatientEncounterCreateManyArgs>(args?: SelectSubset<T, OutpatientEncounterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OutpatientEncounters and returns the data saved in the database.
     * @param {OutpatientEncounterCreateManyAndReturnArgs} args - Arguments to create many OutpatientEncounters.
     * @example
     * // Create many OutpatientEncounters
     * const outpatientEncounter = await prisma.outpatientEncounter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OutpatientEncounters and only return the `id`
     * const outpatientEncounterWithIdOnly = await prisma.outpatientEncounter.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OutpatientEncounterCreateManyAndReturnArgs>(args?: SelectSubset<T, OutpatientEncounterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OutpatientEncounter.
     * @param {OutpatientEncounterDeleteArgs} args - Arguments to delete one OutpatientEncounter.
     * @example
     * // Delete one OutpatientEncounter
     * const OutpatientEncounter = await prisma.outpatientEncounter.delete({
     *   where: {
     *     // ... filter to delete one OutpatientEncounter
     *   }
     * })
     * 
     */
    delete<T extends OutpatientEncounterDeleteArgs>(args: SelectSubset<T, OutpatientEncounterDeleteArgs<ExtArgs>>): Prisma__OutpatientEncounterClient<$Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OutpatientEncounter.
     * @param {OutpatientEncounterUpdateArgs} args - Arguments to update one OutpatientEncounter.
     * @example
     * // Update one OutpatientEncounter
     * const outpatientEncounter = await prisma.outpatientEncounter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OutpatientEncounterUpdateArgs>(args: SelectSubset<T, OutpatientEncounterUpdateArgs<ExtArgs>>): Prisma__OutpatientEncounterClient<$Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OutpatientEncounters.
     * @param {OutpatientEncounterDeleteManyArgs} args - Arguments to filter OutpatientEncounters to delete.
     * @example
     * // Delete a few OutpatientEncounters
     * const { count } = await prisma.outpatientEncounter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OutpatientEncounterDeleteManyArgs>(args?: SelectSubset<T, OutpatientEncounterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OutpatientEncounters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutpatientEncounterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OutpatientEncounters
     * const outpatientEncounter = await prisma.outpatientEncounter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OutpatientEncounterUpdateManyArgs>(args: SelectSubset<T, OutpatientEncounterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OutpatientEncounters and returns the data updated in the database.
     * @param {OutpatientEncounterUpdateManyAndReturnArgs} args - Arguments to update many OutpatientEncounters.
     * @example
     * // Update many OutpatientEncounters
     * const outpatientEncounter = await prisma.outpatientEncounter.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OutpatientEncounters and only return the `id`
     * const outpatientEncounterWithIdOnly = await prisma.outpatientEncounter.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OutpatientEncounterUpdateManyAndReturnArgs>(args: SelectSubset<T, OutpatientEncounterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OutpatientEncounter.
     * @param {OutpatientEncounterUpsertArgs} args - Arguments to update or create a OutpatientEncounter.
     * @example
     * // Update or create a OutpatientEncounter
     * const outpatientEncounter = await prisma.outpatientEncounter.upsert({
     *   create: {
     *     // ... data to create a OutpatientEncounter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OutpatientEncounter we want to update
     *   }
     * })
     */
    upsert<T extends OutpatientEncounterUpsertArgs>(args: SelectSubset<T, OutpatientEncounterUpsertArgs<ExtArgs>>): Prisma__OutpatientEncounterClient<$Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OutpatientEncounters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutpatientEncounterCountArgs} args - Arguments to filter OutpatientEncounters to count.
     * @example
     * // Count the number of OutpatientEncounters
     * const count = await prisma.outpatientEncounter.count({
     *   where: {
     *     // ... the filter for the OutpatientEncounters we want to count
     *   }
     * })
    **/
    count<T extends OutpatientEncounterCountArgs>(
      args?: Subset<T, OutpatientEncounterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OutpatientEncounterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OutpatientEncounter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutpatientEncounterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OutpatientEncounterAggregateArgs>(args: Subset<T, OutpatientEncounterAggregateArgs>): Prisma.PrismaPromise<GetOutpatientEncounterAggregateType<T>>

    /**
     * Group by OutpatientEncounter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutpatientEncounterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OutpatientEncounterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OutpatientEncounterGroupByArgs['orderBy'] }
        : { orderBy?: OutpatientEncounterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OutpatientEncounterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOutpatientEncounterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OutpatientEncounter model
   */
  readonly fields: OutpatientEncounterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OutpatientEncounter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OutpatientEncounterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patientProfile<T extends PatientProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfileDefaultArgs<ExtArgs>>): Prisma__PatientProfileClient<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OutpatientEncounter model
   */
  interface OutpatientEncounterFieldRefs {
    readonly id: FieldRef<"OutpatientEncounter", 'String'>
    readonly patientProfileId: FieldRef<"OutpatientEncounter", 'String'>
    readonly date: FieldRef<"OutpatientEncounter", 'String'>
    readonly time: FieldRef<"OutpatientEncounter", 'String'>
    readonly chiefComplaint: FieldRef<"OutpatientEncounter", 'String'>
    readonly doctorDiagnosis: FieldRef<"OutpatientEncounter", 'String'>
    readonly type: FieldRef<"OutpatientEncounter", 'OutpatientEncounterType'>
    readonly createdAt: FieldRef<"OutpatientEncounter", 'DateTime'>
    readonly updatedAt: FieldRef<"OutpatientEncounter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OutpatientEncounter findUnique
   */
  export type OutpatientEncounterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutpatientEncounter
     */
    select?: OutpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OutpatientEncounter
     */
    omit?: OutpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutpatientEncounterInclude<ExtArgs> | null
    /**
     * Filter, which OutpatientEncounter to fetch.
     */
    where: OutpatientEncounterWhereUniqueInput
  }

  /**
   * OutpatientEncounter findUniqueOrThrow
   */
  export type OutpatientEncounterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutpatientEncounter
     */
    select?: OutpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OutpatientEncounter
     */
    omit?: OutpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutpatientEncounterInclude<ExtArgs> | null
    /**
     * Filter, which OutpatientEncounter to fetch.
     */
    where: OutpatientEncounterWhereUniqueInput
  }

  /**
   * OutpatientEncounter findFirst
   */
  export type OutpatientEncounterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutpatientEncounter
     */
    select?: OutpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OutpatientEncounter
     */
    omit?: OutpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutpatientEncounterInclude<ExtArgs> | null
    /**
     * Filter, which OutpatientEncounter to fetch.
     */
    where?: OutpatientEncounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OutpatientEncounters to fetch.
     */
    orderBy?: OutpatientEncounterOrderByWithRelationInput | OutpatientEncounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OutpatientEncounters.
     */
    cursor?: OutpatientEncounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OutpatientEncounters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OutpatientEncounters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OutpatientEncounters.
     */
    distinct?: OutpatientEncounterScalarFieldEnum | OutpatientEncounterScalarFieldEnum[]
  }

  /**
   * OutpatientEncounter findFirstOrThrow
   */
  export type OutpatientEncounterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutpatientEncounter
     */
    select?: OutpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OutpatientEncounter
     */
    omit?: OutpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutpatientEncounterInclude<ExtArgs> | null
    /**
     * Filter, which OutpatientEncounter to fetch.
     */
    where?: OutpatientEncounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OutpatientEncounters to fetch.
     */
    orderBy?: OutpatientEncounterOrderByWithRelationInput | OutpatientEncounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OutpatientEncounters.
     */
    cursor?: OutpatientEncounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OutpatientEncounters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OutpatientEncounters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OutpatientEncounters.
     */
    distinct?: OutpatientEncounterScalarFieldEnum | OutpatientEncounterScalarFieldEnum[]
  }

  /**
   * OutpatientEncounter findMany
   */
  export type OutpatientEncounterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutpatientEncounter
     */
    select?: OutpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OutpatientEncounter
     */
    omit?: OutpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutpatientEncounterInclude<ExtArgs> | null
    /**
     * Filter, which OutpatientEncounters to fetch.
     */
    where?: OutpatientEncounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OutpatientEncounters to fetch.
     */
    orderBy?: OutpatientEncounterOrderByWithRelationInput | OutpatientEncounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OutpatientEncounters.
     */
    cursor?: OutpatientEncounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OutpatientEncounters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OutpatientEncounters.
     */
    skip?: number
    distinct?: OutpatientEncounterScalarFieldEnum | OutpatientEncounterScalarFieldEnum[]
  }

  /**
   * OutpatientEncounter create
   */
  export type OutpatientEncounterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutpatientEncounter
     */
    select?: OutpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OutpatientEncounter
     */
    omit?: OutpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutpatientEncounterInclude<ExtArgs> | null
    /**
     * The data needed to create a OutpatientEncounter.
     */
    data: XOR<OutpatientEncounterCreateInput, OutpatientEncounterUncheckedCreateInput>
  }

  /**
   * OutpatientEncounter createMany
   */
  export type OutpatientEncounterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OutpatientEncounters.
     */
    data: OutpatientEncounterCreateManyInput | OutpatientEncounterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OutpatientEncounter createManyAndReturn
   */
  export type OutpatientEncounterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutpatientEncounter
     */
    select?: OutpatientEncounterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OutpatientEncounter
     */
    omit?: OutpatientEncounterOmit<ExtArgs> | null
    /**
     * The data used to create many OutpatientEncounters.
     */
    data: OutpatientEncounterCreateManyInput | OutpatientEncounterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutpatientEncounterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OutpatientEncounter update
   */
  export type OutpatientEncounterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutpatientEncounter
     */
    select?: OutpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OutpatientEncounter
     */
    omit?: OutpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutpatientEncounterInclude<ExtArgs> | null
    /**
     * The data needed to update a OutpatientEncounter.
     */
    data: XOR<OutpatientEncounterUpdateInput, OutpatientEncounterUncheckedUpdateInput>
    /**
     * Choose, which OutpatientEncounter to update.
     */
    where: OutpatientEncounterWhereUniqueInput
  }

  /**
   * OutpatientEncounter updateMany
   */
  export type OutpatientEncounterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OutpatientEncounters.
     */
    data: XOR<OutpatientEncounterUpdateManyMutationInput, OutpatientEncounterUncheckedUpdateManyInput>
    /**
     * Filter which OutpatientEncounters to update
     */
    where?: OutpatientEncounterWhereInput
    /**
     * Limit how many OutpatientEncounters to update.
     */
    limit?: number
  }

  /**
   * OutpatientEncounter updateManyAndReturn
   */
  export type OutpatientEncounterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutpatientEncounter
     */
    select?: OutpatientEncounterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OutpatientEncounter
     */
    omit?: OutpatientEncounterOmit<ExtArgs> | null
    /**
     * The data used to update OutpatientEncounters.
     */
    data: XOR<OutpatientEncounterUpdateManyMutationInput, OutpatientEncounterUncheckedUpdateManyInput>
    /**
     * Filter which OutpatientEncounters to update
     */
    where?: OutpatientEncounterWhereInput
    /**
     * Limit how many OutpatientEncounters to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutpatientEncounterIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OutpatientEncounter upsert
   */
  export type OutpatientEncounterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutpatientEncounter
     */
    select?: OutpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OutpatientEncounter
     */
    omit?: OutpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutpatientEncounterInclude<ExtArgs> | null
    /**
     * The filter to search for the OutpatientEncounter to update in case it exists.
     */
    where: OutpatientEncounterWhereUniqueInput
    /**
     * In case the OutpatientEncounter found by the `where` argument doesn't exist, create a new OutpatientEncounter with this data.
     */
    create: XOR<OutpatientEncounterCreateInput, OutpatientEncounterUncheckedCreateInput>
    /**
     * In case the OutpatientEncounter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OutpatientEncounterUpdateInput, OutpatientEncounterUncheckedUpdateInput>
  }

  /**
   * OutpatientEncounter delete
   */
  export type OutpatientEncounterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutpatientEncounter
     */
    select?: OutpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OutpatientEncounter
     */
    omit?: OutpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutpatientEncounterInclude<ExtArgs> | null
    /**
     * Filter which OutpatientEncounter to delete.
     */
    where: OutpatientEncounterWhereUniqueInput
  }

  /**
   * OutpatientEncounter deleteMany
   */
  export type OutpatientEncounterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OutpatientEncounters to delete
     */
    where?: OutpatientEncounterWhereInput
    /**
     * Limit how many OutpatientEncounters to delete.
     */
    limit?: number
  }

  /**
   * OutpatientEncounter without action
   */
  export type OutpatientEncounterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutpatientEncounter
     */
    select?: OutpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OutpatientEncounter
     */
    omit?: OutpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutpatientEncounterInclude<ExtArgs> | null
  }


  /**
   * Model InpatientEncounter
   */

  export type AggregateInpatientEncounter = {
    _count: InpatientEncounterCountAggregateOutputType | null
    _min: InpatientEncounterMinAggregateOutputType | null
    _max: InpatientEncounterMaxAggregateOutputType | null
  }

  export type InpatientEncounterMinAggregateOutputType = {
    id: string | null
    patientProfileId: string | null
    date: string | null
    time: string | null
    chiefComplaint: string | null
    doctorDiagnosis: string | null
    triage: $Enums.InpatientTriage | null
    disposition: $Enums.InpatientDisposition | null
    dispositionDate: string | null
    dispositionTime: string | null
    dispositionNote: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InpatientEncounterMaxAggregateOutputType = {
    id: string | null
    patientProfileId: string | null
    date: string | null
    time: string | null
    chiefComplaint: string | null
    doctorDiagnosis: string | null
    triage: $Enums.InpatientTriage | null
    disposition: $Enums.InpatientDisposition | null
    dispositionDate: string | null
    dispositionTime: string | null
    dispositionNote: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InpatientEncounterCountAggregateOutputType = {
    id: number
    patientProfileId: number
    date: number
    time: number
    chiefComplaint: number
    doctorDiagnosis: number
    triage: number
    disposition: number
    dispositionDate: number
    dispositionTime: number
    dispositionNote: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InpatientEncounterMinAggregateInputType = {
    id?: true
    patientProfileId?: true
    date?: true
    time?: true
    chiefComplaint?: true
    doctorDiagnosis?: true
    triage?: true
    disposition?: true
    dispositionDate?: true
    dispositionTime?: true
    dispositionNote?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InpatientEncounterMaxAggregateInputType = {
    id?: true
    patientProfileId?: true
    date?: true
    time?: true
    chiefComplaint?: true
    doctorDiagnosis?: true
    triage?: true
    disposition?: true
    dispositionDate?: true
    dispositionTime?: true
    dispositionNote?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InpatientEncounterCountAggregateInputType = {
    id?: true
    patientProfileId?: true
    date?: true
    time?: true
    chiefComplaint?: true
    doctorDiagnosis?: true
    triage?: true
    disposition?: true
    dispositionDate?: true
    dispositionTime?: true
    dispositionNote?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InpatientEncounterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InpatientEncounter to aggregate.
     */
    where?: InpatientEncounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InpatientEncounters to fetch.
     */
    orderBy?: InpatientEncounterOrderByWithRelationInput | InpatientEncounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InpatientEncounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InpatientEncounters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InpatientEncounters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InpatientEncounters
    **/
    _count?: true | InpatientEncounterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InpatientEncounterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InpatientEncounterMaxAggregateInputType
  }

  export type GetInpatientEncounterAggregateType<T extends InpatientEncounterAggregateArgs> = {
        [P in keyof T & keyof AggregateInpatientEncounter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInpatientEncounter[P]>
      : GetScalarType<T[P], AggregateInpatientEncounter[P]>
  }




  export type InpatientEncounterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InpatientEncounterWhereInput
    orderBy?: InpatientEncounterOrderByWithAggregationInput | InpatientEncounterOrderByWithAggregationInput[]
    by: InpatientEncounterScalarFieldEnum[] | InpatientEncounterScalarFieldEnum
    having?: InpatientEncounterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InpatientEncounterCountAggregateInputType | true
    _min?: InpatientEncounterMinAggregateInputType
    _max?: InpatientEncounterMaxAggregateInputType
  }

  export type InpatientEncounterGroupByOutputType = {
    id: string
    patientProfileId: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    triage: $Enums.InpatientTriage
    disposition: $Enums.InpatientDisposition
    dispositionDate: string | null
    dispositionTime: string | null
    dispositionNote: string | null
    createdAt: Date
    updatedAt: Date
    _count: InpatientEncounterCountAggregateOutputType | null
    _min: InpatientEncounterMinAggregateOutputType | null
    _max: InpatientEncounterMaxAggregateOutputType | null
  }

  type GetInpatientEncounterGroupByPayload<T extends InpatientEncounterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InpatientEncounterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InpatientEncounterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InpatientEncounterGroupByOutputType[P]>
            : GetScalarType<T[P], InpatientEncounterGroupByOutputType[P]>
        }
      >
    >


  export type InpatientEncounterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    date?: boolean
    time?: boolean
    chiefComplaint?: boolean
    doctorDiagnosis?: boolean
    triage?: boolean
    disposition?: boolean
    dispositionDate?: boolean
    dispositionTime?: boolean
    dispositionNote?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
    charts?: boolean | InpatientEncounter$chartsArgs<ExtArgs>
    orders?: boolean | InpatientEncounter$ordersArgs<ExtArgs>
    medicalRecordRequest?: boolean | InpatientEncounter$medicalRecordRequestArgs<ExtArgs>
    _count?: boolean | InpatientEncounterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inpatientEncounter"]>

  export type InpatientEncounterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    date?: boolean
    time?: boolean
    chiefComplaint?: boolean
    doctorDiagnosis?: boolean
    triage?: boolean
    disposition?: boolean
    dispositionDate?: boolean
    dispositionTime?: boolean
    dispositionNote?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inpatientEncounter"]>

  export type InpatientEncounterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    date?: boolean
    time?: boolean
    chiefComplaint?: boolean
    doctorDiagnosis?: boolean
    triage?: boolean
    disposition?: boolean
    dispositionDate?: boolean
    dispositionTime?: boolean
    dispositionNote?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inpatientEncounter"]>

  export type InpatientEncounterSelectScalar = {
    id?: boolean
    patientProfileId?: boolean
    date?: boolean
    time?: boolean
    chiefComplaint?: boolean
    doctorDiagnosis?: boolean
    triage?: boolean
    disposition?: boolean
    dispositionDate?: boolean
    dispositionTime?: boolean
    dispositionNote?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InpatientEncounterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientProfileId" | "date" | "time" | "chiefComplaint" | "doctorDiagnosis" | "triage" | "disposition" | "dispositionDate" | "dispositionTime" | "dispositionNote" | "createdAt" | "updatedAt", ExtArgs["result"]["inpatientEncounter"]>
  export type InpatientEncounterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
    charts?: boolean | InpatientEncounter$chartsArgs<ExtArgs>
    orders?: boolean | InpatientEncounter$ordersArgs<ExtArgs>
    medicalRecordRequest?: boolean | InpatientEncounter$medicalRecordRequestArgs<ExtArgs>
    _count?: boolean | InpatientEncounterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InpatientEncounterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }
  export type InpatientEncounterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }

  export type $InpatientEncounterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InpatientEncounter"
    objects: {
      patientProfile: Prisma.$PatientProfilePayload<ExtArgs>
      charts: Prisma.$InpatientEncounterChartPayload<ExtArgs>[]
      orders: Prisma.$InpatientEncounterOrderPayload<ExtArgs>[]
      medicalRecordRequest: Prisma.$MedicalRecordRequestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientProfileId: string
      date: string
      time: string
      chiefComplaint: string
      doctorDiagnosis: string
      triage: $Enums.InpatientTriage
      disposition: $Enums.InpatientDisposition
      dispositionDate: string | null
      dispositionTime: string | null
      dispositionNote: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["inpatientEncounter"]>
    composites: {}
  }

  type InpatientEncounterGetPayload<S extends boolean | null | undefined | InpatientEncounterDefaultArgs> = $Result.GetResult<Prisma.$InpatientEncounterPayload, S>

  type InpatientEncounterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InpatientEncounterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InpatientEncounterCountAggregateInputType | true
    }

  export interface InpatientEncounterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InpatientEncounter'], meta: { name: 'InpatientEncounter' } }
    /**
     * Find zero or one InpatientEncounter that matches the filter.
     * @param {InpatientEncounterFindUniqueArgs} args - Arguments to find a InpatientEncounter
     * @example
     * // Get one InpatientEncounter
     * const inpatientEncounter = await prisma.inpatientEncounter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InpatientEncounterFindUniqueArgs>(args: SelectSubset<T, InpatientEncounterFindUniqueArgs<ExtArgs>>): Prisma__InpatientEncounterClient<$Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InpatientEncounter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InpatientEncounterFindUniqueOrThrowArgs} args - Arguments to find a InpatientEncounter
     * @example
     * // Get one InpatientEncounter
     * const inpatientEncounter = await prisma.inpatientEncounter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InpatientEncounterFindUniqueOrThrowArgs>(args: SelectSubset<T, InpatientEncounterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InpatientEncounterClient<$Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InpatientEncounter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InpatientEncounterFindFirstArgs} args - Arguments to find a InpatientEncounter
     * @example
     * // Get one InpatientEncounter
     * const inpatientEncounter = await prisma.inpatientEncounter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InpatientEncounterFindFirstArgs>(args?: SelectSubset<T, InpatientEncounterFindFirstArgs<ExtArgs>>): Prisma__InpatientEncounterClient<$Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InpatientEncounter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InpatientEncounterFindFirstOrThrowArgs} args - Arguments to find a InpatientEncounter
     * @example
     * // Get one InpatientEncounter
     * const inpatientEncounter = await prisma.inpatientEncounter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InpatientEncounterFindFirstOrThrowArgs>(args?: SelectSubset<T, InpatientEncounterFindFirstOrThrowArgs<ExtArgs>>): Prisma__InpatientEncounterClient<$Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InpatientEncounters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InpatientEncounterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InpatientEncounters
     * const inpatientEncounters = await prisma.inpatientEncounter.findMany()
     * 
     * // Get first 10 InpatientEncounters
     * const inpatientEncounters = await prisma.inpatientEncounter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inpatientEncounterWithIdOnly = await prisma.inpatientEncounter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InpatientEncounterFindManyArgs>(args?: SelectSubset<T, InpatientEncounterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InpatientEncounter.
     * @param {InpatientEncounterCreateArgs} args - Arguments to create a InpatientEncounter.
     * @example
     * // Create one InpatientEncounter
     * const InpatientEncounter = await prisma.inpatientEncounter.create({
     *   data: {
     *     // ... data to create a InpatientEncounter
     *   }
     * })
     * 
     */
    create<T extends InpatientEncounterCreateArgs>(args: SelectSubset<T, InpatientEncounterCreateArgs<ExtArgs>>): Prisma__InpatientEncounterClient<$Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InpatientEncounters.
     * @param {InpatientEncounterCreateManyArgs} args - Arguments to create many InpatientEncounters.
     * @example
     * // Create many InpatientEncounters
     * const inpatientEncounter = await prisma.inpatientEncounter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InpatientEncounterCreateManyArgs>(args?: SelectSubset<T, InpatientEncounterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InpatientEncounters and returns the data saved in the database.
     * @param {InpatientEncounterCreateManyAndReturnArgs} args - Arguments to create many InpatientEncounters.
     * @example
     * // Create many InpatientEncounters
     * const inpatientEncounter = await prisma.inpatientEncounter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InpatientEncounters and only return the `id`
     * const inpatientEncounterWithIdOnly = await prisma.inpatientEncounter.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InpatientEncounterCreateManyAndReturnArgs>(args?: SelectSubset<T, InpatientEncounterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InpatientEncounter.
     * @param {InpatientEncounterDeleteArgs} args - Arguments to delete one InpatientEncounter.
     * @example
     * // Delete one InpatientEncounter
     * const InpatientEncounter = await prisma.inpatientEncounter.delete({
     *   where: {
     *     // ... filter to delete one InpatientEncounter
     *   }
     * })
     * 
     */
    delete<T extends InpatientEncounterDeleteArgs>(args: SelectSubset<T, InpatientEncounterDeleteArgs<ExtArgs>>): Prisma__InpatientEncounterClient<$Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InpatientEncounter.
     * @param {InpatientEncounterUpdateArgs} args - Arguments to update one InpatientEncounter.
     * @example
     * // Update one InpatientEncounter
     * const inpatientEncounter = await prisma.inpatientEncounter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InpatientEncounterUpdateArgs>(args: SelectSubset<T, InpatientEncounterUpdateArgs<ExtArgs>>): Prisma__InpatientEncounterClient<$Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InpatientEncounters.
     * @param {InpatientEncounterDeleteManyArgs} args - Arguments to filter InpatientEncounters to delete.
     * @example
     * // Delete a few InpatientEncounters
     * const { count } = await prisma.inpatientEncounter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InpatientEncounterDeleteManyArgs>(args?: SelectSubset<T, InpatientEncounterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InpatientEncounters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InpatientEncounterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InpatientEncounters
     * const inpatientEncounter = await prisma.inpatientEncounter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InpatientEncounterUpdateManyArgs>(args: SelectSubset<T, InpatientEncounterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InpatientEncounters and returns the data updated in the database.
     * @param {InpatientEncounterUpdateManyAndReturnArgs} args - Arguments to update many InpatientEncounters.
     * @example
     * // Update many InpatientEncounters
     * const inpatientEncounter = await prisma.inpatientEncounter.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InpatientEncounters and only return the `id`
     * const inpatientEncounterWithIdOnly = await prisma.inpatientEncounter.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InpatientEncounterUpdateManyAndReturnArgs>(args: SelectSubset<T, InpatientEncounterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InpatientEncounter.
     * @param {InpatientEncounterUpsertArgs} args - Arguments to update or create a InpatientEncounter.
     * @example
     * // Update or create a InpatientEncounter
     * const inpatientEncounter = await prisma.inpatientEncounter.upsert({
     *   create: {
     *     // ... data to create a InpatientEncounter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InpatientEncounter we want to update
     *   }
     * })
     */
    upsert<T extends InpatientEncounterUpsertArgs>(args: SelectSubset<T, InpatientEncounterUpsertArgs<ExtArgs>>): Prisma__InpatientEncounterClient<$Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InpatientEncounters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InpatientEncounterCountArgs} args - Arguments to filter InpatientEncounters to count.
     * @example
     * // Count the number of InpatientEncounters
     * const count = await prisma.inpatientEncounter.count({
     *   where: {
     *     // ... the filter for the InpatientEncounters we want to count
     *   }
     * })
    **/
    count<T extends InpatientEncounterCountArgs>(
      args?: Subset<T, InpatientEncounterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InpatientEncounterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InpatientEncounter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InpatientEncounterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InpatientEncounterAggregateArgs>(args: Subset<T, InpatientEncounterAggregateArgs>): Prisma.PrismaPromise<GetInpatientEncounterAggregateType<T>>

    /**
     * Group by InpatientEncounter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InpatientEncounterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InpatientEncounterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InpatientEncounterGroupByArgs['orderBy'] }
        : { orderBy?: InpatientEncounterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InpatientEncounterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInpatientEncounterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InpatientEncounter model
   */
  readonly fields: InpatientEncounterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InpatientEncounter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InpatientEncounterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patientProfile<T extends PatientProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfileDefaultArgs<ExtArgs>>): Prisma__PatientProfileClient<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    charts<T extends InpatientEncounter$chartsArgs<ExtArgs> = {}>(args?: Subset<T, InpatientEncounter$chartsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orders<T extends InpatientEncounter$ordersArgs<ExtArgs> = {}>(args?: Subset<T, InpatientEncounter$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    medicalRecordRequest<T extends InpatientEncounter$medicalRecordRequestArgs<ExtArgs> = {}>(args?: Subset<T, InpatientEncounter$medicalRecordRequestArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InpatientEncounter model
   */
  interface InpatientEncounterFieldRefs {
    readonly id: FieldRef<"InpatientEncounter", 'String'>
    readonly patientProfileId: FieldRef<"InpatientEncounter", 'String'>
    readonly date: FieldRef<"InpatientEncounter", 'String'>
    readonly time: FieldRef<"InpatientEncounter", 'String'>
    readonly chiefComplaint: FieldRef<"InpatientEncounter", 'String'>
    readonly doctorDiagnosis: FieldRef<"InpatientEncounter", 'String'>
    readonly triage: FieldRef<"InpatientEncounter", 'InpatientTriage'>
    readonly disposition: FieldRef<"InpatientEncounter", 'InpatientDisposition'>
    readonly dispositionDate: FieldRef<"InpatientEncounter", 'String'>
    readonly dispositionTime: FieldRef<"InpatientEncounter", 'String'>
    readonly dispositionNote: FieldRef<"InpatientEncounter", 'String'>
    readonly createdAt: FieldRef<"InpatientEncounter", 'DateTime'>
    readonly updatedAt: FieldRef<"InpatientEncounter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InpatientEncounter findUnique
   */
  export type InpatientEncounterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounter
     */
    select?: InpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounter
     */
    omit?: InpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterInclude<ExtArgs> | null
    /**
     * Filter, which InpatientEncounter to fetch.
     */
    where: InpatientEncounterWhereUniqueInput
  }

  /**
   * InpatientEncounter findUniqueOrThrow
   */
  export type InpatientEncounterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounter
     */
    select?: InpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounter
     */
    omit?: InpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterInclude<ExtArgs> | null
    /**
     * Filter, which InpatientEncounter to fetch.
     */
    where: InpatientEncounterWhereUniqueInput
  }

  /**
   * InpatientEncounter findFirst
   */
  export type InpatientEncounterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounter
     */
    select?: InpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounter
     */
    omit?: InpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterInclude<ExtArgs> | null
    /**
     * Filter, which InpatientEncounter to fetch.
     */
    where?: InpatientEncounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InpatientEncounters to fetch.
     */
    orderBy?: InpatientEncounterOrderByWithRelationInput | InpatientEncounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InpatientEncounters.
     */
    cursor?: InpatientEncounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InpatientEncounters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InpatientEncounters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InpatientEncounters.
     */
    distinct?: InpatientEncounterScalarFieldEnum | InpatientEncounterScalarFieldEnum[]
  }

  /**
   * InpatientEncounter findFirstOrThrow
   */
  export type InpatientEncounterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounter
     */
    select?: InpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounter
     */
    omit?: InpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterInclude<ExtArgs> | null
    /**
     * Filter, which InpatientEncounter to fetch.
     */
    where?: InpatientEncounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InpatientEncounters to fetch.
     */
    orderBy?: InpatientEncounterOrderByWithRelationInput | InpatientEncounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InpatientEncounters.
     */
    cursor?: InpatientEncounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InpatientEncounters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InpatientEncounters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InpatientEncounters.
     */
    distinct?: InpatientEncounterScalarFieldEnum | InpatientEncounterScalarFieldEnum[]
  }

  /**
   * InpatientEncounter findMany
   */
  export type InpatientEncounterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounter
     */
    select?: InpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounter
     */
    omit?: InpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterInclude<ExtArgs> | null
    /**
     * Filter, which InpatientEncounters to fetch.
     */
    where?: InpatientEncounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InpatientEncounters to fetch.
     */
    orderBy?: InpatientEncounterOrderByWithRelationInput | InpatientEncounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InpatientEncounters.
     */
    cursor?: InpatientEncounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InpatientEncounters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InpatientEncounters.
     */
    skip?: number
    distinct?: InpatientEncounterScalarFieldEnum | InpatientEncounterScalarFieldEnum[]
  }

  /**
   * InpatientEncounter create
   */
  export type InpatientEncounterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounter
     */
    select?: InpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounter
     */
    omit?: InpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterInclude<ExtArgs> | null
    /**
     * The data needed to create a InpatientEncounter.
     */
    data: XOR<InpatientEncounterCreateInput, InpatientEncounterUncheckedCreateInput>
  }

  /**
   * InpatientEncounter createMany
   */
  export type InpatientEncounterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InpatientEncounters.
     */
    data: InpatientEncounterCreateManyInput | InpatientEncounterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InpatientEncounter createManyAndReturn
   */
  export type InpatientEncounterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounter
     */
    select?: InpatientEncounterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounter
     */
    omit?: InpatientEncounterOmit<ExtArgs> | null
    /**
     * The data used to create many InpatientEncounters.
     */
    data: InpatientEncounterCreateManyInput | InpatientEncounterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InpatientEncounter update
   */
  export type InpatientEncounterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounter
     */
    select?: InpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounter
     */
    omit?: InpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterInclude<ExtArgs> | null
    /**
     * The data needed to update a InpatientEncounter.
     */
    data: XOR<InpatientEncounterUpdateInput, InpatientEncounterUncheckedUpdateInput>
    /**
     * Choose, which InpatientEncounter to update.
     */
    where: InpatientEncounterWhereUniqueInput
  }

  /**
   * InpatientEncounter updateMany
   */
  export type InpatientEncounterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InpatientEncounters.
     */
    data: XOR<InpatientEncounterUpdateManyMutationInput, InpatientEncounterUncheckedUpdateManyInput>
    /**
     * Filter which InpatientEncounters to update
     */
    where?: InpatientEncounterWhereInput
    /**
     * Limit how many InpatientEncounters to update.
     */
    limit?: number
  }

  /**
   * InpatientEncounter updateManyAndReturn
   */
  export type InpatientEncounterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounter
     */
    select?: InpatientEncounterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounter
     */
    omit?: InpatientEncounterOmit<ExtArgs> | null
    /**
     * The data used to update InpatientEncounters.
     */
    data: XOR<InpatientEncounterUpdateManyMutationInput, InpatientEncounterUncheckedUpdateManyInput>
    /**
     * Filter which InpatientEncounters to update
     */
    where?: InpatientEncounterWhereInput
    /**
     * Limit how many InpatientEncounters to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InpatientEncounter upsert
   */
  export type InpatientEncounterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounter
     */
    select?: InpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounter
     */
    omit?: InpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterInclude<ExtArgs> | null
    /**
     * The filter to search for the InpatientEncounter to update in case it exists.
     */
    where: InpatientEncounterWhereUniqueInput
    /**
     * In case the InpatientEncounter found by the `where` argument doesn't exist, create a new InpatientEncounter with this data.
     */
    create: XOR<InpatientEncounterCreateInput, InpatientEncounterUncheckedCreateInput>
    /**
     * In case the InpatientEncounter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InpatientEncounterUpdateInput, InpatientEncounterUncheckedUpdateInput>
  }

  /**
   * InpatientEncounter delete
   */
  export type InpatientEncounterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounter
     */
    select?: InpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounter
     */
    omit?: InpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterInclude<ExtArgs> | null
    /**
     * Filter which InpatientEncounter to delete.
     */
    where: InpatientEncounterWhereUniqueInput
  }

  /**
   * InpatientEncounter deleteMany
   */
  export type InpatientEncounterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InpatientEncounters to delete
     */
    where?: InpatientEncounterWhereInput
    /**
     * Limit how many InpatientEncounters to delete.
     */
    limit?: number
  }

  /**
   * InpatientEncounter.charts
   */
  export type InpatientEncounter$chartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterChart
     */
    select?: InpatientEncounterChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterChart
     */
    omit?: InpatientEncounterChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterChartInclude<ExtArgs> | null
    where?: InpatientEncounterChartWhereInput
    orderBy?: InpatientEncounterChartOrderByWithRelationInput | InpatientEncounterChartOrderByWithRelationInput[]
    cursor?: InpatientEncounterChartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InpatientEncounterChartScalarFieldEnum | InpatientEncounterChartScalarFieldEnum[]
  }

  /**
   * InpatientEncounter.orders
   */
  export type InpatientEncounter$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterOrder
     */
    select?: InpatientEncounterOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterOrder
     */
    omit?: InpatientEncounterOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterOrderInclude<ExtArgs> | null
    where?: InpatientEncounterOrderWhereInput
    orderBy?: InpatientEncounterOrderOrderByWithRelationInput | InpatientEncounterOrderOrderByWithRelationInput[]
    cursor?: InpatientEncounterOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InpatientEncounterOrderScalarFieldEnum | InpatientEncounterOrderScalarFieldEnum[]
  }

  /**
   * InpatientEncounter.medicalRecordRequest
   */
  export type InpatientEncounter$medicalRecordRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecordRequest
     */
    select?: MedicalRecordRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecordRequest
     */
    omit?: MedicalRecordRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordRequestInclude<ExtArgs> | null
    where?: MedicalRecordRequestWhereInput
    orderBy?: MedicalRecordRequestOrderByWithRelationInput | MedicalRecordRequestOrderByWithRelationInput[]
    cursor?: MedicalRecordRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalRecordRequestScalarFieldEnum | MedicalRecordRequestScalarFieldEnum[]
  }

  /**
   * InpatientEncounter without action
   */
  export type InpatientEncounterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounter
     */
    select?: InpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounter
     */
    omit?: InpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterInclude<ExtArgs> | null
  }


  /**
   * Model InpatientEncounterChart
   */

  export type AggregateInpatientEncounterChart = {
    _count: InpatientEncounterChartCountAggregateOutputType | null
    _min: InpatientEncounterChartMinAggregateOutputType | null
    _max: InpatientEncounterChartMaxAggregateOutputType | null
  }

  export type InpatientEncounterChartMinAggregateOutputType = {
    id: string | null
    encounterId: string | null
    staffId: string | null
    chart: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InpatientEncounterChartMaxAggregateOutputType = {
    id: string | null
    encounterId: string | null
    staffId: string | null
    chart: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InpatientEncounterChartCountAggregateOutputType = {
    id: number
    encounterId: number
    staffId: number
    chart: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InpatientEncounterChartMinAggregateInputType = {
    id?: true
    encounterId?: true
    staffId?: true
    chart?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InpatientEncounterChartMaxAggregateInputType = {
    id?: true
    encounterId?: true
    staffId?: true
    chart?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InpatientEncounterChartCountAggregateInputType = {
    id?: true
    encounterId?: true
    staffId?: true
    chart?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InpatientEncounterChartAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InpatientEncounterChart to aggregate.
     */
    where?: InpatientEncounterChartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InpatientEncounterCharts to fetch.
     */
    orderBy?: InpatientEncounterChartOrderByWithRelationInput | InpatientEncounterChartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InpatientEncounterChartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InpatientEncounterCharts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InpatientEncounterCharts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InpatientEncounterCharts
    **/
    _count?: true | InpatientEncounterChartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InpatientEncounterChartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InpatientEncounterChartMaxAggregateInputType
  }

  export type GetInpatientEncounterChartAggregateType<T extends InpatientEncounterChartAggregateArgs> = {
        [P in keyof T & keyof AggregateInpatientEncounterChart]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInpatientEncounterChart[P]>
      : GetScalarType<T[P], AggregateInpatientEncounterChart[P]>
  }




  export type InpatientEncounterChartGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InpatientEncounterChartWhereInput
    orderBy?: InpatientEncounterChartOrderByWithAggregationInput | InpatientEncounterChartOrderByWithAggregationInput[]
    by: InpatientEncounterChartScalarFieldEnum[] | InpatientEncounterChartScalarFieldEnum
    having?: InpatientEncounterChartScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InpatientEncounterChartCountAggregateInputType | true
    _min?: InpatientEncounterChartMinAggregateInputType
    _max?: InpatientEncounterChartMaxAggregateInputType
  }

  export type InpatientEncounterChartGroupByOutputType = {
    id: string
    encounterId: string
    staffId: string
    chart: string
    createdAt: Date
    updatedAt: Date
    _count: InpatientEncounterChartCountAggregateOutputType | null
    _min: InpatientEncounterChartMinAggregateOutputType | null
    _max: InpatientEncounterChartMaxAggregateOutputType | null
  }

  type GetInpatientEncounterChartGroupByPayload<T extends InpatientEncounterChartGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InpatientEncounterChartGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InpatientEncounterChartGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InpatientEncounterChartGroupByOutputType[P]>
            : GetScalarType<T[P], InpatientEncounterChartGroupByOutputType[P]>
        }
      >
    >


  export type InpatientEncounterChartSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    encounterId?: boolean
    staffId?: boolean
    chart?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    encounter?: boolean | InpatientEncounterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inpatientEncounterChart"]>

  export type InpatientEncounterChartSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    encounterId?: boolean
    staffId?: boolean
    chart?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    encounter?: boolean | InpatientEncounterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inpatientEncounterChart"]>

  export type InpatientEncounterChartSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    encounterId?: boolean
    staffId?: boolean
    chart?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    encounter?: boolean | InpatientEncounterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inpatientEncounterChart"]>

  export type InpatientEncounterChartSelectScalar = {
    id?: boolean
    encounterId?: boolean
    staffId?: boolean
    chart?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InpatientEncounterChartOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "encounterId" | "staffId" | "chart" | "createdAt" | "updatedAt", ExtArgs["result"]["inpatientEncounterChart"]>
  export type InpatientEncounterChartInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    encounter?: boolean | InpatientEncounterDefaultArgs<ExtArgs>
  }
  export type InpatientEncounterChartIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    encounter?: boolean | InpatientEncounterDefaultArgs<ExtArgs>
  }
  export type InpatientEncounterChartIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    encounter?: boolean | InpatientEncounterDefaultArgs<ExtArgs>
  }

  export type $InpatientEncounterChartPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InpatientEncounterChart"
    objects: {
      encounter: Prisma.$InpatientEncounterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      encounterId: string
      staffId: string
      chart: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["inpatientEncounterChart"]>
    composites: {}
  }

  type InpatientEncounterChartGetPayload<S extends boolean | null | undefined | InpatientEncounterChartDefaultArgs> = $Result.GetResult<Prisma.$InpatientEncounterChartPayload, S>

  type InpatientEncounterChartCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InpatientEncounterChartFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InpatientEncounterChartCountAggregateInputType | true
    }

  export interface InpatientEncounterChartDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InpatientEncounterChart'], meta: { name: 'InpatientEncounterChart' } }
    /**
     * Find zero or one InpatientEncounterChart that matches the filter.
     * @param {InpatientEncounterChartFindUniqueArgs} args - Arguments to find a InpatientEncounterChart
     * @example
     * // Get one InpatientEncounterChart
     * const inpatientEncounterChart = await prisma.inpatientEncounterChart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InpatientEncounterChartFindUniqueArgs>(args: SelectSubset<T, InpatientEncounterChartFindUniqueArgs<ExtArgs>>): Prisma__InpatientEncounterChartClient<$Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InpatientEncounterChart that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InpatientEncounterChartFindUniqueOrThrowArgs} args - Arguments to find a InpatientEncounterChart
     * @example
     * // Get one InpatientEncounterChart
     * const inpatientEncounterChart = await prisma.inpatientEncounterChart.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InpatientEncounterChartFindUniqueOrThrowArgs>(args: SelectSubset<T, InpatientEncounterChartFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InpatientEncounterChartClient<$Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InpatientEncounterChart that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InpatientEncounterChartFindFirstArgs} args - Arguments to find a InpatientEncounterChart
     * @example
     * // Get one InpatientEncounterChart
     * const inpatientEncounterChart = await prisma.inpatientEncounterChart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InpatientEncounterChartFindFirstArgs>(args?: SelectSubset<T, InpatientEncounterChartFindFirstArgs<ExtArgs>>): Prisma__InpatientEncounterChartClient<$Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InpatientEncounterChart that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InpatientEncounterChartFindFirstOrThrowArgs} args - Arguments to find a InpatientEncounterChart
     * @example
     * // Get one InpatientEncounterChart
     * const inpatientEncounterChart = await prisma.inpatientEncounterChart.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InpatientEncounterChartFindFirstOrThrowArgs>(args?: SelectSubset<T, InpatientEncounterChartFindFirstOrThrowArgs<ExtArgs>>): Prisma__InpatientEncounterChartClient<$Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InpatientEncounterCharts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InpatientEncounterChartFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InpatientEncounterCharts
     * const inpatientEncounterCharts = await prisma.inpatientEncounterChart.findMany()
     * 
     * // Get first 10 InpatientEncounterCharts
     * const inpatientEncounterCharts = await prisma.inpatientEncounterChart.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inpatientEncounterChartWithIdOnly = await prisma.inpatientEncounterChart.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InpatientEncounterChartFindManyArgs>(args?: SelectSubset<T, InpatientEncounterChartFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InpatientEncounterChart.
     * @param {InpatientEncounterChartCreateArgs} args - Arguments to create a InpatientEncounterChart.
     * @example
     * // Create one InpatientEncounterChart
     * const InpatientEncounterChart = await prisma.inpatientEncounterChart.create({
     *   data: {
     *     // ... data to create a InpatientEncounterChart
     *   }
     * })
     * 
     */
    create<T extends InpatientEncounterChartCreateArgs>(args: SelectSubset<T, InpatientEncounterChartCreateArgs<ExtArgs>>): Prisma__InpatientEncounterChartClient<$Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InpatientEncounterCharts.
     * @param {InpatientEncounterChartCreateManyArgs} args - Arguments to create many InpatientEncounterCharts.
     * @example
     * // Create many InpatientEncounterCharts
     * const inpatientEncounterChart = await prisma.inpatientEncounterChart.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InpatientEncounterChartCreateManyArgs>(args?: SelectSubset<T, InpatientEncounterChartCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InpatientEncounterCharts and returns the data saved in the database.
     * @param {InpatientEncounterChartCreateManyAndReturnArgs} args - Arguments to create many InpatientEncounterCharts.
     * @example
     * // Create many InpatientEncounterCharts
     * const inpatientEncounterChart = await prisma.inpatientEncounterChart.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InpatientEncounterCharts and only return the `id`
     * const inpatientEncounterChartWithIdOnly = await prisma.inpatientEncounterChart.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InpatientEncounterChartCreateManyAndReturnArgs>(args?: SelectSubset<T, InpatientEncounterChartCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InpatientEncounterChart.
     * @param {InpatientEncounterChartDeleteArgs} args - Arguments to delete one InpatientEncounterChart.
     * @example
     * // Delete one InpatientEncounterChart
     * const InpatientEncounterChart = await prisma.inpatientEncounterChart.delete({
     *   where: {
     *     // ... filter to delete one InpatientEncounterChart
     *   }
     * })
     * 
     */
    delete<T extends InpatientEncounterChartDeleteArgs>(args: SelectSubset<T, InpatientEncounterChartDeleteArgs<ExtArgs>>): Prisma__InpatientEncounterChartClient<$Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InpatientEncounterChart.
     * @param {InpatientEncounterChartUpdateArgs} args - Arguments to update one InpatientEncounterChart.
     * @example
     * // Update one InpatientEncounterChart
     * const inpatientEncounterChart = await prisma.inpatientEncounterChart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InpatientEncounterChartUpdateArgs>(args: SelectSubset<T, InpatientEncounterChartUpdateArgs<ExtArgs>>): Prisma__InpatientEncounterChartClient<$Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InpatientEncounterCharts.
     * @param {InpatientEncounterChartDeleteManyArgs} args - Arguments to filter InpatientEncounterCharts to delete.
     * @example
     * // Delete a few InpatientEncounterCharts
     * const { count } = await prisma.inpatientEncounterChart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InpatientEncounterChartDeleteManyArgs>(args?: SelectSubset<T, InpatientEncounterChartDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InpatientEncounterCharts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InpatientEncounterChartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InpatientEncounterCharts
     * const inpatientEncounterChart = await prisma.inpatientEncounterChart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InpatientEncounterChartUpdateManyArgs>(args: SelectSubset<T, InpatientEncounterChartUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InpatientEncounterCharts and returns the data updated in the database.
     * @param {InpatientEncounterChartUpdateManyAndReturnArgs} args - Arguments to update many InpatientEncounterCharts.
     * @example
     * // Update many InpatientEncounterCharts
     * const inpatientEncounterChart = await prisma.inpatientEncounterChart.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InpatientEncounterCharts and only return the `id`
     * const inpatientEncounterChartWithIdOnly = await prisma.inpatientEncounterChart.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InpatientEncounterChartUpdateManyAndReturnArgs>(args: SelectSubset<T, InpatientEncounterChartUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InpatientEncounterChart.
     * @param {InpatientEncounterChartUpsertArgs} args - Arguments to update or create a InpatientEncounterChart.
     * @example
     * // Update or create a InpatientEncounterChart
     * const inpatientEncounterChart = await prisma.inpatientEncounterChart.upsert({
     *   create: {
     *     // ... data to create a InpatientEncounterChart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InpatientEncounterChart we want to update
     *   }
     * })
     */
    upsert<T extends InpatientEncounterChartUpsertArgs>(args: SelectSubset<T, InpatientEncounterChartUpsertArgs<ExtArgs>>): Prisma__InpatientEncounterChartClient<$Result.GetResult<Prisma.$InpatientEncounterChartPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InpatientEncounterCharts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InpatientEncounterChartCountArgs} args - Arguments to filter InpatientEncounterCharts to count.
     * @example
     * // Count the number of InpatientEncounterCharts
     * const count = await prisma.inpatientEncounterChart.count({
     *   where: {
     *     // ... the filter for the InpatientEncounterCharts we want to count
     *   }
     * })
    **/
    count<T extends InpatientEncounterChartCountArgs>(
      args?: Subset<T, InpatientEncounterChartCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InpatientEncounterChartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InpatientEncounterChart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InpatientEncounterChartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InpatientEncounterChartAggregateArgs>(args: Subset<T, InpatientEncounterChartAggregateArgs>): Prisma.PrismaPromise<GetInpatientEncounterChartAggregateType<T>>

    /**
     * Group by InpatientEncounterChart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InpatientEncounterChartGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InpatientEncounterChartGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InpatientEncounterChartGroupByArgs['orderBy'] }
        : { orderBy?: InpatientEncounterChartGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InpatientEncounterChartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInpatientEncounterChartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InpatientEncounterChart model
   */
  readonly fields: InpatientEncounterChartFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InpatientEncounterChart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InpatientEncounterChartClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    encounter<T extends InpatientEncounterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InpatientEncounterDefaultArgs<ExtArgs>>): Prisma__InpatientEncounterClient<$Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InpatientEncounterChart model
   */
  interface InpatientEncounterChartFieldRefs {
    readonly id: FieldRef<"InpatientEncounterChart", 'String'>
    readonly encounterId: FieldRef<"InpatientEncounterChart", 'String'>
    readonly staffId: FieldRef<"InpatientEncounterChart", 'String'>
    readonly chart: FieldRef<"InpatientEncounterChart", 'String'>
    readonly createdAt: FieldRef<"InpatientEncounterChart", 'DateTime'>
    readonly updatedAt: FieldRef<"InpatientEncounterChart", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InpatientEncounterChart findUnique
   */
  export type InpatientEncounterChartFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterChart
     */
    select?: InpatientEncounterChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterChart
     */
    omit?: InpatientEncounterChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterChartInclude<ExtArgs> | null
    /**
     * Filter, which InpatientEncounterChart to fetch.
     */
    where: InpatientEncounterChartWhereUniqueInput
  }

  /**
   * InpatientEncounterChart findUniqueOrThrow
   */
  export type InpatientEncounterChartFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterChart
     */
    select?: InpatientEncounterChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterChart
     */
    omit?: InpatientEncounterChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterChartInclude<ExtArgs> | null
    /**
     * Filter, which InpatientEncounterChart to fetch.
     */
    where: InpatientEncounterChartWhereUniqueInput
  }

  /**
   * InpatientEncounterChart findFirst
   */
  export type InpatientEncounterChartFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterChart
     */
    select?: InpatientEncounterChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterChart
     */
    omit?: InpatientEncounterChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterChartInclude<ExtArgs> | null
    /**
     * Filter, which InpatientEncounterChart to fetch.
     */
    where?: InpatientEncounterChartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InpatientEncounterCharts to fetch.
     */
    orderBy?: InpatientEncounterChartOrderByWithRelationInput | InpatientEncounterChartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InpatientEncounterCharts.
     */
    cursor?: InpatientEncounterChartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InpatientEncounterCharts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InpatientEncounterCharts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InpatientEncounterCharts.
     */
    distinct?: InpatientEncounterChartScalarFieldEnum | InpatientEncounterChartScalarFieldEnum[]
  }

  /**
   * InpatientEncounterChart findFirstOrThrow
   */
  export type InpatientEncounterChartFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterChart
     */
    select?: InpatientEncounterChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterChart
     */
    omit?: InpatientEncounterChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterChartInclude<ExtArgs> | null
    /**
     * Filter, which InpatientEncounterChart to fetch.
     */
    where?: InpatientEncounterChartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InpatientEncounterCharts to fetch.
     */
    orderBy?: InpatientEncounterChartOrderByWithRelationInput | InpatientEncounterChartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InpatientEncounterCharts.
     */
    cursor?: InpatientEncounterChartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InpatientEncounterCharts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InpatientEncounterCharts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InpatientEncounterCharts.
     */
    distinct?: InpatientEncounterChartScalarFieldEnum | InpatientEncounterChartScalarFieldEnum[]
  }

  /**
   * InpatientEncounterChart findMany
   */
  export type InpatientEncounterChartFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterChart
     */
    select?: InpatientEncounterChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterChart
     */
    omit?: InpatientEncounterChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterChartInclude<ExtArgs> | null
    /**
     * Filter, which InpatientEncounterCharts to fetch.
     */
    where?: InpatientEncounterChartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InpatientEncounterCharts to fetch.
     */
    orderBy?: InpatientEncounterChartOrderByWithRelationInput | InpatientEncounterChartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InpatientEncounterCharts.
     */
    cursor?: InpatientEncounterChartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InpatientEncounterCharts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InpatientEncounterCharts.
     */
    skip?: number
    distinct?: InpatientEncounterChartScalarFieldEnum | InpatientEncounterChartScalarFieldEnum[]
  }

  /**
   * InpatientEncounterChart create
   */
  export type InpatientEncounterChartCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterChart
     */
    select?: InpatientEncounterChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterChart
     */
    omit?: InpatientEncounterChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterChartInclude<ExtArgs> | null
    /**
     * The data needed to create a InpatientEncounterChart.
     */
    data: XOR<InpatientEncounterChartCreateInput, InpatientEncounterChartUncheckedCreateInput>
  }

  /**
   * InpatientEncounterChart createMany
   */
  export type InpatientEncounterChartCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InpatientEncounterCharts.
     */
    data: InpatientEncounterChartCreateManyInput | InpatientEncounterChartCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InpatientEncounterChart createManyAndReturn
   */
  export type InpatientEncounterChartCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterChart
     */
    select?: InpatientEncounterChartSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterChart
     */
    omit?: InpatientEncounterChartOmit<ExtArgs> | null
    /**
     * The data used to create many InpatientEncounterCharts.
     */
    data: InpatientEncounterChartCreateManyInput | InpatientEncounterChartCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterChartIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InpatientEncounterChart update
   */
  export type InpatientEncounterChartUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterChart
     */
    select?: InpatientEncounterChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterChart
     */
    omit?: InpatientEncounterChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterChartInclude<ExtArgs> | null
    /**
     * The data needed to update a InpatientEncounterChart.
     */
    data: XOR<InpatientEncounterChartUpdateInput, InpatientEncounterChartUncheckedUpdateInput>
    /**
     * Choose, which InpatientEncounterChart to update.
     */
    where: InpatientEncounterChartWhereUniqueInput
  }

  /**
   * InpatientEncounterChart updateMany
   */
  export type InpatientEncounterChartUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InpatientEncounterCharts.
     */
    data: XOR<InpatientEncounterChartUpdateManyMutationInput, InpatientEncounterChartUncheckedUpdateManyInput>
    /**
     * Filter which InpatientEncounterCharts to update
     */
    where?: InpatientEncounterChartWhereInput
    /**
     * Limit how many InpatientEncounterCharts to update.
     */
    limit?: number
  }

  /**
   * InpatientEncounterChart updateManyAndReturn
   */
  export type InpatientEncounterChartUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterChart
     */
    select?: InpatientEncounterChartSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterChart
     */
    omit?: InpatientEncounterChartOmit<ExtArgs> | null
    /**
     * The data used to update InpatientEncounterCharts.
     */
    data: XOR<InpatientEncounterChartUpdateManyMutationInput, InpatientEncounterChartUncheckedUpdateManyInput>
    /**
     * Filter which InpatientEncounterCharts to update
     */
    where?: InpatientEncounterChartWhereInput
    /**
     * Limit how many InpatientEncounterCharts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterChartIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InpatientEncounterChart upsert
   */
  export type InpatientEncounterChartUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterChart
     */
    select?: InpatientEncounterChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterChart
     */
    omit?: InpatientEncounterChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterChartInclude<ExtArgs> | null
    /**
     * The filter to search for the InpatientEncounterChart to update in case it exists.
     */
    where: InpatientEncounterChartWhereUniqueInput
    /**
     * In case the InpatientEncounterChart found by the `where` argument doesn't exist, create a new InpatientEncounterChart with this data.
     */
    create: XOR<InpatientEncounterChartCreateInput, InpatientEncounterChartUncheckedCreateInput>
    /**
     * In case the InpatientEncounterChart was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InpatientEncounterChartUpdateInput, InpatientEncounterChartUncheckedUpdateInput>
  }

  /**
   * InpatientEncounterChart delete
   */
  export type InpatientEncounterChartDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterChart
     */
    select?: InpatientEncounterChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterChart
     */
    omit?: InpatientEncounterChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterChartInclude<ExtArgs> | null
    /**
     * Filter which InpatientEncounterChart to delete.
     */
    where: InpatientEncounterChartWhereUniqueInput
  }

  /**
   * InpatientEncounterChart deleteMany
   */
  export type InpatientEncounterChartDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InpatientEncounterCharts to delete
     */
    where?: InpatientEncounterChartWhereInput
    /**
     * Limit how many InpatientEncounterCharts to delete.
     */
    limit?: number
  }

  /**
   * InpatientEncounterChart without action
   */
  export type InpatientEncounterChartDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterChart
     */
    select?: InpatientEncounterChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterChart
     */
    omit?: InpatientEncounterChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterChartInclude<ExtArgs> | null
  }


  /**
   * Model InpatientEncounterOrder
   */

  export type AggregateInpatientEncounterOrder = {
    _count: InpatientEncounterOrderCountAggregateOutputType | null
    _min: InpatientEncounterOrderMinAggregateOutputType | null
    _max: InpatientEncounterOrderMaxAggregateOutputType | null
  }

  export type InpatientEncounterOrderMinAggregateOutputType = {
    id: string | null
    encounterId: string | null
    type: $Enums.InpatientEncounterOrderType | null
    order: string | null
    status: $Enums.InpatientEncounterOrderStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InpatientEncounterOrderMaxAggregateOutputType = {
    id: string | null
    encounterId: string | null
    type: $Enums.InpatientEncounterOrderType | null
    order: string | null
    status: $Enums.InpatientEncounterOrderStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InpatientEncounterOrderCountAggregateOutputType = {
    id: number
    encounterId: number
    type: number
    order: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InpatientEncounterOrderMinAggregateInputType = {
    id?: true
    encounterId?: true
    type?: true
    order?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InpatientEncounterOrderMaxAggregateInputType = {
    id?: true
    encounterId?: true
    type?: true
    order?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InpatientEncounterOrderCountAggregateInputType = {
    id?: true
    encounterId?: true
    type?: true
    order?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InpatientEncounterOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InpatientEncounterOrder to aggregate.
     */
    where?: InpatientEncounterOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InpatientEncounterOrders to fetch.
     */
    orderBy?: InpatientEncounterOrderOrderByWithRelationInput | InpatientEncounterOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InpatientEncounterOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InpatientEncounterOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InpatientEncounterOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InpatientEncounterOrders
    **/
    _count?: true | InpatientEncounterOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InpatientEncounterOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InpatientEncounterOrderMaxAggregateInputType
  }

  export type GetInpatientEncounterOrderAggregateType<T extends InpatientEncounterOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateInpatientEncounterOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInpatientEncounterOrder[P]>
      : GetScalarType<T[P], AggregateInpatientEncounterOrder[P]>
  }




  export type InpatientEncounterOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InpatientEncounterOrderWhereInput
    orderBy?: InpatientEncounterOrderOrderByWithAggregationInput | InpatientEncounterOrderOrderByWithAggregationInput[]
    by: InpatientEncounterOrderScalarFieldEnum[] | InpatientEncounterOrderScalarFieldEnum
    having?: InpatientEncounterOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InpatientEncounterOrderCountAggregateInputType | true
    _min?: InpatientEncounterOrderMinAggregateInputType
    _max?: InpatientEncounterOrderMaxAggregateInputType
  }

  export type InpatientEncounterOrderGroupByOutputType = {
    id: string
    encounterId: string
    type: $Enums.InpatientEncounterOrderType
    order: string
    status: $Enums.InpatientEncounterOrderStatus
    createdAt: Date
    updatedAt: Date
    _count: InpatientEncounterOrderCountAggregateOutputType | null
    _min: InpatientEncounterOrderMinAggregateOutputType | null
    _max: InpatientEncounterOrderMaxAggregateOutputType | null
  }

  type GetInpatientEncounterOrderGroupByPayload<T extends InpatientEncounterOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InpatientEncounterOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InpatientEncounterOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InpatientEncounterOrderGroupByOutputType[P]>
            : GetScalarType<T[P], InpatientEncounterOrderGroupByOutputType[P]>
        }
      >
    >


  export type InpatientEncounterOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    encounterId?: boolean
    type?: boolean
    order?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    encounter?: boolean | InpatientEncounterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inpatientEncounterOrder"]>

  export type InpatientEncounterOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    encounterId?: boolean
    type?: boolean
    order?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    encounter?: boolean | InpatientEncounterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inpatientEncounterOrder"]>

  export type InpatientEncounterOrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    encounterId?: boolean
    type?: boolean
    order?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    encounter?: boolean | InpatientEncounterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inpatientEncounterOrder"]>

  export type InpatientEncounterOrderSelectScalar = {
    id?: boolean
    encounterId?: boolean
    type?: boolean
    order?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InpatientEncounterOrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "encounterId" | "type" | "order" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["inpatientEncounterOrder"]>
  export type InpatientEncounterOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    encounter?: boolean | InpatientEncounterDefaultArgs<ExtArgs>
  }
  export type InpatientEncounterOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    encounter?: boolean | InpatientEncounterDefaultArgs<ExtArgs>
  }
  export type InpatientEncounterOrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    encounter?: boolean | InpatientEncounterDefaultArgs<ExtArgs>
  }

  export type $InpatientEncounterOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InpatientEncounterOrder"
    objects: {
      encounter: Prisma.$InpatientEncounterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      encounterId: string
      type: $Enums.InpatientEncounterOrderType
      order: string
      status: $Enums.InpatientEncounterOrderStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["inpatientEncounterOrder"]>
    composites: {}
  }

  type InpatientEncounterOrderGetPayload<S extends boolean | null | undefined | InpatientEncounterOrderDefaultArgs> = $Result.GetResult<Prisma.$InpatientEncounterOrderPayload, S>

  type InpatientEncounterOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InpatientEncounterOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InpatientEncounterOrderCountAggregateInputType | true
    }

  export interface InpatientEncounterOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InpatientEncounterOrder'], meta: { name: 'InpatientEncounterOrder' } }
    /**
     * Find zero or one InpatientEncounterOrder that matches the filter.
     * @param {InpatientEncounterOrderFindUniqueArgs} args - Arguments to find a InpatientEncounterOrder
     * @example
     * // Get one InpatientEncounterOrder
     * const inpatientEncounterOrder = await prisma.inpatientEncounterOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InpatientEncounterOrderFindUniqueArgs>(args: SelectSubset<T, InpatientEncounterOrderFindUniqueArgs<ExtArgs>>): Prisma__InpatientEncounterOrderClient<$Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InpatientEncounterOrder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InpatientEncounterOrderFindUniqueOrThrowArgs} args - Arguments to find a InpatientEncounterOrder
     * @example
     * // Get one InpatientEncounterOrder
     * const inpatientEncounterOrder = await prisma.inpatientEncounterOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InpatientEncounterOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, InpatientEncounterOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InpatientEncounterOrderClient<$Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InpatientEncounterOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InpatientEncounterOrderFindFirstArgs} args - Arguments to find a InpatientEncounterOrder
     * @example
     * // Get one InpatientEncounterOrder
     * const inpatientEncounterOrder = await prisma.inpatientEncounterOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InpatientEncounterOrderFindFirstArgs>(args?: SelectSubset<T, InpatientEncounterOrderFindFirstArgs<ExtArgs>>): Prisma__InpatientEncounterOrderClient<$Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InpatientEncounterOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InpatientEncounterOrderFindFirstOrThrowArgs} args - Arguments to find a InpatientEncounterOrder
     * @example
     * // Get one InpatientEncounterOrder
     * const inpatientEncounterOrder = await prisma.inpatientEncounterOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InpatientEncounterOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, InpatientEncounterOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__InpatientEncounterOrderClient<$Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InpatientEncounterOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InpatientEncounterOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InpatientEncounterOrders
     * const inpatientEncounterOrders = await prisma.inpatientEncounterOrder.findMany()
     * 
     * // Get first 10 InpatientEncounterOrders
     * const inpatientEncounterOrders = await prisma.inpatientEncounterOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inpatientEncounterOrderWithIdOnly = await prisma.inpatientEncounterOrder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InpatientEncounterOrderFindManyArgs>(args?: SelectSubset<T, InpatientEncounterOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InpatientEncounterOrder.
     * @param {InpatientEncounterOrderCreateArgs} args - Arguments to create a InpatientEncounterOrder.
     * @example
     * // Create one InpatientEncounterOrder
     * const InpatientEncounterOrder = await prisma.inpatientEncounterOrder.create({
     *   data: {
     *     // ... data to create a InpatientEncounterOrder
     *   }
     * })
     * 
     */
    create<T extends InpatientEncounterOrderCreateArgs>(args: SelectSubset<T, InpatientEncounterOrderCreateArgs<ExtArgs>>): Prisma__InpatientEncounterOrderClient<$Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InpatientEncounterOrders.
     * @param {InpatientEncounterOrderCreateManyArgs} args - Arguments to create many InpatientEncounterOrders.
     * @example
     * // Create many InpatientEncounterOrders
     * const inpatientEncounterOrder = await prisma.inpatientEncounterOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InpatientEncounterOrderCreateManyArgs>(args?: SelectSubset<T, InpatientEncounterOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InpatientEncounterOrders and returns the data saved in the database.
     * @param {InpatientEncounterOrderCreateManyAndReturnArgs} args - Arguments to create many InpatientEncounterOrders.
     * @example
     * // Create many InpatientEncounterOrders
     * const inpatientEncounterOrder = await prisma.inpatientEncounterOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InpatientEncounterOrders and only return the `id`
     * const inpatientEncounterOrderWithIdOnly = await prisma.inpatientEncounterOrder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InpatientEncounterOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, InpatientEncounterOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InpatientEncounterOrder.
     * @param {InpatientEncounterOrderDeleteArgs} args - Arguments to delete one InpatientEncounterOrder.
     * @example
     * // Delete one InpatientEncounterOrder
     * const InpatientEncounterOrder = await prisma.inpatientEncounterOrder.delete({
     *   where: {
     *     // ... filter to delete one InpatientEncounterOrder
     *   }
     * })
     * 
     */
    delete<T extends InpatientEncounterOrderDeleteArgs>(args: SelectSubset<T, InpatientEncounterOrderDeleteArgs<ExtArgs>>): Prisma__InpatientEncounterOrderClient<$Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InpatientEncounterOrder.
     * @param {InpatientEncounterOrderUpdateArgs} args - Arguments to update one InpatientEncounterOrder.
     * @example
     * // Update one InpatientEncounterOrder
     * const inpatientEncounterOrder = await prisma.inpatientEncounterOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InpatientEncounterOrderUpdateArgs>(args: SelectSubset<T, InpatientEncounterOrderUpdateArgs<ExtArgs>>): Prisma__InpatientEncounterOrderClient<$Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InpatientEncounterOrders.
     * @param {InpatientEncounterOrderDeleteManyArgs} args - Arguments to filter InpatientEncounterOrders to delete.
     * @example
     * // Delete a few InpatientEncounterOrders
     * const { count } = await prisma.inpatientEncounterOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InpatientEncounterOrderDeleteManyArgs>(args?: SelectSubset<T, InpatientEncounterOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InpatientEncounterOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InpatientEncounterOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InpatientEncounterOrders
     * const inpatientEncounterOrder = await prisma.inpatientEncounterOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InpatientEncounterOrderUpdateManyArgs>(args: SelectSubset<T, InpatientEncounterOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InpatientEncounterOrders and returns the data updated in the database.
     * @param {InpatientEncounterOrderUpdateManyAndReturnArgs} args - Arguments to update many InpatientEncounterOrders.
     * @example
     * // Update many InpatientEncounterOrders
     * const inpatientEncounterOrder = await prisma.inpatientEncounterOrder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InpatientEncounterOrders and only return the `id`
     * const inpatientEncounterOrderWithIdOnly = await prisma.inpatientEncounterOrder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InpatientEncounterOrderUpdateManyAndReturnArgs>(args: SelectSubset<T, InpatientEncounterOrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InpatientEncounterOrder.
     * @param {InpatientEncounterOrderUpsertArgs} args - Arguments to update or create a InpatientEncounterOrder.
     * @example
     * // Update or create a InpatientEncounterOrder
     * const inpatientEncounterOrder = await prisma.inpatientEncounterOrder.upsert({
     *   create: {
     *     // ... data to create a InpatientEncounterOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InpatientEncounterOrder we want to update
     *   }
     * })
     */
    upsert<T extends InpatientEncounterOrderUpsertArgs>(args: SelectSubset<T, InpatientEncounterOrderUpsertArgs<ExtArgs>>): Prisma__InpatientEncounterOrderClient<$Result.GetResult<Prisma.$InpatientEncounterOrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InpatientEncounterOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InpatientEncounterOrderCountArgs} args - Arguments to filter InpatientEncounterOrders to count.
     * @example
     * // Count the number of InpatientEncounterOrders
     * const count = await prisma.inpatientEncounterOrder.count({
     *   where: {
     *     // ... the filter for the InpatientEncounterOrders we want to count
     *   }
     * })
    **/
    count<T extends InpatientEncounterOrderCountArgs>(
      args?: Subset<T, InpatientEncounterOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InpatientEncounterOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InpatientEncounterOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InpatientEncounterOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InpatientEncounterOrderAggregateArgs>(args: Subset<T, InpatientEncounterOrderAggregateArgs>): Prisma.PrismaPromise<GetInpatientEncounterOrderAggregateType<T>>

    /**
     * Group by InpatientEncounterOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InpatientEncounterOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InpatientEncounterOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InpatientEncounterOrderGroupByArgs['orderBy'] }
        : { orderBy?: InpatientEncounterOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InpatientEncounterOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInpatientEncounterOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InpatientEncounterOrder model
   */
  readonly fields: InpatientEncounterOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InpatientEncounterOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InpatientEncounterOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    encounter<T extends InpatientEncounterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InpatientEncounterDefaultArgs<ExtArgs>>): Prisma__InpatientEncounterClient<$Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InpatientEncounterOrder model
   */
  interface InpatientEncounterOrderFieldRefs {
    readonly id: FieldRef<"InpatientEncounterOrder", 'String'>
    readonly encounterId: FieldRef<"InpatientEncounterOrder", 'String'>
    readonly type: FieldRef<"InpatientEncounterOrder", 'InpatientEncounterOrderType'>
    readonly order: FieldRef<"InpatientEncounterOrder", 'String'>
    readonly status: FieldRef<"InpatientEncounterOrder", 'InpatientEncounterOrderStatus'>
    readonly createdAt: FieldRef<"InpatientEncounterOrder", 'DateTime'>
    readonly updatedAt: FieldRef<"InpatientEncounterOrder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InpatientEncounterOrder findUnique
   */
  export type InpatientEncounterOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterOrder
     */
    select?: InpatientEncounterOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterOrder
     */
    omit?: InpatientEncounterOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterOrderInclude<ExtArgs> | null
    /**
     * Filter, which InpatientEncounterOrder to fetch.
     */
    where: InpatientEncounterOrderWhereUniqueInput
  }

  /**
   * InpatientEncounterOrder findUniqueOrThrow
   */
  export type InpatientEncounterOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterOrder
     */
    select?: InpatientEncounterOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterOrder
     */
    omit?: InpatientEncounterOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterOrderInclude<ExtArgs> | null
    /**
     * Filter, which InpatientEncounterOrder to fetch.
     */
    where: InpatientEncounterOrderWhereUniqueInput
  }

  /**
   * InpatientEncounterOrder findFirst
   */
  export type InpatientEncounterOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterOrder
     */
    select?: InpatientEncounterOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterOrder
     */
    omit?: InpatientEncounterOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterOrderInclude<ExtArgs> | null
    /**
     * Filter, which InpatientEncounterOrder to fetch.
     */
    where?: InpatientEncounterOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InpatientEncounterOrders to fetch.
     */
    orderBy?: InpatientEncounterOrderOrderByWithRelationInput | InpatientEncounterOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InpatientEncounterOrders.
     */
    cursor?: InpatientEncounterOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InpatientEncounterOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InpatientEncounterOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InpatientEncounterOrders.
     */
    distinct?: InpatientEncounterOrderScalarFieldEnum | InpatientEncounterOrderScalarFieldEnum[]
  }

  /**
   * InpatientEncounterOrder findFirstOrThrow
   */
  export type InpatientEncounterOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterOrder
     */
    select?: InpatientEncounterOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterOrder
     */
    omit?: InpatientEncounterOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterOrderInclude<ExtArgs> | null
    /**
     * Filter, which InpatientEncounterOrder to fetch.
     */
    where?: InpatientEncounterOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InpatientEncounterOrders to fetch.
     */
    orderBy?: InpatientEncounterOrderOrderByWithRelationInput | InpatientEncounterOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InpatientEncounterOrders.
     */
    cursor?: InpatientEncounterOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InpatientEncounterOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InpatientEncounterOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InpatientEncounterOrders.
     */
    distinct?: InpatientEncounterOrderScalarFieldEnum | InpatientEncounterOrderScalarFieldEnum[]
  }

  /**
   * InpatientEncounterOrder findMany
   */
  export type InpatientEncounterOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterOrder
     */
    select?: InpatientEncounterOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterOrder
     */
    omit?: InpatientEncounterOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterOrderInclude<ExtArgs> | null
    /**
     * Filter, which InpatientEncounterOrders to fetch.
     */
    where?: InpatientEncounterOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InpatientEncounterOrders to fetch.
     */
    orderBy?: InpatientEncounterOrderOrderByWithRelationInput | InpatientEncounterOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InpatientEncounterOrders.
     */
    cursor?: InpatientEncounterOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InpatientEncounterOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InpatientEncounterOrders.
     */
    skip?: number
    distinct?: InpatientEncounterOrderScalarFieldEnum | InpatientEncounterOrderScalarFieldEnum[]
  }

  /**
   * InpatientEncounterOrder create
   */
  export type InpatientEncounterOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterOrder
     */
    select?: InpatientEncounterOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterOrder
     */
    omit?: InpatientEncounterOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a InpatientEncounterOrder.
     */
    data: XOR<InpatientEncounterOrderCreateInput, InpatientEncounterOrderUncheckedCreateInput>
  }

  /**
   * InpatientEncounterOrder createMany
   */
  export type InpatientEncounterOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InpatientEncounterOrders.
     */
    data: InpatientEncounterOrderCreateManyInput | InpatientEncounterOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InpatientEncounterOrder createManyAndReturn
   */
  export type InpatientEncounterOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterOrder
     */
    select?: InpatientEncounterOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterOrder
     */
    omit?: InpatientEncounterOrderOmit<ExtArgs> | null
    /**
     * The data used to create many InpatientEncounterOrders.
     */
    data: InpatientEncounterOrderCreateManyInput | InpatientEncounterOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InpatientEncounterOrder update
   */
  export type InpatientEncounterOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterOrder
     */
    select?: InpatientEncounterOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterOrder
     */
    omit?: InpatientEncounterOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a InpatientEncounterOrder.
     */
    data: XOR<InpatientEncounterOrderUpdateInput, InpatientEncounterOrderUncheckedUpdateInput>
    /**
     * Choose, which InpatientEncounterOrder to update.
     */
    where: InpatientEncounterOrderWhereUniqueInput
  }

  /**
   * InpatientEncounterOrder updateMany
   */
  export type InpatientEncounterOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InpatientEncounterOrders.
     */
    data: XOR<InpatientEncounterOrderUpdateManyMutationInput, InpatientEncounterOrderUncheckedUpdateManyInput>
    /**
     * Filter which InpatientEncounterOrders to update
     */
    where?: InpatientEncounterOrderWhereInput
    /**
     * Limit how many InpatientEncounterOrders to update.
     */
    limit?: number
  }

  /**
   * InpatientEncounterOrder updateManyAndReturn
   */
  export type InpatientEncounterOrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterOrder
     */
    select?: InpatientEncounterOrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterOrder
     */
    omit?: InpatientEncounterOrderOmit<ExtArgs> | null
    /**
     * The data used to update InpatientEncounterOrders.
     */
    data: XOR<InpatientEncounterOrderUpdateManyMutationInput, InpatientEncounterOrderUncheckedUpdateManyInput>
    /**
     * Filter which InpatientEncounterOrders to update
     */
    where?: InpatientEncounterOrderWhereInput
    /**
     * Limit how many InpatientEncounterOrders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterOrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InpatientEncounterOrder upsert
   */
  export type InpatientEncounterOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterOrder
     */
    select?: InpatientEncounterOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterOrder
     */
    omit?: InpatientEncounterOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the InpatientEncounterOrder to update in case it exists.
     */
    where: InpatientEncounterOrderWhereUniqueInput
    /**
     * In case the InpatientEncounterOrder found by the `where` argument doesn't exist, create a new InpatientEncounterOrder with this data.
     */
    create: XOR<InpatientEncounterOrderCreateInput, InpatientEncounterOrderUncheckedCreateInput>
    /**
     * In case the InpatientEncounterOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InpatientEncounterOrderUpdateInput, InpatientEncounterOrderUncheckedUpdateInput>
  }

  /**
   * InpatientEncounterOrder delete
   */
  export type InpatientEncounterOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterOrder
     */
    select?: InpatientEncounterOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterOrder
     */
    omit?: InpatientEncounterOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterOrderInclude<ExtArgs> | null
    /**
     * Filter which InpatientEncounterOrder to delete.
     */
    where: InpatientEncounterOrderWhereUniqueInput
  }

  /**
   * InpatientEncounterOrder deleteMany
   */
  export type InpatientEncounterOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InpatientEncounterOrders to delete
     */
    where?: InpatientEncounterOrderWhereInput
    /**
     * Limit how many InpatientEncounterOrders to delete.
     */
    limit?: number
  }

  /**
   * InpatientEncounterOrder without action
   */
  export type InpatientEncounterOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounterOrder
     */
    select?: InpatientEncounterOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounterOrder
     */
    omit?: InpatientEncounterOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterOrderInclude<ExtArgs> | null
  }


  /**
   * Model Building
   */

  export type AggregateBuilding = {
    _count: BuildingCountAggregateOutputType | null
    _min: BuildingMinAggregateOutputType | null
    _max: BuildingMaxAggregateOutputType | null
  }

  export type BuildingMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BuildingMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BuildingCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BuildingMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BuildingMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BuildingCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BuildingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Building to aggregate.
     */
    where?: BuildingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buildings to fetch.
     */
    orderBy?: BuildingOrderByWithRelationInput | BuildingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BuildingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buildings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buildings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Buildings
    **/
    _count?: true | BuildingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuildingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuildingMaxAggregateInputType
  }

  export type GetBuildingAggregateType<T extends BuildingAggregateArgs> = {
        [P in keyof T & keyof AggregateBuilding]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuilding[P]>
      : GetScalarType<T[P], AggregateBuilding[P]>
  }




  export type BuildingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuildingWhereInput
    orderBy?: BuildingOrderByWithAggregationInput | BuildingOrderByWithAggregationInput[]
    by: BuildingScalarFieldEnum[] | BuildingScalarFieldEnum
    having?: BuildingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuildingCountAggregateInputType | true
    _min?: BuildingMinAggregateInputType
    _max?: BuildingMaxAggregateInputType
  }

  export type BuildingGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: BuildingCountAggregateOutputType | null
    _min: BuildingMinAggregateOutputType | null
    _max: BuildingMaxAggregateOutputType | null
  }

  type GetBuildingGroupByPayload<T extends BuildingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BuildingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuildingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuildingGroupByOutputType[P]>
            : GetScalarType<T[P], BuildingGroupByOutputType[P]>
        }
      >
    >


  export type BuildingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rooms?: boolean | Building$roomsArgs<ExtArgs>
    _count?: boolean | BuildingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["building"]>

  export type BuildingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["building"]>

  export type BuildingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["building"]>

  export type BuildingSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BuildingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["building"]>
  export type BuildingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rooms?: boolean | Building$roomsArgs<ExtArgs>
    _count?: boolean | BuildingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BuildingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type BuildingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BuildingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Building"
    objects: {
      rooms: Prisma.$RoomPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["building"]>
    composites: {}
  }

  type BuildingGetPayload<S extends boolean | null | undefined | BuildingDefaultArgs> = $Result.GetResult<Prisma.$BuildingPayload, S>

  type BuildingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BuildingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BuildingCountAggregateInputType | true
    }

  export interface BuildingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Building'], meta: { name: 'Building' } }
    /**
     * Find zero or one Building that matches the filter.
     * @param {BuildingFindUniqueArgs} args - Arguments to find a Building
     * @example
     * // Get one Building
     * const building = await prisma.building.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BuildingFindUniqueArgs>(args: SelectSubset<T, BuildingFindUniqueArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Building that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BuildingFindUniqueOrThrowArgs} args - Arguments to find a Building
     * @example
     * // Get one Building
     * const building = await prisma.building.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BuildingFindUniqueOrThrowArgs>(args: SelectSubset<T, BuildingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Building that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingFindFirstArgs} args - Arguments to find a Building
     * @example
     * // Get one Building
     * const building = await prisma.building.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BuildingFindFirstArgs>(args?: SelectSubset<T, BuildingFindFirstArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Building that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingFindFirstOrThrowArgs} args - Arguments to find a Building
     * @example
     * // Get one Building
     * const building = await prisma.building.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BuildingFindFirstOrThrowArgs>(args?: SelectSubset<T, BuildingFindFirstOrThrowArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Buildings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Buildings
     * const buildings = await prisma.building.findMany()
     * 
     * // Get first 10 Buildings
     * const buildings = await prisma.building.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const buildingWithIdOnly = await prisma.building.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BuildingFindManyArgs>(args?: SelectSubset<T, BuildingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Building.
     * @param {BuildingCreateArgs} args - Arguments to create a Building.
     * @example
     * // Create one Building
     * const Building = await prisma.building.create({
     *   data: {
     *     // ... data to create a Building
     *   }
     * })
     * 
     */
    create<T extends BuildingCreateArgs>(args: SelectSubset<T, BuildingCreateArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Buildings.
     * @param {BuildingCreateManyArgs} args - Arguments to create many Buildings.
     * @example
     * // Create many Buildings
     * const building = await prisma.building.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BuildingCreateManyArgs>(args?: SelectSubset<T, BuildingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Buildings and returns the data saved in the database.
     * @param {BuildingCreateManyAndReturnArgs} args - Arguments to create many Buildings.
     * @example
     * // Create many Buildings
     * const building = await prisma.building.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Buildings and only return the `id`
     * const buildingWithIdOnly = await prisma.building.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BuildingCreateManyAndReturnArgs>(args?: SelectSubset<T, BuildingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Building.
     * @param {BuildingDeleteArgs} args - Arguments to delete one Building.
     * @example
     * // Delete one Building
     * const Building = await prisma.building.delete({
     *   where: {
     *     // ... filter to delete one Building
     *   }
     * })
     * 
     */
    delete<T extends BuildingDeleteArgs>(args: SelectSubset<T, BuildingDeleteArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Building.
     * @param {BuildingUpdateArgs} args - Arguments to update one Building.
     * @example
     * // Update one Building
     * const building = await prisma.building.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BuildingUpdateArgs>(args: SelectSubset<T, BuildingUpdateArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Buildings.
     * @param {BuildingDeleteManyArgs} args - Arguments to filter Buildings to delete.
     * @example
     * // Delete a few Buildings
     * const { count } = await prisma.building.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BuildingDeleteManyArgs>(args?: SelectSubset<T, BuildingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Buildings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Buildings
     * const building = await prisma.building.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BuildingUpdateManyArgs>(args: SelectSubset<T, BuildingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Buildings and returns the data updated in the database.
     * @param {BuildingUpdateManyAndReturnArgs} args - Arguments to update many Buildings.
     * @example
     * // Update many Buildings
     * const building = await prisma.building.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Buildings and only return the `id`
     * const buildingWithIdOnly = await prisma.building.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BuildingUpdateManyAndReturnArgs>(args: SelectSubset<T, BuildingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Building.
     * @param {BuildingUpsertArgs} args - Arguments to update or create a Building.
     * @example
     * // Update or create a Building
     * const building = await prisma.building.upsert({
     *   create: {
     *     // ... data to create a Building
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Building we want to update
     *   }
     * })
     */
    upsert<T extends BuildingUpsertArgs>(args: SelectSubset<T, BuildingUpsertArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Buildings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingCountArgs} args - Arguments to filter Buildings to count.
     * @example
     * // Count the number of Buildings
     * const count = await prisma.building.count({
     *   where: {
     *     // ... the filter for the Buildings we want to count
     *   }
     * })
    **/
    count<T extends BuildingCountArgs>(
      args?: Subset<T, BuildingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuildingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Building.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuildingAggregateArgs>(args: Subset<T, BuildingAggregateArgs>): Prisma.PrismaPromise<GetBuildingAggregateType<T>>

    /**
     * Group by Building.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuildingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuildingGroupByArgs['orderBy'] }
        : { orderBy?: BuildingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuildingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuildingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Building model
   */
  readonly fields: BuildingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Building.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BuildingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rooms<T extends Building$roomsArgs<ExtArgs> = {}>(args?: Subset<T, Building$roomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Building model
   */
  interface BuildingFieldRefs {
    readonly id: FieldRef<"Building", 'String'>
    readonly name: FieldRef<"Building", 'String'>
    readonly createdAt: FieldRef<"Building", 'DateTime'>
    readonly updatedAt: FieldRef<"Building", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Building findUnique
   */
  export type BuildingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * Filter, which Building to fetch.
     */
    where: BuildingWhereUniqueInput
  }

  /**
   * Building findUniqueOrThrow
   */
  export type BuildingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * Filter, which Building to fetch.
     */
    where: BuildingWhereUniqueInput
  }

  /**
   * Building findFirst
   */
  export type BuildingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * Filter, which Building to fetch.
     */
    where?: BuildingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buildings to fetch.
     */
    orderBy?: BuildingOrderByWithRelationInput | BuildingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Buildings.
     */
    cursor?: BuildingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buildings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buildings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Buildings.
     */
    distinct?: BuildingScalarFieldEnum | BuildingScalarFieldEnum[]
  }

  /**
   * Building findFirstOrThrow
   */
  export type BuildingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * Filter, which Building to fetch.
     */
    where?: BuildingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buildings to fetch.
     */
    orderBy?: BuildingOrderByWithRelationInput | BuildingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Buildings.
     */
    cursor?: BuildingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buildings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buildings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Buildings.
     */
    distinct?: BuildingScalarFieldEnum | BuildingScalarFieldEnum[]
  }

  /**
   * Building findMany
   */
  export type BuildingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * Filter, which Buildings to fetch.
     */
    where?: BuildingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buildings to fetch.
     */
    orderBy?: BuildingOrderByWithRelationInput | BuildingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Buildings.
     */
    cursor?: BuildingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buildings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buildings.
     */
    skip?: number
    distinct?: BuildingScalarFieldEnum | BuildingScalarFieldEnum[]
  }

  /**
   * Building create
   */
  export type BuildingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * The data needed to create a Building.
     */
    data: XOR<BuildingCreateInput, BuildingUncheckedCreateInput>
  }

  /**
   * Building createMany
   */
  export type BuildingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Buildings.
     */
    data: BuildingCreateManyInput | BuildingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Building createManyAndReturn
   */
  export type BuildingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * The data used to create many Buildings.
     */
    data: BuildingCreateManyInput | BuildingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Building update
   */
  export type BuildingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * The data needed to update a Building.
     */
    data: XOR<BuildingUpdateInput, BuildingUncheckedUpdateInput>
    /**
     * Choose, which Building to update.
     */
    where: BuildingWhereUniqueInput
  }

  /**
   * Building updateMany
   */
  export type BuildingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Buildings.
     */
    data: XOR<BuildingUpdateManyMutationInput, BuildingUncheckedUpdateManyInput>
    /**
     * Filter which Buildings to update
     */
    where?: BuildingWhereInput
    /**
     * Limit how many Buildings to update.
     */
    limit?: number
  }

  /**
   * Building updateManyAndReturn
   */
  export type BuildingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * The data used to update Buildings.
     */
    data: XOR<BuildingUpdateManyMutationInput, BuildingUncheckedUpdateManyInput>
    /**
     * Filter which Buildings to update
     */
    where?: BuildingWhereInput
    /**
     * Limit how many Buildings to update.
     */
    limit?: number
  }

  /**
   * Building upsert
   */
  export type BuildingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * The filter to search for the Building to update in case it exists.
     */
    where: BuildingWhereUniqueInput
    /**
     * In case the Building found by the `where` argument doesn't exist, create a new Building with this data.
     */
    create: XOR<BuildingCreateInput, BuildingUncheckedCreateInput>
    /**
     * In case the Building was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BuildingUpdateInput, BuildingUncheckedUpdateInput>
  }

  /**
   * Building delete
   */
  export type BuildingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
    /**
     * Filter which Building to delete.
     */
    where: BuildingWhereUniqueInput
  }

  /**
   * Building deleteMany
   */
  export type BuildingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Buildings to delete
     */
    where?: BuildingWhereInput
    /**
     * Limit how many Buildings to delete.
     */
    limit?: number
  }

  /**
   * Building.rooms
   */
  export type Building$roomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    where?: RoomWhereInput
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    cursor?: RoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Building without action
   */
  export type BuildingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Building
     */
    select?: BuildingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Building
     */
    omit?: BuildingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildingInclude<ExtArgs> | null
  }


  /**
   * Model Room
   */

  export type AggregateRoom = {
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  export type RoomAvgAggregateOutputType = {
    capacity: number | null
  }

  export type RoomSumAggregateOutputType = {
    capacity: number | null
  }

  export type RoomMinAggregateOutputType = {
    id: string | null
    buildingId: string | null
    type: $Enums.RoomType | null
    identifier: string | null
    description: string | null
    capacity: number | null
    status: $Enums.RoomStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoomMaxAggregateOutputType = {
    id: string | null
    buildingId: string | null
    type: $Enums.RoomType | null
    identifier: string | null
    description: string | null
    capacity: number | null
    status: $Enums.RoomStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoomCountAggregateOutputType = {
    id: number
    buildingId: number
    type: number
    identifier: number
    description: number
    capacity: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RoomAvgAggregateInputType = {
    capacity?: true
  }

  export type RoomSumAggregateInputType = {
    capacity?: true
  }

  export type RoomMinAggregateInputType = {
    id?: true
    buildingId?: true
    type?: true
    identifier?: true
    description?: true
    capacity?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoomMaxAggregateInputType = {
    id?: true
    buildingId?: true
    type?: true
    identifier?: true
    description?: true
    capacity?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoomCountAggregateInputType = {
    id?: true
    buildingId?: true
    type?: true
    identifier?: true
    description?: true
    capacity?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Room to aggregate.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rooms
    **/
    _count?: true | RoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomMaxAggregateInputType
  }

  export type GetRoomAggregateType<T extends RoomAggregateArgs> = {
        [P in keyof T & keyof AggregateRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoom[P]>
      : GetScalarType<T[P], AggregateRoom[P]>
  }




  export type RoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomWhereInput
    orderBy?: RoomOrderByWithAggregationInput | RoomOrderByWithAggregationInput[]
    by: RoomScalarFieldEnum[] | RoomScalarFieldEnum
    having?: RoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomCountAggregateInputType | true
    _avg?: RoomAvgAggregateInputType
    _sum?: RoomSumAggregateInputType
    _min?: RoomMinAggregateInputType
    _max?: RoomMaxAggregateInputType
  }

  export type RoomGroupByOutputType = {
    id: string
    buildingId: string
    type: $Enums.RoomType
    identifier: string
    description: string | null
    capacity: number | null
    status: $Enums.RoomStatus
    createdAt: Date
    updatedAt: Date
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  type GetRoomGroupByPayload<T extends RoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomGroupByOutputType[P]>
            : GetScalarType<T[P], RoomGroupByOutputType[P]>
        }
      >
    >


  export type RoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buildingId?: boolean
    type?: boolean
    identifier?: boolean
    description?: boolean
    capacity?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    building?: boolean | BuildingDefaultArgs<ExtArgs>
    appointments?: boolean | Room$appointmentsArgs<ExtArgs>
    _count?: boolean | RoomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["room"]>

  export type RoomSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buildingId?: boolean
    type?: boolean
    identifier?: boolean
    description?: boolean
    capacity?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    building?: boolean | BuildingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["room"]>

  export type RoomSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buildingId?: boolean
    type?: boolean
    identifier?: boolean
    description?: boolean
    capacity?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    building?: boolean | BuildingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["room"]>

  export type RoomSelectScalar = {
    id?: boolean
    buildingId?: boolean
    type?: boolean
    identifier?: boolean
    description?: boolean
    capacity?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RoomOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "buildingId" | "type" | "identifier" | "description" | "capacity" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["room"]>
  export type RoomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    building?: boolean | BuildingDefaultArgs<ExtArgs>
    appointments?: boolean | Room$appointmentsArgs<ExtArgs>
    _count?: boolean | RoomCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoomIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    building?: boolean | BuildingDefaultArgs<ExtArgs>
  }
  export type RoomIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    building?: boolean | BuildingDefaultArgs<ExtArgs>
  }

  export type $RoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Room"
    objects: {
      building: Prisma.$BuildingPayload<ExtArgs>
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      buildingId: string
      type: $Enums.RoomType
      identifier: string
      description: string | null
      capacity: number | null
      status: $Enums.RoomStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["room"]>
    composites: {}
  }

  type RoomGetPayload<S extends boolean | null | undefined | RoomDefaultArgs> = $Result.GetResult<Prisma.$RoomPayload, S>

  type RoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoomFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoomCountAggregateInputType | true
    }

  export interface RoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Room'], meta: { name: 'Room' } }
    /**
     * Find zero or one Room that matches the filter.
     * @param {RoomFindUniqueArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoomFindUniqueArgs>(args: SelectSubset<T, RoomFindUniqueArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Room that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoomFindUniqueOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoomFindUniqueOrThrowArgs>(args: SelectSubset<T, RoomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Room that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoomFindFirstArgs>(args?: SelectSubset<T, RoomFindFirstArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Room that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoomFindFirstOrThrowArgs>(args?: SelectSubset<T, RoomFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Rooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rooms
     * const rooms = await prisma.room.findMany()
     * 
     * // Get first 10 Rooms
     * const rooms = await prisma.room.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomWithIdOnly = await prisma.room.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoomFindManyArgs>(args?: SelectSubset<T, RoomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Room.
     * @param {RoomCreateArgs} args - Arguments to create a Room.
     * @example
     * // Create one Room
     * const Room = await prisma.room.create({
     *   data: {
     *     // ... data to create a Room
     *   }
     * })
     * 
     */
    create<T extends RoomCreateArgs>(args: SelectSubset<T, RoomCreateArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Rooms.
     * @param {RoomCreateManyArgs} args - Arguments to create many Rooms.
     * @example
     * // Create many Rooms
     * const room = await prisma.room.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoomCreateManyArgs>(args?: SelectSubset<T, RoomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rooms and returns the data saved in the database.
     * @param {RoomCreateManyAndReturnArgs} args - Arguments to create many Rooms.
     * @example
     * // Create many Rooms
     * const room = await prisma.room.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rooms and only return the `id`
     * const roomWithIdOnly = await prisma.room.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoomCreateManyAndReturnArgs>(args?: SelectSubset<T, RoomCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Room.
     * @param {RoomDeleteArgs} args - Arguments to delete one Room.
     * @example
     * // Delete one Room
     * const Room = await prisma.room.delete({
     *   where: {
     *     // ... filter to delete one Room
     *   }
     * })
     * 
     */
    delete<T extends RoomDeleteArgs>(args: SelectSubset<T, RoomDeleteArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Room.
     * @param {RoomUpdateArgs} args - Arguments to update one Room.
     * @example
     * // Update one Room
     * const room = await prisma.room.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoomUpdateArgs>(args: SelectSubset<T, RoomUpdateArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Rooms.
     * @param {RoomDeleteManyArgs} args - Arguments to filter Rooms to delete.
     * @example
     * // Delete a few Rooms
     * const { count } = await prisma.room.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoomDeleteManyArgs>(args?: SelectSubset<T, RoomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoomUpdateManyArgs>(args: SelectSubset<T, RoomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms and returns the data updated in the database.
     * @param {RoomUpdateManyAndReturnArgs} args - Arguments to update many Rooms.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Rooms and only return the `id`
     * const roomWithIdOnly = await prisma.room.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoomUpdateManyAndReturnArgs>(args: SelectSubset<T, RoomUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Room.
     * @param {RoomUpsertArgs} args - Arguments to update or create a Room.
     * @example
     * // Update or create a Room
     * const room = await prisma.room.upsert({
     *   create: {
     *     // ... data to create a Room
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Room we want to update
     *   }
     * })
     */
    upsert<T extends RoomUpsertArgs>(args: SelectSubset<T, RoomUpsertArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomCountArgs} args - Arguments to filter Rooms to count.
     * @example
     * // Count the number of Rooms
     * const count = await prisma.room.count({
     *   where: {
     *     // ... the filter for the Rooms we want to count
     *   }
     * })
    **/
    count<T extends RoomCountArgs>(
      args?: Subset<T, RoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomAggregateArgs>(args: Subset<T, RoomAggregateArgs>): Prisma.PrismaPromise<GetRoomAggregateType<T>>

    /**
     * Group by Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomGroupByArgs['orderBy'] }
        : { orderBy?: RoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Room model
   */
  readonly fields: RoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Room.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    building<T extends BuildingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BuildingDefaultArgs<ExtArgs>>): Prisma__BuildingClient<$Result.GetResult<Prisma.$BuildingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    appointments<T extends Room$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Room$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Room model
   */
  interface RoomFieldRefs {
    readonly id: FieldRef<"Room", 'String'>
    readonly buildingId: FieldRef<"Room", 'String'>
    readonly type: FieldRef<"Room", 'RoomType'>
    readonly identifier: FieldRef<"Room", 'String'>
    readonly description: FieldRef<"Room", 'String'>
    readonly capacity: FieldRef<"Room", 'Int'>
    readonly status: FieldRef<"Room", 'RoomStatus'>
    readonly createdAt: FieldRef<"Room", 'DateTime'>
    readonly updatedAt: FieldRef<"Room", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Room findUnique
   */
  export type RoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room findUniqueOrThrow
   */
  export type RoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room findFirst
   */
  export type RoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Room findFirstOrThrow
   */
  export type RoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Room findMany
   */
  export type RoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Rooms to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Room create
   */
  export type RoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The data needed to create a Room.
     */
    data: XOR<RoomCreateInput, RoomUncheckedCreateInput>
  }

  /**
   * Room createMany
   */
  export type RoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rooms.
     */
    data: RoomCreateManyInput | RoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Room createManyAndReturn
   */
  export type RoomCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * The data used to create many Rooms.
     */
    data: RoomCreateManyInput | RoomCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Room update
   */
  export type RoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The data needed to update a Room.
     */
    data: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
    /**
     * Choose, which Room to update.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room updateMany
   */
  export type RoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rooms.
     */
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>
    /**
     * Filter which Rooms to update
     */
    where?: RoomWhereInput
    /**
     * Limit how many Rooms to update.
     */
    limit?: number
  }

  /**
   * Room updateManyAndReturn
   */
  export type RoomUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * The data used to update Rooms.
     */
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>
    /**
     * Filter which Rooms to update
     */
    where?: RoomWhereInput
    /**
     * Limit how many Rooms to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Room upsert
   */
  export type RoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The filter to search for the Room to update in case it exists.
     */
    where: RoomWhereUniqueInput
    /**
     * In case the Room found by the `where` argument doesn't exist, create a new Room with this data.
     */
    create: XOR<RoomCreateInput, RoomUncheckedCreateInput>
    /**
     * In case the Room was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
  }

  /**
   * Room delete
   */
  export type RoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter which Room to delete.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room deleteMany
   */
  export type RoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rooms to delete
     */
    where?: RoomWhereInput
    /**
     * Limit how many Rooms to delete.
     */
    limit?: number
  }

  /**
   * Room.appointments
   */
  export type Room$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Room without action
   */
  export type RoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
  }


  /**
   * Model FacilityLog
   */

  export type AggregateFacilityLog = {
    _count: FacilityLogCountAggregateOutputType | null
    _avg: FacilityLogAvgAggregateOutputType | null
    _sum: FacilityLogSumAggregateOutputType | null
    _min: FacilityLogMinAggregateOutputType | null
    _max: FacilityLogMaxAggregateOutputType | null
  }

  export type FacilityLogAvgAggregateOutputType = {
    id: number | null
  }

  export type FacilityLogSumAggregateOutputType = {
    id: number | null
  }

  export type FacilityLogMinAggregateOutputType = {
    id: number | null
    timestamp: Date | null
    user: string | null
    role: string | null
    action: string | null
    roomIdentifier: string | null
    type: string | null
    oldStatus: string | null
    newStatus: string | null
  }

  export type FacilityLogMaxAggregateOutputType = {
    id: number | null
    timestamp: Date | null
    user: string | null
    role: string | null
    action: string | null
    roomIdentifier: string | null
    type: string | null
    oldStatus: string | null
    newStatus: string | null
  }

  export type FacilityLogCountAggregateOutputType = {
    id: number
    timestamp: number
    user: number
    role: number
    action: number
    roomIdentifier: number
    type: number
    oldStatus: number
    newStatus: number
    _all: number
  }


  export type FacilityLogAvgAggregateInputType = {
    id?: true
  }

  export type FacilityLogSumAggregateInputType = {
    id?: true
  }

  export type FacilityLogMinAggregateInputType = {
    id?: true
    timestamp?: true
    user?: true
    role?: true
    action?: true
    roomIdentifier?: true
    type?: true
    oldStatus?: true
    newStatus?: true
  }

  export type FacilityLogMaxAggregateInputType = {
    id?: true
    timestamp?: true
    user?: true
    role?: true
    action?: true
    roomIdentifier?: true
    type?: true
    oldStatus?: true
    newStatus?: true
  }

  export type FacilityLogCountAggregateInputType = {
    id?: true
    timestamp?: true
    user?: true
    role?: true
    action?: true
    roomIdentifier?: true
    type?: true
    oldStatus?: true
    newStatus?: true
    _all?: true
  }

  export type FacilityLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacilityLog to aggregate.
     */
    where?: FacilityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacilityLogs to fetch.
     */
    orderBy?: FacilityLogOrderByWithRelationInput | FacilityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacilityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacilityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacilityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacilityLogs
    **/
    _count?: true | FacilityLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacilityLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacilityLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacilityLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacilityLogMaxAggregateInputType
  }

  export type GetFacilityLogAggregateType<T extends FacilityLogAggregateArgs> = {
        [P in keyof T & keyof AggregateFacilityLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacilityLog[P]>
      : GetScalarType<T[P], AggregateFacilityLog[P]>
  }




  export type FacilityLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FacilityLogWhereInput
    orderBy?: FacilityLogOrderByWithAggregationInput | FacilityLogOrderByWithAggregationInput[]
    by: FacilityLogScalarFieldEnum[] | FacilityLogScalarFieldEnum
    having?: FacilityLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacilityLogCountAggregateInputType | true
    _avg?: FacilityLogAvgAggregateInputType
    _sum?: FacilityLogSumAggregateInputType
    _min?: FacilityLogMinAggregateInputType
    _max?: FacilityLogMaxAggregateInputType
  }

  export type FacilityLogGroupByOutputType = {
    id: number
    timestamp: Date
    user: string
    role: string
    action: string
    roomIdentifier: string
    type: string
    oldStatus: string | null
    newStatus: string | null
    _count: FacilityLogCountAggregateOutputType | null
    _avg: FacilityLogAvgAggregateOutputType | null
    _sum: FacilityLogSumAggregateOutputType | null
    _min: FacilityLogMinAggregateOutputType | null
    _max: FacilityLogMaxAggregateOutputType | null
  }

  type GetFacilityLogGroupByPayload<T extends FacilityLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FacilityLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacilityLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacilityLogGroupByOutputType[P]>
            : GetScalarType<T[P], FacilityLogGroupByOutputType[P]>
        }
      >
    >


  export type FacilityLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    user?: boolean
    role?: boolean
    action?: boolean
    roomIdentifier?: boolean
    type?: boolean
    oldStatus?: boolean
    newStatus?: boolean
  }, ExtArgs["result"]["facilityLog"]>

  export type FacilityLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    user?: boolean
    role?: boolean
    action?: boolean
    roomIdentifier?: boolean
    type?: boolean
    oldStatus?: boolean
    newStatus?: boolean
  }, ExtArgs["result"]["facilityLog"]>

  export type FacilityLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    user?: boolean
    role?: boolean
    action?: boolean
    roomIdentifier?: boolean
    type?: boolean
    oldStatus?: boolean
    newStatus?: boolean
  }, ExtArgs["result"]["facilityLog"]>

  export type FacilityLogSelectScalar = {
    id?: boolean
    timestamp?: boolean
    user?: boolean
    role?: boolean
    action?: boolean
    roomIdentifier?: boolean
    type?: boolean
    oldStatus?: boolean
    newStatus?: boolean
  }

  export type FacilityLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "timestamp" | "user" | "role" | "action" | "roomIdentifier" | "type" | "oldStatus" | "newStatus", ExtArgs["result"]["facilityLog"]>

  export type $FacilityLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FacilityLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      timestamp: Date
      user: string
      role: string
      action: string
      roomIdentifier: string
      type: string
      oldStatus: string | null
      newStatus: string | null
    }, ExtArgs["result"]["facilityLog"]>
    composites: {}
  }

  type FacilityLogGetPayload<S extends boolean | null | undefined | FacilityLogDefaultArgs> = $Result.GetResult<Prisma.$FacilityLogPayload, S>

  type FacilityLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FacilityLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FacilityLogCountAggregateInputType | true
    }

  export interface FacilityLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FacilityLog'], meta: { name: 'FacilityLog' } }
    /**
     * Find zero or one FacilityLog that matches the filter.
     * @param {FacilityLogFindUniqueArgs} args - Arguments to find a FacilityLog
     * @example
     * // Get one FacilityLog
     * const facilityLog = await prisma.facilityLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FacilityLogFindUniqueArgs>(args: SelectSubset<T, FacilityLogFindUniqueArgs<ExtArgs>>): Prisma__FacilityLogClient<$Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FacilityLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FacilityLogFindUniqueOrThrowArgs} args - Arguments to find a FacilityLog
     * @example
     * // Get one FacilityLog
     * const facilityLog = await prisma.facilityLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FacilityLogFindUniqueOrThrowArgs>(args: SelectSubset<T, FacilityLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FacilityLogClient<$Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FacilityLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacilityLogFindFirstArgs} args - Arguments to find a FacilityLog
     * @example
     * // Get one FacilityLog
     * const facilityLog = await prisma.facilityLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FacilityLogFindFirstArgs>(args?: SelectSubset<T, FacilityLogFindFirstArgs<ExtArgs>>): Prisma__FacilityLogClient<$Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FacilityLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacilityLogFindFirstOrThrowArgs} args - Arguments to find a FacilityLog
     * @example
     * // Get one FacilityLog
     * const facilityLog = await prisma.facilityLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FacilityLogFindFirstOrThrowArgs>(args?: SelectSubset<T, FacilityLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__FacilityLogClient<$Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FacilityLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacilityLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacilityLogs
     * const facilityLogs = await prisma.facilityLog.findMany()
     * 
     * // Get first 10 FacilityLogs
     * const facilityLogs = await prisma.facilityLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facilityLogWithIdOnly = await prisma.facilityLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FacilityLogFindManyArgs>(args?: SelectSubset<T, FacilityLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FacilityLog.
     * @param {FacilityLogCreateArgs} args - Arguments to create a FacilityLog.
     * @example
     * // Create one FacilityLog
     * const FacilityLog = await prisma.facilityLog.create({
     *   data: {
     *     // ... data to create a FacilityLog
     *   }
     * })
     * 
     */
    create<T extends FacilityLogCreateArgs>(args: SelectSubset<T, FacilityLogCreateArgs<ExtArgs>>): Prisma__FacilityLogClient<$Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FacilityLogs.
     * @param {FacilityLogCreateManyArgs} args - Arguments to create many FacilityLogs.
     * @example
     * // Create many FacilityLogs
     * const facilityLog = await prisma.facilityLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FacilityLogCreateManyArgs>(args?: SelectSubset<T, FacilityLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FacilityLogs and returns the data saved in the database.
     * @param {FacilityLogCreateManyAndReturnArgs} args - Arguments to create many FacilityLogs.
     * @example
     * // Create many FacilityLogs
     * const facilityLog = await prisma.facilityLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FacilityLogs and only return the `id`
     * const facilityLogWithIdOnly = await prisma.facilityLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FacilityLogCreateManyAndReturnArgs>(args?: SelectSubset<T, FacilityLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FacilityLog.
     * @param {FacilityLogDeleteArgs} args - Arguments to delete one FacilityLog.
     * @example
     * // Delete one FacilityLog
     * const FacilityLog = await prisma.facilityLog.delete({
     *   where: {
     *     // ... filter to delete one FacilityLog
     *   }
     * })
     * 
     */
    delete<T extends FacilityLogDeleteArgs>(args: SelectSubset<T, FacilityLogDeleteArgs<ExtArgs>>): Prisma__FacilityLogClient<$Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FacilityLog.
     * @param {FacilityLogUpdateArgs} args - Arguments to update one FacilityLog.
     * @example
     * // Update one FacilityLog
     * const facilityLog = await prisma.facilityLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FacilityLogUpdateArgs>(args: SelectSubset<T, FacilityLogUpdateArgs<ExtArgs>>): Prisma__FacilityLogClient<$Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FacilityLogs.
     * @param {FacilityLogDeleteManyArgs} args - Arguments to filter FacilityLogs to delete.
     * @example
     * // Delete a few FacilityLogs
     * const { count } = await prisma.facilityLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FacilityLogDeleteManyArgs>(args?: SelectSubset<T, FacilityLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacilityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacilityLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacilityLogs
     * const facilityLog = await prisma.facilityLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FacilityLogUpdateManyArgs>(args: SelectSubset<T, FacilityLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacilityLogs and returns the data updated in the database.
     * @param {FacilityLogUpdateManyAndReturnArgs} args - Arguments to update many FacilityLogs.
     * @example
     * // Update many FacilityLogs
     * const facilityLog = await prisma.facilityLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FacilityLogs and only return the `id`
     * const facilityLogWithIdOnly = await prisma.facilityLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FacilityLogUpdateManyAndReturnArgs>(args: SelectSubset<T, FacilityLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FacilityLog.
     * @param {FacilityLogUpsertArgs} args - Arguments to update or create a FacilityLog.
     * @example
     * // Update or create a FacilityLog
     * const facilityLog = await prisma.facilityLog.upsert({
     *   create: {
     *     // ... data to create a FacilityLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacilityLog we want to update
     *   }
     * })
     */
    upsert<T extends FacilityLogUpsertArgs>(args: SelectSubset<T, FacilityLogUpsertArgs<ExtArgs>>): Prisma__FacilityLogClient<$Result.GetResult<Prisma.$FacilityLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FacilityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacilityLogCountArgs} args - Arguments to filter FacilityLogs to count.
     * @example
     * // Count the number of FacilityLogs
     * const count = await prisma.facilityLog.count({
     *   where: {
     *     // ... the filter for the FacilityLogs we want to count
     *   }
     * })
    **/
    count<T extends FacilityLogCountArgs>(
      args?: Subset<T, FacilityLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacilityLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacilityLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacilityLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacilityLogAggregateArgs>(args: Subset<T, FacilityLogAggregateArgs>): Prisma.PrismaPromise<GetFacilityLogAggregateType<T>>

    /**
     * Group by FacilityLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacilityLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacilityLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacilityLogGroupByArgs['orderBy'] }
        : { orderBy?: FacilityLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacilityLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacilityLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FacilityLog model
   */
  readonly fields: FacilityLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FacilityLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FacilityLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FacilityLog model
   */
  interface FacilityLogFieldRefs {
    readonly id: FieldRef<"FacilityLog", 'Int'>
    readonly timestamp: FieldRef<"FacilityLog", 'DateTime'>
    readonly user: FieldRef<"FacilityLog", 'String'>
    readonly role: FieldRef<"FacilityLog", 'String'>
    readonly action: FieldRef<"FacilityLog", 'String'>
    readonly roomIdentifier: FieldRef<"FacilityLog", 'String'>
    readonly type: FieldRef<"FacilityLog", 'String'>
    readonly oldStatus: FieldRef<"FacilityLog", 'String'>
    readonly newStatus: FieldRef<"FacilityLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FacilityLog findUnique
   */
  export type FacilityLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacilityLog
     */
    select?: FacilityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FacilityLog
     */
    omit?: FacilityLogOmit<ExtArgs> | null
    /**
     * Filter, which FacilityLog to fetch.
     */
    where: FacilityLogWhereUniqueInput
  }

  /**
   * FacilityLog findUniqueOrThrow
   */
  export type FacilityLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacilityLog
     */
    select?: FacilityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FacilityLog
     */
    omit?: FacilityLogOmit<ExtArgs> | null
    /**
     * Filter, which FacilityLog to fetch.
     */
    where: FacilityLogWhereUniqueInput
  }

  /**
   * FacilityLog findFirst
   */
  export type FacilityLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacilityLog
     */
    select?: FacilityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FacilityLog
     */
    omit?: FacilityLogOmit<ExtArgs> | null
    /**
     * Filter, which FacilityLog to fetch.
     */
    where?: FacilityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacilityLogs to fetch.
     */
    orderBy?: FacilityLogOrderByWithRelationInput | FacilityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacilityLogs.
     */
    cursor?: FacilityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacilityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacilityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacilityLogs.
     */
    distinct?: FacilityLogScalarFieldEnum | FacilityLogScalarFieldEnum[]
  }

  /**
   * FacilityLog findFirstOrThrow
   */
  export type FacilityLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacilityLog
     */
    select?: FacilityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FacilityLog
     */
    omit?: FacilityLogOmit<ExtArgs> | null
    /**
     * Filter, which FacilityLog to fetch.
     */
    where?: FacilityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacilityLogs to fetch.
     */
    orderBy?: FacilityLogOrderByWithRelationInput | FacilityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacilityLogs.
     */
    cursor?: FacilityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacilityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacilityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacilityLogs.
     */
    distinct?: FacilityLogScalarFieldEnum | FacilityLogScalarFieldEnum[]
  }

  /**
   * FacilityLog findMany
   */
  export type FacilityLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacilityLog
     */
    select?: FacilityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FacilityLog
     */
    omit?: FacilityLogOmit<ExtArgs> | null
    /**
     * Filter, which FacilityLogs to fetch.
     */
    where?: FacilityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacilityLogs to fetch.
     */
    orderBy?: FacilityLogOrderByWithRelationInput | FacilityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacilityLogs.
     */
    cursor?: FacilityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacilityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacilityLogs.
     */
    skip?: number
    distinct?: FacilityLogScalarFieldEnum | FacilityLogScalarFieldEnum[]
  }

  /**
   * FacilityLog create
   */
  export type FacilityLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacilityLog
     */
    select?: FacilityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FacilityLog
     */
    omit?: FacilityLogOmit<ExtArgs> | null
    /**
     * The data needed to create a FacilityLog.
     */
    data: XOR<FacilityLogCreateInput, FacilityLogUncheckedCreateInput>
  }

  /**
   * FacilityLog createMany
   */
  export type FacilityLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FacilityLogs.
     */
    data: FacilityLogCreateManyInput | FacilityLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FacilityLog createManyAndReturn
   */
  export type FacilityLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacilityLog
     */
    select?: FacilityLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FacilityLog
     */
    omit?: FacilityLogOmit<ExtArgs> | null
    /**
     * The data used to create many FacilityLogs.
     */
    data: FacilityLogCreateManyInput | FacilityLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FacilityLog update
   */
  export type FacilityLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacilityLog
     */
    select?: FacilityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FacilityLog
     */
    omit?: FacilityLogOmit<ExtArgs> | null
    /**
     * The data needed to update a FacilityLog.
     */
    data: XOR<FacilityLogUpdateInput, FacilityLogUncheckedUpdateInput>
    /**
     * Choose, which FacilityLog to update.
     */
    where: FacilityLogWhereUniqueInput
  }

  /**
   * FacilityLog updateMany
   */
  export type FacilityLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FacilityLogs.
     */
    data: XOR<FacilityLogUpdateManyMutationInput, FacilityLogUncheckedUpdateManyInput>
    /**
     * Filter which FacilityLogs to update
     */
    where?: FacilityLogWhereInput
    /**
     * Limit how many FacilityLogs to update.
     */
    limit?: number
  }

  /**
   * FacilityLog updateManyAndReturn
   */
  export type FacilityLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacilityLog
     */
    select?: FacilityLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FacilityLog
     */
    omit?: FacilityLogOmit<ExtArgs> | null
    /**
     * The data used to update FacilityLogs.
     */
    data: XOR<FacilityLogUpdateManyMutationInput, FacilityLogUncheckedUpdateManyInput>
    /**
     * Filter which FacilityLogs to update
     */
    where?: FacilityLogWhereInput
    /**
     * Limit how many FacilityLogs to update.
     */
    limit?: number
  }

  /**
   * FacilityLog upsert
   */
  export type FacilityLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacilityLog
     */
    select?: FacilityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FacilityLog
     */
    omit?: FacilityLogOmit<ExtArgs> | null
    /**
     * The filter to search for the FacilityLog to update in case it exists.
     */
    where: FacilityLogWhereUniqueInput
    /**
     * In case the FacilityLog found by the `where` argument doesn't exist, create a new FacilityLog with this data.
     */
    create: XOR<FacilityLogCreateInput, FacilityLogUncheckedCreateInput>
    /**
     * In case the FacilityLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacilityLogUpdateInput, FacilityLogUncheckedUpdateInput>
  }

  /**
   * FacilityLog delete
   */
  export type FacilityLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacilityLog
     */
    select?: FacilityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FacilityLog
     */
    omit?: FacilityLogOmit<ExtArgs> | null
    /**
     * Filter which FacilityLog to delete.
     */
    where: FacilityLogWhereUniqueInput
  }

  /**
   * FacilityLog deleteMany
   */
  export type FacilityLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacilityLogs to delete
     */
    where?: FacilityLogWhereInput
    /**
     * Limit how many FacilityLogs to delete.
     */
    limit?: number
  }

  /**
   * FacilityLog without action
   */
  export type FacilityLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacilityLog
     */
    select?: FacilityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FacilityLog
     */
    omit?: FacilityLogOmit<ExtArgs> | null
  }


  /**
   * Model InsuranceProvider
   */

  export type AggregateInsuranceProvider = {
    _count: InsuranceProviderCountAggregateOutputType | null
    _min: InsuranceProviderMinAggregateOutputType | null
    _max: InsuranceProviderMaxAggregateOutputType | null
  }

  export type InsuranceProviderMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    email: string | null
    phone: string | null
    address: string | null
    city: string | null
    state: string | null
    zip: string | null
    country: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InsuranceProviderMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    email: string | null
    phone: string | null
    address: string | null
    city: string | null
    state: string | null
    zip: string | null
    country: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InsuranceProviderCountAggregateOutputType = {
    id: number
    name: number
    description: number
    email: number
    phone: number
    address: number
    city: number
    state: number
    zip: number
    country: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InsuranceProviderMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    email?: true
    phone?: true
    address?: true
    city?: true
    state?: true
    zip?: true
    country?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InsuranceProviderMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    email?: true
    phone?: true
    address?: true
    city?: true
    state?: true
    zip?: true
    country?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InsuranceProviderCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    email?: true
    phone?: true
    address?: true
    city?: true
    state?: true
    zip?: true
    country?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InsuranceProviderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InsuranceProvider to aggregate.
     */
    where?: InsuranceProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsuranceProviders to fetch.
     */
    orderBy?: InsuranceProviderOrderByWithRelationInput | InsuranceProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InsuranceProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsuranceProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsuranceProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InsuranceProviders
    **/
    _count?: true | InsuranceProviderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InsuranceProviderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InsuranceProviderMaxAggregateInputType
  }

  export type GetInsuranceProviderAggregateType<T extends InsuranceProviderAggregateArgs> = {
        [P in keyof T & keyof AggregateInsuranceProvider]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInsuranceProvider[P]>
      : GetScalarType<T[P], AggregateInsuranceProvider[P]>
  }




  export type InsuranceProviderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InsuranceProviderWhereInput
    orderBy?: InsuranceProviderOrderByWithAggregationInput | InsuranceProviderOrderByWithAggregationInput[]
    by: InsuranceProviderScalarFieldEnum[] | InsuranceProviderScalarFieldEnum
    having?: InsuranceProviderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InsuranceProviderCountAggregateInputType | true
    _min?: InsuranceProviderMinAggregateInputType
    _max?: InsuranceProviderMaxAggregateInputType
  }

  export type InsuranceProviderGroupByOutputType = {
    id: string
    name: string
    description: string | null
    email: string | null
    phone: string | null
    address: string | null
    city: string | null
    state: string | null
    zip: string | null
    country: string | null
    createdAt: Date
    updatedAt: Date
    _count: InsuranceProviderCountAggregateOutputType | null
    _min: InsuranceProviderMinAggregateOutputType | null
    _max: InsuranceProviderMaxAggregateOutputType | null
  }

  type GetInsuranceProviderGroupByPayload<T extends InsuranceProviderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InsuranceProviderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InsuranceProviderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InsuranceProviderGroupByOutputType[P]>
            : GetScalarType<T[P], InsuranceProviderGroupByOutputType[P]>
        }
      >
    >


  export type InsuranceProviderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    zip?: boolean
    country?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    claims?: boolean | InsuranceProvider$claimsArgs<ExtArgs>
    _count?: boolean | InsuranceProviderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["insuranceProvider"]>

  export type InsuranceProviderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    zip?: boolean
    country?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["insuranceProvider"]>

  export type InsuranceProviderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    zip?: boolean
    country?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["insuranceProvider"]>

  export type InsuranceProviderSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    zip?: boolean
    country?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InsuranceProviderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "email" | "phone" | "address" | "city" | "state" | "zip" | "country" | "createdAt" | "updatedAt", ExtArgs["result"]["insuranceProvider"]>
  export type InsuranceProviderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    claims?: boolean | InsuranceProvider$claimsArgs<ExtArgs>
    _count?: boolean | InsuranceProviderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InsuranceProviderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type InsuranceProviderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $InsuranceProviderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InsuranceProvider"
    objects: {
      claims: Prisma.$InsuranceClaimPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      email: string | null
      phone: string | null
      address: string | null
      city: string | null
      state: string | null
      zip: string | null
      country: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["insuranceProvider"]>
    composites: {}
  }

  type InsuranceProviderGetPayload<S extends boolean | null | undefined | InsuranceProviderDefaultArgs> = $Result.GetResult<Prisma.$InsuranceProviderPayload, S>

  type InsuranceProviderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InsuranceProviderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InsuranceProviderCountAggregateInputType | true
    }

  export interface InsuranceProviderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InsuranceProvider'], meta: { name: 'InsuranceProvider' } }
    /**
     * Find zero or one InsuranceProvider that matches the filter.
     * @param {InsuranceProviderFindUniqueArgs} args - Arguments to find a InsuranceProvider
     * @example
     * // Get one InsuranceProvider
     * const insuranceProvider = await prisma.insuranceProvider.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InsuranceProviderFindUniqueArgs>(args: SelectSubset<T, InsuranceProviderFindUniqueArgs<ExtArgs>>): Prisma__InsuranceProviderClient<$Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InsuranceProvider that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InsuranceProviderFindUniqueOrThrowArgs} args - Arguments to find a InsuranceProvider
     * @example
     * // Get one InsuranceProvider
     * const insuranceProvider = await prisma.insuranceProvider.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InsuranceProviderFindUniqueOrThrowArgs>(args: SelectSubset<T, InsuranceProviderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InsuranceProviderClient<$Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InsuranceProvider that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceProviderFindFirstArgs} args - Arguments to find a InsuranceProvider
     * @example
     * // Get one InsuranceProvider
     * const insuranceProvider = await prisma.insuranceProvider.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InsuranceProviderFindFirstArgs>(args?: SelectSubset<T, InsuranceProviderFindFirstArgs<ExtArgs>>): Prisma__InsuranceProviderClient<$Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InsuranceProvider that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceProviderFindFirstOrThrowArgs} args - Arguments to find a InsuranceProvider
     * @example
     * // Get one InsuranceProvider
     * const insuranceProvider = await prisma.insuranceProvider.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InsuranceProviderFindFirstOrThrowArgs>(args?: SelectSubset<T, InsuranceProviderFindFirstOrThrowArgs<ExtArgs>>): Prisma__InsuranceProviderClient<$Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InsuranceProviders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceProviderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InsuranceProviders
     * const insuranceProviders = await prisma.insuranceProvider.findMany()
     * 
     * // Get first 10 InsuranceProviders
     * const insuranceProviders = await prisma.insuranceProvider.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const insuranceProviderWithIdOnly = await prisma.insuranceProvider.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InsuranceProviderFindManyArgs>(args?: SelectSubset<T, InsuranceProviderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InsuranceProvider.
     * @param {InsuranceProviderCreateArgs} args - Arguments to create a InsuranceProvider.
     * @example
     * // Create one InsuranceProvider
     * const InsuranceProvider = await prisma.insuranceProvider.create({
     *   data: {
     *     // ... data to create a InsuranceProvider
     *   }
     * })
     * 
     */
    create<T extends InsuranceProviderCreateArgs>(args: SelectSubset<T, InsuranceProviderCreateArgs<ExtArgs>>): Prisma__InsuranceProviderClient<$Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InsuranceProviders.
     * @param {InsuranceProviderCreateManyArgs} args - Arguments to create many InsuranceProviders.
     * @example
     * // Create many InsuranceProviders
     * const insuranceProvider = await prisma.insuranceProvider.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InsuranceProviderCreateManyArgs>(args?: SelectSubset<T, InsuranceProviderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InsuranceProviders and returns the data saved in the database.
     * @param {InsuranceProviderCreateManyAndReturnArgs} args - Arguments to create many InsuranceProviders.
     * @example
     * // Create many InsuranceProviders
     * const insuranceProvider = await prisma.insuranceProvider.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InsuranceProviders and only return the `id`
     * const insuranceProviderWithIdOnly = await prisma.insuranceProvider.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InsuranceProviderCreateManyAndReturnArgs>(args?: SelectSubset<T, InsuranceProviderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InsuranceProvider.
     * @param {InsuranceProviderDeleteArgs} args - Arguments to delete one InsuranceProvider.
     * @example
     * // Delete one InsuranceProvider
     * const InsuranceProvider = await prisma.insuranceProvider.delete({
     *   where: {
     *     // ... filter to delete one InsuranceProvider
     *   }
     * })
     * 
     */
    delete<T extends InsuranceProviderDeleteArgs>(args: SelectSubset<T, InsuranceProviderDeleteArgs<ExtArgs>>): Prisma__InsuranceProviderClient<$Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InsuranceProvider.
     * @param {InsuranceProviderUpdateArgs} args - Arguments to update one InsuranceProvider.
     * @example
     * // Update one InsuranceProvider
     * const insuranceProvider = await prisma.insuranceProvider.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InsuranceProviderUpdateArgs>(args: SelectSubset<T, InsuranceProviderUpdateArgs<ExtArgs>>): Prisma__InsuranceProviderClient<$Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InsuranceProviders.
     * @param {InsuranceProviderDeleteManyArgs} args - Arguments to filter InsuranceProviders to delete.
     * @example
     * // Delete a few InsuranceProviders
     * const { count } = await prisma.insuranceProvider.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InsuranceProviderDeleteManyArgs>(args?: SelectSubset<T, InsuranceProviderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InsuranceProviders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceProviderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InsuranceProviders
     * const insuranceProvider = await prisma.insuranceProvider.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InsuranceProviderUpdateManyArgs>(args: SelectSubset<T, InsuranceProviderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InsuranceProviders and returns the data updated in the database.
     * @param {InsuranceProviderUpdateManyAndReturnArgs} args - Arguments to update many InsuranceProviders.
     * @example
     * // Update many InsuranceProviders
     * const insuranceProvider = await prisma.insuranceProvider.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InsuranceProviders and only return the `id`
     * const insuranceProviderWithIdOnly = await prisma.insuranceProvider.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InsuranceProviderUpdateManyAndReturnArgs>(args: SelectSubset<T, InsuranceProviderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InsuranceProvider.
     * @param {InsuranceProviderUpsertArgs} args - Arguments to update or create a InsuranceProvider.
     * @example
     * // Update or create a InsuranceProvider
     * const insuranceProvider = await prisma.insuranceProvider.upsert({
     *   create: {
     *     // ... data to create a InsuranceProvider
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InsuranceProvider we want to update
     *   }
     * })
     */
    upsert<T extends InsuranceProviderUpsertArgs>(args: SelectSubset<T, InsuranceProviderUpsertArgs<ExtArgs>>): Prisma__InsuranceProviderClient<$Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InsuranceProviders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceProviderCountArgs} args - Arguments to filter InsuranceProviders to count.
     * @example
     * // Count the number of InsuranceProviders
     * const count = await prisma.insuranceProvider.count({
     *   where: {
     *     // ... the filter for the InsuranceProviders we want to count
     *   }
     * })
    **/
    count<T extends InsuranceProviderCountArgs>(
      args?: Subset<T, InsuranceProviderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InsuranceProviderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InsuranceProvider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceProviderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InsuranceProviderAggregateArgs>(args: Subset<T, InsuranceProviderAggregateArgs>): Prisma.PrismaPromise<GetInsuranceProviderAggregateType<T>>

    /**
     * Group by InsuranceProvider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceProviderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InsuranceProviderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InsuranceProviderGroupByArgs['orderBy'] }
        : { orderBy?: InsuranceProviderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InsuranceProviderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInsuranceProviderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InsuranceProvider model
   */
  readonly fields: InsuranceProviderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InsuranceProvider.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InsuranceProviderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    claims<T extends InsuranceProvider$claimsArgs<ExtArgs> = {}>(args?: Subset<T, InsuranceProvider$claimsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InsuranceProvider model
   */
  interface InsuranceProviderFieldRefs {
    readonly id: FieldRef<"InsuranceProvider", 'String'>
    readonly name: FieldRef<"InsuranceProvider", 'String'>
    readonly description: FieldRef<"InsuranceProvider", 'String'>
    readonly email: FieldRef<"InsuranceProvider", 'String'>
    readonly phone: FieldRef<"InsuranceProvider", 'String'>
    readonly address: FieldRef<"InsuranceProvider", 'String'>
    readonly city: FieldRef<"InsuranceProvider", 'String'>
    readonly state: FieldRef<"InsuranceProvider", 'String'>
    readonly zip: FieldRef<"InsuranceProvider", 'String'>
    readonly country: FieldRef<"InsuranceProvider", 'String'>
    readonly createdAt: FieldRef<"InsuranceProvider", 'DateTime'>
    readonly updatedAt: FieldRef<"InsuranceProvider", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InsuranceProvider findUnique
   */
  export type InsuranceProviderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceProvider
     */
    select?: InsuranceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceProvider
     */
    omit?: InsuranceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceProviderInclude<ExtArgs> | null
    /**
     * Filter, which InsuranceProvider to fetch.
     */
    where: InsuranceProviderWhereUniqueInput
  }

  /**
   * InsuranceProvider findUniqueOrThrow
   */
  export type InsuranceProviderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceProvider
     */
    select?: InsuranceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceProvider
     */
    omit?: InsuranceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceProviderInclude<ExtArgs> | null
    /**
     * Filter, which InsuranceProvider to fetch.
     */
    where: InsuranceProviderWhereUniqueInput
  }

  /**
   * InsuranceProvider findFirst
   */
  export type InsuranceProviderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceProvider
     */
    select?: InsuranceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceProvider
     */
    omit?: InsuranceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceProviderInclude<ExtArgs> | null
    /**
     * Filter, which InsuranceProvider to fetch.
     */
    where?: InsuranceProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsuranceProviders to fetch.
     */
    orderBy?: InsuranceProviderOrderByWithRelationInput | InsuranceProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InsuranceProviders.
     */
    cursor?: InsuranceProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsuranceProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsuranceProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InsuranceProviders.
     */
    distinct?: InsuranceProviderScalarFieldEnum | InsuranceProviderScalarFieldEnum[]
  }

  /**
   * InsuranceProvider findFirstOrThrow
   */
  export type InsuranceProviderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceProvider
     */
    select?: InsuranceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceProvider
     */
    omit?: InsuranceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceProviderInclude<ExtArgs> | null
    /**
     * Filter, which InsuranceProvider to fetch.
     */
    where?: InsuranceProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsuranceProviders to fetch.
     */
    orderBy?: InsuranceProviderOrderByWithRelationInput | InsuranceProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InsuranceProviders.
     */
    cursor?: InsuranceProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsuranceProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsuranceProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InsuranceProviders.
     */
    distinct?: InsuranceProviderScalarFieldEnum | InsuranceProviderScalarFieldEnum[]
  }

  /**
   * InsuranceProvider findMany
   */
  export type InsuranceProviderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceProvider
     */
    select?: InsuranceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceProvider
     */
    omit?: InsuranceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceProviderInclude<ExtArgs> | null
    /**
     * Filter, which InsuranceProviders to fetch.
     */
    where?: InsuranceProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsuranceProviders to fetch.
     */
    orderBy?: InsuranceProviderOrderByWithRelationInput | InsuranceProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InsuranceProviders.
     */
    cursor?: InsuranceProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsuranceProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsuranceProviders.
     */
    skip?: number
    distinct?: InsuranceProviderScalarFieldEnum | InsuranceProviderScalarFieldEnum[]
  }

  /**
   * InsuranceProvider create
   */
  export type InsuranceProviderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceProvider
     */
    select?: InsuranceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceProvider
     */
    omit?: InsuranceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceProviderInclude<ExtArgs> | null
    /**
     * The data needed to create a InsuranceProvider.
     */
    data: XOR<InsuranceProviderCreateInput, InsuranceProviderUncheckedCreateInput>
  }

  /**
   * InsuranceProvider createMany
   */
  export type InsuranceProviderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InsuranceProviders.
     */
    data: InsuranceProviderCreateManyInput | InsuranceProviderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InsuranceProvider createManyAndReturn
   */
  export type InsuranceProviderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceProvider
     */
    select?: InsuranceProviderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceProvider
     */
    omit?: InsuranceProviderOmit<ExtArgs> | null
    /**
     * The data used to create many InsuranceProviders.
     */
    data: InsuranceProviderCreateManyInput | InsuranceProviderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InsuranceProvider update
   */
  export type InsuranceProviderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceProvider
     */
    select?: InsuranceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceProvider
     */
    omit?: InsuranceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceProviderInclude<ExtArgs> | null
    /**
     * The data needed to update a InsuranceProvider.
     */
    data: XOR<InsuranceProviderUpdateInput, InsuranceProviderUncheckedUpdateInput>
    /**
     * Choose, which InsuranceProvider to update.
     */
    where: InsuranceProviderWhereUniqueInput
  }

  /**
   * InsuranceProvider updateMany
   */
  export type InsuranceProviderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InsuranceProviders.
     */
    data: XOR<InsuranceProviderUpdateManyMutationInput, InsuranceProviderUncheckedUpdateManyInput>
    /**
     * Filter which InsuranceProviders to update
     */
    where?: InsuranceProviderWhereInput
    /**
     * Limit how many InsuranceProviders to update.
     */
    limit?: number
  }

  /**
   * InsuranceProvider updateManyAndReturn
   */
  export type InsuranceProviderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceProvider
     */
    select?: InsuranceProviderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceProvider
     */
    omit?: InsuranceProviderOmit<ExtArgs> | null
    /**
     * The data used to update InsuranceProviders.
     */
    data: XOR<InsuranceProviderUpdateManyMutationInput, InsuranceProviderUncheckedUpdateManyInput>
    /**
     * Filter which InsuranceProviders to update
     */
    where?: InsuranceProviderWhereInput
    /**
     * Limit how many InsuranceProviders to update.
     */
    limit?: number
  }

  /**
   * InsuranceProvider upsert
   */
  export type InsuranceProviderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceProvider
     */
    select?: InsuranceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceProvider
     */
    omit?: InsuranceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceProviderInclude<ExtArgs> | null
    /**
     * The filter to search for the InsuranceProvider to update in case it exists.
     */
    where: InsuranceProviderWhereUniqueInput
    /**
     * In case the InsuranceProvider found by the `where` argument doesn't exist, create a new InsuranceProvider with this data.
     */
    create: XOR<InsuranceProviderCreateInput, InsuranceProviderUncheckedCreateInput>
    /**
     * In case the InsuranceProvider was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InsuranceProviderUpdateInput, InsuranceProviderUncheckedUpdateInput>
  }

  /**
   * InsuranceProvider delete
   */
  export type InsuranceProviderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceProvider
     */
    select?: InsuranceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceProvider
     */
    omit?: InsuranceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceProviderInclude<ExtArgs> | null
    /**
     * Filter which InsuranceProvider to delete.
     */
    where: InsuranceProviderWhereUniqueInput
  }

  /**
   * InsuranceProvider deleteMany
   */
  export type InsuranceProviderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InsuranceProviders to delete
     */
    where?: InsuranceProviderWhereInput
    /**
     * Limit how many InsuranceProviders to delete.
     */
    limit?: number
  }

  /**
   * InsuranceProvider.claims
   */
  export type InsuranceProvider$claimsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaim
     */
    select?: InsuranceClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaim
     */
    omit?: InsuranceClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimInclude<ExtArgs> | null
    where?: InsuranceClaimWhereInput
    orderBy?: InsuranceClaimOrderByWithRelationInput | InsuranceClaimOrderByWithRelationInput[]
    cursor?: InsuranceClaimWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InsuranceClaimScalarFieldEnum | InsuranceClaimScalarFieldEnum[]
  }

  /**
   * InsuranceProvider without action
   */
  export type InsuranceProviderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceProvider
     */
    select?: InsuranceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceProvider
     */
    omit?: InsuranceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceProviderInclude<ExtArgs> | null
  }


  /**
   * Model InsuranceClaim
   */

  export type AggregateInsuranceClaim = {
    _count: InsuranceClaimCountAggregateOutputType | null
    _avg: InsuranceClaimAvgAggregateOutputType | null
    _sum: InsuranceClaimSumAggregateOutputType | null
    _min: InsuranceClaimMinAggregateOutputType | null
    _max: InsuranceClaimMaxAggregateOutputType | null
  }

  export type InsuranceClaimAvgAggregateOutputType = {
    amount: number | null
  }

  export type InsuranceClaimSumAggregateOutputType = {
    amount: number | null
  }

  export type InsuranceClaimMinAggregateOutputType = {
    id: string | null
    providerId: string | null
    status: string | null
    message: string | null
    amount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InsuranceClaimMaxAggregateOutputType = {
    id: string | null
    providerId: string | null
    status: string | null
    message: string | null
    amount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InsuranceClaimCountAggregateOutputType = {
    id: number
    providerId: number
    status: number
    message: number
    amount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InsuranceClaimAvgAggregateInputType = {
    amount?: true
  }

  export type InsuranceClaimSumAggregateInputType = {
    amount?: true
  }

  export type InsuranceClaimMinAggregateInputType = {
    id?: true
    providerId?: true
    status?: true
    message?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InsuranceClaimMaxAggregateInputType = {
    id?: true
    providerId?: true
    status?: true
    message?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InsuranceClaimCountAggregateInputType = {
    id?: true
    providerId?: true
    status?: true
    message?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InsuranceClaimAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InsuranceClaim to aggregate.
     */
    where?: InsuranceClaimWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsuranceClaims to fetch.
     */
    orderBy?: InsuranceClaimOrderByWithRelationInput | InsuranceClaimOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InsuranceClaimWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsuranceClaims from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsuranceClaims.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InsuranceClaims
    **/
    _count?: true | InsuranceClaimCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InsuranceClaimAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InsuranceClaimSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InsuranceClaimMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InsuranceClaimMaxAggregateInputType
  }

  export type GetInsuranceClaimAggregateType<T extends InsuranceClaimAggregateArgs> = {
        [P in keyof T & keyof AggregateInsuranceClaim]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInsuranceClaim[P]>
      : GetScalarType<T[P], AggregateInsuranceClaim[P]>
  }




  export type InsuranceClaimGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InsuranceClaimWhereInput
    orderBy?: InsuranceClaimOrderByWithAggregationInput | InsuranceClaimOrderByWithAggregationInput[]
    by: InsuranceClaimScalarFieldEnum[] | InsuranceClaimScalarFieldEnum
    having?: InsuranceClaimScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InsuranceClaimCountAggregateInputType | true
    _avg?: InsuranceClaimAvgAggregateInputType
    _sum?: InsuranceClaimSumAggregateInputType
    _min?: InsuranceClaimMinAggregateInputType
    _max?: InsuranceClaimMaxAggregateInputType
  }

  export type InsuranceClaimGroupByOutputType = {
    id: string
    providerId: string
    status: string
    message: string | null
    amount: number
    createdAt: Date
    updatedAt: Date
    _count: InsuranceClaimCountAggregateOutputType | null
    _avg: InsuranceClaimAvgAggregateOutputType | null
    _sum: InsuranceClaimSumAggregateOutputType | null
    _min: InsuranceClaimMinAggregateOutputType | null
    _max: InsuranceClaimMaxAggregateOutputType | null
  }

  type GetInsuranceClaimGroupByPayload<T extends InsuranceClaimGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InsuranceClaimGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InsuranceClaimGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InsuranceClaimGroupByOutputType[P]>
            : GetScalarType<T[P], InsuranceClaimGroupByOutputType[P]>
        }
      >
    >


  export type InsuranceClaimSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    status?: boolean
    message?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    provider?: boolean | InsuranceProviderDefaultArgs<ExtArgs>
    items?: boolean | InsuranceClaim$itemsArgs<ExtArgs>
    _count?: boolean | InsuranceClaimCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["insuranceClaim"]>

  export type InsuranceClaimSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    status?: boolean
    message?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    provider?: boolean | InsuranceProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["insuranceClaim"]>

  export type InsuranceClaimSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    status?: boolean
    message?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    provider?: boolean | InsuranceProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["insuranceClaim"]>

  export type InsuranceClaimSelectScalar = {
    id?: boolean
    providerId?: boolean
    status?: boolean
    message?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InsuranceClaimOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "providerId" | "status" | "message" | "amount" | "createdAt" | "updatedAt", ExtArgs["result"]["insuranceClaim"]>
  export type InsuranceClaimInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | InsuranceProviderDefaultArgs<ExtArgs>
    items?: boolean | InsuranceClaim$itemsArgs<ExtArgs>
    _count?: boolean | InsuranceClaimCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InsuranceClaimIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | InsuranceProviderDefaultArgs<ExtArgs>
  }
  export type InsuranceClaimIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | InsuranceProviderDefaultArgs<ExtArgs>
  }

  export type $InsuranceClaimPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InsuranceClaim"
    objects: {
      provider: Prisma.$InsuranceProviderPayload<ExtArgs>
      items: Prisma.$InsuranceClaimItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      providerId: string
      status: string
      message: string | null
      amount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["insuranceClaim"]>
    composites: {}
  }

  type InsuranceClaimGetPayload<S extends boolean | null | undefined | InsuranceClaimDefaultArgs> = $Result.GetResult<Prisma.$InsuranceClaimPayload, S>

  type InsuranceClaimCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InsuranceClaimFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InsuranceClaimCountAggregateInputType | true
    }

  export interface InsuranceClaimDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InsuranceClaim'], meta: { name: 'InsuranceClaim' } }
    /**
     * Find zero or one InsuranceClaim that matches the filter.
     * @param {InsuranceClaimFindUniqueArgs} args - Arguments to find a InsuranceClaim
     * @example
     * // Get one InsuranceClaim
     * const insuranceClaim = await prisma.insuranceClaim.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InsuranceClaimFindUniqueArgs>(args: SelectSubset<T, InsuranceClaimFindUniqueArgs<ExtArgs>>): Prisma__InsuranceClaimClient<$Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InsuranceClaim that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InsuranceClaimFindUniqueOrThrowArgs} args - Arguments to find a InsuranceClaim
     * @example
     * // Get one InsuranceClaim
     * const insuranceClaim = await prisma.insuranceClaim.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InsuranceClaimFindUniqueOrThrowArgs>(args: SelectSubset<T, InsuranceClaimFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InsuranceClaimClient<$Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InsuranceClaim that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceClaimFindFirstArgs} args - Arguments to find a InsuranceClaim
     * @example
     * // Get one InsuranceClaim
     * const insuranceClaim = await prisma.insuranceClaim.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InsuranceClaimFindFirstArgs>(args?: SelectSubset<T, InsuranceClaimFindFirstArgs<ExtArgs>>): Prisma__InsuranceClaimClient<$Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InsuranceClaim that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceClaimFindFirstOrThrowArgs} args - Arguments to find a InsuranceClaim
     * @example
     * // Get one InsuranceClaim
     * const insuranceClaim = await prisma.insuranceClaim.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InsuranceClaimFindFirstOrThrowArgs>(args?: SelectSubset<T, InsuranceClaimFindFirstOrThrowArgs<ExtArgs>>): Prisma__InsuranceClaimClient<$Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InsuranceClaims that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceClaimFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InsuranceClaims
     * const insuranceClaims = await prisma.insuranceClaim.findMany()
     * 
     * // Get first 10 InsuranceClaims
     * const insuranceClaims = await prisma.insuranceClaim.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const insuranceClaimWithIdOnly = await prisma.insuranceClaim.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InsuranceClaimFindManyArgs>(args?: SelectSubset<T, InsuranceClaimFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InsuranceClaim.
     * @param {InsuranceClaimCreateArgs} args - Arguments to create a InsuranceClaim.
     * @example
     * // Create one InsuranceClaim
     * const InsuranceClaim = await prisma.insuranceClaim.create({
     *   data: {
     *     // ... data to create a InsuranceClaim
     *   }
     * })
     * 
     */
    create<T extends InsuranceClaimCreateArgs>(args: SelectSubset<T, InsuranceClaimCreateArgs<ExtArgs>>): Prisma__InsuranceClaimClient<$Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InsuranceClaims.
     * @param {InsuranceClaimCreateManyArgs} args - Arguments to create many InsuranceClaims.
     * @example
     * // Create many InsuranceClaims
     * const insuranceClaim = await prisma.insuranceClaim.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InsuranceClaimCreateManyArgs>(args?: SelectSubset<T, InsuranceClaimCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InsuranceClaims and returns the data saved in the database.
     * @param {InsuranceClaimCreateManyAndReturnArgs} args - Arguments to create many InsuranceClaims.
     * @example
     * // Create many InsuranceClaims
     * const insuranceClaim = await prisma.insuranceClaim.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InsuranceClaims and only return the `id`
     * const insuranceClaimWithIdOnly = await prisma.insuranceClaim.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InsuranceClaimCreateManyAndReturnArgs>(args?: SelectSubset<T, InsuranceClaimCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InsuranceClaim.
     * @param {InsuranceClaimDeleteArgs} args - Arguments to delete one InsuranceClaim.
     * @example
     * // Delete one InsuranceClaim
     * const InsuranceClaim = await prisma.insuranceClaim.delete({
     *   where: {
     *     // ... filter to delete one InsuranceClaim
     *   }
     * })
     * 
     */
    delete<T extends InsuranceClaimDeleteArgs>(args: SelectSubset<T, InsuranceClaimDeleteArgs<ExtArgs>>): Prisma__InsuranceClaimClient<$Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InsuranceClaim.
     * @param {InsuranceClaimUpdateArgs} args - Arguments to update one InsuranceClaim.
     * @example
     * // Update one InsuranceClaim
     * const insuranceClaim = await prisma.insuranceClaim.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InsuranceClaimUpdateArgs>(args: SelectSubset<T, InsuranceClaimUpdateArgs<ExtArgs>>): Prisma__InsuranceClaimClient<$Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InsuranceClaims.
     * @param {InsuranceClaimDeleteManyArgs} args - Arguments to filter InsuranceClaims to delete.
     * @example
     * // Delete a few InsuranceClaims
     * const { count } = await prisma.insuranceClaim.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InsuranceClaimDeleteManyArgs>(args?: SelectSubset<T, InsuranceClaimDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InsuranceClaims.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceClaimUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InsuranceClaims
     * const insuranceClaim = await prisma.insuranceClaim.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InsuranceClaimUpdateManyArgs>(args: SelectSubset<T, InsuranceClaimUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InsuranceClaims and returns the data updated in the database.
     * @param {InsuranceClaimUpdateManyAndReturnArgs} args - Arguments to update many InsuranceClaims.
     * @example
     * // Update many InsuranceClaims
     * const insuranceClaim = await prisma.insuranceClaim.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InsuranceClaims and only return the `id`
     * const insuranceClaimWithIdOnly = await prisma.insuranceClaim.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InsuranceClaimUpdateManyAndReturnArgs>(args: SelectSubset<T, InsuranceClaimUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InsuranceClaim.
     * @param {InsuranceClaimUpsertArgs} args - Arguments to update or create a InsuranceClaim.
     * @example
     * // Update or create a InsuranceClaim
     * const insuranceClaim = await prisma.insuranceClaim.upsert({
     *   create: {
     *     // ... data to create a InsuranceClaim
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InsuranceClaim we want to update
     *   }
     * })
     */
    upsert<T extends InsuranceClaimUpsertArgs>(args: SelectSubset<T, InsuranceClaimUpsertArgs<ExtArgs>>): Prisma__InsuranceClaimClient<$Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InsuranceClaims.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceClaimCountArgs} args - Arguments to filter InsuranceClaims to count.
     * @example
     * // Count the number of InsuranceClaims
     * const count = await prisma.insuranceClaim.count({
     *   where: {
     *     // ... the filter for the InsuranceClaims we want to count
     *   }
     * })
    **/
    count<T extends InsuranceClaimCountArgs>(
      args?: Subset<T, InsuranceClaimCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InsuranceClaimCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InsuranceClaim.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceClaimAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InsuranceClaimAggregateArgs>(args: Subset<T, InsuranceClaimAggregateArgs>): Prisma.PrismaPromise<GetInsuranceClaimAggregateType<T>>

    /**
     * Group by InsuranceClaim.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceClaimGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InsuranceClaimGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InsuranceClaimGroupByArgs['orderBy'] }
        : { orderBy?: InsuranceClaimGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InsuranceClaimGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInsuranceClaimGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InsuranceClaim model
   */
  readonly fields: InsuranceClaimFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InsuranceClaim.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InsuranceClaimClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    provider<T extends InsuranceProviderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InsuranceProviderDefaultArgs<ExtArgs>>): Prisma__InsuranceProviderClient<$Result.GetResult<Prisma.$InsuranceProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    items<T extends InsuranceClaim$itemsArgs<ExtArgs> = {}>(args?: Subset<T, InsuranceClaim$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsuranceClaimItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InsuranceClaim model
   */
  interface InsuranceClaimFieldRefs {
    readonly id: FieldRef<"InsuranceClaim", 'String'>
    readonly providerId: FieldRef<"InsuranceClaim", 'String'>
    readonly status: FieldRef<"InsuranceClaim", 'String'>
    readonly message: FieldRef<"InsuranceClaim", 'String'>
    readonly amount: FieldRef<"InsuranceClaim", 'Int'>
    readonly createdAt: FieldRef<"InsuranceClaim", 'DateTime'>
    readonly updatedAt: FieldRef<"InsuranceClaim", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InsuranceClaim findUnique
   */
  export type InsuranceClaimFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaim
     */
    select?: InsuranceClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaim
     */
    omit?: InsuranceClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimInclude<ExtArgs> | null
    /**
     * Filter, which InsuranceClaim to fetch.
     */
    where: InsuranceClaimWhereUniqueInput
  }

  /**
   * InsuranceClaim findUniqueOrThrow
   */
  export type InsuranceClaimFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaim
     */
    select?: InsuranceClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaim
     */
    omit?: InsuranceClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimInclude<ExtArgs> | null
    /**
     * Filter, which InsuranceClaim to fetch.
     */
    where: InsuranceClaimWhereUniqueInput
  }

  /**
   * InsuranceClaim findFirst
   */
  export type InsuranceClaimFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaim
     */
    select?: InsuranceClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaim
     */
    omit?: InsuranceClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimInclude<ExtArgs> | null
    /**
     * Filter, which InsuranceClaim to fetch.
     */
    where?: InsuranceClaimWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsuranceClaims to fetch.
     */
    orderBy?: InsuranceClaimOrderByWithRelationInput | InsuranceClaimOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InsuranceClaims.
     */
    cursor?: InsuranceClaimWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsuranceClaims from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsuranceClaims.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InsuranceClaims.
     */
    distinct?: InsuranceClaimScalarFieldEnum | InsuranceClaimScalarFieldEnum[]
  }

  /**
   * InsuranceClaim findFirstOrThrow
   */
  export type InsuranceClaimFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaim
     */
    select?: InsuranceClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaim
     */
    omit?: InsuranceClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimInclude<ExtArgs> | null
    /**
     * Filter, which InsuranceClaim to fetch.
     */
    where?: InsuranceClaimWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsuranceClaims to fetch.
     */
    orderBy?: InsuranceClaimOrderByWithRelationInput | InsuranceClaimOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InsuranceClaims.
     */
    cursor?: InsuranceClaimWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsuranceClaims from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsuranceClaims.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InsuranceClaims.
     */
    distinct?: InsuranceClaimScalarFieldEnum | InsuranceClaimScalarFieldEnum[]
  }

  /**
   * InsuranceClaim findMany
   */
  export type InsuranceClaimFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaim
     */
    select?: InsuranceClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaim
     */
    omit?: InsuranceClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimInclude<ExtArgs> | null
    /**
     * Filter, which InsuranceClaims to fetch.
     */
    where?: InsuranceClaimWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsuranceClaims to fetch.
     */
    orderBy?: InsuranceClaimOrderByWithRelationInput | InsuranceClaimOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InsuranceClaims.
     */
    cursor?: InsuranceClaimWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsuranceClaims from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsuranceClaims.
     */
    skip?: number
    distinct?: InsuranceClaimScalarFieldEnum | InsuranceClaimScalarFieldEnum[]
  }

  /**
   * InsuranceClaim create
   */
  export type InsuranceClaimCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaim
     */
    select?: InsuranceClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaim
     */
    omit?: InsuranceClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimInclude<ExtArgs> | null
    /**
     * The data needed to create a InsuranceClaim.
     */
    data: XOR<InsuranceClaimCreateInput, InsuranceClaimUncheckedCreateInput>
  }

  /**
   * InsuranceClaim createMany
   */
  export type InsuranceClaimCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InsuranceClaims.
     */
    data: InsuranceClaimCreateManyInput | InsuranceClaimCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InsuranceClaim createManyAndReturn
   */
  export type InsuranceClaimCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaim
     */
    select?: InsuranceClaimSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaim
     */
    omit?: InsuranceClaimOmit<ExtArgs> | null
    /**
     * The data used to create many InsuranceClaims.
     */
    data: InsuranceClaimCreateManyInput | InsuranceClaimCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InsuranceClaim update
   */
  export type InsuranceClaimUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaim
     */
    select?: InsuranceClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaim
     */
    omit?: InsuranceClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimInclude<ExtArgs> | null
    /**
     * The data needed to update a InsuranceClaim.
     */
    data: XOR<InsuranceClaimUpdateInput, InsuranceClaimUncheckedUpdateInput>
    /**
     * Choose, which InsuranceClaim to update.
     */
    where: InsuranceClaimWhereUniqueInput
  }

  /**
   * InsuranceClaim updateMany
   */
  export type InsuranceClaimUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InsuranceClaims.
     */
    data: XOR<InsuranceClaimUpdateManyMutationInput, InsuranceClaimUncheckedUpdateManyInput>
    /**
     * Filter which InsuranceClaims to update
     */
    where?: InsuranceClaimWhereInput
    /**
     * Limit how many InsuranceClaims to update.
     */
    limit?: number
  }

  /**
   * InsuranceClaim updateManyAndReturn
   */
  export type InsuranceClaimUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaim
     */
    select?: InsuranceClaimSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaim
     */
    omit?: InsuranceClaimOmit<ExtArgs> | null
    /**
     * The data used to update InsuranceClaims.
     */
    data: XOR<InsuranceClaimUpdateManyMutationInput, InsuranceClaimUncheckedUpdateManyInput>
    /**
     * Filter which InsuranceClaims to update
     */
    where?: InsuranceClaimWhereInput
    /**
     * Limit how many InsuranceClaims to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InsuranceClaim upsert
   */
  export type InsuranceClaimUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaim
     */
    select?: InsuranceClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaim
     */
    omit?: InsuranceClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimInclude<ExtArgs> | null
    /**
     * The filter to search for the InsuranceClaim to update in case it exists.
     */
    where: InsuranceClaimWhereUniqueInput
    /**
     * In case the InsuranceClaim found by the `where` argument doesn't exist, create a new InsuranceClaim with this data.
     */
    create: XOR<InsuranceClaimCreateInput, InsuranceClaimUncheckedCreateInput>
    /**
     * In case the InsuranceClaim was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InsuranceClaimUpdateInput, InsuranceClaimUncheckedUpdateInput>
  }

  /**
   * InsuranceClaim delete
   */
  export type InsuranceClaimDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaim
     */
    select?: InsuranceClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaim
     */
    omit?: InsuranceClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimInclude<ExtArgs> | null
    /**
     * Filter which InsuranceClaim to delete.
     */
    where: InsuranceClaimWhereUniqueInput
  }

  /**
   * InsuranceClaim deleteMany
   */
  export type InsuranceClaimDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InsuranceClaims to delete
     */
    where?: InsuranceClaimWhereInput
    /**
     * Limit how many InsuranceClaims to delete.
     */
    limit?: number
  }

  /**
   * InsuranceClaim.items
   */
  export type InsuranceClaim$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaimItem
     */
    select?: InsuranceClaimItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaimItem
     */
    omit?: InsuranceClaimItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimItemInclude<ExtArgs> | null
    where?: InsuranceClaimItemWhereInput
    orderBy?: InsuranceClaimItemOrderByWithRelationInput | InsuranceClaimItemOrderByWithRelationInput[]
    cursor?: InsuranceClaimItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InsuranceClaimItemScalarFieldEnum | InsuranceClaimItemScalarFieldEnum[]
  }

  /**
   * InsuranceClaim without action
   */
  export type InsuranceClaimDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaim
     */
    select?: InsuranceClaimSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaim
     */
    omit?: InsuranceClaimOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimInclude<ExtArgs> | null
  }


  /**
   * Model InsuranceClaimItem
   */

  export type AggregateInsuranceClaimItem = {
    _count: InsuranceClaimItemCountAggregateOutputType | null
    _avg: InsuranceClaimItemAvgAggregateOutputType | null
    _sum: InsuranceClaimItemSumAggregateOutputType | null
    _min: InsuranceClaimItemMinAggregateOutputType | null
    _max: InsuranceClaimItemMaxAggregateOutputType | null
  }

  export type InsuranceClaimItemAvgAggregateOutputType = {
    amount: number | null
  }

  export type InsuranceClaimItemSumAggregateOutputType = {
    amount: number | null
  }

  export type InsuranceClaimItemMinAggregateOutputType = {
    id: string | null
    claimId: string | null
    name: string | null
    description: string | null
    amount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InsuranceClaimItemMaxAggregateOutputType = {
    id: string | null
    claimId: string | null
    name: string | null
    description: string | null
    amount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InsuranceClaimItemCountAggregateOutputType = {
    id: number
    claimId: number
    name: number
    description: number
    amount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InsuranceClaimItemAvgAggregateInputType = {
    amount?: true
  }

  export type InsuranceClaimItemSumAggregateInputType = {
    amount?: true
  }

  export type InsuranceClaimItemMinAggregateInputType = {
    id?: true
    claimId?: true
    name?: true
    description?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InsuranceClaimItemMaxAggregateInputType = {
    id?: true
    claimId?: true
    name?: true
    description?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InsuranceClaimItemCountAggregateInputType = {
    id?: true
    claimId?: true
    name?: true
    description?: true
    amount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InsuranceClaimItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InsuranceClaimItem to aggregate.
     */
    where?: InsuranceClaimItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsuranceClaimItems to fetch.
     */
    orderBy?: InsuranceClaimItemOrderByWithRelationInput | InsuranceClaimItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InsuranceClaimItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsuranceClaimItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsuranceClaimItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InsuranceClaimItems
    **/
    _count?: true | InsuranceClaimItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InsuranceClaimItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InsuranceClaimItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InsuranceClaimItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InsuranceClaimItemMaxAggregateInputType
  }

  export type GetInsuranceClaimItemAggregateType<T extends InsuranceClaimItemAggregateArgs> = {
        [P in keyof T & keyof AggregateInsuranceClaimItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInsuranceClaimItem[P]>
      : GetScalarType<T[P], AggregateInsuranceClaimItem[P]>
  }




  export type InsuranceClaimItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InsuranceClaimItemWhereInput
    orderBy?: InsuranceClaimItemOrderByWithAggregationInput | InsuranceClaimItemOrderByWithAggregationInput[]
    by: InsuranceClaimItemScalarFieldEnum[] | InsuranceClaimItemScalarFieldEnum
    having?: InsuranceClaimItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InsuranceClaimItemCountAggregateInputType | true
    _avg?: InsuranceClaimItemAvgAggregateInputType
    _sum?: InsuranceClaimItemSumAggregateInputType
    _min?: InsuranceClaimItemMinAggregateInputType
    _max?: InsuranceClaimItemMaxAggregateInputType
  }

  export type InsuranceClaimItemGroupByOutputType = {
    id: string
    claimId: string
    name: string
    description: string | null
    amount: number
    createdAt: Date
    updatedAt: Date
    _count: InsuranceClaimItemCountAggregateOutputType | null
    _avg: InsuranceClaimItemAvgAggregateOutputType | null
    _sum: InsuranceClaimItemSumAggregateOutputType | null
    _min: InsuranceClaimItemMinAggregateOutputType | null
    _max: InsuranceClaimItemMaxAggregateOutputType | null
  }

  type GetInsuranceClaimItemGroupByPayload<T extends InsuranceClaimItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InsuranceClaimItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InsuranceClaimItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InsuranceClaimItemGroupByOutputType[P]>
            : GetScalarType<T[P], InsuranceClaimItemGroupByOutputType[P]>
        }
      >
    >


  export type InsuranceClaimItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    claimId?: boolean
    name?: boolean
    description?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    claim?: boolean | InsuranceClaimDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["insuranceClaimItem"]>

  export type InsuranceClaimItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    claimId?: boolean
    name?: boolean
    description?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    claim?: boolean | InsuranceClaimDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["insuranceClaimItem"]>

  export type InsuranceClaimItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    claimId?: boolean
    name?: boolean
    description?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    claim?: boolean | InsuranceClaimDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["insuranceClaimItem"]>

  export type InsuranceClaimItemSelectScalar = {
    id?: boolean
    claimId?: boolean
    name?: boolean
    description?: boolean
    amount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InsuranceClaimItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "claimId" | "name" | "description" | "amount" | "createdAt" | "updatedAt", ExtArgs["result"]["insuranceClaimItem"]>
  export type InsuranceClaimItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    claim?: boolean | InsuranceClaimDefaultArgs<ExtArgs>
  }
  export type InsuranceClaimItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    claim?: boolean | InsuranceClaimDefaultArgs<ExtArgs>
  }
  export type InsuranceClaimItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    claim?: boolean | InsuranceClaimDefaultArgs<ExtArgs>
  }

  export type $InsuranceClaimItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InsuranceClaimItem"
    objects: {
      claim: Prisma.$InsuranceClaimPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      claimId: string
      name: string
      description: string | null
      amount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["insuranceClaimItem"]>
    composites: {}
  }

  type InsuranceClaimItemGetPayload<S extends boolean | null | undefined | InsuranceClaimItemDefaultArgs> = $Result.GetResult<Prisma.$InsuranceClaimItemPayload, S>

  type InsuranceClaimItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InsuranceClaimItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InsuranceClaimItemCountAggregateInputType | true
    }

  export interface InsuranceClaimItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InsuranceClaimItem'], meta: { name: 'InsuranceClaimItem' } }
    /**
     * Find zero or one InsuranceClaimItem that matches the filter.
     * @param {InsuranceClaimItemFindUniqueArgs} args - Arguments to find a InsuranceClaimItem
     * @example
     * // Get one InsuranceClaimItem
     * const insuranceClaimItem = await prisma.insuranceClaimItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InsuranceClaimItemFindUniqueArgs>(args: SelectSubset<T, InsuranceClaimItemFindUniqueArgs<ExtArgs>>): Prisma__InsuranceClaimItemClient<$Result.GetResult<Prisma.$InsuranceClaimItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InsuranceClaimItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InsuranceClaimItemFindUniqueOrThrowArgs} args - Arguments to find a InsuranceClaimItem
     * @example
     * // Get one InsuranceClaimItem
     * const insuranceClaimItem = await prisma.insuranceClaimItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InsuranceClaimItemFindUniqueOrThrowArgs>(args: SelectSubset<T, InsuranceClaimItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InsuranceClaimItemClient<$Result.GetResult<Prisma.$InsuranceClaimItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InsuranceClaimItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceClaimItemFindFirstArgs} args - Arguments to find a InsuranceClaimItem
     * @example
     * // Get one InsuranceClaimItem
     * const insuranceClaimItem = await prisma.insuranceClaimItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InsuranceClaimItemFindFirstArgs>(args?: SelectSubset<T, InsuranceClaimItemFindFirstArgs<ExtArgs>>): Prisma__InsuranceClaimItemClient<$Result.GetResult<Prisma.$InsuranceClaimItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InsuranceClaimItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceClaimItemFindFirstOrThrowArgs} args - Arguments to find a InsuranceClaimItem
     * @example
     * // Get one InsuranceClaimItem
     * const insuranceClaimItem = await prisma.insuranceClaimItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InsuranceClaimItemFindFirstOrThrowArgs>(args?: SelectSubset<T, InsuranceClaimItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__InsuranceClaimItemClient<$Result.GetResult<Prisma.$InsuranceClaimItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InsuranceClaimItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceClaimItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InsuranceClaimItems
     * const insuranceClaimItems = await prisma.insuranceClaimItem.findMany()
     * 
     * // Get first 10 InsuranceClaimItems
     * const insuranceClaimItems = await prisma.insuranceClaimItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const insuranceClaimItemWithIdOnly = await prisma.insuranceClaimItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InsuranceClaimItemFindManyArgs>(args?: SelectSubset<T, InsuranceClaimItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsuranceClaimItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InsuranceClaimItem.
     * @param {InsuranceClaimItemCreateArgs} args - Arguments to create a InsuranceClaimItem.
     * @example
     * // Create one InsuranceClaimItem
     * const InsuranceClaimItem = await prisma.insuranceClaimItem.create({
     *   data: {
     *     // ... data to create a InsuranceClaimItem
     *   }
     * })
     * 
     */
    create<T extends InsuranceClaimItemCreateArgs>(args: SelectSubset<T, InsuranceClaimItemCreateArgs<ExtArgs>>): Prisma__InsuranceClaimItemClient<$Result.GetResult<Prisma.$InsuranceClaimItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InsuranceClaimItems.
     * @param {InsuranceClaimItemCreateManyArgs} args - Arguments to create many InsuranceClaimItems.
     * @example
     * // Create many InsuranceClaimItems
     * const insuranceClaimItem = await prisma.insuranceClaimItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InsuranceClaimItemCreateManyArgs>(args?: SelectSubset<T, InsuranceClaimItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InsuranceClaimItems and returns the data saved in the database.
     * @param {InsuranceClaimItemCreateManyAndReturnArgs} args - Arguments to create many InsuranceClaimItems.
     * @example
     * // Create many InsuranceClaimItems
     * const insuranceClaimItem = await prisma.insuranceClaimItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InsuranceClaimItems and only return the `id`
     * const insuranceClaimItemWithIdOnly = await prisma.insuranceClaimItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InsuranceClaimItemCreateManyAndReturnArgs>(args?: SelectSubset<T, InsuranceClaimItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsuranceClaimItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InsuranceClaimItem.
     * @param {InsuranceClaimItemDeleteArgs} args - Arguments to delete one InsuranceClaimItem.
     * @example
     * // Delete one InsuranceClaimItem
     * const InsuranceClaimItem = await prisma.insuranceClaimItem.delete({
     *   where: {
     *     // ... filter to delete one InsuranceClaimItem
     *   }
     * })
     * 
     */
    delete<T extends InsuranceClaimItemDeleteArgs>(args: SelectSubset<T, InsuranceClaimItemDeleteArgs<ExtArgs>>): Prisma__InsuranceClaimItemClient<$Result.GetResult<Prisma.$InsuranceClaimItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InsuranceClaimItem.
     * @param {InsuranceClaimItemUpdateArgs} args - Arguments to update one InsuranceClaimItem.
     * @example
     * // Update one InsuranceClaimItem
     * const insuranceClaimItem = await prisma.insuranceClaimItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InsuranceClaimItemUpdateArgs>(args: SelectSubset<T, InsuranceClaimItemUpdateArgs<ExtArgs>>): Prisma__InsuranceClaimItemClient<$Result.GetResult<Prisma.$InsuranceClaimItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InsuranceClaimItems.
     * @param {InsuranceClaimItemDeleteManyArgs} args - Arguments to filter InsuranceClaimItems to delete.
     * @example
     * // Delete a few InsuranceClaimItems
     * const { count } = await prisma.insuranceClaimItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InsuranceClaimItemDeleteManyArgs>(args?: SelectSubset<T, InsuranceClaimItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InsuranceClaimItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceClaimItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InsuranceClaimItems
     * const insuranceClaimItem = await prisma.insuranceClaimItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InsuranceClaimItemUpdateManyArgs>(args: SelectSubset<T, InsuranceClaimItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InsuranceClaimItems and returns the data updated in the database.
     * @param {InsuranceClaimItemUpdateManyAndReturnArgs} args - Arguments to update many InsuranceClaimItems.
     * @example
     * // Update many InsuranceClaimItems
     * const insuranceClaimItem = await prisma.insuranceClaimItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InsuranceClaimItems and only return the `id`
     * const insuranceClaimItemWithIdOnly = await prisma.insuranceClaimItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InsuranceClaimItemUpdateManyAndReturnArgs>(args: SelectSubset<T, InsuranceClaimItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsuranceClaimItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InsuranceClaimItem.
     * @param {InsuranceClaimItemUpsertArgs} args - Arguments to update or create a InsuranceClaimItem.
     * @example
     * // Update or create a InsuranceClaimItem
     * const insuranceClaimItem = await prisma.insuranceClaimItem.upsert({
     *   create: {
     *     // ... data to create a InsuranceClaimItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InsuranceClaimItem we want to update
     *   }
     * })
     */
    upsert<T extends InsuranceClaimItemUpsertArgs>(args: SelectSubset<T, InsuranceClaimItemUpsertArgs<ExtArgs>>): Prisma__InsuranceClaimItemClient<$Result.GetResult<Prisma.$InsuranceClaimItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InsuranceClaimItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceClaimItemCountArgs} args - Arguments to filter InsuranceClaimItems to count.
     * @example
     * // Count the number of InsuranceClaimItems
     * const count = await prisma.insuranceClaimItem.count({
     *   where: {
     *     // ... the filter for the InsuranceClaimItems we want to count
     *   }
     * })
    **/
    count<T extends InsuranceClaimItemCountArgs>(
      args?: Subset<T, InsuranceClaimItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InsuranceClaimItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InsuranceClaimItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceClaimItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InsuranceClaimItemAggregateArgs>(args: Subset<T, InsuranceClaimItemAggregateArgs>): Prisma.PrismaPromise<GetInsuranceClaimItemAggregateType<T>>

    /**
     * Group by InsuranceClaimItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceClaimItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InsuranceClaimItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InsuranceClaimItemGroupByArgs['orderBy'] }
        : { orderBy?: InsuranceClaimItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InsuranceClaimItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInsuranceClaimItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InsuranceClaimItem model
   */
  readonly fields: InsuranceClaimItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InsuranceClaimItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InsuranceClaimItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    claim<T extends InsuranceClaimDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InsuranceClaimDefaultArgs<ExtArgs>>): Prisma__InsuranceClaimClient<$Result.GetResult<Prisma.$InsuranceClaimPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InsuranceClaimItem model
   */
  interface InsuranceClaimItemFieldRefs {
    readonly id: FieldRef<"InsuranceClaimItem", 'String'>
    readonly claimId: FieldRef<"InsuranceClaimItem", 'String'>
    readonly name: FieldRef<"InsuranceClaimItem", 'String'>
    readonly description: FieldRef<"InsuranceClaimItem", 'String'>
    readonly amount: FieldRef<"InsuranceClaimItem", 'Int'>
    readonly createdAt: FieldRef<"InsuranceClaimItem", 'DateTime'>
    readonly updatedAt: FieldRef<"InsuranceClaimItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InsuranceClaimItem findUnique
   */
  export type InsuranceClaimItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaimItem
     */
    select?: InsuranceClaimItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaimItem
     */
    omit?: InsuranceClaimItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimItemInclude<ExtArgs> | null
    /**
     * Filter, which InsuranceClaimItem to fetch.
     */
    where: InsuranceClaimItemWhereUniqueInput
  }

  /**
   * InsuranceClaimItem findUniqueOrThrow
   */
  export type InsuranceClaimItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaimItem
     */
    select?: InsuranceClaimItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaimItem
     */
    omit?: InsuranceClaimItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimItemInclude<ExtArgs> | null
    /**
     * Filter, which InsuranceClaimItem to fetch.
     */
    where: InsuranceClaimItemWhereUniqueInput
  }

  /**
   * InsuranceClaimItem findFirst
   */
  export type InsuranceClaimItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaimItem
     */
    select?: InsuranceClaimItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaimItem
     */
    omit?: InsuranceClaimItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimItemInclude<ExtArgs> | null
    /**
     * Filter, which InsuranceClaimItem to fetch.
     */
    where?: InsuranceClaimItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsuranceClaimItems to fetch.
     */
    orderBy?: InsuranceClaimItemOrderByWithRelationInput | InsuranceClaimItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InsuranceClaimItems.
     */
    cursor?: InsuranceClaimItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsuranceClaimItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsuranceClaimItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InsuranceClaimItems.
     */
    distinct?: InsuranceClaimItemScalarFieldEnum | InsuranceClaimItemScalarFieldEnum[]
  }

  /**
   * InsuranceClaimItem findFirstOrThrow
   */
  export type InsuranceClaimItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaimItem
     */
    select?: InsuranceClaimItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaimItem
     */
    omit?: InsuranceClaimItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimItemInclude<ExtArgs> | null
    /**
     * Filter, which InsuranceClaimItem to fetch.
     */
    where?: InsuranceClaimItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsuranceClaimItems to fetch.
     */
    orderBy?: InsuranceClaimItemOrderByWithRelationInput | InsuranceClaimItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InsuranceClaimItems.
     */
    cursor?: InsuranceClaimItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsuranceClaimItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsuranceClaimItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InsuranceClaimItems.
     */
    distinct?: InsuranceClaimItemScalarFieldEnum | InsuranceClaimItemScalarFieldEnum[]
  }

  /**
   * InsuranceClaimItem findMany
   */
  export type InsuranceClaimItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaimItem
     */
    select?: InsuranceClaimItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaimItem
     */
    omit?: InsuranceClaimItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimItemInclude<ExtArgs> | null
    /**
     * Filter, which InsuranceClaimItems to fetch.
     */
    where?: InsuranceClaimItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InsuranceClaimItems to fetch.
     */
    orderBy?: InsuranceClaimItemOrderByWithRelationInput | InsuranceClaimItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InsuranceClaimItems.
     */
    cursor?: InsuranceClaimItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InsuranceClaimItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InsuranceClaimItems.
     */
    skip?: number
    distinct?: InsuranceClaimItemScalarFieldEnum | InsuranceClaimItemScalarFieldEnum[]
  }

  /**
   * InsuranceClaimItem create
   */
  export type InsuranceClaimItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaimItem
     */
    select?: InsuranceClaimItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaimItem
     */
    omit?: InsuranceClaimItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimItemInclude<ExtArgs> | null
    /**
     * The data needed to create a InsuranceClaimItem.
     */
    data: XOR<InsuranceClaimItemCreateInput, InsuranceClaimItemUncheckedCreateInput>
  }

  /**
   * InsuranceClaimItem createMany
   */
  export type InsuranceClaimItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InsuranceClaimItems.
     */
    data: InsuranceClaimItemCreateManyInput | InsuranceClaimItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InsuranceClaimItem createManyAndReturn
   */
  export type InsuranceClaimItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaimItem
     */
    select?: InsuranceClaimItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaimItem
     */
    omit?: InsuranceClaimItemOmit<ExtArgs> | null
    /**
     * The data used to create many InsuranceClaimItems.
     */
    data: InsuranceClaimItemCreateManyInput | InsuranceClaimItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InsuranceClaimItem update
   */
  export type InsuranceClaimItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaimItem
     */
    select?: InsuranceClaimItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaimItem
     */
    omit?: InsuranceClaimItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimItemInclude<ExtArgs> | null
    /**
     * The data needed to update a InsuranceClaimItem.
     */
    data: XOR<InsuranceClaimItemUpdateInput, InsuranceClaimItemUncheckedUpdateInput>
    /**
     * Choose, which InsuranceClaimItem to update.
     */
    where: InsuranceClaimItemWhereUniqueInput
  }

  /**
   * InsuranceClaimItem updateMany
   */
  export type InsuranceClaimItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InsuranceClaimItems.
     */
    data: XOR<InsuranceClaimItemUpdateManyMutationInput, InsuranceClaimItemUncheckedUpdateManyInput>
    /**
     * Filter which InsuranceClaimItems to update
     */
    where?: InsuranceClaimItemWhereInput
    /**
     * Limit how many InsuranceClaimItems to update.
     */
    limit?: number
  }

  /**
   * InsuranceClaimItem updateManyAndReturn
   */
  export type InsuranceClaimItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaimItem
     */
    select?: InsuranceClaimItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaimItem
     */
    omit?: InsuranceClaimItemOmit<ExtArgs> | null
    /**
     * The data used to update InsuranceClaimItems.
     */
    data: XOR<InsuranceClaimItemUpdateManyMutationInput, InsuranceClaimItemUncheckedUpdateManyInput>
    /**
     * Filter which InsuranceClaimItems to update
     */
    where?: InsuranceClaimItemWhereInput
    /**
     * Limit how many InsuranceClaimItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InsuranceClaimItem upsert
   */
  export type InsuranceClaimItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaimItem
     */
    select?: InsuranceClaimItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaimItem
     */
    omit?: InsuranceClaimItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimItemInclude<ExtArgs> | null
    /**
     * The filter to search for the InsuranceClaimItem to update in case it exists.
     */
    where: InsuranceClaimItemWhereUniqueInput
    /**
     * In case the InsuranceClaimItem found by the `where` argument doesn't exist, create a new InsuranceClaimItem with this data.
     */
    create: XOR<InsuranceClaimItemCreateInput, InsuranceClaimItemUncheckedCreateInput>
    /**
     * In case the InsuranceClaimItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InsuranceClaimItemUpdateInput, InsuranceClaimItemUncheckedUpdateInput>
  }

  /**
   * InsuranceClaimItem delete
   */
  export type InsuranceClaimItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaimItem
     */
    select?: InsuranceClaimItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaimItem
     */
    omit?: InsuranceClaimItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimItemInclude<ExtArgs> | null
    /**
     * Filter which InsuranceClaimItem to delete.
     */
    where: InsuranceClaimItemWhereUniqueInput
  }

  /**
   * InsuranceClaimItem deleteMany
   */
  export type InsuranceClaimItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InsuranceClaimItems to delete
     */
    where?: InsuranceClaimItemWhereInput
    /**
     * Limit how many InsuranceClaimItems to delete.
     */
    limit?: number
  }

  /**
   * InsuranceClaimItem without action
   */
  export type InsuranceClaimItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceClaimItem
     */
    select?: InsuranceClaimItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InsuranceClaimItem
     */
    omit?: InsuranceClaimItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceClaimItemInclude<ExtArgs> | null
  }


  /**
   * Model Log
   */

  export type AggregateLog = {
    _count: LogCountAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  export type LogMinAggregateOutputType = {
    id: string | null
    user: string | null
    action: string | null
    entity: string | null
    ipAddress: string | null
    timestamp: Date | null
  }

  export type LogMaxAggregateOutputType = {
    id: string | null
    user: string | null
    action: string | null
    entity: string | null
    ipAddress: string | null
    timestamp: Date | null
  }

  export type LogCountAggregateOutputType = {
    id: number
    user: number
    action: number
    entity: number
    data: number
    ipAddress: number
    timestamp: number
    _all: number
  }


  export type LogMinAggregateInputType = {
    id?: true
    user?: true
    action?: true
    entity?: true
    ipAddress?: true
    timestamp?: true
  }

  export type LogMaxAggregateInputType = {
    id?: true
    user?: true
    action?: true
    entity?: true
    ipAddress?: true
    timestamp?: true
  }

  export type LogCountAggregateInputType = {
    id?: true
    user?: true
    action?: true
    entity?: true
    data?: true
    ipAddress?: true
    timestamp?: true
    _all?: true
  }

  export type LogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Log to aggregate.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Logs
    **/
    _count?: true | LogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogMaxAggregateInputType
  }

  export type GetLogAggregateType<T extends LogAggregateArgs> = {
        [P in keyof T & keyof AggregateLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLog[P]>
      : GetScalarType<T[P], AggregateLog[P]>
  }




  export type LogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
    orderBy?: LogOrderByWithAggregationInput | LogOrderByWithAggregationInput[]
    by: LogScalarFieldEnum[] | LogScalarFieldEnum
    having?: LogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogCountAggregateInputType | true
    _min?: LogMinAggregateInputType
    _max?: LogMaxAggregateInputType
  }

  export type LogGroupByOutputType = {
    id: string
    user: string
    action: string
    entity: string
    data: JsonValue
    ipAddress: string
    timestamp: Date
    _count: LogCountAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  type GetLogGroupByPayload<T extends LogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogGroupByOutputType[P]>
            : GetScalarType<T[P], LogGroupByOutputType[P]>
        }
      >
    >


  export type LogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user?: boolean
    action?: boolean
    entity?: boolean
    data?: boolean
    ipAddress?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["log"]>

  export type LogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user?: boolean
    action?: boolean
    entity?: boolean
    data?: boolean
    ipAddress?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["log"]>

  export type LogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user?: boolean
    action?: boolean
    entity?: boolean
    data?: boolean
    ipAddress?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["log"]>

  export type LogSelectScalar = {
    id?: boolean
    user?: boolean
    action?: boolean
    entity?: boolean
    data?: boolean
    ipAddress?: boolean
    timestamp?: boolean
  }

  export type LogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user" | "action" | "entity" | "data" | "ipAddress" | "timestamp", ExtArgs["result"]["log"]>

  export type $LogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Log"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user: string
      action: string
      entity: string
      data: Prisma.JsonValue
      ipAddress: string
      timestamp: Date
    }, ExtArgs["result"]["log"]>
    composites: {}
  }

  type LogGetPayload<S extends boolean | null | undefined | LogDefaultArgs> = $Result.GetResult<Prisma.$LogPayload, S>

  type LogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LogCountAggregateInputType | true
    }

  export interface LogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Log'], meta: { name: 'Log' } }
    /**
     * Find zero or one Log that matches the filter.
     * @param {LogFindUniqueArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LogFindUniqueArgs>(args: SelectSubset<T, LogFindUniqueArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Log that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LogFindUniqueOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LogFindUniqueOrThrowArgs>(args: SelectSubset<T, LogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Log that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LogFindFirstArgs>(args?: SelectSubset<T, LogFindFirstArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Log that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LogFindFirstOrThrowArgs>(args?: SelectSubset<T, LogFindFirstOrThrowArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logs
     * const logs = await prisma.log.findMany()
     * 
     * // Get first 10 Logs
     * const logs = await prisma.log.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logWithIdOnly = await prisma.log.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LogFindManyArgs>(args?: SelectSubset<T, LogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Log.
     * @param {LogCreateArgs} args - Arguments to create a Log.
     * @example
     * // Create one Log
     * const Log = await prisma.log.create({
     *   data: {
     *     // ... data to create a Log
     *   }
     * })
     * 
     */
    create<T extends LogCreateArgs>(args: SelectSubset<T, LogCreateArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Logs.
     * @param {LogCreateManyArgs} args - Arguments to create many Logs.
     * @example
     * // Create many Logs
     * const log = await prisma.log.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LogCreateManyArgs>(args?: SelectSubset<T, LogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Logs and returns the data saved in the database.
     * @param {LogCreateManyAndReturnArgs} args - Arguments to create many Logs.
     * @example
     * // Create many Logs
     * const log = await prisma.log.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Logs and only return the `id`
     * const logWithIdOnly = await prisma.log.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LogCreateManyAndReturnArgs>(args?: SelectSubset<T, LogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Log.
     * @param {LogDeleteArgs} args - Arguments to delete one Log.
     * @example
     * // Delete one Log
     * const Log = await prisma.log.delete({
     *   where: {
     *     // ... filter to delete one Log
     *   }
     * })
     * 
     */
    delete<T extends LogDeleteArgs>(args: SelectSubset<T, LogDeleteArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Log.
     * @param {LogUpdateArgs} args - Arguments to update one Log.
     * @example
     * // Update one Log
     * const log = await prisma.log.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LogUpdateArgs>(args: SelectSubset<T, LogUpdateArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Logs.
     * @param {LogDeleteManyArgs} args - Arguments to filter Logs to delete.
     * @example
     * // Delete a few Logs
     * const { count } = await prisma.log.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LogDeleteManyArgs>(args?: SelectSubset<T, LogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logs
     * const log = await prisma.log.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LogUpdateManyArgs>(args: SelectSubset<T, LogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs and returns the data updated in the database.
     * @param {LogUpdateManyAndReturnArgs} args - Arguments to update many Logs.
     * @example
     * // Update many Logs
     * const log = await prisma.log.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Logs and only return the `id`
     * const logWithIdOnly = await prisma.log.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LogUpdateManyAndReturnArgs>(args: SelectSubset<T, LogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Log.
     * @param {LogUpsertArgs} args - Arguments to update or create a Log.
     * @example
     * // Update or create a Log
     * const log = await prisma.log.upsert({
     *   create: {
     *     // ... data to create a Log
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Log we want to update
     *   }
     * })
     */
    upsert<T extends LogUpsertArgs>(args: SelectSubset<T, LogUpsertArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogCountArgs} args - Arguments to filter Logs to count.
     * @example
     * // Count the number of Logs
     * const count = await prisma.log.count({
     *   where: {
     *     // ... the filter for the Logs we want to count
     *   }
     * })
    **/
    count<T extends LogCountArgs>(
      args?: Subset<T, LogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogAggregateArgs>(args: Subset<T, LogAggregateArgs>): Prisma.PrismaPromise<GetLogAggregateType<T>>

    /**
     * Group by Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogGroupByArgs['orderBy'] }
        : { orderBy?: LogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Log model
   */
  readonly fields: LogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Log.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Log model
   */
  interface LogFieldRefs {
    readonly id: FieldRef<"Log", 'String'>
    readonly user: FieldRef<"Log", 'String'>
    readonly action: FieldRef<"Log", 'String'>
    readonly entity: FieldRef<"Log", 'String'>
    readonly data: FieldRef<"Log", 'Json'>
    readonly ipAddress: FieldRef<"Log", 'String'>
    readonly timestamp: FieldRef<"Log", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Log findUnique
   */
  export type LogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log findUniqueOrThrow
   */
  export type LogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log findFirst
   */
  export type LogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log findFirstOrThrow
   */
  export type LogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log findMany
   */
  export type LogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Filter, which Logs to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log create
   */
  export type LogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * The data needed to create a Log.
     */
    data: XOR<LogCreateInput, LogUncheckedCreateInput>
  }

  /**
   * Log createMany
   */
  export type LogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Logs.
     */
    data: LogCreateManyInput | LogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Log createManyAndReturn
   */
  export type LogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * The data used to create many Logs.
     */
    data: LogCreateManyInput | LogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Log update
   */
  export type LogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * The data needed to update a Log.
     */
    data: XOR<LogUpdateInput, LogUncheckedUpdateInput>
    /**
     * Choose, which Log to update.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log updateMany
   */
  export type LogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Logs.
     */
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyInput>
    /**
     * Filter which Logs to update
     */
    where?: LogWhereInput
    /**
     * Limit how many Logs to update.
     */
    limit?: number
  }

  /**
   * Log updateManyAndReturn
   */
  export type LogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * The data used to update Logs.
     */
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyInput>
    /**
     * Filter which Logs to update
     */
    where?: LogWhereInput
    /**
     * Limit how many Logs to update.
     */
    limit?: number
  }

  /**
   * Log upsert
   */
  export type LogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * The filter to search for the Log to update in case it exists.
     */
    where: LogWhereUniqueInput
    /**
     * In case the Log found by the `where` argument doesn't exist, create a new Log with this data.
     */
    create: XOR<LogCreateInput, LogUncheckedCreateInput>
    /**
     * In case the Log was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LogUpdateInput, LogUncheckedUpdateInput>
  }

  /**
   * Log delete
   */
  export type LogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Filter which Log to delete.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log deleteMany
   */
  export type LogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Logs to delete
     */
    where?: LogWhereInput
    /**
     * Limit how many Logs to delete.
     */
    limit?: number
  }

  /**
   * Log without action
   */
  export type LogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
  }


  /**
   * Model PatientProfile
   */

  export type AggregatePatientProfile = {
    _count: PatientProfileCountAggregateOutputType | null
    _min: PatientProfileMinAggregateOutputType | null
    _max: PatientProfileMaxAggregateOutputType | null
  }

  export type PatientProfileMinAggregateOutputType = {
    id: string | null
    lastName: string | null
    firstName: string | null
    middleName: string | null
    suffix: string | null
    birthdate: string | null
    birthplace: string | null
    sex: $Enums.Sex | null
    maritalStatus: $Enums.MaritalStatus | null
    nationality: string | null
    religion: string | null
    bloodType: $Enums.BloodType | null
    archived: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientProfileMaxAggregateOutputType = {
    id: string | null
    lastName: string | null
    firstName: string | null
    middleName: string | null
    suffix: string | null
    birthdate: string | null
    birthplace: string | null
    sex: $Enums.Sex | null
    maritalStatus: $Enums.MaritalStatus | null
    nationality: string | null
    religion: string | null
    bloodType: $Enums.BloodType | null
    archived: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientProfileCountAggregateOutputType = {
    id: number
    lastName: number
    firstName: number
    middleName: number
    suffix: number
    birthdate: number
    birthplace: number
    sex: number
    maritalStatus: number
    nationality: number
    religion: number
    bloodType: number
    archived: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PatientProfileMinAggregateInputType = {
    id?: true
    lastName?: true
    firstName?: true
    middleName?: true
    suffix?: true
    birthdate?: true
    birthplace?: true
    sex?: true
    maritalStatus?: true
    nationality?: true
    religion?: true
    bloodType?: true
    archived?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientProfileMaxAggregateInputType = {
    id?: true
    lastName?: true
    firstName?: true
    middleName?: true
    suffix?: true
    birthdate?: true
    birthplace?: true
    sex?: true
    maritalStatus?: true
    nationality?: true
    religion?: true
    bloodType?: true
    archived?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientProfileCountAggregateInputType = {
    id?: true
    lastName?: true
    firstName?: true
    middleName?: true
    suffix?: true
    birthdate?: true
    birthplace?: true
    sex?: true
    maritalStatus?: true
    nationality?: true
    religion?: true
    bloodType?: true
    archived?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PatientProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientProfile to aggregate.
     */
    where?: PatientProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientProfiles to fetch.
     */
    orderBy?: PatientProfileOrderByWithRelationInput | PatientProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientProfiles
    **/
    _count?: true | PatientProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientProfileMaxAggregateInputType
  }

  export type GetPatientProfileAggregateType<T extends PatientProfileAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientProfile[P]>
      : GetScalarType<T[P], AggregatePatientProfile[P]>
  }




  export type PatientProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientProfileWhereInput
    orderBy?: PatientProfileOrderByWithAggregationInput | PatientProfileOrderByWithAggregationInput[]
    by: PatientProfileScalarFieldEnum[] | PatientProfileScalarFieldEnum
    having?: PatientProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientProfileCountAggregateInputType | true
    _min?: PatientProfileMinAggregateInputType
    _max?: PatientProfileMaxAggregateInputType
  }

  export type PatientProfileGroupByOutputType = {
    id: string
    lastName: string
    firstName: string
    middleName: string | null
    suffix: string | null
    birthdate: string | null
    birthplace: string | null
    sex: $Enums.Sex | null
    maritalStatus: $Enums.MaritalStatus | null
    nationality: string | null
    religion: string | null
    bloodType: $Enums.BloodType | null
    archived: boolean
    createdAt: Date
    updatedAt: Date
    _count: PatientProfileCountAggregateOutputType | null
    _min: PatientProfileMinAggregateOutputType | null
    _max: PatientProfileMaxAggregateOutputType | null
  }

  type GetPatientProfileGroupByPayload<T extends PatientProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientProfileGroupByOutputType[P]>
            : GetScalarType<T[P], PatientProfileGroupByOutputType[P]>
        }
      >
    >


  export type PatientProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lastName?: boolean
    firstName?: boolean
    middleName?: boolean
    suffix?: boolean
    birthdate?: boolean
    birthplace?: boolean
    sex?: boolean
    maritalStatus?: boolean
    nationality?: boolean
    religion?: boolean
    bloodType?: boolean
    archived?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientEncounters?: boolean | PatientProfile$patientEncountersArgs<ExtArgs>
    inpatientEncounters?: boolean | PatientProfile$inpatientEncountersArgs<ExtArgs>
    outpatientEncounters?: boolean | PatientProfile$outpatientEncountersArgs<ExtArgs>
    appointments?: boolean | PatientProfile$appointmentsArgs<ExtArgs>
    patientAppointments?: boolean | PatientProfile$patientAppointmentsArgs<ExtArgs>
    addresses?: boolean | PatientProfile$addressesArgs<ExtArgs>
    contacts?: boolean | PatientProfile$contactsArgs<ExtArgs>
    employments?: boolean | PatientProfile$employmentsArgs<ExtArgs>
    emergencyContacts?: boolean | PatientProfile$emergencyContactsArgs<ExtArgs>
    medicalRecordRequests?: boolean | PatientProfile$medicalRecordRequestsArgs<ExtArgs>
    consent?: boolean | PatientProfile$consentArgs<ExtArgs>
    _count?: boolean | PatientProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientProfile"]>

  export type PatientProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lastName?: boolean
    firstName?: boolean
    middleName?: boolean
    suffix?: boolean
    birthdate?: boolean
    birthplace?: boolean
    sex?: boolean
    maritalStatus?: boolean
    nationality?: boolean
    religion?: boolean
    bloodType?: boolean
    archived?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["patientProfile"]>

  export type PatientProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lastName?: boolean
    firstName?: boolean
    middleName?: boolean
    suffix?: boolean
    birthdate?: boolean
    birthplace?: boolean
    sex?: boolean
    maritalStatus?: boolean
    nationality?: boolean
    religion?: boolean
    bloodType?: boolean
    archived?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["patientProfile"]>

  export type PatientProfileSelectScalar = {
    id?: boolean
    lastName?: boolean
    firstName?: boolean
    middleName?: boolean
    suffix?: boolean
    birthdate?: boolean
    birthplace?: boolean
    sex?: boolean
    maritalStatus?: boolean
    nationality?: boolean
    religion?: boolean
    bloodType?: boolean
    archived?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PatientProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "lastName" | "firstName" | "middleName" | "suffix" | "birthdate" | "birthplace" | "sex" | "maritalStatus" | "nationality" | "religion" | "bloodType" | "archived" | "createdAt" | "updatedAt", ExtArgs["result"]["patientProfile"]>
  export type PatientProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientEncounters?: boolean | PatientProfile$patientEncountersArgs<ExtArgs>
    inpatientEncounters?: boolean | PatientProfile$inpatientEncountersArgs<ExtArgs>
    outpatientEncounters?: boolean | PatientProfile$outpatientEncountersArgs<ExtArgs>
    appointments?: boolean | PatientProfile$appointmentsArgs<ExtArgs>
    patientAppointments?: boolean | PatientProfile$patientAppointmentsArgs<ExtArgs>
    addresses?: boolean | PatientProfile$addressesArgs<ExtArgs>
    contacts?: boolean | PatientProfile$contactsArgs<ExtArgs>
    employments?: boolean | PatientProfile$employmentsArgs<ExtArgs>
    emergencyContacts?: boolean | PatientProfile$emergencyContactsArgs<ExtArgs>
    medicalRecordRequests?: boolean | PatientProfile$medicalRecordRequestsArgs<ExtArgs>
    consent?: boolean | PatientProfile$consentArgs<ExtArgs>
    _count?: boolean | PatientProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PatientProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PatientProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PatientProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientProfile"
    objects: {
      patientEncounters: Prisma.$PatientEncounterPayload<ExtArgs>[]
      inpatientEncounters: Prisma.$InpatientEncounterPayload<ExtArgs>[]
      outpatientEncounters: Prisma.$OutpatientEncounterPayload<ExtArgs>[]
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      patientAppointments: Prisma.$PatientAppointmentPayload<ExtArgs>[]
      addresses: Prisma.$AddressPayload<ExtArgs>[]
      contacts: Prisma.$ContactPayload<ExtArgs>[]
      employments: Prisma.$EmploymentPayload<ExtArgs>[]
      emergencyContacts: Prisma.$EmergencyContactPayload<ExtArgs>[]
      medicalRecordRequests: Prisma.$MedicalRecordRequestPayload<ExtArgs>[]
      consent: Prisma.$ConsentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      lastName: string
      firstName: string
      middleName: string | null
      suffix: string | null
      birthdate: string | null
      birthplace: string | null
      sex: $Enums.Sex | null
      maritalStatus: $Enums.MaritalStatus | null
      nationality: string | null
      religion: string | null
      bloodType: $Enums.BloodType | null
      archived: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["patientProfile"]>
    composites: {}
  }

  type PatientProfileGetPayload<S extends boolean | null | undefined | PatientProfileDefaultArgs> = $Result.GetResult<Prisma.$PatientProfilePayload, S>

  type PatientProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientProfileCountAggregateInputType | true
    }

  export interface PatientProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientProfile'], meta: { name: 'PatientProfile' } }
    /**
     * Find zero or one PatientProfile that matches the filter.
     * @param {PatientProfileFindUniqueArgs} args - Arguments to find a PatientProfile
     * @example
     * // Get one PatientProfile
     * const patientProfile = await prisma.patientProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientProfileFindUniqueArgs>(args: SelectSubset<T, PatientProfileFindUniqueArgs<ExtArgs>>): Prisma__PatientProfileClient<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PatientProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientProfileFindUniqueOrThrowArgs} args - Arguments to find a PatientProfile
     * @example
     * // Get one PatientProfile
     * const patientProfile = await prisma.patientProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientProfileClient<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientProfileFindFirstArgs} args - Arguments to find a PatientProfile
     * @example
     * // Get one PatientProfile
     * const patientProfile = await prisma.patientProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientProfileFindFirstArgs>(args?: SelectSubset<T, PatientProfileFindFirstArgs<ExtArgs>>): Prisma__PatientProfileClient<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientProfileFindFirstOrThrowArgs} args - Arguments to find a PatientProfile
     * @example
     * // Get one PatientProfile
     * const patientProfile = await prisma.patientProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientProfileClient<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PatientProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientProfiles
     * const patientProfiles = await prisma.patientProfile.findMany()
     * 
     * // Get first 10 PatientProfiles
     * const patientProfiles = await prisma.patientProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientProfileWithIdOnly = await prisma.patientProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientProfileFindManyArgs>(args?: SelectSubset<T, PatientProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PatientProfile.
     * @param {PatientProfileCreateArgs} args - Arguments to create a PatientProfile.
     * @example
     * // Create one PatientProfile
     * const PatientProfile = await prisma.patientProfile.create({
     *   data: {
     *     // ... data to create a PatientProfile
     *   }
     * })
     * 
     */
    create<T extends PatientProfileCreateArgs>(args: SelectSubset<T, PatientProfileCreateArgs<ExtArgs>>): Prisma__PatientProfileClient<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PatientProfiles.
     * @param {PatientProfileCreateManyArgs} args - Arguments to create many PatientProfiles.
     * @example
     * // Create many PatientProfiles
     * const patientProfile = await prisma.patientProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientProfileCreateManyArgs>(args?: SelectSubset<T, PatientProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatientProfiles and returns the data saved in the database.
     * @param {PatientProfileCreateManyAndReturnArgs} args - Arguments to create many PatientProfiles.
     * @example
     * // Create many PatientProfiles
     * const patientProfile = await prisma.patientProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatientProfiles and only return the `id`
     * const patientProfileWithIdOnly = await prisma.patientProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PatientProfile.
     * @param {PatientProfileDeleteArgs} args - Arguments to delete one PatientProfile.
     * @example
     * // Delete one PatientProfile
     * const PatientProfile = await prisma.patientProfile.delete({
     *   where: {
     *     // ... filter to delete one PatientProfile
     *   }
     * })
     * 
     */
    delete<T extends PatientProfileDeleteArgs>(args: SelectSubset<T, PatientProfileDeleteArgs<ExtArgs>>): Prisma__PatientProfileClient<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PatientProfile.
     * @param {PatientProfileUpdateArgs} args - Arguments to update one PatientProfile.
     * @example
     * // Update one PatientProfile
     * const patientProfile = await prisma.patientProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientProfileUpdateArgs>(args: SelectSubset<T, PatientProfileUpdateArgs<ExtArgs>>): Prisma__PatientProfileClient<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PatientProfiles.
     * @param {PatientProfileDeleteManyArgs} args - Arguments to filter PatientProfiles to delete.
     * @example
     * // Delete a few PatientProfiles
     * const { count } = await prisma.patientProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientProfileDeleteManyArgs>(args?: SelectSubset<T, PatientProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientProfiles
     * const patientProfile = await prisma.patientProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientProfileUpdateManyArgs>(args: SelectSubset<T, PatientProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientProfiles and returns the data updated in the database.
     * @param {PatientProfileUpdateManyAndReturnArgs} args - Arguments to update many PatientProfiles.
     * @example
     * // Update many PatientProfiles
     * const patientProfile = await prisma.patientProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PatientProfiles and only return the `id`
     * const patientProfileWithIdOnly = await prisma.patientProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PatientProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, PatientProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PatientProfile.
     * @param {PatientProfileUpsertArgs} args - Arguments to update or create a PatientProfile.
     * @example
     * // Update or create a PatientProfile
     * const patientProfile = await prisma.patientProfile.upsert({
     *   create: {
     *     // ... data to create a PatientProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientProfile we want to update
     *   }
     * })
     */
    upsert<T extends PatientProfileUpsertArgs>(args: SelectSubset<T, PatientProfileUpsertArgs<ExtArgs>>): Prisma__PatientProfileClient<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PatientProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientProfileCountArgs} args - Arguments to filter PatientProfiles to count.
     * @example
     * // Count the number of PatientProfiles
     * const count = await prisma.patientProfile.count({
     *   where: {
     *     // ... the filter for the PatientProfiles we want to count
     *   }
     * })
    **/
    count<T extends PatientProfileCountArgs>(
      args?: Subset<T, PatientProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientProfileAggregateArgs>(args: Subset<T, PatientProfileAggregateArgs>): Prisma.PrismaPromise<GetPatientProfileAggregateType<T>>

    /**
     * Group by PatientProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientProfileGroupByArgs['orderBy'] }
        : { orderBy?: PatientProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientProfile model
   */
  readonly fields: PatientProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patientEncounters<T extends PatientProfile$patientEncountersArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfile$patientEncountersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientEncounterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    inpatientEncounters<T extends PatientProfile$inpatientEncountersArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfile$inpatientEncountersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    outpatientEncounters<T extends PatientProfile$outpatientEncountersArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfile$outpatientEncountersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OutpatientEncounterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    appointments<T extends PatientProfile$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfile$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    patientAppointments<T extends PatientProfile$patientAppointmentsArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfile$patientAppointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientAppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    addresses<T extends PatientProfile$addressesArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfile$addressesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    contacts<T extends PatientProfile$contactsArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfile$contactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    employments<T extends PatientProfile$employmentsArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfile$employmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    emergencyContacts<T extends PatientProfile$emergencyContactsArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfile$emergencyContactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    medicalRecordRequests<T extends PatientProfile$medicalRecordRequestsArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfile$medicalRecordRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    consent<T extends PatientProfile$consentArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfile$consentArgs<ExtArgs>>): Prisma__ConsentClient<$Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientProfile model
   */
  interface PatientProfileFieldRefs {
    readonly id: FieldRef<"PatientProfile", 'String'>
    readonly lastName: FieldRef<"PatientProfile", 'String'>
    readonly firstName: FieldRef<"PatientProfile", 'String'>
    readonly middleName: FieldRef<"PatientProfile", 'String'>
    readonly suffix: FieldRef<"PatientProfile", 'String'>
    readonly birthdate: FieldRef<"PatientProfile", 'String'>
    readonly birthplace: FieldRef<"PatientProfile", 'String'>
    readonly sex: FieldRef<"PatientProfile", 'Sex'>
    readonly maritalStatus: FieldRef<"PatientProfile", 'MaritalStatus'>
    readonly nationality: FieldRef<"PatientProfile", 'String'>
    readonly religion: FieldRef<"PatientProfile", 'String'>
    readonly bloodType: FieldRef<"PatientProfile", 'BloodType'>
    readonly archived: FieldRef<"PatientProfile", 'Boolean'>
    readonly createdAt: FieldRef<"PatientProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"PatientProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PatientProfile findUnique
   */
  export type PatientProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientProfile
     */
    select?: PatientProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientProfile
     */
    omit?: PatientProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientProfileInclude<ExtArgs> | null
    /**
     * Filter, which PatientProfile to fetch.
     */
    where: PatientProfileWhereUniqueInput
  }

  /**
   * PatientProfile findUniqueOrThrow
   */
  export type PatientProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientProfile
     */
    select?: PatientProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientProfile
     */
    omit?: PatientProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientProfileInclude<ExtArgs> | null
    /**
     * Filter, which PatientProfile to fetch.
     */
    where: PatientProfileWhereUniqueInput
  }

  /**
   * PatientProfile findFirst
   */
  export type PatientProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientProfile
     */
    select?: PatientProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientProfile
     */
    omit?: PatientProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientProfileInclude<ExtArgs> | null
    /**
     * Filter, which PatientProfile to fetch.
     */
    where?: PatientProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientProfiles to fetch.
     */
    orderBy?: PatientProfileOrderByWithRelationInput | PatientProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientProfiles.
     */
    cursor?: PatientProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientProfiles.
     */
    distinct?: PatientProfileScalarFieldEnum | PatientProfileScalarFieldEnum[]
  }

  /**
   * PatientProfile findFirstOrThrow
   */
  export type PatientProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientProfile
     */
    select?: PatientProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientProfile
     */
    omit?: PatientProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientProfileInclude<ExtArgs> | null
    /**
     * Filter, which PatientProfile to fetch.
     */
    where?: PatientProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientProfiles to fetch.
     */
    orderBy?: PatientProfileOrderByWithRelationInput | PatientProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientProfiles.
     */
    cursor?: PatientProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientProfiles.
     */
    distinct?: PatientProfileScalarFieldEnum | PatientProfileScalarFieldEnum[]
  }

  /**
   * PatientProfile findMany
   */
  export type PatientProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientProfile
     */
    select?: PatientProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientProfile
     */
    omit?: PatientProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientProfileInclude<ExtArgs> | null
    /**
     * Filter, which PatientProfiles to fetch.
     */
    where?: PatientProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientProfiles to fetch.
     */
    orderBy?: PatientProfileOrderByWithRelationInput | PatientProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientProfiles.
     */
    cursor?: PatientProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientProfiles.
     */
    skip?: number
    distinct?: PatientProfileScalarFieldEnum | PatientProfileScalarFieldEnum[]
  }

  /**
   * PatientProfile create
   */
  export type PatientProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientProfile
     */
    select?: PatientProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientProfile
     */
    omit?: PatientProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientProfile.
     */
    data: XOR<PatientProfileCreateInput, PatientProfileUncheckedCreateInput>
  }

  /**
   * PatientProfile createMany
   */
  export type PatientProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientProfiles.
     */
    data: PatientProfileCreateManyInput | PatientProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientProfile createManyAndReturn
   */
  export type PatientProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientProfile
     */
    select?: PatientProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientProfile
     */
    omit?: PatientProfileOmit<ExtArgs> | null
    /**
     * The data used to create many PatientProfiles.
     */
    data: PatientProfileCreateManyInput | PatientProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientProfile update
   */
  export type PatientProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientProfile
     */
    select?: PatientProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientProfile
     */
    omit?: PatientProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientProfile.
     */
    data: XOR<PatientProfileUpdateInput, PatientProfileUncheckedUpdateInput>
    /**
     * Choose, which PatientProfile to update.
     */
    where: PatientProfileWhereUniqueInput
  }

  /**
   * PatientProfile updateMany
   */
  export type PatientProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientProfiles.
     */
    data: XOR<PatientProfileUpdateManyMutationInput, PatientProfileUncheckedUpdateManyInput>
    /**
     * Filter which PatientProfiles to update
     */
    where?: PatientProfileWhereInput
    /**
     * Limit how many PatientProfiles to update.
     */
    limit?: number
  }

  /**
   * PatientProfile updateManyAndReturn
   */
  export type PatientProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientProfile
     */
    select?: PatientProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientProfile
     */
    omit?: PatientProfileOmit<ExtArgs> | null
    /**
     * The data used to update PatientProfiles.
     */
    data: XOR<PatientProfileUpdateManyMutationInput, PatientProfileUncheckedUpdateManyInput>
    /**
     * Filter which PatientProfiles to update
     */
    where?: PatientProfileWhereInput
    /**
     * Limit how many PatientProfiles to update.
     */
    limit?: number
  }

  /**
   * PatientProfile upsert
   */
  export type PatientProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientProfile
     */
    select?: PatientProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientProfile
     */
    omit?: PatientProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientProfile to update in case it exists.
     */
    where: PatientProfileWhereUniqueInput
    /**
     * In case the PatientProfile found by the `where` argument doesn't exist, create a new PatientProfile with this data.
     */
    create: XOR<PatientProfileCreateInput, PatientProfileUncheckedCreateInput>
    /**
     * In case the PatientProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientProfileUpdateInput, PatientProfileUncheckedUpdateInput>
  }

  /**
   * PatientProfile delete
   */
  export type PatientProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientProfile
     */
    select?: PatientProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientProfile
     */
    omit?: PatientProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientProfileInclude<ExtArgs> | null
    /**
     * Filter which PatientProfile to delete.
     */
    where: PatientProfileWhereUniqueInput
  }

  /**
   * PatientProfile deleteMany
   */
  export type PatientProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientProfiles to delete
     */
    where?: PatientProfileWhereInput
    /**
     * Limit how many PatientProfiles to delete.
     */
    limit?: number
  }

  /**
   * PatientProfile.patientEncounters
   */
  export type PatientProfile$patientEncountersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEncounter
     */
    select?: PatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEncounter
     */
    omit?: PatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEncounterInclude<ExtArgs> | null
    where?: PatientEncounterWhereInput
    orderBy?: PatientEncounterOrderByWithRelationInput | PatientEncounterOrderByWithRelationInput[]
    cursor?: PatientEncounterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientEncounterScalarFieldEnum | PatientEncounterScalarFieldEnum[]
  }

  /**
   * PatientProfile.inpatientEncounters
   */
  export type PatientProfile$inpatientEncountersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InpatientEncounter
     */
    select?: InpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InpatientEncounter
     */
    omit?: InpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InpatientEncounterInclude<ExtArgs> | null
    where?: InpatientEncounterWhereInput
    orderBy?: InpatientEncounterOrderByWithRelationInput | InpatientEncounterOrderByWithRelationInput[]
    cursor?: InpatientEncounterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InpatientEncounterScalarFieldEnum | InpatientEncounterScalarFieldEnum[]
  }

  /**
   * PatientProfile.outpatientEncounters
   */
  export type PatientProfile$outpatientEncountersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutpatientEncounter
     */
    select?: OutpatientEncounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OutpatientEncounter
     */
    omit?: OutpatientEncounterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutpatientEncounterInclude<ExtArgs> | null
    where?: OutpatientEncounterWhereInput
    orderBy?: OutpatientEncounterOrderByWithRelationInput | OutpatientEncounterOrderByWithRelationInput[]
    cursor?: OutpatientEncounterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OutpatientEncounterScalarFieldEnum | OutpatientEncounterScalarFieldEnum[]
  }

  /**
   * PatientProfile.appointments
   */
  export type PatientProfile$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * PatientProfile.patientAppointments
   */
  export type PatientProfile$patientAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAppointment
     */
    select?: PatientAppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientAppointment
     */
    omit?: PatientAppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAppointmentInclude<ExtArgs> | null
    where?: PatientAppointmentWhereInput
    orderBy?: PatientAppointmentOrderByWithRelationInput | PatientAppointmentOrderByWithRelationInput[]
    cursor?: PatientAppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientAppointmentScalarFieldEnum | PatientAppointmentScalarFieldEnum[]
  }

  /**
   * PatientProfile.addresses
   */
  export type PatientProfile$addressesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    cursor?: AddressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * PatientProfile.contacts
   */
  export type PatientProfile$contactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    cursor?: ContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * PatientProfile.employments
   */
  export type PatientProfile$employmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
    where?: EmploymentWhereInput
    orderBy?: EmploymentOrderByWithRelationInput | EmploymentOrderByWithRelationInput[]
    cursor?: EmploymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmploymentScalarFieldEnum | EmploymentScalarFieldEnum[]
  }

  /**
   * PatientProfile.emergencyContacts
   */
  export type PatientProfile$emergencyContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
    where?: EmergencyContactWhereInput
    orderBy?: EmergencyContactOrderByWithRelationInput | EmergencyContactOrderByWithRelationInput[]
    cursor?: EmergencyContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmergencyContactScalarFieldEnum | EmergencyContactScalarFieldEnum[]
  }

  /**
   * PatientProfile.medicalRecordRequests
   */
  export type PatientProfile$medicalRecordRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecordRequest
     */
    select?: MedicalRecordRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecordRequest
     */
    omit?: MedicalRecordRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordRequestInclude<ExtArgs> | null
    where?: MedicalRecordRequestWhereInput
    orderBy?: MedicalRecordRequestOrderByWithRelationInput | MedicalRecordRequestOrderByWithRelationInput[]
    cursor?: MedicalRecordRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalRecordRequestScalarFieldEnum | MedicalRecordRequestScalarFieldEnum[]
  }

  /**
   * PatientProfile.consent
   */
  export type PatientProfile$consentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consent
     */
    select?: ConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consent
     */
    omit?: ConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentInclude<ExtArgs> | null
    where?: ConsentWhereInput
  }

  /**
   * PatientProfile without action
   */
  export type PatientProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientProfile
     */
    select?: PatientProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientProfile
     */
    omit?: PatientProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientProfileInclude<ExtArgs> | null
  }


  /**
   * Model Address
   */

  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressMinAggregateOutputType = {
    id: string | null
    patientProfileId: string | null
    label: string | null
    country: string | null
    state: string | null
    zipCode: string | null
    city: string | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AddressMaxAggregateOutputType = {
    id: string | null
    patientProfileId: string | null
    label: string | null
    country: string | null
    state: string | null
    zipCode: string | null
    city: string | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AddressCountAggregateOutputType = {
    id: number
    patientProfileId: number
    label: number
    country: number
    state: number
    zipCode: number
    city: number
    address: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AddressMinAggregateInputType = {
    id?: true
    patientProfileId?: true
    label?: true
    country?: true
    state?: true
    zipCode?: true
    city?: true
    address?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AddressMaxAggregateInputType = {
    id?: true
    patientProfileId?: true
    label?: true
    country?: true
    state?: true
    zipCode?: true
    city?: true
    address?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AddressCountAggregateInputType = {
    id?: true
    patientProfileId?: true
    label?: true
    country?: true
    state?: true
    zipCode?: true
    city?: true
    address?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Address to aggregate.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithAggregationInput | AddressOrderByWithAggregationInput[]
    by: AddressScalarFieldEnum[] | AddressScalarFieldEnum
    having?: AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }

  export type AddressGroupByOutputType = {
    id: string
    patientProfileId: string
    label: string
    country: string
    state: string
    zipCode: string
    city: string
    address: string
    createdAt: Date
    updatedAt: Date
    _count: AddressCountAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type AddressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    label?: boolean
    country?: boolean
    state?: boolean
    zipCode?: boolean
    city?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    label?: boolean
    country?: boolean
    state?: boolean
    zipCode?: boolean
    city?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    label?: boolean
    country?: boolean
    state?: boolean
    zipCode?: boolean
    city?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectScalar = {
    id?: boolean
    patientProfileId?: boolean
    label?: boolean
    country?: boolean
    state?: boolean
    zipCode?: boolean
    city?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AddressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientProfileId" | "label" | "country" | "state" | "zipCode" | "city" | "address" | "createdAt" | "updatedAt", ExtArgs["result"]["address"]>
  export type AddressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }
  export type AddressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }
  export type AddressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }

  export type $AddressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Address"
    objects: {
      patientProfile: Prisma.$PatientProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientProfileId: string
      label: string
      country: string
      state: string
      zipCode: string
      city: string
      address: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["address"]>
    composites: {}
  }

  type AddressGetPayload<S extends boolean | null | undefined | AddressDefaultArgs> = $Result.GetResult<Prisma.$AddressPayload, S>

  type AddressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AddressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AddressCountAggregateInputType | true
    }

  export interface AddressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Address'], meta: { name: 'Address' } }
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AddressFindUniqueArgs>(args: SelectSubset<T, AddressFindUniqueArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Address that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AddressFindUniqueOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AddressFindUniqueOrThrowArgs>(args: SelectSubset<T, AddressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AddressFindFirstArgs>(args?: SelectSubset<T, AddressFindFirstArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Address that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AddressFindFirstOrThrowArgs>(args?: SelectSubset<T, AddressFindFirstOrThrowArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AddressFindManyArgs>(args?: SelectSubset<T, AddressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
     */
    create<T extends AddressCreateArgs>(args: SelectSubset<T, AddressCreateArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Addresses.
     * @param {AddressCreateManyArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AddressCreateManyArgs>(args?: SelectSubset<T, AddressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Addresses and returns the data saved in the database.
     * @param {AddressCreateManyAndReturnArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Addresses and only return the `id`
     * const addressWithIdOnly = await prisma.address.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AddressCreateManyAndReturnArgs>(args?: SelectSubset<T, AddressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
     */
    delete<T extends AddressDeleteArgs>(args: SelectSubset<T, AddressDeleteArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AddressUpdateArgs>(args: SelectSubset<T, AddressUpdateArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AddressDeleteManyArgs>(args?: SelectSubset<T, AddressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AddressUpdateManyArgs>(args: SelectSubset<T, AddressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses and returns the data updated in the database.
     * @param {AddressUpdateManyAndReturnArgs} args - Arguments to update many Addresses.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Addresses and only return the `id`
     * const addressWithIdOnly = await prisma.address.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AddressUpdateManyAndReturnArgs>(args: SelectSubset<T, AddressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
     */
    upsert<T extends AddressUpsertArgs>(args: SelectSubset<T, AddressUpsertArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): Prisma.PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Address model
   */
  readonly fields: AddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AddressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patientProfile<T extends PatientProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfileDefaultArgs<ExtArgs>>): Prisma__PatientProfileClient<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Address model
   */
  interface AddressFieldRefs {
    readonly id: FieldRef<"Address", 'String'>
    readonly patientProfileId: FieldRef<"Address", 'String'>
    readonly label: FieldRef<"Address", 'String'>
    readonly country: FieldRef<"Address", 'String'>
    readonly state: FieldRef<"Address", 'String'>
    readonly zipCode: FieldRef<"Address", 'String'>
    readonly city: FieldRef<"Address", 'String'>
    readonly address: FieldRef<"Address", 'String'>
    readonly createdAt: FieldRef<"Address", 'DateTime'>
    readonly updatedAt: FieldRef<"Address", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Address findUnique
   */
  export type AddressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findUniqueOrThrow
   */
  export type AddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findFirst
   */
  export type AddressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findFirstOrThrow
   */
  export type AddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findMany
   */
  export type AddressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Addresses to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address create
   */
  export type AddressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to create a Address.
     */
    data: XOR<AddressCreateInput, AddressUncheckedCreateInput>
  }

  /**
   * Address createMany
   */
  export type AddressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Address createManyAndReturn
   */
  export type AddressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Address update
   */
  export type AddressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to update a Address.
     */
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
    /**
     * Choose, which Address to update.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
    /**
     * Limit how many Addresses to update.
     */
    limit?: number
  }

  /**
   * Address updateManyAndReturn
   */
  export type AddressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
    /**
     * Limit how many Addresses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Address upsert
   */
  export type AddressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The filter to search for the Address to update in case it exists.
     */
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     */
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
  }

  /**
   * Address delete
   */
  export type AddressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter which Address to delete.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Addresses to delete
     */
    where?: AddressWhereInput
    /**
     * Limit how many Addresses to delete.
     */
    limit?: number
  }

  /**
   * Address without action
   */
  export type AddressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
  }


  /**
   * Model Contact
   */

  export type AggregateContact = {
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  export type ContactMinAggregateOutputType = {
    id: string | null
    patientProfileId: string | null
    type: $Enums.ContactType | null
    value: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContactMaxAggregateOutputType = {
    id: string | null
    patientProfileId: string | null
    type: $Enums.ContactType | null
    value: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContactCountAggregateOutputType = {
    id: number
    patientProfileId: number
    type: number
    value: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ContactMinAggregateInputType = {
    id?: true
    patientProfileId?: true
    type?: true
    value?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContactMaxAggregateInputType = {
    id?: true
    patientProfileId?: true
    type?: true
    value?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContactCountAggregateInputType = {
    id?: true
    patientProfileId?: true
    type?: true
    value?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contact to aggregate.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contacts
    **/
    _count?: true | ContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactMaxAggregateInputType
  }

  export type GetContactAggregateType<T extends ContactAggregateArgs> = {
        [P in keyof T & keyof AggregateContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact[P]>
      : GetScalarType<T[P], AggregateContact[P]>
  }




  export type ContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithAggregationInput | ContactOrderByWithAggregationInput[]
    by: ContactScalarFieldEnum[] | ContactScalarFieldEnum
    having?: ContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactCountAggregateInputType | true
    _min?: ContactMinAggregateInputType
    _max?: ContactMaxAggregateInputType
  }

  export type ContactGroupByOutputType = {
    id: string
    patientProfileId: string
    type: $Enums.ContactType
    value: string
    createdAt: Date
    updatedAt: Date
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  type GetContactGroupByPayload<T extends ContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactGroupByOutputType[P]>
            : GetScalarType<T[P], ContactGroupByOutputType[P]>
        }
      >
    >


  export type ContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    type?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    type?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    type?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectScalar = {
    id?: boolean
    patientProfileId?: boolean
    type?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ContactOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientProfileId" | "type" | "value" | "createdAt" | "updatedAt", ExtArgs["result"]["contact"]>
  export type ContactInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }
  export type ContactIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }
  export type ContactIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }

  export type $ContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contact"
    objects: {
      patientProfile: Prisma.$PatientProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientProfileId: string
      type: $Enums.ContactType
      value: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["contact"]>
    composites: {}
  }

  type ContactGetPayload<S extends boolean | null | undefined | ContactDefaultArgs> = $Result.GetResult<Prisma.$ContactPayload, S>

  type ContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactCountAggregateInputType | true
    }

  export interface ContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contact'], meta: { name: 'Contact' } }
    /**
     * Find zero or one Contact that matches the filter.
     * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactFindUniqueArgs>(args: SelectSubset<T, ContactFindUniqueArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contact that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactFindFirstArgs>(args?: SelectSubset<T, ContactFindFirstArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactFindManyArgs>(args?: SelectSubset<T, ContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     * 
     */
    create<T extends ContactCreateArgs>(args: SelectSubset<T, ContactCreateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contacts.
     * @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactCreateManyArgs>(args?: SelectSubset<T, ContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contacts and returns the data saved in the database.
     * @param {ContactCreateManyAndReturnArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     * 
     */
    delete<T extends ContactDeleteArgs>(args: SelectSubset<T, ContactDeleteArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactUpdateArgs>(args: SelectSubset<T, ContactUpdateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactDeleteManyArgs>(args?: SelectSubset<T, ContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactUpdateManyArgs>(args: SelectSubset<T, ContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts and returns the data updated in the database.
     * @param {ContactUpdateManyAndReturnArgs} args - Arguments to update many Contacts.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContactUpdateManyAndReturnArgs>(args: SelectSubset<T, ContactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
     */
    upsert<T extends ContactUpsertArgs>(args: SelectSubset<T, ContactUpsertArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contact.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends ContactCountArgs>(
      args?: Subset<T, ContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactAggregateArgs>(args: Subset<T, ContactAggregateArgs>): Prisma.PrismaPromise<GetContactAggregateType<T>>

    /**
     * Group by Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactGroupByArgs['orderBy'] }
        : { orderBy?: ContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contact model
   */
  readonly fields: ContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patientProfile<T extends PatientProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfileDefaultArgs<ExtArgs>>): Prisma__PatientProfileClient<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contact model
   */
  interface ContactFieldRefs {
    readonly id: FieldRef<"Contact", 'String'>
    readonly patientProfileId: FieldRef<"Contact", 'String'>
    readonly type: FieldRef<"Contact", 'ContactType'>
    readonly value: FieldRef<"Contact", 'String'>
    readonly createdAt: FieldRef<"Contact", 'DateTime'>
    readonly updatedAt: FieldRef<"Contact", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Contact findUnique
   */
  export type ContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findUniqueOrThrow
   */
  export type ContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findFirst
   */
  export type ContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findFirstOrThrow
   */
  export type ContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findMany
   */
  export type ContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact create
   */
  export type ContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to create a Contact.
     */
    data: XOR<ContactCreateInput, ContactUncheckedCreateInput>
  }

  /**
   * Contact createMany
   */
  export type ContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contact createManyAndReturn
   */
  export type ContactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contact update
   */
  export type ContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to update a Contact.
     */
    data: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
    /**
     * Choose, which Contact to update.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
  }

  /**
   * Contact updateManyAndReturn
   */
  export type ContactUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contact upsert
   */
  export type ContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The filter to search for the Contact to update in case it exists.
     */
    where: ContactWhereUniqueInput
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
     */
    create: XOR<ContactCreateInput, ContactUncheckedCreateInput>
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
  }

  /**
   * Contact delete
   */
  export type ContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter which Contact to delete.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contacts to delete
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to delete.
     */
    limit?: number
  }

  /**
   * Contact without action
   */
  export type ContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
  }


  /**
   * Model Employment
   */

  export type AggregateEmployment = {
    _count: EmploymentCountAggregateOutputType | null
    _min: EmploymentMinAggregateOutputType | null
    _max: EmploymentMaxAggregateOutputType | null
  }

  export type EmploymentMinAggregateOutputType = {
    id: string | null
    patientProfileId: string | null
    employer: string | null
    contactPerson: string | null
    address: string | null
    phone: string | null
    email: string | null
    website: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmploymentMaxAggregateOutputType = {
    id: string | null
    patientProfileId: string | null
    employer: string | null
    contactPerson: string | null
    address: string | null
    phone: string | null
    email: string | null
    website: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmploymentCountAggregateOutputType = {
    id: number
    patientProfileId: number
    employer: number
    contactPerson: number
    address: number
    phone: number
    email: number
    website: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmploymentMinAggregateInputType = {
    id?: true
    patientProfileId?: true
    employer?: true
    contactPerson?: true
    address?: true
    phone?: true
    email?: true
    website?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmploymentMaxAggregateInputType = {
    id?: true
    patientProfileId?: true
    employer?: true
    contactPerson?: true
    address?: true
    phone?: true
    email?: true
    website?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmploymentCountAggregateInputType = {
    id?: true
    patientProfileId?: true
    employer?: true
    contactPerson?: true
    address?: true
    phone?: true
    email?: true
    website?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmploymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employment to aggregate.
     */
    where?: EmploymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employments to fetch.
     */
    orderBy?: EmploymentOrderByWithRelationInput | EmploymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmploymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employments
    **/
    _count?: true | EmploymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmploymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmploymentMaxAggregateInputType
  }

  export type GetEmploymentAggregateType<T extends EmploymentAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployment[P]>
      : GetScalarType<T[P], AggregateEmployment[P]>
  }




  export type EmploymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmploymentWhereInput
    orderBy?: EmploymentOrderByWithAggregationInput | EmploymentOrderByWithAggregationInput[]
    by: EmploymentScalarFieldEnum[] | EmploymentScalarFieldEnum
    having?: EmploymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmploymentCountAggregateInputType | true
    _min?: EmploymentMinAggregateInputType
    _max?: EmploymentMaxAggregateInputType
  }

  export type EmploymentGroupByOutputType = {
    id: string
    patientProfileId: string
    employer: string
    contactPerson: string | null
    address: string | null
    phone: string | null
    email: string | null
    website: string | null
    createdAt: Date
    updatedAt: Date
    _count: EmploymentCountAggregateOutputType | null
    _min: EmploymentMinAggregateOutputType | null
    _max: EmploymentMaxAggregateOutputType | null
  }

  type GetEmploymentGroupByPayload<T extends EmploymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmploymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmploymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmploymentGroupByOutputType[P]>
            : GetScalarType<T[P], EmploymentGroupByOutputType[P]>
        }
      >
    >


  export type EmploymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    employer?: boolean
    contactPerson?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    website?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employment"]>

  export type EmploymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    employer?: boolean
    contactPerson?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    website?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employment"]>

  export type EmploymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    employer?: boolean
    contactPerson?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    website?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employment"]>

  export type EmploymentSelectScalar = {
    id?: boolean
    patientProfileId?: boolean
    employer?: boolean
    contactPerson?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    website?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmploymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientProfileId" | "employer" | "contactPerson" | "address" | "phone" | "email" | "website" | "createdAt" | "updatedAt", ExtArgs["result"]["employment"]>
  export type EmploymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }
  export type EmploymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }
  export type EmploymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }

  export type $EmploymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employment"
    objects: {
      patientProfile: Prisma.$PatientProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientProfileId: string
      employer: string
      contactPerson: string | null
      address: string | null
      phone: string | null
      email: string | null
      website: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["employment"]>
    composites: {}
  }

  type EmploymentGetPayload<S extends boolean | null | undefined | EmploymentDefaultArgs> = $Result.GetResult<Prisma.$EmploymentPayload, S>

  type EmploymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmploymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmploymentCountAggregateInputType | true
    }

  export interface EmploymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employment'], meta: { name: 'Employment' } }
    /**
     * Find zero or one Employment that matches the filter.
     * @param {EmploymentFindUniqueArgs} args - Arguments to find a Employment
     * @example
     * // Get one Employment
     * const employment = await prisma.employment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmploymentFindUniqueArgs>(args: SelectSubset<T, EmploymentFindUniqueArgs<ExtArgs>>): Prisma__EmploymentClient<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Employment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmploymentFindUniqueOrThrowArgs} args - Arguments to find a Employment
     * @example
     * // Get one Employment
     * const employment = await prisma.employment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmploymentFindUniqueOrThrowArgs>(args: SelectSubset<T, EmploymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmploymentClient<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmploymentFindFirstArgs} args - Arguments to find a Employment
     * @example
     * // Get one Employment
     * const employment = await prisma.employment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmploymentFindFirstArgs>(args?: SelectSubset<T, EmploymentFindFirstArgs<ExtArgs>>): Prisma__EmploymentClient<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmploymentFindFirstOrThrowArgs} args - Arguments to find a Employment
     * @example
     * // Get one Employment
     * const employment = await prisma.employment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmploymentFindFirstOrThrowArgs>(args?: SelectSubset<T, EmploymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmploymentClient<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Employments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmploymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employments
     * const employments = await prisma.employment.findMany()
     * 
     * // Get first 10 Employments
     * const employments = await prisma.employment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employmentWithIdOnly = await prisma.employment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmploymentFindManyArgs>(args?: SelectSubset<T, EmploymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Employment.
     * @param {EmploymentCreateArgs} args - Arguments to create a Employment.
     * @example
     * // Create one Employment
     * const Employment = await prisma.employment.create({
     *   data: {
     *     // ... data to create a Employment
     *   }
     * })
     * 
     */
    create<T extends EmploymentCreateArgs>(args: SelectSubset<T, EmploymentCreateArgs<ExtArgs>>): Prisma__EmploymentClient<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Employments.
     * @param {EmploymentCreateManyArgs} args - Arguments to create many Employments.
     * @example
     * // Create many Employments
     * const employment = await prisma.employment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmploymentCreateManyArgs>(args?: SelectSubset<T, EmploymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Employments and returns the data saved in the database.
     * @param {EmploymentCreateManyAndReturnArgs} args - Arguments to create many Employments.
     * @example
     * // Create many Employments
     * const employment = await prisma.employment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Employments and only return the `id`
     * const employmentWithIdOnly = await prisma.employment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmploymentCreateManyAndReturnArgs>(args?: SelectSubset<T, EmploymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Employment.
     * @param {EmploymentDeleteArgs} args - Arguments to delete one Employment.
     * @example
     * // Delete one Employment
     * const Employment = await prisma.employment.delete({
     *   where: {
     *     // ... filter to delete one Employment
     *   }
     * })
     * 
     */
    delete<T extends EmploymentDeleteArgs>(args: SelectSubset<T, EmploymentDeleteArgs<ExtArgs>>): Prisma__EmploymentClient<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Employment.
     * @param {EmploymentUpdateArgs} args - Arguments to update one Employment.
     * @example
     * // Update one Employment
     * const employment = await prisma.employment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmploymentUpdateArgs>(args: SelectSubset<T, EmploymentUpdateArgs<ExtArgs>>): Prisma__EmploymentClient<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Employments.
     * @param {EmploymentDeleteManyArgs} args - Arguments to filter Employments to delete.
     * @example
     * // Delete a few Employments
     * const { count } = await prisma.employment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmploymentDeleteManyArgs>(args?: SelectSubset<T, EmploymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmploymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employments
     * const employment = await prisma.employment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmploymentUpdateManyArgs>(args: SelectSubset<T, EmploymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employments and returns the data updated in the database.
     * @param {EmploymentUpdateManyAndReturnArgs} args - Arguments to update many Employments.
     * @example
     * // Update many Employments
     * const employment = await prisma.employment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Employments and only return the `id`
     * const employmentWithIdOnly = await prisma.employment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmploymentUpdateManyAndReturnArgs>(args: SelectSubset<T, EmploymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Employment.
     * @param {EmploymentUpsertArgs} args - Arguments to update or create a Employment.
     * @example
     * // Update or create a Employment
     * const employment = await prisma.employment.upsert({
     *   create: {
     *     // ... data to create a Employment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employment we want to update
     *   }
     * })
     */
    upsert<T extends EmploymentUpsertArgs>(args: SelectSubset<T, EmploymentUpsertArgs<ExtArgs>>): Prisma__EmploymentClient<$Result.GetResult<Prisma.$EmploymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Employments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmploymentCountArgs} args - Arguments to filter Employments to count.
     * @example
     * // Count the number of Employments
     * const count = await prisma.employment.count({
     *   where: {
     *     // ... the filter for the Employments we want to count
     *   }
     * })
    **/
    count<T extends EmploymentCountArgs>(
      args?: Subset<T, EmploymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmploymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmploymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmploymentAggregateArgs>(args: Subset<T, EmploymentAggregateArgs>): Prisma.PrismaPromise<GetEmploymentAggregateType<T>>

    /**
     * Group by Employment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmploymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmploymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmploymentGroupByArgs['orderBy'] }
        : { orderBy?: EmploymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmploymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmploymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employment model
   */
  readonly fields: EmploymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmploymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patientProfile<T extends PatientProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfileDefaultArgs<ExtArgs>>): Prisma__PatientProfileClient<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Employment model
   */
  interface EmploymentFieldRefs {
    readonly id: FieldRef<"Employment", 'String'>
    readonly patientProfileId: FieldRef<"Employment", 'String'>
    readonly employer: FieldRef<"Employment", 'String'>
    readonly contactPerson: FieldRef<"Employment", 'String'>
    readonly address: FieldRef<"Employment", 'String'>
    readonly phone: FieldRef<"Employment", 'String'>
    readonly email: FieldRef<"Employment", 'String'>
    readonly website: FieldRef<"Employment", 'String'>
    readonly createdAt: FieldRef<"Employment", 'DateTime'>
    readonly updatedAt: FieldRef<"Employment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Employment findUnique
   */
  export type EmploymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
    /**
     * Filter, which Employment to fetch.
     */
    where: EmploymentWhereUniqueInput
  }

  /**
   * Employment findUniqueOrThrow
   */
  export type EmploymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
    /**
     * Filter, which Employment to fetch.
     */
    where: EmploymentWhereUniqueInput
  }

  /**
   * Employment findFirst
   */
  export type EmploymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
    /**
     * Filter, which Employment to fetch.
     */
    where?: EmploymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employments to fetch.
     */
    orderBy?: EmploymentOrderByWithRelationInput | EmploymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employments.
     */
    cursor?: EmploymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employments.
     */
    distinct?: EmploymentScalarFieldEnum | EmploymentScalarFieldEnum[]
  }

  /**
   * Employment findFirstOrThrow
   */
  export type EmploymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
    /**
     * Filter, which Employment to fetch.
     */
    where?: EmploymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employments to fetch.
     */
    orderBy?: EmploymentOrderByWithRelationInput | EmploymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employments.
     */
    cursor?: EmploymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employments.
     */
    distinct?: EmploymentScalarFieldEnum | EmploymentScalarFieldEnum[]
  }

  /**
   * Employment findMany
   */
  export type EmploymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
    /**
     * Filter, which Employments to fetch.
     */
    where?: EmploymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employments to fetch.
     */
    orderBy?: EmploymentOrderByWithRelationInput | EmploymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employments.
     */
    cursor?: EmploymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employments.
     */
    skip?: number
    distinct?: EmploymentScalarFieldEnum | EmploymentScalarFieldEnum[]
  }

  /**
   * Employment create
   */
  export type EmploymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Employment.
     */
    data: XOR<EmploymentCreateInput, EmploymentUncheckedCreateInput>
  }

  /**
   * Employment createMany
   */
  export type EmploymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employments.
     */
    data: EmploymentCreateManyInput | EmploymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employment createManyAndReturn
   */
  export type EmploymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * The data used to create many Employments.
     */
    data: EmploymentCreateManyInput | EmploymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Employment update
   */
  export type EmploymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Employment.
     */
    data: XOR<EmploymentUpdateInput, EmploymentUncheckedUpdateInput>
    /**
     * Choose, which Employment to update.
     */
    where: EmploymentWhereUniqueInput
  }

  /**
   * Employment updateMany
   */
  export type EmploymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employments.
     */
    data: XOR<EmploymentUpdateManyMutationInput, EmploymentUncheckedUpdateManyInput>
    /**
     * Filter which Employments to update
     */
    where?: EmploymentWhereInput
    /**
     * Limit how many Employments to update.
     */
    limit?: number
  }

  /**
   * Employment updateManyAndReturn
   */
  export type EmploymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * The data used to update Employments.
     */
    data: XOR<EmploymentUpdateManyMutationInput, EmploymentUncheckedUpdateManyInput>
    /**
     * Filter which Employments to update
     */
    where?: EmploymentWhereInput
    /**
     * Limit how many Employments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Employment upsert
   */
  export type EmploymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Employment to update in case it exists.
     */
    where: EmploymentWhereUniqueInput
    /**
     * In case the Employment found by the `where` argument doesn't exist, create a new Employment with this data.
     */
    create: XOR<EmploymentCreateInput, EmploymentUncheckedCreateInput>
    /**
     * In case the Employment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmploymentUpdateInput, EmploymentUncheckedUpdateInput>
  }

  /**
   * Employment delete
   */
  export type EmploymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
    /**
     * Filter which Employment to delete.
     */
    where: EmploymentWhereUniqueInput
  }

  /**
   * Employment deleteMany
   */
  export type EmploymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employments to delete
     */
    where?: EmploymentWhereInput
    /**
     * Limit how many Employments to delete.
     */
    limit?: number
  }

  /**
   * Employment without action
   */
  export type EmploymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employment
     */
    select?: EmploymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employment
     */
    omit?: EmploymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmploymentInclude<ExtArgs> | null
  }


  /**
   * Model EmergencyContact
   */

  export type AggregateEmergencyContact = {
    _count: EmergencyContactCountAggregateOutputType | null
    _min: EmergencyContactMinAggregateOutputType | null
    _max: EmergencyContactMaxAggregateOutputType | null
  }

  export type EmergencyContactMinAggregateOutputType = {
    id: string | null
    patientProfileId: string | null
    lastName: string | null
    firstName: string | null
    middleName: string | null
    suffix: string | null
    relationship: $Enums.Relationship | null
    phone: string | null
    email: string | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmergencyContactMaxAggregateOutputType = {
    id: string | null
    patientProfileId: string | null
    lastName: string | null
    firstName: string | null
    middleName: string | null
    suffix: string | null
    relationship: $Enums.Relationship | null
    phone: string | null
    email: string | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmergencyContactCountAggregateOutputType = {
    id: number
    patientProfileId: number
    lastName: number
    firstName: number
    middleName: number
    suffix: number
    relationship: number
    phone: number
    email: number
    address: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmergencyContactMinAggregateInputType = {
    id?: true
    patientProfileId?: true
    lastName?: true
    firstName?: true
    middleName?: true
    suffix?: true
    relationship?: true
    phone?: true
    email?: true
    address?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmergencyContactMaxAggregateInputType = {
    id?: true
    patientProfileId?: true
    lastName?: true
    firstName?: true
    middleName?: true
    suffix?: true
    relationship?: true
    phone?: true
    email?: true
    address?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmergencyContactCountAggregateInputType = {
    id?: true
    patientProfileId?: true
    lastName?: true
    firstName?: true
    middleName?: true
    suffix?: true
    relationship?: true
    phone?: true
    email?: true
    address?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmergencyContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmergencyContact to aggregate.
     */
    where?: EmergencyContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmergencyContacts to fetch.
     */
    orderBy?: EmergencyContactOrderByWithRelationInput | EmergencyContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmergencyContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmergencyContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmergencyContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmergencyContacts
    **/
    _count?: true | EmergencyContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmergencyContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmergencyContactMaxAggregateInputType
  }

  export type GetEmergencyContactAggregateType<T extends EmergencyContactAggregateArgs> = {
        [P in keyof T & keyof AggregateEmergencyContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmergencyContact[P]>
      : GetScalarType<T[P], AggregateEmergencyContact[P]>
  }




  export type EmergencyContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmergencyContactWhereInput
    orderBy?: EmergencyContactOrderByWithAggregationInput | EmergencyContactOrderByWithAggregationInput[]
    by: EmergencyContactScalarFieldEnum[] | EmergencyContactScalarFieldEnum
    having?: EmergencyContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmergencyContactCountAggregateInputType | true
    _min?: EmergencyContactMinAggregateInputType
    _max?: EmergencyContactMaxAggregateInputType
  }

  export type EmergencyContactGroupByOutputType = {
    id: string
    patientProfileId: string
    lastName: string
    firstName: string
    middleName: string | null
    suffix: string | null
    relationship: $Enums.Relationship
    phone: string | null
    email: string | null
    address: string | null
    createdAt: Date
    updatedAt: Date
    _count: EmergencyContactCountAggregateOutputType | null
    _min: EmergencyContactMinAggregateOutputType | null
    _max: EmergencyContactMaxAggregateOutputType | null
  }

  type GetEmergencyContactGroupByPayload<T extends EmergencyContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmergencyContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmergencyContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmergencyContactGroupByOutputType[P]>
            : GetScalarType<T[P], EmergencyContactGroupByOutputType[P]>
        }
      >
    >


  export type EmergencyContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    lastName?: boolean
    firstName?: boolean
    middleName?: boolean
    suffix?: boolean
    relationship?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emergencyContact"]>

  export type EmergencyContactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    lastName?: boolean
    firstName?: boolean
    middleName?: boolean
    suffix?: boolean
    relationship?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emergencyContact"]>

  export type EmergencyContactSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    lastName?: boolean
    firstName?: boolean
    middleName?: boolean
    suffix?: boolean
    relationship?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emergencyContact"]>

  export type EmergencyContactSelectScalar = {
    id?: boolean
    patientProfileId?: boolean
    lastName?: boolean
    firstName?: boolean
    middleName?: boolean
    suffix?: boolean
    relationship?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmergencyContactOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientProfileId" | "lastName" | "firstName" | "middleName" | "suffix" | "relationship" | "phone" | "email" | "address" | "createdAt" | "updatedAt", ExtArgs["result"]["emergencyContact"]>
  export type EmergencyContactInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }
  export type EmergencyContactIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }
  export type EmergencyContactIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }

  export type $EmergencyContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmergencyContact"
    objects: {
      patientProfile: Prisma.$PatientProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientProfileId: string
      lastName: string
      firstName: string
      middleName: string | null
      suffix: string | null
      relationship: $Enums.Relationship
      phone: string | null
      email: string | null
      address: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["emergencyContact"]>
    composites: {}
  }

  type EmergencyContactGetPayload<S extends boolean | null | undefined | EmergencyContactDefaultArgs> = $Result.GetResult<Prisma.$EmergencyContactPayload, S>

  type EmergencyContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmergencyContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmergencyContactCountAggregateInputType | true
    }

  export interface EmergencyContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmergencyContact'], meta: { name: 'EmergencyContact' } }
    /**
     * Find zero or one EmergencyContact that matches the filter.
     * @param {EmergencyContactFindUniqueArgs} args - Arguments to find a EmergencyContact
     * @example
     * // Get one EmergencyContact
     * const emergencyContact = await prisma.emergencyContact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmergencyContactFindUniqueArgs>(args: SelectSubset<T, EmergencyContactFindUniqueArgs<ExtArgs>>): Prisma__EmergencyContactClient<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmergencyContact that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmergencyContactFindUniqueOrThrowArgs} args - Arguments to find a EmergencyContact
     * @example
     * // Get one EmergencyContact
     * const emergencyContact = await prisma.emergencyContact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmergencyContactFindUniqueOrThrowArgs>(args: SelectSubset<T, EmergencyContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmergencyContactClient<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmergencyContact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmergencyContactFindFirstArgs} args - Arguments to find a EmergencyContact
     * @example
     * // Get one EmergencyContact
     * const emergencyContact = await prisma.emergencyContact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmergencyContactFindFirstArgs>(args?: SelectSubset<T, EmergencyContactFindFirstArgs<ExtArgs>>): Prisma__EmergencyContactClient<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmergencyContact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmergencyContactFindFirstOrThrowArgs} args - Arguments to find a EmergencyContact
     * @example
     * // Get one EmergencyContact
     * const emergencyContact = await prisma.emergencyContact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmergencyContactFindFirstOrThrowArgs>(args?: SelectSubset<T, EmergencyContactFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmergencyContactClient<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmergencyContacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmergencyContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmergencyContacts
     * const emergencyContacts = await prisma.emergencyContact.findMany()
     * 
     * // Get first 10 EmergencyContacts
     * const emergencyContacts = await prisma.emergencyContact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emergencyContactWithIdOnly = await prisma.emergencyContact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmergencyContactFindManyArgs>(args?: SelectSubset<T, EmergencyContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmergencyContact.
     * @param {EmergencyContactCreateArgs} args - Arguments to create a EmergencyContact.
     * @example
     * // Create one EmergencyContact
     * const EmergencyContact = await prisma.emergencyContact.create({
     *   data: {
     *     // ... data to create a EmergencyContact
     *   }
     * })
     * 
     */
    create<T extends EmergencyContactCreateArgs>(args: SelectSubset<T, EmergencyContactCreateArgs<ExtArgs>>): Prisma__EmergencyContactClient<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmergencyContacts.
     * @param {EmergencyContactCreateManyArgs} args - Arguments to create many EmergencyContacts.
     * @example
     * // Create many EmergencyContacts
     * const emergencyContact = await prisma.emergencyContact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmergencyContactCreateManyArgs>(args?: SelectSubset<T, EmergencyContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmergencyContacts and returns the data saved in the database.
     * @param {EmergencyContactCreateManyAndReturnArgs} args - Arguments to create many EmergencyContacts.
     * @example
     * // Create many EmergencyContacts
     * const emergencyContact = await prisma.emergencyContact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmergencyContacts and only return the `id`
     * const emergencyContactWithIdOnly = await prisma.emergencyContact.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmergencyContactCreateManyAndReturnArgs>(args?: SelectSubset<T, EmergencyContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmergencyContact.
     * @param {EmergencyContactDeleteArgs} args - Arguments to delete one EmergencyContact.
     * @example
     * // Delete one EmergencyContact
     * const EmergencyContact = await prisma.emergencyContact.delete({
     *   where: {
     *     // ... filter to delete one EmergencyContact
     *   }
     * })
     * 
     */
    delete<T extends EmergencyContactDeleteArgs>(args: SelectSubset<T, EmergencyContactDeleteArgs<ExtArgs>>): Prisma__EmergencyContactClient<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmergencyContact.
     * @param {EmergencyContactUpdateArgs} args - Arguments to update one EmergencyContact.
     * @example
     * // Update one EmergencyContact
     * const emergencyContact = await prisma.emergencyContact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmergencyContactUpdateArgs>(args: SelectSubset<T, EmergencyContactUpdateArgs<ExtArgs>>): Prisma__EmergencyContactClient<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmergencyContacts.
     * @param {EmergencyContactDeleteManyArgs} args - Arguments to filter EmergencyContacts to delete.
     * @example
     * // Delete a few EmergencyContacts
     * const { count } = await prisma.emergencyContact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmergencyContactDeleteManyArgs>(args?: SelectSubset<T, EmergencyContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmergencyContacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmergencyContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmergencyContacts
     * const emergencyContact = await prisma.emergencyContact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmergencyContactUpdateManyArgs>(args: SelectSubset<T, EmergencyContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmergencyContacts and returns the data updated in the database.
     * @param {EmergencyContactUpdateManyAndReturnArgs} args - Arguments to update many EmergencyContacts.
     * @example
     * // Update many EmergencyContacts
     * const emergencyContact = await prisma.emergencyContact.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmergencyContacts and only return the `id`
     * const emergencyContactWithIdOnly = await prisma.emergencyContact.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmergencyContactUpdateManyAndReturnArgs>(args: SelectSubset<T, EmergencyContactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmergencyContact.
     * @param {EmergencyContactUpsertArgs} args - Arguments to update or create a EmergencyContact.
     * @example
     * // Update or create a EmergencyContact
     * const emergencyContact = await prisma.emergencyContact.upsert({
     *   create: {
     *     // ... data to create a EmergencyContact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmergencyContact we want to update
     *   }
     * })
     */
    upsert<T extends EmergencyContactUpsertArgs>(args: SelectSubset<T, EmergencyContactUpsertArgs<ExtArgs>>): Prisma__EmergencyContactClient<$Result.GetResult<Prisma.$EmergencyContactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmergencyContacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmergencyContactCountArgs} args - Arguments to filter EmergencyContacts to count.
     * @example
     * // Count the number of EmergencyContacts
     * const count = await prisma.emergencyContact.count({
     *   where: {
     *     // ... the filter for the EmergencyContacts we want to count
     *   }
     * })
    **/
    count<T extends EmergencyContactCountArgs>(
      args?: Subset<T, EmergencyContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmergencyContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmergencyContact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmergencyContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmergencyContactAggregateArgs>(args: Subset<T, EmergencyContactAggregateArgs>): Prisma.PrismaPromise<GetEmergencyContactAggregateType<T>>

    /**
     * Group by EmergencyContact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmergencyContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmergencyContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmergencyContactGroupByArgs['orderBy'] }
        : { orderBy?: EmergencyContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmergencyContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmergencyContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmergencyContact model
   */
  readonly fields: EmergencyContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmergencyContact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmergencyContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patientProfile<T extends PatientProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfileDefaultArgs<ExtArgs>>): Prisma__PatientProfileClient<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmergencyContact model
   */
  interface EmergencyContactFieldRefs {
    readonly id: FieldRef<"EmergencyContact", 'String'>
    readonly patientProfileId: FieldRef<"EmergencyContact", 'String'>
    readonly lastName: FieldRef<"EmergencyContact", 'String'>
    readonly firstName: FieldRef<"EmergencyContact", 'String'>
    readonly middleName: FieldRef<"EmergencyContact", 'String'>
    readonly suffix: FieldRef<"EmergencyContact", 'String'>
    readonly relationship: FieldRef<"EmergencyContact", 'Relationship'>
    readonly phone: FieldRef<"EmergencyContact", 'String'>
    readonly email: FieldRef<"EmergencyContact", 'String'>
    readonly address: FieldRef<"EmergencyContact", 'String'>
    readonly createdAt: FieldRef<"EmergencyContact", 'DateTime'>
    readonly updatedAt: FieldRef<"EmergencyContact", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmergencyContact findUnique
   */
  export type EmergencyContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
    /**
     * Filter, which EmergencyContact to fetch.
     */
    where: EmergencyContactWhereUniqueInput
  }

  /**
   * EmergencyContact findUniqueOrThrow
   */
  export type EmergencyContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
    /**
     * Filter, which EmergencyContact to fetch.
     */
    where: EmergencyContactWhereUniqueInput
  }

  /**
   * EmergencyContact findFirst
   */
  export type EmergencyContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
    /**
     * Filter, which EmergencyContact to fetch.
     */
    where?: EmergencyContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmergencyContacts to fetch.
     */
    orderBy?: EmergencyContactOrderByWithRelationInput | EmergencyContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmergencyContacts.
     */
    cursor?: EmergencyContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmergencyContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmergencyContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmergencyContacts.
     */
    distinct?: EmergencyContactScalarFieldEnum | EmergencyContactScalarFieldEnum[]
  }

  /**
   * EmergencyContact findFirstOrThrow
   */
  export type EmergencyContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
    /**
     * Filter, which EmergencyContact to fetch.
     */
    where?: EmergencyContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmergencyContacts to fetch.
     */
    orderBy?: EmergencyContactOrderByWithRelationInput | EmergencyContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmergencyContacts.
     */
    cursor?: EmergencyContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmergencyContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmergencyContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmergencyContacts.
     */
    distinct?: EmergencyContactScalarFieldEnum | EmergencyContactScalarFieldEnum[]
  }

  /**
   * EmergencyContact findMany
   */
  export type EmergencyContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
    /**
     * Filter, which EmergencyContacts to fetch.
     */
    where?: EmergencyContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmergencyContacts to fetch.
     */
    orderBy?: EmergencyContactOrderByWithRelationInput | EmergencyContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmergencyContacts.
     */
    cursor?: EmergencyContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmergencyContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmergencyContacts.
     */
    skip?: number
    distinct?: EmergencyContactScalarFieldEnum | EmergencyContactScalarFieldEnum[]
  }

  /**
   * EmergencyContact create
   */
  export type EmergencyContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
    /**
     * The data needed to create a EmergencyContact.
     */
    data: XOR<EmergencyContactCreateInput, EmergencyContactUncheckedCreateInput>
  }

  /**
   * EmergencyContact createMany
   */
  export type EmergencyContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmergencyContacts.
     */
    data: EmergencyContactCreateManyInput | EmergencyContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmergencyContact createManyAndReturn
   */
  export type EmergencyContactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * The data used to create many EmergencyContacts.
     */
    data: EmergencyContactCreateManyInput | EmergencyContactCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmergencyContact update
   */
  export type EmergencyContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
    /**
     * The data needed to update a EmergencyContact.
     */
    data: XOR<EmergencyContactUpdateInput, EmergencyContactUncheckedUpdateInput>
    /**
     * Choose, which EmergencyContact to update.
     */
    where: EmergencyContactWhereUniqueInput
  }

  /**
   * EmergencyContact updateMany
   */
  export type EmergencyContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmergencyContacts.
     */
    data: XOR<EmergencyContactUpdateManyMutationInput, EmergencyContactUncheckedUpdateManyInput>
    /**
     * Filter which EmergencyContacts to update
     */
    where?: EmergencyContactWhereInput
    /**
     * Limit how many EmergencyContacts to update.
     */
    limit?: number
  }

  /**
   * EmergencyContact updateManyAndReturn
   */
  export type EmergencyContactUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * The data used to update EmergencyContacts.
     */
    data: XOR<EmergencyContactUpdateManyMutationInput, EmergencyContactUncheckedUpdateManyInput>
    /**
     * Filter which EmergencyContacts to update
     */
    where?: EmergencyContactWhereInput
    /**
     * Limit how many EmergencyContacts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmergencyContact upsert
   */
  export type EmergencyContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
    /**
     * The filter to search for the EmergencyContact to update in case it exists.
     */
    where: EmergencyContactWhereUniqueInput
    /**
     * In case the EmergencyContact found by the `where` argument doesn't exist, create a new EmergencyContact with this data.
     */
    create: XOR<EmergencyContactCreateInput, EmergencyContactUncheckedCreateInput>
    /**
     * In case the EmergencyContact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmergencyContactUpdateInput, EmergencyContactUncheckedUpdateInput>
  }

  /**
   * EmergencyContact delete
   */
  export type EmergencyContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
    /**
     * Filter which EmergencyContact to delete.
     */
    where: EmergencyContactWhereUniqueInput
  }

  /**
   * EmergencyContact deleteMany
   */
  export type EmergencyContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmergencyContacts to delete
     */
    where?: EmergencyContactWhereInput
    /**
     * Limit how many EmergencyContacts to delete.
     */
    limit?: number
  }

  /**
   * EmergencyContact without action
   */
  export type EmergencyContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmergencyContact
     */
    select?: EmergencyContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmergencyContact
     */
    omit?: EmergencyContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmergencyContactInclude<ExtArgs> | null
  }


  /**
   * Model Consent
   */

  export type AggregateConsent = {
    _count: ConsentCountAggregateOutputType | null
    _min: ConsentMinAggregateOutputType | null
    _max: ConsentMaxAggregateOutputType | null
  }

  export type ConsentMinAggregateOutputType = {
    id: string | null
    patientProfileId: string | null
    documentUrl: string | null
    signature: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConsentMaxAggregateOutputType = {
    id: string | null
    patientProfileId: string | null
    documentUrl: string | null
    signature: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConsentCountAggregateOutputType = {
    id: number
    patientProfileId: number
    documentUrl: number
    signature: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ConsentMinAggregateInputType = {
    id?: true
    patientProfileId?: true
    documentUrl?: true
    signature?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConsentMaxAggregateInputType = {
    id?: true
    patientProfileId?: true
    documentUrl?: true
    signature?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConsentCountAggregateInputType = {
    id?: true
    patientProfileId?: true
    documentUrl?: true
    signature?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ConsentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consent to aggregate.
     */
    where?: ConsentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consents to fetch.
     */
    orderBy?: ConsentOrderByWithRelationInput | ConsentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Consents
    **/
    _count?: true | ConsentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsentMaxAggregateInputType
  }

  export type GetConsentAggregateType<T extends ConsentAggregateArgs> = {
        [P in keyof T & keyof AggregateConsent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsent[P]>
      : GetScalarType<T[P], AggregateConsent[P]>
  }




  export type ConsentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsentWhereInput
    orderBy?: ConsentOrderByWithAggregationInput | ConsentOrderByWithAggregationInput[]
    by: ConsentScalarFieldEnum[] | ConsentScalarFieldEnum
    having?: ConsentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsentCountAggregateInputType | true
    _min?: ConsentMinAggregateInputType
    _max?: ConsentMaxAggregateInputType
  }

  export type ConsentGroupByOutputType = {
    id: string
    patientProfileId: string
    documentUrl: string
    signature: string
    createdAt: Date
    updatedAt: Date
    _count: ConsentCountAggregateOutputType | null
    _min: ConsentMinAggregateOutputType | null
    _max: ConsentMaxAggregateOutputType | null
  }

  type GetConsentGroupByPayload<T extends ConsentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsentGroupByOutputType[P]>
            : GetScalarType<T[P], ConsentGroupByOutputType[P]>
        }
      >
    >


  export type ConsentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    documentUrl?: boolean
    signature?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consent"]>

  export type ConsentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    documentUrl?: boolean
    signature?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consent"]>

  export type ConsentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    documentUrl?: boolean
    signature?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consent"]>

  export type ConsentSelectScalar = {
    id?: boolean
    patientProfileId?: boolean
    documentUrl?: boolean
    signature?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ConsentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientProfileId" | "documentUrl" | "signature" | "createdAt" | "updatedAt", ExtArgs["result"]["consent"]>
  export type ConsentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }
  export type ConsentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }
  export type ConsentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
  }

  export type $ConsentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Consent"
    objects: {
      patientProfile: Prisma.$PatientProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientProfileId: string
      documentUrl: string
      signature: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["consent"]>
    composites: {}
  }

  type ConsentGetPayload<S extends boolean | null | undefined | ConsentDefaultArgs> = $Result.GetResult<Prisma.$ConsentPayload, S>

  type ConsentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConsentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConsentCountAggregateInputType | true
    }

  export interface ConsentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Consent'], meta: { name: 'Consent' } }
    /**
     * Find zero or one Consent that matches the filter.
     * @param {ConsentFindUniqueArgs} args - Arguments to find a Consent
     * @example
     * // Get one Consent
     * const consent = await prisma.consent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsentFindUniqueArgs>(args: SelectSubset<T, ConsentFindUniqueArgs<ExtArgs>>): Prisma__ConsentClient<$Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Consent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConsentFindUniqueOrThrowArgs} args - Arguments to find a Consent
     * @example
     * // Get one Consent
     * const consent = await prisma.consent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsentFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsentClient<$Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Consent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentFindFirstArgs} args - Arguments to find a Consent
     * @example
     * // Get one Consent
     * const consent = await prisma.consent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsentFindFirstArgs>(args?: SelectSubset<T, ConsentFindFirstArgs<ExtArgs>>): Prisma__ConsentClient<$Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Consent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentFindFirstOrThrowArgs} args - Arguments to find a Consent
     * @example
     * // Get one Consent
     * const consent = await prisma.consent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsentFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsentClient<$Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Consents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Consents
     * const consents = await prisma.consent.findMany()
     * 
     * // Get first 10 Consents
     * const consents = await prisma.consent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consentWithIdOnly = await prisma.consent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConsentFindManyArgs>(args?: SelectSubset<T, ConsentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Consent.
     * @param {ConsentCreateArgs} args - Arguments to create a Consent.
     * @example
     * // Create one Consent
     * const Consent = await prisma.consent.create({
     *   data: {
     *     // ... data to create a Consent
     *   }
     * })
     * 
     */
    create<T extends ConsentCreateArgs>(args: SelectSubset<T, ConsentCreateArgs<ExtArgs>>): Prisma__ConsentClient<$Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Consents.
     * @param {ConsentCreateManyArgs} args - Arguments to create many Consents.
     * @example
     * // Create many Consents
     * const consent = await prisma.consent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsentCreateManyArgs>(args?: SelectSubset<T, ConsentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Consents and returns the data saved in the database.
     * @param {ConsentCreateManyAndReturnArgs} args - Arguments to create many Consents.
     * @example
     * // Create many Consents
     * const consent = await prisma.consent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Consents and only return the `id`
     * const consentWithIdOnly = await prisma.consent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConsentCreateManyAndReturnArgs>(args?: SelectSubset<T, ConsentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Consent.
     * @param {ConsentDeleteArgs} args - Arguments to delete one Consent.
     * @example
     * // Delete one Consent
     * const Consent = await prisma.consent.delete({
     *   where: {
     *     // ... filter to delete one Consent
     *   }
     * })
     * 
     */
    delete<T extends ConsentDeleteArgs>(args: SelectSubset<T, ConsentDeleteArgs<ExtArgs>>): Prisma__ConsentClient<$Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Consent.
     * @param {ConsentUpdateArgs} args - Arguments to update one Consent.
     * @example
     * // Update one Consent
     * const consent = await prisma.consent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsentUpdateArgs>(args: SelectSubset<T, ConsentUpdateArgs<ExtArgs>>): Prisma__ConsentClient<$Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Consents.
     * @param {ConsentDeleteManyArgs} args - Arguments to filter Consents to delete.
     * @example
     * // Delete a few Consents
     * const { count } = await prisma.consent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsentDeleteManyArgs>(args?: SelectSubset<T, ConsentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Consents
     * const consent = await prisma.consent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsentUpdateManyArgs>(args: SelectSubset<T, ConsentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consents and returns the data updated in the database.
     * @param {ConsentUpdateManyAndReturnArgs} args - Arguments to update many Consents.
     * @example
     * // Update many Consents
     * const consent = await prisma.consent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Consents and only return the `id`
     * const consentWithIdOnly = await prisma.consent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConsentUpdateManyAndReturnArgs>(args: SelectSubset<T, ConsentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Consent.
     * @param {ConsentUpsertArgs} args - Arguments to update or create a Consent.
     * @example
     * // Update or create a Consent
     * const consent = await prisma.consent.upsert({
     *   create: {
     *     // ... data to create a Consent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Consent we want to update
     *   }
     * })
     */
    upsert<T extends ConsentUpsertArgs>(args: SelectSubset<T, ConsentUpsertArgs<ExtArgs>>): Prisma__ConsentClient<$Result.GetResult<Prisma.$ConsentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Consents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentCountArgs} args - Arguments to filter Consents to count.
     * @example
     * // Count the number of Consents
     * const count = await prisma.consent.count({
     *   where: {
     *     // ... the filter for the Consents we want to count
     *   }
     * })
    **/
    count<T extends ConsentCountArgs>(
      args?: Subset<T, ConsentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Consent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsentAggregateArgs>(args: Subset<T, ConsentAggregateArgs>): Prisma.PrismaPromise<GetConsentAggregateType<T>>

    /**
     * Group by Consent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsentGroupByArgs['orderBy'] }
        : { orderBy?: ConsentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Consent model
   */
  readonly fields: ConsentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Consent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patientProfile<T extends PatientProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfileDefaultArgs<ExtArgs>>): Prisma__PatientProfileClient<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Consent model
   */
  interface ConsentFieldRefs {
    readonly id: FieldRef<"Consent", 'String'>
    readonly patientProfileId: FieldRef<"Consent", 'String'>
    readonly documentUrl: FieldRef<"Consent", 'String'>
    readonly signature: FieldRef<"Consent", 'String'>
    readonly createdAt: FieldRef<"Consent", 'DateTime'>
    readonly updatedAt: FieldRef<"Consent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Consent findUnique
   */
  export type ConsentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consent
     */
    select?: ConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consent
     */
    omit?: ConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentInclude<ExtArgs> | null
    /**
     * Filter, which Consent to fetch.
     */
    where: ConsentWhereUniqueInput
  }

  /**
   * Consent findUniqueOrThrow
   */
  export type ConsentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consent
     */
    select?: ConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consent
     */
    omit?: ConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentInclude<ExtArgs> | null
    /**
     * Filter, which Consent to fetch.
     */
    where: ConsentWhereUniqueInput
  }

  /**
   * Consent findFirst
   */
  export type ConsentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consent
     */
    select?: ConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consent
     */
    omit?: ConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentInclude<ExtArgs> | null
    /**
     * Filter, which Consent to fetch.
     */
    where?: ConsentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consents to fetch.
     */
    orderBy?: ConsentOrderByWithRelationInput | ConsentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consents.
     */
    cursor?: ConsentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consents.
     */
    distinct?: ConsentScalarFieldEnum | ConsentScalarFieldEnum[]
  }

  /**
   * Consent findFirstOrThrow
   */
  export type ConsentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consent
     */
    select?: ConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consent
     */
    omit?: ConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentInclude<ExtArgs> | null
    /**
     * Filter, which Consent to fetch.
     */
    where?: ConsentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consents to fetch.
     */
    orderBy?: ConsentOrderByWithRelationInput | ConsentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consents.
     */
    cursor?: ConsentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consents.
     */
    distinct?: ConsentScalarFieldEnum | ConsentScalarFieldEnum[]
  }

  /**
   * Consent findMany
   */
  export type ConsentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consent
     */
    select?: ConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consent
     */
    omit?: ConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentInclude<ExtArgs> | null
    /**
     * Filter, which Consents to fetch.
     */
    where?: ConsentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consents to fetch.
     */
    orderBy?: ConsentOrderByWithRelationInput | ConsentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Consents.
     */
    cursor?: ConsentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consents.
     */
    skip?: number
    distinct?: ConsentScalarFieldEnum | ConsentScalarFieldEnum[]
  }

  /**
   * Consent create
   */
  export type ConsentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consent
     */
    select?: ConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consent
     */
    omit?: ConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentInclude<ExtArgs> | null
    /**
     * The data needed to create a Consent.
     */
    data: XOR<ConsentCreateInput, ConsentUncheckedCreateInput>
  }

  /**
   * Consent createMany
   */
  export type ConsentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Consents.
     */
    data: ConsentCreateManyInput | ConsentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Consent createManyAndReturn
   */
  export type ConsentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consent
     */
    select?: ConsentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Consent
     */
    omit?: ConsentOmit<ExtArgs> | null
    /**
     * The data used to create many Consents.
     */
    data: ConsentCreateManyInput | ConsentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Consent update
   */
  export type ConsentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consent
     */
    select?: ConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consent
     */
    omit?: ConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentInclude<ExtArgs> | null
    /**
     * The data needed to update a Consent.
     */
    data: XOR<ConsentUpdateInput, ConsentUncheckedUpdateInput>
    /**
     * Choose, which Consent to update.
     */
    where: ConsentWhereUniqueInput
  }

  /**
   * Consent updateMany
   */
  export type ConsentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Consents.
     */
    data: XOR<ConsentUpdateManyMutationInput, ConsentUncheckedUpdateManyInput>
    /**
     * Filter which Consents to update
     */
    where?: ConsentWhereInput
    /**
     * Limit how many Consents to update.
     */
    limit?: number
  }

  /**
   * Consent updateManyAndReturn
   */
  export type ConsentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consent
     */
    select?: ConsentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Consent
     */
    omit?: ConsentOmit<ExtArgs> | null
    /**
     * The data used to update Consents.
     */
    data: XOR<ConsentUpdateManyMutationInput, ConsentUncheckedUpdateManyInput>
    /**
     * Filter which Consents to update
     */
    where?: ConsentWhereInput
    /**
     * Limit how many Consents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Consent upsert
   */
  export type ConsentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consent
     */
    select?: ConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consent
     */
    omit?: ConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentInclude<ExtArgs> | null
    /**
     * The filter to search for the Consent to update in case it exists.
     */
    where: ConsentWhereUniqueInput
    /**
     * In case the Consent found by the `where` argument doesn't exist, create a new Consent with this data.
     */
    create: XOR<ConsentCreateInput, ConsentUncheckedCreateInput>
    /**
     * In case the Consent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsentUpdateInput, ConsentUncheckedUpdateInput>
  }

  /**
   * Consent delete
   */
  export type ConsentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consent
     */
    select?: ConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consent
     */
    omit?: ConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentInclude<ExtArgs> | null
    /**
     * Filter which Consent to delete.
     */
    where: ConsentWhereUniqueInput
  }

  /**
   * Consent deleteMany
   */
  export type ConsentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consents to delete
     */
    where?: ConsentWhereInput
    /**
     * Limit how many Consents to delete.
     */
    limit?: number
  }

  /**
   * Consent without action
   */
  export type ConsentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consent
     */
    select?: ConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consent
     */
    omit?: ConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentInclude<ExtArgs> | null
  }


  /**
   * Model MedicalRecordRequest
   */

  export type AggregateMedicalRecordRequest = {
    _count: MedicalRecordRequestCountAggregateOutputType | null
    _min: MedicalRecordRequestMinAggregateOutputType | null
    _max: MedicalRecordRequestMaxAggregateOutputType | null
  }

  export type MedicalRecordRequestMinAggregateOutputType = {
    id: string | null
    patientProfileId: string | null
    inpatientEncounterId: string | null
    type: string | null
    status: string | null
    fileUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicalRecordRequestMaxAggregateOutputType = {
    id: string | null
    patientProfileId: string | null
    inpatientEncounterId: string | null
    type: string | null
    status: string | null
    fileUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicalRecordRequestCountAggregateOutputType = {
    id: number
    patientProfileId: number
    inpatientEncounterId: number
    type: number
    status: number
    fileUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MedicalRecordRequestMinAggregateInputType = {
    id?: true
    patientProfileId?: true
    inpatientEncounterId?: true
    type?: true
    status?: true
    fileUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicalRecordRequestMaxAggregateInputType = {
    id?: true
    patientProfileId?: true
    inpatientEncounterId?: true
    type?: true
    status?: true
    fileUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicalRecordRequestCountAggregateInputType = {
    id?: true
    patientProfileId?: true
    inpatientEncounterId?: true
    type?: true
    status?: true
    fileUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MedicalRecordRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalRecordRequest to aggregate.
     */
    where?: MedicalRecordRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalRecordRequests to fetch.
     */
    orderBy?: MedicalRecordRequestOrderByWithRelationInput | MedicalRecordRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicalRecordRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalRecordRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalRecordRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MedicalRecordRequests
    **/
    _count?: true | MedicalRecordRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicalRecordRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicalRecordRequestMaxAggregateInputType
  }

  export type GetMedicalRecordRequestAggregateType<T extends MedicalRecordRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateMedicalRecordRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedicalRecordRequest[P]>
      : GetScalarType<T[P], AggregateMedicalRecordRequest[P]>
  }




  export type MedicalRecordRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalRecordRequestWhereInput
    orderBy?: MedicalRecordRequestOrderByWithAggregationInput | MedicalRecordRequestOrderByWithAggregationInput[]
    by: MedicalRecordRequestScalarFieldEnum[] | MedicalRecordRequestScalarFieldEnum
    having?: MedicalRecordRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicalRecordRequestCountAggregateInputType | true
    _min?: MedicalRecordRequestMinAggregateInputType
    _max?: MedicalRecordRequestMaxAggregateInputType
  }

  export type MedicalRecordRequestGroupByOutputType = {
    id: string
    patientProfileId: string
    inpatientEncounterId: string
    type: string
    status: string
    fileUrl: string
    createdAt: Date
    updatedAt: Date
    _count: MedicalRecordRequestCountAggregateOutputType | null
    _min: MedicalRecordRequestMinAggregateOutputType | null
    _max: MedicalRecordRequestMaxAggregateOutputType | null
  }

  type GetMedicalRecordRequestGroupByPayload<T extends MedicalRecordRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicalRecordRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicalRecordRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicalRecordRequestGroupByOutputType[P]>
            : GetScalarType<T[P], MedicalRecordRequestGroupByOutputType[P]>
        }
      >
    >


  export type MedicalRecordRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    inpatientEncounterId?: boolean
    type?: boolean
    status?: boolean
    fileUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
    inpatientEncounter?: boolean | InpatientEncounterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalRecordRequest"]>

  export type MedicalRecordRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    inpatientEncounterId?: boolean
    type?: boolean
    status?: boolean
    fileUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
    inpatientEncounter?: boolean | InpatientEncounterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalRecordRequest"]>

  export type MedicalRecordRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientProfileId?: boolean
    inpatientEncounterId?: boolean
    type?: boolean
    status?: boolean
    fileUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
    inpatientEncounter?: boolean | InpatientEncounterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalRecordRequest"]>

  export type MedicalRecordRequestSelectScalar = {
    id?: boolean
    patientProfileId?: boolean
    inpatientEncounterId?: boolean
    type?: boolean
    status?: boolean
    fileUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MedicalRecordRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientProfileId" | "inpatientEncounterId" | "type" | "status" | "fileUrl" | "createdAt" | "updatedAt", ExtArgs["result"]["medicalRecordRequest"]>
  export type MedicalRecordRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
    inpatientEncounter?: boolean | InpatientEncounterDefaultArgs<ExtArgs>
  }
  export type MedicalRecordRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
    inpatientEncounter?: boolean | InpatientEncounterDefaultArgs<ExtArgs>
  }
  export type MedicalRecordRequestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | PatientProfileDefaultArgs<ExtArgs>
    inpatientEncounter?: boolean | InpatientEncounterDefaultArgs<ExtArgs>
  }

  export type $MedicalRecordRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MedicalRecordRequest"
    objects: {
      patientProfile: Prisma.$PatientProfilePayload<ExtArgs>
      inpatientEncounter: Prisma.$InpatientEncounterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientProfileId: string
      inpatientEncounterId: string
      type: string
      status: string
      fileUrl: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["medicalRecordRequest"]>
    composites: {}
  }

  type MedicalRecordRequestGetPayload<S extends boolean | null | undefined | MedicalRecordRequestDefaultArgs> = $Result.GetResult<Prisma.$MedicalRecordRequestPayload, S>

  type MedicalRecordRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MedicalRecordRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MedicalRecordRequestCountAggregateInputType | true
    }

  export interface MedicalRecordRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MedicalRecordRequest'], meta: { name: 'MedicalRecordRequest' } }
    /**
     * Find zero or one MedicalRecordRequest that matches the filter.
     * @param {MedicalRecordRequestFindUniqueArgs} args - Arguments to find a MedicalRecordRequest
     * @example
     * // Get one MedicalRecordRequest
     * const medicalRecordRequest = await prisma.medicalRecordRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MedicalRecordRequestFindUniqueArgs>(args: SelectSubset<T, MedicalRecordRequestFindUniqueArgs<ExtArgs>>): Prisma__MedicalRecordRequestClient<$Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MedicalRecordRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MedicalRecordRequestFindUniqueOrThrowArgs} args - Arguments to find a MedicalRecordRequest
     * @example
     * // Get one MedicalRecordRequest
     * const medicalRecordRequest = await prisma.medicalRecordRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MedicalRecordRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, MedicalRecordRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MedicalRecordRequestClient<$Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MedicalRecordRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordRequestFindFirstArgs} args - Arguments to find a MedicalRecordRequest
     * @example
     * // Get one MedicalRecordRequest
     * const medicalRecordRequest = await prisma.medicalRecordRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MedicalRecordRequestFindFirstArgs>(args?: SelectSubset<T, MedicalRecordRequestFindFirstArgs<ExtArgs>>): Prisma__MedicalRecordRequestClient<$Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MedicalRecordRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordRequestFindFirstOrThrowArgs} args - Arguments to find a MedicalRecordRequest
     * @example
     * // Get one MedicalRecordRequest
     * const medicalRecordRequest = await prisma.medicalRecordRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MedicalRecordRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, MedicalRecordRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__MedicalRecordRequestClient<$Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MedicalRecordRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MedicalRecordRequests
     * const medicalRecordRequests = await prisma.medicalRecordRequest.findMany()
     * 
     * // Get first 10 MedicalRecordRequests
     * const medicalRecordRequests = await prisma.medicalRecordRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicalRecordRequestWithIdOnly = await prisma.medicalRecordRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MedicalRecordRequestFindManyArgs>(args?: SelectSubset<T, MedicalRecordRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MedicalRecordRequest.
     * @param {MedicalRecordRequestCreateArgs} args - Arguments to create a MedicalRecordRequest.
     * @example
     * // Create one MedicalRecordRequest
     * const MedicalRecordRequest = await prisma.medicalRecordRequest.create({
     *   data: {
     *     // ... data to create a MedicalRecordRequest
     *   }
     * })
     * 
     */
    create<T extends MedicalRecordRequestCreateArgs>(args: SelectSubset<T, MedicalRecordRequestCreateArgs<ExtArgs>>): Prisma__MedicalRecordRequestClient<$Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MedicalRecordRequests.
     * @param {MedicalRecordRequestCreateManyArgs} args - Arguments to create many MedicalRecordRequests.
     * @example
     * // Create many MedicalRecordRequests
     * const medicalRecordRequest = await prisma.medicalRecordRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MedicalRecordRequestCreateManyArgs>(args?: SelectSubset<T, MedicalRecordRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MedicalRecordRequests and returns the data saved in the database.
     * @param {MedicalRecordRequestCreateManyAndReturnArgs} args - Arguments to create many MedicalRecordRequests.
     * @example
     * // Create many MedicalRecordRequests
     * const medicalRecordRequest = await prisma.medicalRecordRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MedicalRecordRequests and only return the `id`
     * const medicalRecordRequestWithIdOnly = await prisma.medicalRecordRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MedicalRecordRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, MedicalRecordRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MedicalRecordRequest.
     * @param {MedicalRecordRequestDeleteArgs} args - Arguments to delete one MedicalRecordRequest.
     * @example
     * // Delete one MedicalRecordRequest
     * const MedicalRecordRequest = await prisma.medicalRecordRequest.delete({
     *   where: {
     *     // ... filter to delete one MedicalRecordRequest
     *   }
     * })
     * 
     */
    delete<T extends MedicalRecordRequestDeleteArgs>(args: SelectSubset<T, MedicalRecordRequestDeleteArgs<ExtArgs>>): Prisma__MedicalRecordRequestClient<$Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MedicalRecordRequest.
     * @param {MedicalRecordRequestUpdateArgs} args - Arguments to update one MedicalRecordRequest.
     * @example
     * // Update one MedicalRecordRequest
     * const medicalRecordRequest = await prisma.medicalRecordRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MedicalRecordRequestUpdateArgs>(args: SelectSubset<T, MedicalRecordRequestUpdateArgs<ExtArgs>>): Prisma__MedicalRecordRequestClient<$Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MedicalRecordRequests.
     * @param {MedicalRecordRequestDeleteManyArgs} args - Arguments to filter MedicalRecordRequests to delete.
     * @example
     * // Delete a few MedicalRecordRequests
     * const { count } = await prisma.medicalRecordRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MedicalRecordRequestDeleteManyArgs>(args?: SelectSubset<T, MedicalRecordRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicalRecordRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MedicalRecordRequests
     * const medicalRecordRequest = await prisma.medicalRecordRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MedicalRecordRequestUpdateManyArgs>(args: SelectSubset<T, MedicalRecordRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicalRecordRequests and returns the data updated in the database.
     * @param {MedicalRecordRequestUpdateManyAndReturnArgs} args - Arguments to update many MedicalRecordRequests.
     * @example
     * // Update many MedicalRecordRequests
     * const medicalRecordRequest = await prisma.medicalRecordRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MedicalRecordRequests and only return the `id`
     * const medicalRecordRequestWithIdOnly = await prisma.medicalRecordRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MedicalRecordRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, MedicalRecordRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MedicalRecordRequest.
     * @param {MedicalRecordRequestUpsertArgs} args - Arguments to update or create a MedicalRecordRequest.
     * @example
     * // Update or create a MedicalRecordRequest
     * const medicalRecordRequest = await prisma.medicalRecordRequest.upsert({
     *   create: {
     *     // ... data to create a MedicalRecordRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MedicalRecordRequest we want to update
     *   }
     * })
     */
    upsert<T extends MedicalRecordRequestUpsertArgs>(args: SelectSubset<T, MedicalRecordRequestUpsertArgs<ExtArgs>>): Prisma__MedicalRecordRequestClient<$Result.GetResult<Prisma.$MedicalRecordRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MedicalRecordRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordRequestCountArgs} args - Arguments to filter MedicalRecordRequests to count.
     * @example
     * // Count the number of MedicalRecordRequests
     * const count = await prisma.medicalRecordRequest.count({
     *   where: {
     *     // ... the filter for the MedicalRecordRequests we want to count
     *   }
     * })
    **/
    count<T extends MedicalRecordRequestCountArgs>(
      args?: Subset<T, MedicalRecordRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicalRecordRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MedicalRecordRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicalRecordRequestAggregateArgs>(args: Subset<T, MedicalRecordRequestAggregateArgs>): Prisma.PrismaPromise<GetMedicalRecordRequestAggregateType<T>>

    /**
     * Group by MedicalRecordRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicalRecordRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicalRecordRequestGroupByArgs['orderBy'] }
        : { orderBy?: MedicalRecordRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicalRecordRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicalRecordRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MedicalRecordRequest model
   */
  readonly fields: MedicalRecordRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MedicalRecordRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedicalRecordRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patientProfile<T extends PatientProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientProfileDefaultArgs<ExtArgs>>): Prisma__PatientProfileClient<$Result.GetResult<Prisma.$PatientProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    inpatientEncounter<T extends InpatientEncounterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InpatientEncounterDefaultArgs<ExtArgs>>): Prisma__InpatientEncounterClient<$Result.GetResult<Prisma.$InpatientEncounterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MedicalRecordRequest model
   */
  interface MedicalRecordRequestFieldRefs {
    readonly id: FieldRef<"MedicalRecordRequest", 'String'>
    readonly patientProfileId: FieldRef<"MedicalRecordRequest", 'String'>
    readonly inpatientEncounterId: FieldRef<"MedicalRecordRequest", 'String'>
    readonly type: FieldRef<"MedicalRecordRequest", 'String'>
    readonly status: FieldRef<"MedicalRecordRequest", 'String'>
    readonly fileUrl: FieldRef<"MedicalRecordRequest", 'String'>
    readonly createdAt: FieldRef<"MedicalRecordRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"MedicalRecordRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MedicalRecordRequest findUnique
   */
  export type MedicalRecordRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecordRequest
     */
    select?: MedicalRecordRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecordRequest
     */
    omit?: MedicalRecordRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordRequestInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecordRequest to fetch.
     */
    where: MedicalRecordRequestWhereUniqueInput
  }

  /**
   * MedicalRecordRequest findUniqueOrThrow
   */
  export type MedicalRecordRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecordRequest
     */
    select?: MedicalRecordRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecordRequest
     */
    omit?: MedicalRecordRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordRequestInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecordRequest to fetch.
     */
    where: MedicalRecordRequestWhereUniqueInput
  }

  /**
   * MedicalRecordRequest findFirst
   */
  export type MedicalRecordRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecordRequest
     */
    select?: MedicalRecordRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecordRequest
     */
    omit?: MedicalRecordRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordRequestInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecordRequest to fetch.
     */
    where?: MedicalRecordRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalRecordRequests to fetch.
     */
    orderBy?: MedicalRecordRequestOrderByWithRelationInput | MedicalRecordRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalRecordRequests.
     */
    cursor?: MedicalRecordRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalRecordRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalRecordRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalRecordRequests.
     */
    distinct?: MedicalRecordRequestScalarFieldEnum | MedicalRecordRequestScalarFieldEnum[]
  }

  /**
   * MedicalRecordRequest findFirstOrThrow
   */
  export type MedicalRecordRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecordRequest
     */
    select?: MedicalRecordRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecordRequest
     */
    omit?: MedicalRecordRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordRequestInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecordRequest to fetch.
     */
    where?: MedicalRecordRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalRecordRequests to fetch.
     */
    orderBy?: MedicalRecordRequestOrderByWithRelationInput | MedicalRecordRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalRecordRequests.
     */
    cursor?: MedicalRecordRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalRecordRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalRecordRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalRecordRequests.
     */
    distinct?: MedicalRecordRequestScalarFieldEnum | MedicalRecordRequestScalarFieldEnum[]
  }

  /**
   * MedicalRecordRequest findMany
   */
  export type MedicalRecordRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecordRequest
     */
    select?: MedicalRecordRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecordRequest
     */
    omit?: MedicalRecordRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordRequestInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecordRequests to fetch.
     */
    where?: MedicalRecordRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalRecordRequests to fetch.
     */
    orderBy?: MedicalRecordRequestOrderByWithRelationInput | MedicalRecordRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MedicalRecordRequests.
     */
    cursor?: MedicalRecordRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalRecordRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalRecordRequests.
     */
    skip?: number
    distinct?: MedicalRecordRequestScalarFieldEnum | MedicalRecordRequestScalarFieldEnum[]
  }

  /**
   * MedicalRecordRequest create
   */
  export type MedicalRecordRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecordRequest
     */
    select?: MedicalRecordRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecordRequest
     */
    omit?: MedicalRecordRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a MedicalRecordRequest.
     */
    data: XOR<MedicalRecordRequestCreateInput, MedicalRecordRequestUncheckedCreateInput>
  }

  /**
   * MedicalRecordRequest createMany
   */
  export type MedicalRecordRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MedicalRecordRequests.
     */
    data: MedicalRecordRequestCreateManyInput | MedicalRecordRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MedicalRecordRequest createManyAndReturn
   */
  export type MedicalRecordRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecordRequest
     */
    select?: MedicalRecordRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecordRequest
     */
    omit?: MedicalRecordRequestOmit<ExtArgs> | null
    /**
     * The data used to create many MedicalRecordRequests.
     */
    data: MedicalRecordRequestCreateManyInput | MedicalRecordRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MedicalRecordRequest update
   */
  export type MedicalRecordRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecordRequest
     */
    select?: MedicalRecordRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecordRequest
     */
    omit?: MedicalRecordRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a MedicalRecordRequest.
     */
    data: XOR<MedicalRecordRequestUpdateInput, MedicalRecordRequestUncheckedUpdateInput>
    /**
     * Choose, which MedicalRecordRequest to update.
     */
    where: MedicalRecordRequestWhereUniqueInput
  }

  /**
   * MedicalRecordRequest updateMany
   */
  export type MedicalRecordRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MedicalRecordRequests.
     */
    data: XOR<MedicalRecordRequestUpdateManyMutationInput, MedicalRecordRequestUncheckedUpdateManyInput>
    /**
     * Filter which MedicalRecordRequests to update
     */
    where?: MedicalRecordRequestWhereInput
    /**
     * Limit how many MedicalRecordRequests to update.
     */
    limit?: number
  }

  /**
   * MedicalRecordRequest updateManyAndReturn
   */
  export type MedicalRecordRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecordRequest
     */
    select?: MedicalRecordRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecordRequest
     */
    omit?: MedicalRecordRequestOmit<ExtArgs> | null
    /**
     * The data used to update MedicalRecordRequests.
     */
    data: XOR<MedicalRecordRequestUpdateManyMutationInput, MedicalRecordRequestUncheckedUpdateManyInput>
    /**
     * Filter which MedicalRecordRequests to update
     */
    where?: MedicalRecordRequestWhereInput
    /**
     * Limit how many MedicalRecordRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordRequestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MedicalRecordRequest upsert
   */
  export type MedicalRecordRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecordRequest
     */
    select?: MedicalRecordRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecordRequest
     */
    omit?: MedicalRecordRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the MedicalRecordRequest to update in case it exists.
     */
    where: MedicalRecordRequestWhereUniqueInput
    /**
     * In case the MedicalRecordRequest found by the `where` argument doesn't exist, create a new MedicalRecordRequest with this data.
     */
    create: XOR<MedicalRecordRequestCreateInput, MedicalRecordRequestUncheckedCreateInput>
    /**
     * In case the MedicalRecordRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicalRecordRequestUpdateInput, MedicalRecordRequestUncheckedUpdateInput>
  }

  /**
   * MedicalRecordRequest delete
   */
  export type MedicalRecordRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecordRequest
     */
    select?: MedicalRecordRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecordRequest
     */
    omit?: MedicalRecordRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordRequestInclude<ExtArgs> | null
    /**
     * Filter which MedicalRecordRequest to delete.
     */
    where: MedicalRecordRequestWhereUniqueInput
  }

  /**
   * MedicalRecordRequest deleteMany
   */
  export type MedicalRecordRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalRecordRequests to delete
     */
    where?: MedicalRecordRequestWhereInput
    /**
     * Limit how many MedicalRecordRequests to delete.
     */
    limit?: number
  }

  /**
   * MedicalRecordRequest without action
   */
  export type MedicalRecordRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecordRequest
     */
    select?: MedicalRecordRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecordRequest
     */
    omit?: MedicalRecordRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordRequestInclude<ExtArgs> | null
  }


  /**
   * Model PharmacySupplier
   */

  export type AggregatePharmacySupplier = {
    _count: PharmacySupplierCountAggregateOutputType | null
    _min: PharmacySupplierMinAggregateOutputType | null
    _max: PharmacySupplierMaxAggregateOutputType | null
  }

  export type PharmacySupplierMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    contact: string | null
    address: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PharmacySupplierMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    contact: string | null
    address: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PharmacySupplierCountAggregateOutputType = {
    id: number
    name: number
    email: number
    contact: number
    address: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PharmacySupplierMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    contact?: true
    address?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PharmacySupplierMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    contact?: true
    address?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PharmacySupplierCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    contact?: true
    address?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PharmacySupplierAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PharmacySupplier to aggregate.
     */
    where?: PharmacySupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PharmacySuppliers to fetch.
     */
    orderBy?: PharmacySupplierOrderByWithRelationInput | PharmacySupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PharmacySupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PharmacySuppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PharmacySuppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PharmacySuppliers
    **/
    _count?: true | PharmacySupplierCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PharmacySupplierMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PharmacySupplierMaxAggregateInputType
  }

  export type GetPharmacySupplierAggregateType<T extends PharmacySupplierAggregateArgs> = {
        [P in keyof T & keyof AggregatePharmacySupplier]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePharmacySupplier[P]>
      : GetScalarType<T[P], AggregatePharmacySupplier[P]>
  }




  export type PharmacySupplierGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PharmacySupplierWhereInput
    orderBy?: PharmacySupplierOrderByWithAggregationInput | PharmacySupplierOrderByWithAggregationInput[]
    by: PharmacySupplierScalarFieldEnum[] | PharmacySupplierScalarFieldEnum
    having?: PharmacySupplierScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PharmacySupplierCountAggregateInputType | true
    _min?: PharmacySupplierMinAggregateInputType
    _max?: PharmacySupplierMaxAggregateInputType
  }

  export type PharmacySupplierGroupByOutputType = {
    id: string
    name: string
    email: string | null
    contact: string | null
    address: string | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: PharmacySupplierCountAggregateOutputType | null
    _min: PharmacySupplierMinAggregateOutputType | null
    _max: PharmacySupplierMaxAggregateOutputType | null
  }

  type GetPharmacySupplierGroupByPayload<T extends PharmacySupplierGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PharmacySupplierGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PharmacySupplierGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PharmacySupplierGroupByOutputType[P]>
            : GetScalarType<T[P], PharmacySupplierGroupByOutputType[P]>
        }
      >
    >


  export type PharmacySupplierSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    contact?: boolean
    address?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["pharmacySupplier"]>

  export type PharmacySupplierSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    contact?: boolean
    address?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["pharmacySupplier"]>

  export type PharmacySupplierSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    contact?: boolean
    address?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["pharmacySupplier"]>

  export type PharmacySupplierSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    contact?: boolean
    address?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PharmacySupplierOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "contact" | "address" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["pharmacySupplier"]>

  export type $PharmacySupplierPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PharmacySupplier"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string | null
      contact: string | null
      address: string | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["pharmacySupplier"]>
    composites: {}
  }

  type PharmacySupplierGetPayload<S extends boolean | null | undefined | PharmacySupplierDefaultArgs> = $Result.GetResult<Prisma.$PharmacySupplierPayload, S>

  type PharmacySupplierCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PharmacySupplierFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PharmacySupplierCountAggregateInputType | true
    }

  export interface PharmacySupplierDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PharmacySupplier'], meta: { name: 'PharmacySupplier' } }
    /**
     * Find zero or one PharmacySupplier that matches the filter.
     * @param {PharmacySupplierFindUniqueArgs} args - Arguments to find a PharmacySupplier
     * @example
     * // Get one PharmacySupplier
     * const pharmacySupplier = await prisma.pharmacySupplier.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PharmacySupplierFindUniqueArgs>(args: SelectSubset<T, PharmacySupplierFindUniqueArgs<ExtArgs>>): Prisma__PharmacySupplierClient<$Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PharmacySupplier that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PharmacySupplierFindUniqueOrThrowArgs} args - Arguments to find a PharmacySupplier
     * @example
     * // Get one PharmacySupplier
     * const pharmacySupplier = await prisma.pharmacySupplier.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PharmacySupplierFindUniqueOrThrowArgs>(args: SelectSubset<T, PharmacySupplierFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PharmacySupplierClient<$Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PharmacySupplier that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacySupplierFindFirstArgs} args - Arguments to find a PharmacySupplier
     * @example
     * // Get one PharmacySupplier
     * const pharmacySupplier = await prisma.pharmacySupplier.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PharmacySupplierFindFirstArgs>(args?: SelectSubset<T, PharmacySupplierFindFirstArgs<ExtArgs>>): Prisma__PharmacySupplierClient<$Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PharmacySupplier that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacySupplierFindFirstOrThrowArgs} args - Arguments to find a PharmacySupplier
     * @example
     * // Get one PharmacySupplier
     * const pharmacySupplier = await prisma.pharmacySupplier.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PharmacySupplierFindFirstOrThrowArgs>(args?: SelectSubset<T, PharmacySupplierFindFirstOrThrowArgs<ExtArgs>>): Prisma__PharmacySupplierClient<$Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PharmacySuppliers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacySupplierFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PharmacySuppliers
     * const pharmacySuppliers = await prisma.pharmacySupplier.findMany()
     * 
     * // Get first 10 PharmacySuppliers
     * const pharmacySuppliers = await prisma.pharmacySupplier.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pharmacySupplierWithIdOnly = await prisma.pharmacySupplier.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PharmacySupplierFindManyArgs>(args?: SelectSubset<T, PharmacySupplierFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PharmacySupplier.
     * @param {PharmacySupplierCreateArgs} args - Arguments to create a PharmacySupplier.
     * @example
     * // Create one PharmacySupplier
     * const PharmacySupplier = await prisma.pharmacySupplier.create({
     *   data: {
     *     // ... data to create a PharmacySupplier
     *   }
     * })
     * 
     */
    create<T extends PharmacySupplierCreateArgs>(args: SelectSubset<T, PharmacySupplierCreateArgs<ExtArgs>>): Prisma__PharmacySupplierClient<$Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PharmacySuppliers.
     * @param {PharmacySupplierCreateManyArgs} args - Arguments to create many PharmacySuppliers.
     * @example
     * // Create many PharmacySuppliers
     * const pharmacySupplier = await prisma.pharmacySupplier.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PharmacySupplierCreateManyArgs>(args?: SelectSubset<T, PharmacySupplierCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PharmacySuppliers and returns the data saved in the database.
     * @param {PharmacySupplierCreateManyAndReturnArgs} args - Arguments to create many PharmacySuppliers.
     * @example
     * // Create many PharmacySuppliers
     * const pharmacySupplier = await prisma.pharmacySupplier.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PharmacySuppliers and only return the `id`
     * const pharmacySupplierWithIdOnly = await prisma.pharmacySupplier.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PharmacySupplierCreateManyAndReturnArgs>(args?: SelectSubset<T, PharmacySupplierCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PharmacySupplier.
     * @param {PharmacySupplierDeleteArgs} args - Arguments to delete one PharmacySupplier.
     * @example
     * // Delete one PharmacySupplier
     * const PharmacySupplier = await prisma.pharmacySupplier.delete({
     *   where: {
     *     // ... filter to delete one PharmacySupplier
     *   }
     * })
     * 
     */
    delete<T extends PharmacySupplierDeleteArgs>(args: SelectSubset<T, PharmacySupplierDeleteArgs<ExtArgs>>): Prisma__PharmacySupplierClient<$Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PharmacySupplier.
     * @param {PharmacySupplierUpdateArgs} args - Arguments to update one PharmacySupplier.
     * @example
     * // Update one PharmacySupplier
     * const pharmacySupplier = await prisma.pharmacySupplier.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PharmacySupplierUpdateArgs>(args: SelectSubset<T, PharmacySupplierUpdateArgs<ExtArgs>>): Prisma__PharmacySupplierClient<$Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PharmacySuppliers.
     * @param {PharmacySupplierDeleteManyArgs} args - Arguments to filter PharmacySuppliers to delete.
     * @example
     * // Delete a few PharmacySuppliers
     * const { count } = await prisma.pharmacySupplier.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PharmacySupplierDeleteManyArgs>(args?: SelectSubset<T, PharmacySupplierDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PharmacySuppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacySupplierUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PharmacySuppliers
     * const pharmacySupplier = await prisma.pharmacySupplier.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PharmacySupplierUpdateManyArgs>(args: SelectSubset<T, PharmacySupplierUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PharmacySuppliers and returns the data updated in the database.
     * @param {PharmacySupplierUpdateManyAndReturnArgs} args - Arguments to update many PharmacySuppliers.
     * @example
     * // Update many PharmacySuppliers
     * const pharmacySupplier = await prisma.pharmacySupplier.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PharmacySuppliers and only return the `id`
     * const pharmacySupplierWithIdOnly = await prisma.pharmacySupplier.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PharmacySupplierUpdateManyAndReturnArgs>(args: SelectSubset<T, PharmacySupplierUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PharmacySupplier.
     * @param {PharmacySupplierUpsertArgs} args - Arguments to update or create a PharmacySupplier.
     * @example
     * // Update or create a PharmacySupplier
     * const pharmacySupplier = await prisma.pharmacySupplier.upsert({
     *   create: {
     *     // ... data to create a PharmacySupplier
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PharmacySupplier we want to update
     *   }
     * })
     */
    upsert<T extends PharmacySupplierUpsertArgs>(args: SelectSubset<T, PharmacySupplierUpsertArgs<ExtArgs>>): Prisma__PharmacySupplierClient<$Result.GetResult<Prisma.$PharmacySupplierPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PharmacySuppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacySupplierCountArgs} args - Arguments to filter PharmacySuppliers to count.
     * @example
     * // Count the number of PharmacySuppliers
     * const count = await prisma.pharmacySupplier.count({
     *   where: {
     *     // ... the filter for the PharmacySuppliers we want to count
     *   }
     * })
    **/
    count<T extends PharmacySupplierCountArgs>(
      args?: Subset<T, PharmacySupplierCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PharmacySupplierCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PharmacySupplier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacySupplierAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PharmacySupplierAggregateArgs>(args: Subset<T, PharmacySupplierAggregateArgs>): Prisma.PrismaPromise<GetPharmacySupplierAggregateType<T>>

    /**
     * Group by PharmacySupplier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacySupplierGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PharmacySupplierGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PharmacySupplierGroupByArgs['orderBy'] }
        : { orderBy?: PharmacySupplierGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PharmacySupplierGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPharmacySupplierGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PharmacySupplier model
   */
  readonly fields: PharmacySupplierFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PharmacySupplier.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PharmacySupplierClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PharmacySupplier model
   */
  interface PharmacySupplierFieldRefs {
    readonly id: FieldRef<"PharmacySupplier", 'String'>
    readonly name: FieldRef<"PharmacySupplier", 'String'>
    readonly email: FieldRef<"PharmacySupplier", 'String'>
    readonly contact: FieldRef<"PharmacySupplier", 'String'>
    readonly address: FieldRef<"PharmacySupplier", 'String'>
    readonly notes: FieldRef<"PharmacySupplier", 'String'>
    readonly createdAt: FieldRef<"PharmacySupplier", 'DateTime'>
    readonly updatedAt: FieldRef<"PharmacySupplier", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PharmacySupplier findUnique
   */
  export type PharmacySupplierFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacySupplier
     */
    select?: PharmacySupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacySupplier
     */
    omit?: PharmacySupplierOmit<ExtArgs> | null
    /**
     * Filter, which PharmacySupplier to fetch.
     */
    where: PharmacySupplierWhereUniqueInput
  }

  /**
   * PharmacySupplier findUniqueOrThrow
   */
  export type PharmacySupplierFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacySupplier
     */
    select?: PharmacySupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacySupplier
     */
    omit?: PharmacySupplierOmit<ExtArgs> | null
    /**
     * Filter, which PharmacySupplier to fetch.
     */
    where: PharmacySupplierWhereUniqueInput
  }

  /**
   * PharmacySupplier findFirst
   */
  export type PharmacySupplierFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacySupplier
     */
    select?: PharmacySupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacySupplier
     */
    omit?: PharmacySupplierOmit<ExtArgs> | null
    /**
     * Filter, which PharmacySupplier to fetch.
     */
    where?: PharmacySupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PharmacySuppliers to fetch.
     */
    orderBy?: PharmacySupplierOrderByWithRelationInput | PharmacySupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PharmacySuppliers.
     */
    cursor?: PharmacySupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PharmacySuppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PharmacySuppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PharmacySuppliers.
     */
    distinct?: PharmacySupplierScalarFieldEnum | PharmacySupplierScalarFieldEnum[]
  }

  /**
   * PharmacySupplier findFirstOrThrow
   */
  export type PharmacySupplierFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacySupplier
     */
    select?: PharmacySupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacySupplier
     */
    omit?: PharmacySupplierOmit<ExtArgs> | null
    /**
     * Filter, which PharmacySupplier to fetch.
     */
    where?: PharmacySupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PharmacySuppliers to fetch.
     */
    orderBy?: PharmacySupplierOrderByWithRelationInput | PharmacySupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PharmacySuppliers.
     */
    cursor?: PharmacySupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PharmacySuppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PharmacySuppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PharmacySuppliers.
     */
    distinct?: PharmacySupplierScalarFieldEnum | PharmacySupplierScalarFieldEnum[]
  }

  /**
   * PharmacySupplier findMany
   */
  export type PharmacySupplierFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacySupplier
     */
    select?: PharmacySupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacySupplier
     */
    omit?: PharmacySupplierOmit<ExtArgs> | null
    /**
     * Filter, which PharmacySuppliers to fetch.
     */
    where?: PharmacySupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PharmacySuppliers to fetch.
     */
    orderBy?: PharmacySupplierOrderByWithRelationInput | PharmacySupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PharmacySuppliers.
     */
    cursor?: PharmacySupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PharmacySuppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PharmacySuppliers.
     */
    skip?: number
    distinct?: PharmacySupplierScalarFieldEnum | PharmacySupplierScalarFieldEnum[]
  }

  /**
   * PharmacySupplier create
   */
  export type PharmacySupplierCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacySupplier
     */
    select?: PharmacySupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacySupplier
     */
    omit?: PharmacySupplierOmit<ExtArgs> | null
    /**
     * The data needed to create a PharmacySupplier.
     */
    data: XOR<PharmacySupplierCreateInput, PharmacySupplierUncheckedCreateInput>
  }

  /**
   * PharmacySupplier createMany
   */
  export type PharmacySupplierCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PharmacySuppliers.
     */
    data: PharmacySupplierCreateManyInput | PharmacySupplierCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PharmacySupplier createManyAndReturn
   */
  export type PharmacySupplierCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacySupplier
     */
    select?: PharmacySupplierSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacySupplier
     */
    omit?: PharmacySupplierOmit<ExtArgs> | null
    /**
     * The data used to create many PharmacySuppliers.
     */
    data: PharmacySupplierCreateManyInput | PharmacySupplierCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PharmacySupplier update
   */
  export type PharmacySupplierUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacySupplier
     */
    select?: PharmacySupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacySupplier
     */
    omit?: PharmacySupplierOmit<ExtArgs> | null
    /**
     * The data needed to update a PharmacySupplier.
     */
    data: XOR<PharmacySupplierUpdateInput, PharmacySupplierUncheckedUpdateInput>
    /**
     * Choose, which PharmacySupplier to update.
     */
    where: PharmacySupplierWhereUniqueInput
  }

  /**
   * PharmacySupplier updateMany
   */
  export type PharmacySupplierUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PharmacySuppliers.
     */
    data: XOR<PharmacySupplierUpdateManyMutationInput, PharmacySupplierUncheckedUpdateManyInput>
    /**
     * Filter which PharmacySuppliers to update
     */
    where?: PharmacySupplierWhereInput
    /**
     * Limit how many PharmacySuppliers to update.
     */
    limit?: number
  }

  /**
   * PharmacySupplier updateManyAndReturn
   */
  export type PharmacySupplierUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacySupplier
     */
    select?: PharmacySupplierSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacySupplier
     */
    omit?: PharmacySupplierOmit<ExtArgs> | null
    /**
     * The data used to update PharmacySuppliers.
     */
    data: XOR<PharmacySupplierUpdateManyMutationInput, PharmacySupplierUncheckedUpdateManyInput>
    /**
     * Filter which PharmacySuppliers to update
     */
    where?: PharmacySupplierWhereInput
    /**
     * Limit how many PharmacySuppliers to update.
     */
    limit?: number
  }

  /**
   * PharmacySupplier upsert
   */
  export type PharmacySupplierUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacySupplier
     */
    select?: PharmacySupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacySupplier
     */
    omit?: PharmacySupplierOmit<ExtArgs> | null
    /**
     * The filter to search for the PharmacySupplier to update in case it exists.
     */
    where: PharmacySupplierWhereUniqueInput
    /**
     * In case the PharmacySupplier found by the `where` argument doesn't exist, create a new PharmacySupplier with this data.
     */
    create: XOR<PharmacySupplierCreateInput, PharmacySupplierUncheckedCreateInput>
    /**
     * In case the PharmacySupplier was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PharmacySupplierUpdateInput, PharmacySupplierUncheckedUpdateInput>
  }

  /**
   * PharmacySupplier delete
   */
  export type PharmacySupplierDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacySupplier
     */
    select?: PharmacySupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacySupplier
     */
    omit?: PharmacySupplierOmit<ExtArgs> | null
    /**
     * Filter which PharmacySupplier to delete.
     */
    where: PharmacySupplierWhereUniqueInput
  }

  /**
   * PharmacySupplier deleteMany
   */
  export type PharmacySupplierDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PharmacySuppliers to delete
     */
    where?: PharmacySupplierWhereInput
    /**
     * Limit how many PharmacySuppliers to delete.
     */
    limit?: number
  }

  /**
   * PharmacySupplier without action
   */
  export type PharmacySupplierDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacySupplier
     */
    select?: PharmacySupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacySupplier
     */
    omit?: PharmacySupplierOmit<ExtArgs> | null
  }


  /**
   * Model PharmacyBrand
   */

  export type AggregatePharmacyBrand = {
    _count: PharmacyBrandCountAggregateOutputType | null
    _min: PharmacyBrandMinAggregateOutputType | null
    _max: PharmacyBrandMaxAggregateOutputType | null
  }

  export type PharmacyBrandMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PharmacyBrandMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PharmacyBrandCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PharmacyBrandMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PharmacyBrandMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PharmacyBrandCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PharmacyBrandAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PharmacyBrand to aggregate.
     */
    where?: PharmacyBrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PharmacyBrands to fetch.
     */
    orderBy?: PharmacyBrandOrderByWithRelationInput | PharmacyBrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PharmacyBrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PharmacyBrands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PharmacyBrands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PharmacyBrands
    **/
    _count?: true | PharmacyBrandCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PharmacyBrandMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PharmacyBrandMaxAggregateInputType
  }

  export type GetPharmacyBrandAggregateType<T extends PharmacyBrandAggregateArgs> = {
        [P in keyof T & keyof AggregatePharmacyBrand]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePharmacyBrand[P]>
      : GetScalarType<T[P], AggregatePharmacyBrand[P]>
  }




  export type PharmacyBrandGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PharmacyBrandWhereInput
    orderBy?: PharmacyBrandOrderByWithAggregationInput | PharmacyBrandOrderByWithAggregationInput[]
    by: PharmacyBrandScalarFieldEnum[] | PharmacyBrandScalarFieldEnum
    having?: PharmacyBrandScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PharmacyBrandCountAggregateInputType | true
    _min?: PharmacyBrandMinAggregateInputType
    _max?: PharmacyBrandMaxAggregateInputType
  }

  export type PharmacyBrandGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: PharmacyBrandCountAggregateOutputType | null
    _min: PharmacyBrandMinAggregateOutputType | null
    _max: PharmacyBrandMaxAggregateOutputType | null
  }

  type GetPharmacyBrandGroupByPayload<T extends PharmacyBrandGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PharmacyBrandGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PharmacyBrandGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PharmacyBrandGroupByOutputType[P]>
            : GetScalarType<T[P], PharmacyBrandGroupByOutputType[P]>
        }
      >
    >


  export type PharmacyBrandSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    items?: boolean | PharmacyBrand$itemsArgs<ExtArgs>
    _count?: boolean | PharmacyBrandCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pharmacyBrand"]>

  export type PharmacyBrandSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["pharmacyBrand"]>

  export type PharmacyBrandSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["pharmacyBrand"]>

  export type PharmacyBrandSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PharmacyBrandOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["pharmacyBrand"]>
  export type PharmacyBrandInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | PharmacyBrand$itemsArgs<ExtArgs>
    _count?: boolean | PharmacyBrandCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PharmacyBrandIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PharmacyBrandIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PharmacyBrandPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PharmacyBrand"
    objects: {
      items: Prisma.$PharmacyItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["pharmacyBrand"]>
    composites: {}
  }

  type PharmacyBrandGetPayload<S extends boolean | null | undefined | PharmacyBrandDefaultArgs> = $Result.GetResult<Prisma.$PharmacyBrandPayload, S>

  type PharmacyBrandCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PharmacyBrandFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PharmacyBrandCountAggregateInputType | true
    }

  export interface PharmacyBrandDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PharmacyBrand'], meta: { name: 'PharmacyBrand' } }
    /**
     * Find zero or one PharmacyBrand that matches the filter.
     * @param {PharmacyBrandFindUniqueArgs} args - Arguments to find a PharmacyBrand
     * @example
     * // Get one PharmacyBrand
     * const pharmacyBrand = await prisma.pharmacyBrand.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PharmacyBrandFindUniqueArgs>(args: SelectSubset<T, PharmacyBrandFindUniqueArgs<ExtArgs>>): Prisma__PharmacyBrandClient<$Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PharmacyBrand that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PharmacyBrandFindUniqueOrThrowArgs} args - Arguments to find a PharmacyBrand
     * @example
     * // Get one PharmacyBrand
     * const pharmacyBrand = await prisma.pharmacyBrand.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PharmacyBrandFindUniqueOrThrowArgs>(args: SelectSubset<T, PharmacyBrandFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PharmacyBrandClient<$Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PharmacyBrand that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyBrandFindFirstArgs} args - Arguments to find a PharmacyBrand
     * @example
     * // Get one PharmacyBrand
     * const pharmacyBrand = await prisma.pharmacyBrand.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PharmacyBrandFindFirstArgs>(args?: SelectSubset<T, PharmacyBrandFindFirstArgs<ExtArgs>>): Prisma__PharmacyBrandClient<$Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PharmacyBrand that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyBrandFindFirstOrThrowArgs} args - Arguments to find a PharmacyBrand
     * @example
     * // Get one PharmacyBrand
     * const pharmacyBrand = await prisma.pharmacyBrand.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PharmacyBrandFindFirstOrThrowArgs>(args?: SelectSubset<T, PharmacyBrandFindFirstOrThrowArgs<ExtArgs>>): Prisma__PharmacyBrandClient<$Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PharmacyBrands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyBrandFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PharmacyBrands
     * const pharmacyBrands = await prisma.pharmacyBrand.findMany()
     * 
     * // Get first 10 PharmacyBrands
     * const pharmacyBrands = await prisma.pharmacyBrand.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pharmacyBrandWithIdOnly = await prisma.pharmacyBrand.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PharmacyBrandFindManyArgs>(args?: SelectSubset<T, PharmacyBrandFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PharmacyBrand.
     * @param {PharmacyBrandCreateArgs} args - Arguments to create a PharmacyBrand.
     * @example
     * // Create one PharmacyBrand
     * const PharmacyBrand = await prisma.pharmacyBrand.create({
     *   data: {
     *     // ... data to create a PharmacyBrand
     *   }
     * })
     * 
     */
    create<T extends PharmacyBrandCreateArgs>(args: SelectSubset<T, PharmacyBrandCreateArgs<ExtArgs>>): Prisma__PharmacyBrandClient<$Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PharmacyBrands.
     * @param {PharmacyBrandCreateManyArgs} args - Arguments to create many PharmacyBrands.
     * @example
     * // Create many PharmacyBrands
     * const pharmacyBrand = await prisma.pharmacyBrand.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PharmacyBrandCreateManyArgs>(args?: SelectSubset<T, PharmacyBrandCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PharmacyBrands and returns the data saved in the database.
     * @param {PharmacyBrandCreateManyAndReturnArgs} args - Arguments to create many PharmacyBrands.
     * @example
     * // Create many PharmacyBrands
     * const pharmacyBrand = await prisma.pharmacyBrand.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PharmacyBrands and only return the `id`
     * const pharmacyBrandWithIdOnly = await prisma.pharmacyBrand.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PharmacyBrandCreateManyAndReturnArgs>(args?: SelectSubset<T, PharmacyBrandCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PharmacyBrand.
     * @param {PharmacyBrandDeleteArgs} args - Arguments to delete one PharmacyBrand.
     * @example
     * // Delete one PharmacyBrand
     * const PharmacyBrand = await prisma.pharmacyBrand.delete({
     *   where: {
     *     // ... filter to delete one PharmacyBrand
     *   }
     * })
     * 
     */
    delete<T extends PharmacyBrandDeleteArgs>(args: SelectSubset<T, PharmacyBrandDeleteArgs<ExtArgs>>): Prisma__PharmacyBrandClient<$Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PharmacyBrand.
     * @param {PharmacyBrandUpdateArgs} args - Arguments to update one PharmacyBrand.
     * @example
     * // Update one PharmacyBrand
     * const pharmacyBrand = await prisma.pharmacyBrand.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PharmacyBrandUpdateArgs>(args: SelectSubset<T, PharmacyBrandUpdateArgs<ExtArgs>>): Prisma__PharmacyBrandClient<$Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PharmacyBrands.
     * @param {PharmacyBrandDeleteManyArgs} args - Arguments to filter PharmacyBrands to delete.
     * @example
     * // Delete a few PharmacyBrands
     * const { count } = await prisma.pharmacyBrand.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PharmacyBrandDeleteManyArgs>(args?: SelectSubset<T, PharmacyBrandDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PharmacyBrands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyBrandUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PharmacyBrands
     * const pharmacyBrand = await prisma.pharmacyBrand.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PharmacyBrandUpdateManyArgs>(args: SelectSubset<T, PharmacyBrandUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PharmacyBrands and returns the data updated in the database.
     * @param {PharmacyBrandUpdateManyAndReturnArgs} args - Arguments to update many PharmacyBrands.
     * @example
     * // Update many PharmacyBrands
     * const pharmacyBrand = await prisma.pharmacyBrand.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PharmacyBrands and only return the `id`
     * const pharmacyBrandWithIdOnly = await prisma.pharmacyBrand.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PharmacyBrandUpdateManyAndReturnArgs>(args: SelectSubset<T, PharmacyBrandUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PharmacyBrand.
     * @param {PharmacyBrandUpsertArgs} args - Arguments to update or create a PharmacyBrand.
     * @example
     * // Update or create a PharmacyBrand
     * const pharmacyBrand = await prisma.pharmacyBrand.upsert({
     *   create: {
     *     // ... data to create a PharmacyBrand
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PharmacyBrand we want to update
     *   }
     * })
     */
    upsert<T extends PharmacyBrandUpsertArgs>(args: SelectSubset<T, PharmacyBrandUpsertArgs<ExtArgs>>): Prisma__PharmacyBrandClient<$Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PharmacyBrands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyBrandCountArgs} args - Arguments to filter PharmacyBrands to count.
     * @example
     * // Count the number of PharmacyBrands
     * const count = await prisma.pharmacyBrand.count({
     *   where: {
     *     // ... the filter for the PharmacyBrands we want to count
     *   }
     * })
    **/
    count<T extends PharmacyBrandCountArgs>(
      args?: Subset<T, PharmacyBrandCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PharmacyBrandCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PharmacyBrand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyBrandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PharmacyBrandAggregateArgs>(args: Subset<T, PharmacyBrandAggregateArgs>): Prisma.PrismaPromise<GetPharmacyBrandAggregateType<T>>

    /**
     * Group by PharmacyBrand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyBrandGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PharmacyBrandGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PharmacyBrandGroupByArgs['orderBy'] }
        : { orderBy?: PharmacyBrandGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PharmacyBrandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPharmacyBrandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PharmacyBrand model
   */
  readonly fields: PharmacyBrandFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PharmacyBrand.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PharmacyBrandClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    items<T extends PharmacyBrand$itemsArgs<ExtArgs> = {}>(args?: Subset<T, PharmacyBrand$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PharmacyBrand model
   */
  interface PharmacyBrandFieldRefs {
    readonly id: FieldRef<"PharmacyBrand", 'String'>
    readonly name: FieldRef<"PharmacyBrand", 'String'>
    readonly createdAt: FieldRef<"PharmacyBrand", 'DateTime'>
    readonly updatedAt: FieldRef<"PharmacyBrand", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PharmacyBrand findUnique
   */
  export type PharmacyBrandFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyBrand
     */
    select?: PharmacyBrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyBrand
     */
    omit?: PharmacyBrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyBrandInclude<ExtArgs> | null
    /**
     * Filter, which PharmacyBrand to fetch.
     */
    where: PharmacyBrandWhereUniqueInput
  }

  /**
   * PharmacyBrand findUniqueOrThrow
   */
  export type PharmacyBrandFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyBrand
     */
    select?: PharmacyBrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyBrand
     */
    omit?: PharmacyBrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyBrandInclude<ExtArgs> | null
    /**
     * Filter, which PharmacyBrand to fetch.
     */
    where: PharmacyBrandWhereUniqueInput
  }

  /**
   * PharmacyBrand findFirst
   */
  export type PharmacyBrandFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyBrand
     */
    select?: PharmacyBrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyBrand
     */
    omit?: PharmacyBrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyBrandInclude<ExtArgs> | null
    /**
     * Filter, which PharmacyBrand to fetch.
     */
    where?: PharmacyBrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PharmacyBrands to fetch.
     */
    orderBy?: PharmacyBrandOrderByWithRelationInput | PharmacyBrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PharmacyBrands.
     */
    cursor?: PharmacyBrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PharmacyBrands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PharmacyBrands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PharmacyBrands.
     */
    distinct?: PharmacyBrandScalarFieldEnum | PharmacyBrandScalarFieldEnum[]
  }

  /**
   * PharmacyBrand findFirstOrThrow
   */
  export type PharmacyBrandFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyBrand
     */
    select?: PharmacyBrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyBrand
     */
    omit?: PharmacyBrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyBrandInclude<ExtArgs> | null
    /**
     * Filter, which PharmacyBrand to fetch.
     */
    where?: PharmacyBrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PharmacyBrands to fetch.
     */
    orderBy?: PharmacyBrandOrderByWithRelationInput | PharmacyBrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PharmacyBrands.
     */
    cursor?: PharmacyBrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PharmacyBrands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PharmacyBrands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PharmacyBrands.
     */
    distinct?: PharmacyBrandScalarFieldEnum | PharmacyBrandScalarFieldEnum[]
  }

  /**
   * PharmacyBrand findMany
   */
  export type PharmacyBrandFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyBrand
     */
    select?: PharmacyBrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyBrand
     */
    omit?: PharmacyBrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyBrandInclude<ExtArgs> | null
    /**
     * Filter, which PharmacyBrands to fetch.
     */
    where?: PharmacyBrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PharmacyBrands to fetch.
     */
    orderBy?: PharmacyBrandOrderByWithRelationInput | PharmacyBrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PharmacyBrands.
     */
    cursor?: PharmacyBrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PharmacyBrands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PharmacyBrands.
     */
    skip?: number
    distinct?: PharmacyBrandScalarFieldEnum | PharmacyBrandScalarFieldEnum[]
  }

  /**
   * PharmacyBrand create
   */
  export type PharmacyBrandCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyBrand
     */
    select?: PharmacyBrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyBrand
     */
    omit?: PharmacyBrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyBrandInclude<ExtArgs> | null
    /**
     * The data needed to create a PharmacyBrand.
     */
    data: XOR<PharmacyBrandCreateInput, PharmacyBrandUncheckedCreateInput>
  }

  /**
   * PharmacyBrand createMany
   */
  export type PharmacyBrandCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PharmacyBrands.
     */
    data: PharmacyBrandCreateManyInput | PharmacyBrandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PharmacyBrand createManyAndReturn
   */
  export type PharmacyBrandCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyBrand
     */
    select?: PharmacyBrandSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyBrand
     */
    omit?: PharmacyBrandOmit<ExtArgs> | null
    /**
     * The data used to create many PharmacyBrands.
     */
    data: PharmacyBrandCreateManyInput | PharmacyBrandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PharmacyBrand update
   */
  export type PharmacyBrandUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyBrand
     */
    select?: PharmacyBrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyBrand
     */
    omit?: PharmacyBrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyBrandInclude<ExtArgs> | null
    /**
     * The data needed to update a PharmacyBrand.
     */
    data: XOR<PharmacyBrandUpdateInput, PharmacyBrandUncheckedUpdateInput>
    /**
     * Choose, which PharmacyBrand to update.
     */
    where: PharmacyBrandWhereUniqueInput
  }

  /**
   * PharmacyBrand updateMany
   */
  export type PharmacyBrandUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PharmacyBrands.
     */
    data: XOR<PharmacyBrandUpdateManyMutationInput, PharmacyBrandUncheckedUpdateManyInput>
    /**
     * Filter which PharmacyBrands to update
     */
    where?: PharmacyBrandWhereInput
    /**
     * Limit how many PharmacyBrands to update.
     */
    limit?: number
  }

  /**
   * PharmacyBrand updateManyAndReturn
   */
  export type PharmacyBrandUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyBrand
     */
    select?: PharmacyBrandSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyBrand
     */
    omit?: PharmacyBrandOmit<ExtArgs> | null
    /**
     * The data used to update PharmacyBrands.
     */
    data: XOR<PharmacyBrandUpdateManyMutationInput, PharmacyBrandUncheckedUpdateManyInput>
    /**
     * Filter which PharmacyBrands to update
     */
    where?: PharmacyBrandWhereInput
    /**
     * Limit how many PharmacyBrands to update.
     */
    limit?: number
  }

  /**
   * PharmacyBrand upsert
   */
  export type PharmacyBrandUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyBrand
     */
    select?: PharmacyBrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyBrand
     */
    omit?: PharmacyBrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyBrandInclude<ExtArgs> | null
    /**
     * The filter to search for the PharmacyBrand to update in case it exists.
     */
    where: PharmacyBrandWhereUniqueInput
    /**
     * In case the PharmacyBrand found by the `where` argument doesn't exist, create a new PharmacyBrand with this data.
     */
    create: XOR<PharmacyBrandCreateInput, PharmacyBrandUncheckedCreateInput>
    /**
     * In case the PharmacyBrand was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PharmacyBrandUpdateInput, PharmacyBrandUncheckedUpdateInput>
  }

  /**
   * PharmacyBrand delete
   */
  export type PharmacyBrandDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyBrand
     */
    select?: PharmacyBrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyBrand
     */
    omit?: PharmacyBrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyBrandInclude<ExtArgs> | null
    /**
     * Filter which PharmacyBrand to delete.
     */
    where: PharmacyBrandWhereUniqueInput
  }

  /**
   * PharmacyBrand deleteMany
   */
  export type PharmacyBrandDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PharmacyBrands to delete
     */
    where?: PharmacyBrandWhereInput
    /**
     * Limit how many PharmacyBrands to delete.
     */
    limit?: number
  }

  /**
   * PharmacyBrand.items
   */
  export type PharmacyBrand$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItem
     */
    select?: PharmacyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItem
     */
    omit?: PharmacyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemInclude<ExtArgs> | null
    where?: PharmacyItemWhereInput
    orderBy?: PharmacyItemOrderByWithRelationInput | PharmacyItemOrderByWithRelationInput[]
    cursor?: PharmacyItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PharmacyItemScalarFieldEnum | PharmacyItemScalarFieldEnum[]
  }

  /**
   * PharmacyBrand without action
   */
  export type PharmacyBrandDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyBrand
     */
    select?: PharmacyBrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyBrand
     */
    omit?: PharmacyBrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyBrandInclude<ExtArgs> | null
  }


  /**
   * Model PharmacyItemCategory
   */

  export type AggregatePharmacyItemCategory = {
    _count: PharmacyItemCategoryCountAggregateOutputType | null
    _min: PharmacyItemCategoryMinAggregateOutputType | null
    _max: PharmacyItemCategoryMaxAggregateOutputType | null
  }

  export type PharmacyItemCategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PharmacyItemCategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PharmacyItemCategoryCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PharmacyItemCategoryMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PharmacyItemCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PharmacyItemCategoryCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PharmacyItemCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PharmacyItemCategory to aggregate.
     */
    where?: PharmacyItemCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PharmacyItemCategories to fetch.
     */
    orderBy?: PharmacyItemCategoryOrderByWithRelationInput | PharmacyItemCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PharmacyItemCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PharmacyItemCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PharmacyItemCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PharmacyItemCategories
    **/
    _count?: true | PharmacyItemCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PharmacyItemCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PharmacyItemCategoryMaxAggregateInputType
  }

  export type GetPharmacyItemCategoryAggregateType<T extends PharmacyItemCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregatePharmacyItemCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePharmacyItemCategory[P]>
      : GetScalarType<T[P], AggregatePharmacyItemCategory[P]>
  }




  export type PharmacyItemCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PharmacyItemCategoryWhereInput
    orderBy?: PharmacyItemCategoryOrderByWithAggregationInput | PharmacyItemCategoryOrderByWithAggregationInput[]
    by: PharmacyItemCategoryScalarFieldEnum[] | PharmacyItemCategoryScalarFieldEnum
    having?: PharmacyItemCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PharmacyItemCategoryCountAggregateInputType | true
    _min?: PharmacyItemCategoryMinAggregateInputType
    _max?: PharmacyItemCategoryMaxAggregateInputType
  }

  export type PharmacyItemCategoryGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: PharmacyItemCategoryCountAggregateOutputType | null
    _min: PharmacyItemCategoryMinAggregateOutputType | null
    _max: PharmacyItemCategoryMaxAggregateOutputType | null
  }

  type GetPharmacyItemCategoryGroupByPayload<T extends PharmacyItemCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PharmacyItemCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PharmacyItemCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PharmacyItemCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], PharmacyItemCategoryGroupByOutputType[P]>
        }
      >
    >


  export type PharmacyItemCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    items?: boolean | PharmacyItemCategory$itemsArgs<ExtArgs>
    _count?: boolean | PharmacyItemCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pharmacyItemCategory"]>

  export type PharmacyItemCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["pharmacyItemCategory"]>

  export type PharmacyItemCategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["pharmacyItemCategory"]>

  export type PharmacyItemCategorySelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PharmacyItemCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["pharmacyItemCategory"]>
  export type PharmacyItemCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | PharmacyItemCategory$itemsArgs<ExtArgs>
    _count?: boolean | PharmacyItemCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PharmacyItemCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PharmacyItemCategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PharmacyItemCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PharmacyItemCategory"
    objects: {
      items: Prisma.$PharmacyItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["pharmacyItemCategory"]>
    composites: {}
  }

  type PharmacyItemCategoryGetPayload<S extends boolean | null | undefined | PharmacyItemCategoryDefaultArgs> = $Result.GetResult<Prisma.$PharmacyItemCategoryPayload, S>

  type PharmacyItemCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PharmacyItemCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PharmacyItemCategoryCountAggregateInputType | true
    }

  export interface PharmacyItemCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PharmacyItemCategory'], meta: { name: 'PharmacyItemCategory' } }
    /**
     * Find zero or one PharmacyItemCategory that matches the filter.
     * @param {PharmacyItemCategoryFindUniqueArgs} args - Arguments to find a PharmacyItemCategory
     * @example
     * // Get one PharmacyItemCategory
     * const pharmacyItemCategory = await prisma.pharmacyItemCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PharmacyItemCategoryFindUniqueArgs>(args: SelectSubset<T, PharmacyItemCategoryFindUniqueArgs<ExtArgs>>): Prisma__PharmacyItemCategoryClient<$Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PharmacyItemCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PharmacyItemCategoryFindUniqueOrThrowArgs} args - Arguments to find a PharmacyItemCategory
     * @example
     * // Get one PharmacyItemCategory
     * const pharmacyItemCategory = await prisma.pharmacyItemCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PharmacyItemCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, PharmacyItemCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PharmacyItemCategoryClient<$Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PharmacyItemCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyItemCategoryFindFirstArgs} args - Arguments to find a PharmacyItemCategory
     * @example
     * // Get one PharmacyItemCategory
     * const pharmacyItemCategory = await prisma.pharmacyItemCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PharmacyItemCategoryFindFirstArgs>(args?: SelectSubset<T, PharmacyItemCategoryFindFirstArgs<ExtArgs>>): Prisma__PharmacyItemCategoryClient<$Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PharmacyItemCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyItemCategoryFindFirstOrThrowArgs} args - Arguments to find a PharmacyItemCategory
     * @example
     * // Get one PharmacyItemCategory
     * const pharmacyItemCategory = await prisma.pharmacyItemCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PharmacyItemCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, PharmacyItemCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__PharmacyItemCategoryClient<$Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PharmacyItemCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyItemCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PharmacyItemCategories
     * const pharmacyItemCategories = await prisma.pharmacyItemCategory.findMany()
     * 
     * // Get first 10 PharmacyItemCategories
     * const pharmacyItemCategories = await prisma.pharmacyItemCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pharmacyItemCategoryWithIdOnly = await prisma.pharmacyItemCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PharmacyItemCategoryFindManyArgs>(args?: SelectSubset<T, PharmacyItemCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PharmacyItemCategory.
     * @param {PharmacyItemCategoryCreateArgs} args - Arguments to create a PharmacyItemCategory.
     * @example
     * // Create one PharmacyItemCategory
     * const PharmacyItemCategory = await prisma.pharmacyItemCategory.create({
     *   data: {
     *     // ... data to create a PharmacyItemCategory
     *   }
     * })
     * 
     */
    create<T extends PharmacyItemCategoryCreateArgs>(args: SelectSubset<T, PharmacyItemCategoryCreateArgs<ExtArgs>>): Prisma__PharmacyItemCategoryClient<$Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PharmacyItemCategories.
     * @param {PharmacyItemCategoryCreateManyArgs} args - Arguments to create many PharmacyItemCategories.
     * @example
     * // Create many PharmacyItemCategories
     * const pharmacyItemCategory = await prisma.pharmacyItemCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PharmacyItemCategoryCreateManyArgs>(args?: SelectSubset<T, PharmacyItemCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PharmacyItemCategories and returns the data saved in the database.
     * @param {PharmacyItemCategoryCreateManyAndReturnArgs} args - Arguments to create many PharmacyItemCategories.
     * @example
     * // Create many PharmacyItemCategories
     * const pharmacyItemCategory = await prisma.pharmacyItemCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PharmacyItemCategories and only return the `id`
     * const pharmacyItemCategoryWithIdOnly = await prisma.pharmacyItemCategory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PharmacyItemCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, PharmacyItemCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PharmacyItemCategory.
     * @param {PharmacyItemCategoryDeleteArgs} args - Arguments to delete one PharmacyItemCategory.
     * @example
     * // Delete one PharmacyItemCategory
     * const PharmacyItemCategory = await prisma.pharmacyItemCategory.delete({
     *   where: {
     *     // ... filter to delete one PharmacyItemCategory
     *   }
     * })
     * 
     */
    delete<T extends PharmacyItemCategoryDeleteArgs>(args: SelectSubset<T, PharmacyItemCategoryDeleteArgs<ExtArgs>>): Prisma__PharmacyItemCategoryClient<$Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PharmacyItemCategory.
     * @param {PharmacyItemCategoryUpdateArgs} args - Arguments to update one PharmacyItemCategory.
     * @example
     * // Update one PharmacyItemCategory
     * const pharmacyItemCategory = await prisma.pharmacyItemCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PharmacyItemCategoryUpdateArgs>(args: SelectSubset<T, PharmacyItemCategoryUpdateArgs<ExtArgs>>): Prisma__PharmacyItemCategoryClient<$Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PharmacyItemCategories.
     * @param {PharmacyItemCategoryDeleteManyArgs} args - Arguments to filter PharmacyItemCategories to delete.
     * @example
     * // Delete a few PharmacyItemCategories
     * const { count } = await prisma.pharmacyItemCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PharmacyItemCategoryDeleteManyArgs>(args?: SelectSubset<T, PharmacyItemCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PharmacyItemCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyItemCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PharmacyItemCategories
     * const pharmacyItemCategory = await prisma.pharmacyItemCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PharmacyItemCategoryUpdateManyArgs>(args: SelectSubset<T, PharmacyItemCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PharmacyItemCategories and returns the data updated in the database.
     * @param {PharmacyItemCategoryUpdateManyAndReturnArgs} args - Arguments to update many PharmacyItemCategories.
     * @example
     * // Update many PharmacyItemCategories
     * const pharmacyItemCategory = await prisma.pharmacyItemCategory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PharmacyItemCategories and only return the `id`
     * const pharmacyItemCategoryWithIdOnly = await prisma.pharmacyItemCategory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PharmacyItemCategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, PharmacyItemCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PharmacyItemCategory.
     * @param {PharmacyItemCategoryUpsertArgs} args - Arguments to update or create a PharmacyItemCategory.
     * @example
     * // Update or create a PharmacyItemCategory
     * const pharmacyItemCategory = await prisma.pharmacyItemCategory.upsert({
     *   create: {
     *     // ... data to create a PharmacyItemCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PharmacyItemCategory we want to update
     *   }
     * })
     */
    upsert<T extends PharmacyItemCategoryUpsertArgs>(args: SelectSubset<T, PharmacyItemCategoryUpsertArgs<ExtArgs>>): Prisma__PharmacyItemCategoryClient<$Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PharmacyItemCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyItemCategoryCountArgs} args - Arguments to filter PharmacyItemCategories to count.
     * @example
     * // Count the number of PharmacyItemCategories
     * const count = await prisma.pharmacyItemCategory.count({
     *   where: {
     *     // ... the filter for the PharmacyItemCategories we want to count
     *   }
     * })
    **/
    count<T extends PharmacyItemCategoryCountArgs>(
      args?: Subset<T, PharmacyItemCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PharmacyItemCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PharmacyItemCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyItemCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PharmacyItemCategoryAggregateArgs>(args: Subset<T, PharmacyItemCategoryAggregateArgs>): Prisma.PrismaPromise<GetPharmacyItemCategoryAggregateType<T>>

    /**
     * Group by PharmacyItemCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyItemCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PharmacyItemCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PharmacyItemCategoryGroupByArgs['orderBy'] }
        : { orderBy?: PharmacyItemCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PharmacyItemCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPharmacyItemCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PharmacyItemCategory model
   */
  readonly fields: PharmacyItemCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PharmacyItemCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PharmacyItemCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    items<T extends PharmacyItemCategory$itemsArgs<ExtArgs> = {}>(args?: Subset<T, PharmacyItemCategory$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PharmacyItemCategory model
   */
  interface PharmacyItemCategoryFieldRefs {
    readonly id: FieldRef<"PharmacyItemCategory", 'String'>
    readonly name: FieldRef<"PharmacyItemCategory", 'String'>
    readonly createdAt: FieldRef<"PharmacyItemCategory", 'DateTime'>
    readonly updatedAt: FieldRef<"PharmacyItemCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PharmacyItemCategory findUnique
   */
  export type PharmacyItemCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItemCategory
     */
    select?: PharmacyItemCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItemCategory
     */
    omit?: PharmacyItemCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PharmacyItemCategory to fetch.
     */
    where: PharmacyItemCategoryWhereUniqueInput
  }

  /**
   * PharmacyItemCategory findUniqueOrThrow
   */
  export type PharmacyItemCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItemCategory
     */
    select?: PharmacyItemCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItemCategory
     */
    omit?: PharmacyItemCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PharmacyItemCategory to fetch.
     */
    where: PharmacyItemCategoryWhereUniqueInput
  }

  /**
   * PharmacyItemCategory findFirst
   */
  export type PharmacyItemCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItemCategory
     */
    select?: PharmacyItemCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItemCategory
     */
    omit?: PharmacyItemCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PharmacyItemCategory to fetch.
     */
    where?: PharmacyItemCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PharmacyItemCategories to fetch.
     */
    orderBy?: PharmacyItemCategoryOrderByWithRelationInput | PharmacyItemCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PharmacyItemCategories.
     */
    cursor?: PharmacyItemCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PharmacyItemCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PharmacyItemCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PharmacyItemCategories.
     */
    distinct?: PharmacyItemCategoryScalarFieldEnum | PharmacyItemCategoryScalarFieldEnum[]
  }

  /**
   * PharmacyItemCategory findFirstOrThrow
   */
  export type PharmacyItemCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItemCategory
     */
    select?: PharmacyItemCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItemCategory
     */
    omit?: PharmacyItemCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PharmacyItemCategory to fetch.
     */
    where?: PharmacyItemCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PharmacyItemCategories to fetch.
     */
    orderBy?: PharmacyItemCategoryOrderByWithRelationInput | PharmacyItemCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PharmacyItemCategories.
     */
    cursor?: PharmacyItemCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PharmacyItemCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PharmacyItemCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PharmacyItemCategories.
     */
    distinct?: PharmacyItemCategoryScalarFieldEnum | PharmacyItemCategoryScalarFieldEnum[]
  }

  /**
   * PharmacyItemCategory findMany
   */
  export type PharmacyItemCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItemCategory
     */
    select?: PharmacyItemCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItemCategory
     */
    omit?: PharmacyItemCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PharmacyItemCategories to fetch.
     */
    where?: PharmacyItemCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PharmacyItemCategories to fetch.
     */
    orderBy?: PharmacyItemCategoryOrderByWithRelationInput | PharmacyItemCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PharmacyItemCategories.
     */
    cursor?: PharmacyItemCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PharmacyItemCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PharmacyItemCategories.
     */
    skip?: number
    distinct?: PharmacyItemCategoryScalarFieldEnum | PharmacyItemCategoryScalarFieldEnum[]
  }

  /**
   * PharmacyItemCategory create
   */
  export type PharmacyItemCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItemCategory
     */
    select?: PharmacyItemCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItemCategory
     */
    omit?: PharmacyItemCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a PharmacyItemCategory.
     */
    data: XOR<PharmacyItemCategoryCreateInput, PharmacyItemCategoryUncheckedCreateInput>
  }

  /**
   * PharmacyItemCategory createMany
   */
  export type PharmacyItemCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PharmacyItemCategories.
     */
    data: PharmacyItemCategoryCreateManyInput | PharmacyItemCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PharmacyItemCategory createManyAndReturn
   */
  export type PharmacyItemCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItemCategory
     */
    select?: PharmacyItemCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItemCategory
     */
    omit?: PharmacyItemCategoryOmit<ExtArgs> | null
    /**
     * The data used to create many PharmacyItemCategories.
     */
    data: PharmacyItemCategoryCreateManyInput | PharmacyItemCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PharmacyItemCategory update
   */
  export type PharmacyItemCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItemCategory
     */
    select?: PharmacyItemCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItemCategory
     */
    omit?: PharmacyItemCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a PharmacyItemCategory.
     */
    data: XOR<PharmacyItemCategoryUpdateInput, PharmacyItemCategoryUncheckedUpdateInput>
    /**
     * Choose, which PharmacyItemCategory to update.
     */
    where: PharmacyItemCategoryWhereUniqueInput
  }

  /**
   * PharmacyItemCategory updateMany
   */
  export type PharmacyItemCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PharmacyItemCategories.
     */
    data: XOR<PharmacyItemCategoryUpdateManyMutationInput, PharmacyItemCategoryUncheckedUpdateManyInput>
    /**
     * Filter which PharmacyItemCategories to update
     */
    where?: PharmacyItemCategoryWhereInput
    /**
     * Limit how many PharmacyItemCategories to update.
     */
    limit?: number
  }

  /**
   * PharmacyItemCategory updateManyAndReturn
   */
  export type PharmacyItemCategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItemCategory
     */
    select?: PharmacyItemCategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItemCategory
     */
    omit?: PharmacyItemCategoryOmit<ExtArgs> | null
    /**
     * The data used to update PharmacyItemCategories.
     */
    data: XOR<PharmacyItemCategoryUpdateManyMutationInput, PharmacyItemCategoryUncheckedUpdateManyInput>
    /**
     * Filter which PharmacyItemCategories to update
     */
    where?: PharmacyItemCategoryWhereInput
    /**
     * Limit how many PharmacyItemCategories to update.
     */
    limit?: number
  }

  /**
   * PharmacyItemCategory upsert
   */
  export type PharmacyItemCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItemCategory
     */
    select?: PharmacyItemCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItemCategory
     */
    omit?: PharmacyItemCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the PharmacyItemCategory to update in case it exists.
     */
    where: PharmacyItemCategoryWhereUniqueInput
    /**
     * In case the PharmacyItemCategory found by the `where` argument doesn't exist, create a new PharmacyItemCategory with this data.
     */
    create: XOR<PharmacyItemCategoryCreateInput, PharmacyItemCategoryUncheckedCreateInput>
    /**
     * In case the PharmacyItemCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PharmacyItemCategoryUpdateInput, PharmacyItemCategoryUncheckedUpdateInput>
  }

  /**
   * PharmacyItemCategory delete
   */
  export type PharmacyItemCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItemCategory
     */
    select?: PharmacyItemCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItemCategory
     */
    omit?: PharmacyItemCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemCategoryInclude<ExtArgs> | null
    /**
     * Filter which PharmacyItemCategory to delete.
     */
    where: PharmacyItemCategoryWhereUniqueInput
  }

  /**
   * PharmacyItemCategory deleteMany
   */
  export type PharmacyItemCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PharmacyItemCategories to delete
     */
    where?: PharmacyItemCategoryWhereInput
    /**
     * Limit how many PharmacyItemCategories to delete.
     */
    limit?: number
  }

  /**
   * PharmacyItemCategory.items
   */
  export type PharmacyItemCategory$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItem
     */
    select?: PharmacyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItem
     */
    omit?: PharmacyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemInclude<ExtArgs> | null
    where?: PharmacyItemWhereInput
    orderBy?: PharmacyItemOrderByWithRelationInput | PharmacyItemOrderByWithRelationInput[]
    cursor?: PharmacyItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PharmacyItemScalarFieldEnum | PharmacyItemScalarFieldEnum[]
  }

  /**
   * PharmacyItemCategory without action
   */
  export type PharmacyItemCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItemCategory
     */
    select?: PharmacyItemCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItemCategory
     */
    omit?: PharmacyItemCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemCategoryInclude<ExtArgs> | null
  }


  /**
   * Model PharmacyItem
   */

  export type AggregatePharmacyItem = {
    _count: PharmacyItemCountAggregateOutputType | null
    _avg: PharmacyItemAvgAggregateOutputType | null
    _sum: PharmacyItemSumAggregateOutputType | null
    _min: PharmacyItemMinAggregateOutputType | null
    _max: PharmacyItemMaxAggregateOutputType | null
  }

  export type PharmacyItemAvgAggregateOutputType = {
    stock: number | null
  }

  export type PharmacyItemSumAggregateOutputType = {
    stock: number | null
  }

  export type PharmacyItemMinAggregateOutputType = {
    id: string | null
    brandId: string | null
    categoryId: string | null
    name: string | null
    form: $Enums.PharmacyItemForm | null
    route: $Enums.PharmacyItemRoute | null
    strength: string | null
    stock: number | null
    unit: string | null
    sku: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PharmacyItemMaxAggregateOutputType = {
    id: string | null
    brandId: string | null
    categoryId: string | null
    name: string | null
    form: $Enums.PharmacyItemForm | null
    route: $Enums.PharmacyItemRoute | null
    strength: string | null
    stock: number | null
    unit: string | null
    sku: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PharmacyItemCountAggregateOutputType = {
    id: number
    brandId: number
    categoryId: number
    name: number
    form: number
    route: number
    strength: number
    stock: number
    unit: number
    sku: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PharmacyItemAvgAggregateInputType = {
    stock?: true
  }

  export type PharmacyItemSumAggregateInputType = {
    stock?: true
  }

  export type PharmacyItemMinAggregateInputType = {
    id?: true
    brandId?: true
    categoryId?: true
    name?: true
    form?: true
    route?: true
    strength?: true
    stock?: true
    unit?: true
    sku?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PharmacyItemMaxAggregateInputType = {
    id?: true
    brandId?: true
    categoryId?: true
    name?: true
    form?: true
    route?: true
    strength?: true
    stock?: true
    unit?: true
    sku?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PharmacyItemCountAggregateInputType = {
    id?: true
    brandId?: true
    categoryId?: true
    name?: true
    form?: true
    route?: true
    strength?: true
    stock?: true
    unit?: true
    sku?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PharmacyItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PharmacyItem to aggregate.
     */
    where?: PharmacyItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PharmacyItems to fetch.
     */
    orderBy?: PharmacyItemOrderByWithRelationInput | PharmacyItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PharmacyItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PharmacyItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PharmacyItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PharmacyItems
    **/
    _count?: true | PharmacyItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PharmacyItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PharmacyItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PharmacyItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PharmacyItemMaxAggregateInputType
  }

  export type GetPharmacyItemAggregateType<T extends PharmacyItemAggregateArgs> = {
        [P in keyof T & keyof AggregatePharmacyItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePharmacyItem[P]>
      : GetScalarType<T[P], AggregatePharmacyItem[P]>
  }




  export type PharmacyItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PharmacyItemWhereInput
    orderBy?: PharmacyItemOrderByWithAggregationInput | PharmacyItemOrderByWithAggregationInput[]
    by: PharmacyItemScalarFieldEnum[] | PharmacyItemScalarFieldEnum
    having?: PharmacyItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PharmacyItemCountAggregateInputType | true
    _avg?: PharmacyItemAvgAggregateInputType
    _sum?: PharmacyItemSumAggregateInputType
    _min?: PharmacyItemMinAggregateInputType
    _max?: PharmacyItemMaxAggregateInputType
  }

  export type PharmacyItemGroupByOutputType = {
    id: string
    brandId: string
    categoryId: string
    name: string
    form: $Enums.PharmacyItemForm
    route: $Enums.PharmacyItemRoute
    strength: string
    stock: number
    unit: string
    sku: string | null
    createdAt: Date
    updatedAt: Date
    _count: PharmacyItemCountAggregateOutputType | null
    _avg: PharmacyItemAvgAggregateOutputType | null
    _sum: PharmacyItemSumAggregateOutputType | null
    _min: PharmacyItemMinAggregateOutputType | null
    _max: PharmacyItemMaxAggregateOutputType | null
  }

  type GetPharmacyItemGroupByPayload<T extends PharmacyItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PharmacyItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PharmacyItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PharmacyItemGroupByOutputType[P]>
            : GetScalarType<T[P], PharmacyItemGroupByOutputType[P]>
        }
      >
    >


  export type PharmacyItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    brandId?: boolean
    categoryId?: boolean
    name?: boolean
    form?: boolean
    route?: boolean
    strength?: boolean
    stock?: boolean
    unit?: boolean
    sku?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brand?: boolean | PharmacyBrandDefaultArgs<ExtArgs>
    category?: boolean | PharmacyItemCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pharmacyItem"]>

  export type PharmacyItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    brandId?: boolean
    categoryId?: boolean
    name?: boolean
    form?: boolean
    route?: boolean
    strength?: boolean
    stock?: boolean
    unit?: boolean
    sku?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brand?: boolean | PharmacyBrandDefaultArgs<ExtArgs>
    category?: boolean | PharmacyItemCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pharmacyItem"]>

  export type PharmacyItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    brandId?: boolean
    categoryId?: boolean
    name?: boolean
    form?: boolean
    route?: boolean
    strength?: boolean
    stock?: boolean
    unit?: boolean
    sku?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    brand?: boolean | PharmacyBrandDefaultArgs<ExtArgs>
    category?: boolean | PharmacyItemCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pharmacyItem"]>

  export type PharmacyItemSelectScalar = {
    id?: boolean
    brandId?: boolean
    categoryId?: boolean
    name?: boolean
    form?: boolean
    route?: boolean
    strength?: boolean
    stock?: boolean
    unit?: boolean
    sku?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PharmacyItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "brandId" | "categoryId" | "name" | "form" | "route" | "strength" | "stock" | "unit" | "sku" | "createdAt" | "updatedAt", ExtArgs["result"]["pharmacyItem"]>
  export type PharmacyItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | PharmacyBrandDefaultArgs<ExtArgs>
    category?: boolean | PharmacyItemCategoryDefaultArgs<ExtArgs>
  }
  export type PharmacyItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | PharmacyBrandDefaultArgs<ExtArgs>
    category?: boolean | PharmacyItemCategoryDefaultArgs<ExtArgs>
  }
  export type PharmacyItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | PharmacyBrandDefaultArgs<ExtArgs>
    category?: boolean | PharmacyItemCategoryDefaultArgs<ExtArgs>
  }

  export type $PharmacyItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PharmacyItem"
    objects: {
      brand: Prisma.$PharmacyBrandPayload<ExtArgs>
      category: Prisma.$PharmacyItemCategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      brandId: string
      categoryId: string
      name: string
      form: $Enums.PharmacyItemForm
      route: $Enums.PharmacyItemRoute
      strength: string
      stock: number
      unit: string
      sku: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["pharmacyItem"]>
    composites: {}
  }

  type PharmacyItemGetPayload<S extends boolean | null | undefined | PharmacyItemDefaultArgs> = $Result.GetResult<Prisma.$PharmacyItemPayload, S>

  type PharmacyItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PharmacyItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PharmacyItemCountAggregateInputType | true
    }

  export interface PharmacyItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PharmacyItem'], meta: { name: 'PharmacyItem' } }
    /**
     * Find zero or one PharmacyItem that matches the filter.
     * @param {PharmacyItemFindUniqueArgs} args - Arguments to find a PharmacyItem
     * @example
     * // Get one PharmacyItem
     * const pharmacyItem = await prisma.pharmacyItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PharmacyItemFindUniqueArgs>(args: SelectSubset<T, PharmacyItemFindUniqueArgs<ExtArgs>>): Prisma__PharmacyItemClient<$Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PharmacyItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PharmacyItemFindUniqueOrThrowArgs} args - Arguments to find a PharmacyItem
     * @example
     * // Get one PharmacyItem
     * const pharmacyItem = await prisma.pharmacyItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PharmacyItemFindUniqueOrThrowArgs>(args: SelectSubset<T, PharmacyItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PharmacyItemClient<$Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PharmacyItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyItemFindFirstArgs} args - Arguments to find a PharmacyItem
     * @example
     * // Get one PharmacyItem
     * const pharmacyItem = await prisma.pharmacyItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PharmacyItemFindFirstArgs>(args?: SelectSubset<T, PharmacyItemFindFirstArgs<ExtArgs>>): Prisma__PharmacyItemClient<$Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PharmacyItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyItemFindFirstOrThrowArgs} args - Arguments to find a PharmacyItem
     * @example
     * // Get one PharmacyItem
     * const pharmacyItem = await prisma.pharmacyItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PharmacyItemFindFirstOrThrowArgs>(args?: SelectSubset<T, PharmacyItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__PharmacyItemClient<$Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PharmacyItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PharmacyItems
     * const pharmacyItems = await prisma.pharmacyItem.findMany()
     * 
     * // Get first 10 PharmacyItems
     * const pharmacyItems = await prisma.pharmacyItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pharmacyItemWithIdOnly = await prisma.pharmacyItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PharmacyItemFindManyArgs>(args?: SelectSubset<T, PharmacyItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PharmacyItem.
     * @param {PharmacyItemCreateArgs} args - Arguments to create a PharmacyItem.
     * @example
     * // Create one PharmacyItem
     * const PharmacyItem = await prisma.pharmacyItem.create({
     *   data: {
     *     // ... data to create a PharmacyItem
     *   }
     * })
     * 
     */
    create<T extends PharmacyItemCreateArgs>(args: SelectSubset<T, PharmacyItemCreateArgs<ExtArgs>>): Prisma__PharmacyItemClient<$Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PharmacyItems.
     * @param {PharmacyItemCreateManyArgs} args - Arguments to create many PharmacyItems.
     * @example
     * // Create many PharmacyItems
     * const pharmacyItem = await prisma.pharmacyItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PharmacyItemCreateManyArgs>(args?: SelectSubset<T, PharmacyItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PharmacyItems and returns the data saved in the database.
     * @param {PharmacyItemCreateManyAndReturnArgs} args - Arguments to create many PharmacyItems.
     * @example
     * // Create many PharmacyItems
     * const pharmacyItem = await prisma.pharmacyItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PharmacyItems and only return the `id`
     * const pharmacyItemWithIdOnly = await prisma.pharmacyItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PharmacyItemCreateManyAndReturnArgs>(args?: SelectSubset<T, PharmacyItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PharmacyItem.
     * @param {PharmacyItemDeleteArgs} args - Arguments to delete one PharmacyItem.
     * @example
     * // Delete one PharmacyItem
     * const PharmacyItem = await prisma.pharmacyItem.delete({
     *   where: {
     *     // ... filter to delete one PharmacyItem
     *   }
     * })
     * 
     */
    delete<T extends PharmacyItemDeleteArgs>(args: SelectSubset<T, PharmacyItemDeleteArgs<ExtArgs>>): Prisma__PharmacyItemClient<$Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PharmacyItem.
     * @param {PharmacyItemUpdateArgs} args - Arguments to update one PharmacyItem.
     * @example
     * // Update one PharmacyItem
     * const pharmacyItem = await prisma.pharmacyItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PharmacyItemUpdateArgs>(args: SelectSubset<T, PharmacyItemUpdateArgs<ExtArgs>>): Prisma__PharmacyItemClient<$Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PharmacyItems.
     * @param {PharmacyItemDeleteManyArgs} args - Arguments to filter PharmacyItems to delete.
     * @example
     * // Delete a few PharmacyItems
     * const { count } = await prisma.pharmacyItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PharmacyItemDeleteManyArgs>(args?: SelectSubset<T, PharmacyItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PharmacyItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PharmacyItems
     * const pharmacyItem = await prisma.pharmacyItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PharmacyItemUpdateManyArgs>(args: SelectSubset<T, PharmacyItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PharmacyItems and returns the data updated in the database.
     * @param {PharmacyItemUpdateManyAndReturnArgs} args - Arguments to update many PharmacyItems.
     * @example
     * // Update many PharmacyItems
     * const pharmacyItem = await prisma.pharmacyItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PharmacyItems and only return the `id`
     * const pharmacyItemWithIdOnly = await prisma.pharmacyItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PharmacyItemUpdateManyAndReturnArgs>(args: SelectSubset<T, PharmacyItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PharmacyItem.
     * @param {PharmacyItemUpsertArgs} args - Arguments to update or create a PharmacyItem.
     * @example
     * // Update or create a PharmacyItem
     * const pharmacyItem = await prisma.pharmacyItem.upsert({
     *   create: {
     *     // ... data to create a PharmacyItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PharmacyItem we want to update
     *   }
     * })
     */
    upsert<T extends PharmacyItemUpsertArgs>(args: SelectSubset<T, PharmacyItemUpsertArgs<ExtArgs>>): Prisma__PharmacyItemClient<$Result.GetResult<Prisma.$PharmacyItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PharmacyItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyItemCountArgs} args - Arguments to filter PharmacyItems to count.
     * @example
     * // Count the number of PharmacyItems
     * const count = await prisma.pharmacyItem.count({
     *   where: {
     *     // ... the filter for the PharmacyItems we want to count
     *   }
     * })
    **/
    count<T extends PharmacyItemCountArgs>(
      args?: Subset<T, PharmacyItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PharmacyItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PharmacyItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PharmacyItemAggregateArgs>(args: Subset<T, PharmacyItemAggregateArgs>): Prisma.PrismaPromise<GetPharmacyItemAggregateType<T>>

    /**
     * Group by PharmacyItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacyItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PharmacyItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PharmacyItemGroupByArgs['orderBy'] }
        : { orderBy?: PharmacyItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PharmacyItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPharmacyItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PharmacyItem model
   */
  readonly fields: PharmacyItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PharmacyItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PharmacyItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brand<T extends PharmacyBrandDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PharmacyBrandDefaultArgs<ExtArgs>>): Prisma__PharmacyBrandClient<$Result.GetResult<Prisma.$PharmacyBrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    category<T extends PharmacyItemCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PharmacyItemCategoryDefaultArgs<ExtArgs>>): Prisma__PharmacyItemCategoryClient<$Result.GetResult<Prisma.$PharmacyItemCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PharmacyItem model
   */
  interface PharmacyItemFieldRefs {
    readonly id: FieldRef<"PharmacyItem", 'String'>
    readonly brandId: FieldRef<"PharmacyItem", 'String'>
    readonly categoryId: FieldRef<"PharmacyItem", 'String'>
    readonly name: FieldRef<"PharmacyItem", 'String'>
    readonly form: FieldRef<"PharmacyItem", 'PharmacyItemForm'>
    readonly route: FieldRef<"PharmacyItem", 'PharmacyItemRoute'>
    readonly strength: FieldRef<"PharmacyItem", 'String'>
    readonly stock: FieldRef<"PharmacyItem", 'Int'>
    readonly unit: FieldRef<"PharmacyItem", 'String'>
    readonly sku: FieldRef<"PharmacyItem", 'String'>
    readonly createdAt: FieldRef<"PharmacyItem", 'DateTime'>
    readonly updatedAt: FieldRef<"PharmacyItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PharmacyItem findUnique
   */
  export type PharmacyItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItem
     */
    select?: PharmacyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItem
     */
    omit?: PharmacyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemInclude<ExtArgs> | null
    /**
     * Filter, which PharmacyItem to fetch.
     */
    where: PharmacyItemWhereUniqueInput
  }

  /**
   * PharmacyItem findUniqueOrThrow
   */
  export type PharmacyItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItem
     */
    select?: PharmacyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItem
     */
    omit?: PharmacyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemInclude<ExtArgs> | null
    /**
     * Filter, which PharmacyItem to fetch.
     */
    where: PharmacyItemWhereUniqueInput
  }

  /**
   * PharmacyItem findFirst
   */
  export type PharmacyItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItem
     */
    select?: PharmacyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItem
     */
    omit?: PharmacyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemInclude<ExtArgs> | null
    /**
     * Filter, which PharmacyItem to fetch.
     */
    where?: PharmacyItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PharmacyItems to fetch.
     */
    orderBy?: PharmacyItemOrderByWithRelationInput | PharmacyItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PharmacyItems.
     */
    cursor?: PharmacyItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PharmacyItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PharmacyItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PharmacyItems.
     */
    distinct?: PharmacyItemScalarFieldEnum | PharmacyItemScalarFieldEnum[]
  }

  /**
   * PharmacyItem findFirstOrThrow
   */
  export type PharmacyItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItem
     */
    select?: PharmacyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItem
     */
    omit?: PharmacyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemInclude<ExtArgs> | null
    /**
     * Filter, which PharmacyItem to fetch.
     */
    where?: PharmacyItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PharmacyItems to fetch.
     */
    orderBy?: PharmacyItemOrderByWithRelationInput | PharmacyItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PharmacyItems.
     */
    cursor?: PharmacyItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PharmacyItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PharmacyItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PharmacyItems.
     */
    distinct?: PharmacyItemScalarFieldEnum | PharmacyItemScalarFieldEnum[]
  }

  /**
   * PharmacyItem findMany
   */
  export type PharmacyItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItem
     */
    select?: PharmacyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItem
     */
    omit?: PharmacyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemInclude<ExtArgs> | null
    /**
     * Filter, which PharmacyItems to fetch.
     */
    where?: PharmacyItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PharmacyItems to fetch.
     */
    orderBy?: PharmacyItemOrderByWithRelationInput | PharmacyItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PharmacyItems.
     */
    cursor?: PharmacyItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PharmacyItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PharmacyItems.
     */
    skip?: number
    distinct?: PharmacyItemScalarFieldEnum | PharmacyItemScalarFieldEnum[]
  }

  /**
   * PharmacyItem create
   */
  export type PharmacyItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItem
     */
    select?: PharmacyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItem
     */
    omit?: PharmacyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemInclude<ExtArgs> | null
    /**
     * The data needed to create a PharmacyItem.
     */
    data: XOR<PharmacyItemCreateInput, PharmacyItemUncheckedCreateInput>
  }

  /**
   * PharmacyItem createMany
   */
  export type PharmacyItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PharmacyItems.
     */
    data: PharmacyItemCreateManyInput | PharmacyItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PharmacyItem createManyAndReturn
   */
  export type PharmacyItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItem
     */
    select?: PharmacyItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItem
     */
    omit?: PharmacyItemOmit<ExtArgs> | null
    /**
     * The data used to create many PharmacyItems.
     */
    data: PharmacyItemCreateManyInput | PharmacyItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PharmacyItem update
   */
  export type PharmacyItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItem
     */
    select?: PharmacyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItem
     */
    omit?: PharmacyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemInclude<ExtArgs> | null
    /**
     * The data needed to update a PharmacyItem.
     */
    data: XOR<PharmacyItemUpdateInput, PharmacyItemUncheckedUpdateInput>
    /**
     * Choose, which PharmacyItem to update.
     */
    where: PharmacyItemWhereUniqueInput
  }

  /**
   * PharmacyItem updateMany
   */
  export type PharmacyItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PharmacyItems.
     */
    data: XOR<PharmacyItemUpdateManyMutationInput, PharmacyItemUncheckedUpdateManyInput>
    /**
     * Filter which PharmacyItems to update
     */
    where?: PharmacyItemWhereInput
    /**
     * Limit how many PharmacyItems to update.
     */
    limit?: number
  }

  /**
   * PharmacyItem updateManyAndReturn
   */
  export type PharmacyItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItem
     */
    select?: PharmacyItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItem
     */
    omit?: PharmacyItemOmit<ExtArgs> | null
    /**
     * The data used to update PharmacyItems.
     */
    data: XOR<PharmacyItemUpdateManyMutationInput, PharmacyItemUncheckedUpdateManyInput>
    /**
     * Filter which PharmacyItems to update
     */
    where?: PharmacyItemWhereInput
    /**
     * Limit how many PharmacyItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PharmacyItem upsert
   */
  export type PharmacyItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItem
     */
    select?: PharmacyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItem
     */
    omit?: PharmacyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemInclude<ExtArgs> | null
    /**
     * The filter to search for the PharmacyItem to update in case it exists.
     */
    where: PharmacyItemWhereUniqueInput
    /**
     * In case the PharmacyItem found by the `where` argument doesn't exist, create a new PharmacyItem with this data.
     */
    create: XOR<PharmacyItemCreateInput, PharmacyItemUncheckedCreateInput>
    /**
     * In case the PharmacyItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PharmacyItemUpdateInput, PharmacyItemUncheckedUpdateInput>
  }

  /**
   * PharmacyItem delete
   */
  export type PharmacyItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItem
     */
    select?: PharmacyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItem
     */
    omit?: PharmacyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemInclude<ExtArgs> | null
    /**
     * Filter which PharmacyItem to delete.
     */
    where: PharmacyItemWhereUniqueInput
  }

  /**
   * PharmacyItem deleteMany
   */
  export type PharmacyItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PharmacyItems to delete
     */
    where?: PharmacyItemWhereInput
    /**
     * Limit how many PharmacyItems to delete.
     */
    limit?: number
  }

  /**
   * PharmacyItem without action
   */
  export type PharmacyItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PharmacyItem
     */
    select?: PharmacyItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PharmacyItem
     */
    omit?: PharmacyItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PharmacyItemInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    role: $Enums.UserRole | null
    status: $Enums.UserStatus | null
    isEmailVerified: boolean | null
    emailVerifiedAt: Date | null
    avatar: string | null
    dateOfBirth: Date | null
    gender: $Enums.Gender | null
    address: string | null
    city: string | null
    province: string | null
    zipCode: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
    createdBy: string | null
    updatedBy: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    role: $Enums.UserRole | null
    status: $Enums.UserStatus | null
    isEmailVerified: boolean | null
    emailVerifiedAt: Date | null
    avatar: string | null
    dateOfBirth: Date | null
    gender: $Enums.Gender | null
    address: string | null
    city: string | null
    province: string | null
    zipCode: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
    createdBy: string | null
    updatedBy: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    firstName: number
    lastName: number
    phone: number
    role: number
    status: number
    isEmailVerified: number
    emailVerifiedAt: number
    avatar: number
    dateOfBirth: number
    gender: number
    address: number
    city: number
    province: number
    zipCode: number
    createdAt: number
    updatedAt: number
    lastLoginAt: number
    createdBy: number
    updatedBy: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    phone?: true
    role?: true
    status?: true
    isEmailVerified?: true
    emailVerifiedAt?: true
    avatar?: true
    dateOfBirth?: true
    gender?: true
    address?: true
    city?: true
    province?: true
    zipCode?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    phone?: true
    role?: true
    status?: true
    isEmailVerified?: true
    emailVerifiedAt?: true
    avatar?: true
    dateOfBirth?: true
    gender?: true
    address?: true
    city?: true
    province?: true
    zipCode?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    phone?: true
    role?: true
    status?: true
    isEmailVerified?: true
    emailVerifiedAt?: true
    avatar?: true
    dateOfBirth?: true
    gender?: true
    address?: true
    city?: true
    province?: true
    zipCode?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
    createdBy?: true
    updatedBy?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone: string | null
    role: $Enums.UserRole
    status: $Enums.UserStatus
    isEmailVerified: boolean
    emailVerifiedAt: Date | null
    avatar: string | null
    dateOfBirth: Date | null
    gender: $Enums.Gender | null
    address: string | null
    city: string | null
    province: string | null
    zipCode: string | null
    createdAt: Date
    updatedAt: Date
    lastLoginAt: Date | null
    createdBy: string | null
    updatedBy: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    role?: boolean
    status?: boolean
    isEmailVerified?: boolean
    emailVerifiedAt?: boolean
    avatar?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    address?: boolean
    city?: boolean
    province?: boolean
    zipCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    refreshTokens?: boolean | User$refreshTokensArgs<ExtArgs>
    patientProfile?: boolean | User$patientProfileArgs<ExtArgs>
    staffProfile?: boolean | User$staffProfileArgs<ExtArgs>
    partnerProfile?: boolean | User$partnerProfileArgs<ExtArgs>
    doctorProfile?: boolean | User$doctorProfileArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    role?: boolean
    status?: boolean
    isEmailVerified?: boolean
    emailVerifiedAt?: boolean
    avatar?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    address?: boolean
    city?: boolean
    province?: boolean
    zipCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    role?: boolean
    status?: boolean
    isEmailVerified?: boolean
    emailVerifiedAt?: boolean
    avatar?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    address?: boolean
    city?: boolean
    province?: boolean
    zipCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    role?: boolean
    status?: boolean
    isEmailVerified?: boolean
    emailVerifiedAt?: boolean
    avatar?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    address?: boolean
    city?: boolean
    province?: boolean
    zipCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "firstName" | "lastName" | "phone" | "role" | "status" | "isEmailVerified" | "emailVerifiedAt" | "avatar" | "dateOfBirth" | "gender" | "address" | "city" | "province" | "zipCode" | "createdAt" | "updatedAt" | "lastLoginAt" | "createdBy" | "updatedBy", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    refreshTokens?: boolean | User$refreshTokensArgs<ExtArgs>
    patientProfile?: boolean | User$patientProfileArgs<ExtArgs>
    staffProfile?: boolean | User$staffProfileArgs<ExtArgs>
    partnerProfile?: boolean | User$partnerProfileArgs<ExtArgs>
    doctorProfile?: boolean | User$doctorProfileArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      refreshTokens: Prisma.$RefreshTokenPayload<ExtArgs>[]
      patientProfile: Prisma.$PatientPayload<ExtArgs> | null
      staffProfile: Prisma.$StaffPayload<ExtArgs> | null
      partnerProfile: Prisma.$PartnerPayload<ExtArgs> | null
      doctorProfile: Prisma.$DoctorPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      firstName: string
      lastName: string
      phone: string | null
      role: $Enums.UserRole
      status: $Enums.UserStatus
      isEmailVerified: boolean
      emailVerifiedAt: Date | null
      avatar: string | null
      dateOfBirth: Date | null
      gender: $Enums.Gender | null
      address: string | null
      city: string | null
      province: string | null
      zipCode: string | null
      createdAt: Date
      updatedAt: Date
      lastLoginAt: Date | null
      createdBy: string | null
      updatedBy: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    refreshTokens<T extends User$refreshTokensArgs<ExtArgs> = {}>(args?: Subset<T, User$refreshTokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    patientProfile<T extends User$patientProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$patientProfileArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    staffProfile<T extends User$staffProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$staffProfileArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    partnerProfile<T extends User$partnerProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$partnerProfileArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    doctorProfile<T extends User$doctorProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$doctorProfileArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly status: FieldRef<"User", 'UserStatus'>
    readonly isEmailVerified: FieldRef<"User", 'Boolean'>
    readonly emailVerifiedAt: FieldRef<"User", 'DateTime'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly dateOfBirth: FieldRef<"User", 'DateTime'>
    readonly gender: FieldRef<"User", 'Gender'>
    readonly address: FieldRef<"User", 'String'>
    readonly city: FieldRef<"User", 'String'>
    readonly province: FieldRef<"User", 'String'>
    readonly zipCode: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly createdBy: FieldRef<"User", 'String'>
    readonly updatedBy: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.refreshTokens
   */
  export type User$refreshTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    where?: RefreshTokenWhereInput
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    cursor?: RefreshTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * User.patientProfile
   */
  export type User$patientProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
  }

  /**
   * User.staffProfile
   */
  export type User$staffProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    where?: StaffWhereInput
  }

  /**
   * User.partnerProfile
   */
  export type User$partnerProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
    where?: PartnerWhereInput
  }

  /**
   * User.doctorProfile
   */
  export type User$doctorProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    where?: DoctorWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model RefreshToken
   */

  export type AggregateRefreshToken = {
    _count: RefreshTokenCountAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  export type RefreshTokenMinAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    expiresAt: Date | null
    createdAt: Date | null
    isRevoked: boolean | null
  }

  export type RefreshTokenMaxAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    expiresAt: Date | null
    createdAt: Date | null
    isRevoked: boolean | null
  }

  export type RefreshTokenCountAggregateOutputType = {
    id: number
    token: number
    userId: number
    expiresAt: number
    createdAt: number
    isRevoked: number
    _all: number
  }


  export type RefreshTokenMinAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expiresAt?: true
    createdAt?: true
    isRevoked?: true
  }

  export type RefreshTokenMaxAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expiresAt?: true
    createdAt?: true
    isRevoked?: true
  }

  export type RefreshTokenCountAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expiresAt?: true
    createdAt?: true
    isRevoked?: true
    _all?: true
  }

  export type RefreshTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshToken to aggregate.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RefreshTokens
    **/
    _count?: true | RefreshTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefreshTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type GetRefreshTokenAggregateType<T extends RefreshTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateRefreshToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefreshToken[P]>
      : GetScalarType<T[P], AggregateRefreshToken[P]>
  }




  export type RefreshTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefreshTokenWhereInput
    orderBy?: RefreshTokenOrderByWithAggregationInput | RefreshTokenOrderByWithAggregationInput[]
    by: RefreshTokenScalarFieldEnum[] | RefreshTokenScalarFieldEnum
    having?: RefreshTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefreshTokenCountAggregateInputType | true
    _min?: RefreshTokenMinAggregateInputType
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type RefreshTokenGroupByOutputType = {
    id: string
    token: string
    userId: string
    expiresAt: Date
    createdAt: Date
    isRevoked: boolean
    _count: RefreshTokenCountAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  type GetRefreshTokenGroupByPayload<T extends RefreshTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefreshTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefreshTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
            : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
        }
      >
    >


  export type RefreshTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    isRevoked?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    isRevoked?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    isRevoked?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectScalar = {
    id?: boolean
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    isRevoked?: boolean
  }

  export type RefreshTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "token" | "userId" | "expiresAt" | "createdAt" | "isRevoked", ExtArgs["result"]["refreshToken"]>
  export type RefreshTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RefreshTokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RefreshTokenIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RefreshTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RefreshToken"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      token: string
      userId: string
      expiresAt: Date
      createdAt: Date
      isRevoked: boolean
    }, ExtArgs["result"]["refreshToken"]>
    composites: {}
  }

  type RefreshTokenGetPayload<S extends boolean | null | undefined | RefreshTokenDefaultArgs> = $Result.GetResult<Prisma.$RefreshTokenPayload, S>

  type RefreshTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RefreshTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RefreshTokenCountAggregateInputType | true
    }

  export interface RefreshTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefreshToken'], meta: { name: 'RefreshToken' } }
    /**
     * Find zero or one RefreshToken that matches the filter.
     * @param {RefreshTokenFindUniqueArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RefreshTokenFindUniqueArgs>(args: SelectSubset<T, RefreshTokenFindUniqueArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RefreshToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RefreshTokenFindUniqueOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RefreshTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, RefreshTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RefreshToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RefreshTokenFindFirstArgs>(args?: SelectSubset<T, RefreshTokenFindFirstArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RefreshToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RefreshTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, RefreshTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RefreshTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany()
     * 
     * // Get first 10 RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refreshTokenWithIdOnly = await prisma.refreshToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RefreshTokenFindManyArgs>(args?: SelectSubset<T, RefreshTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RefreshToken.
     * @param {RefreshTokenCreateArgs} args - Arguments to create a RefreshToken.
     * @example
     * // Create one RefreshToken
     * const RefreshToken = await prisma.refreshToken.create({
     *   data: {
     *     // ... data to create a RefreshToken
     *   }
     * })
     * 
     */
    create<T extends RefreshTokenCreateArgs>(args: SelectSubset<T, RefreshTokenCreateArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RefreshTokens.
     * @param {RefreshTokenCreateManyArgs} args - Arguments to create many RefreshTokens.
     * @example
     * // Create many RefreshTokens
     * const refreshToken = await prisma.refreshToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RefreshTokenCreateManyArgs>(args?: SelectSubset<T, RefreshTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RefreshTokens and returns the data saved in the database.
     * @param {RefreshTokenCreateManyAndReturnArgs} args - Arguments to create many RefreshTokens.
     * @example
     * // Create many RefreshTokens
     * const refreshToken = await prisma.refreshToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RefreshTokens and only return the `id`
     * const refreshTokenWithIdOnly = await prisma.refreshToken.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RefreshTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, RefreshTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RefreshToken.
     * @param {RefreshTokenDeleteArgs} args - Arguments to delete one RefreshToken.
     * @example
     * // Delete one RefreshToken
     * const RefreshToken = await prisma.refreshToken.delete({
     *   where: {
     *     // ... filter to delete one RefreshToken
     *   }
     * })
     * 
     */
    delete<T extends RefreshTokenDeleteArgs>(args: SelectSubset<T, RefreshTokenDeleteArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RefreshToken.
     * @param {RefreshTokenUpdateArgs} args - Arguments to update one RefreshToken.
     * @example
     * // Update one RefreshToken
     * const refreshToken = await prisma.refreshToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RefreshTokenUpdateArgs>(args: SelectSubset<T, RefreshTokenUpdateArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RefreshTokens.
     * @param {RefreshTokenDeleteManyArgs} args - Arguments to filter RefreshTokens to delete.
     * @example
     * // Delete a few RefreshTokens
     * const { count } = await prisma.refreshToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RefreshTokenDeleteManyArgs>(args?: SelectSubset<T, RefreshTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RefreshTokens
     * const refreshToken = await prisma.refreshToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RefreshTokenUpdateManyArgs>(args: SelectSubset<T, RefreshTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefreshTokens and returns the data updated in the database.
     * @param {RefreshTokenUpdateManyAndReturnArgs} args - Arguments to update many RefreshTokens.
     * @example
     * // Update many RefreshTokens
     * const refreshToken = await prisma.refreshToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RefreshTokens and only return the `id`
     * const refreshTokenWithIdOnly = await prisma.refreshToken.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RefreshTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, RefreshTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RefreshToken.
     * @param {RefreshTokenUpsertArgs} args - Arguments to update or create a RefreshToken.
     * @example
     * // Update or create a RefreshToken
     * const refreshToken = await prisma.refreshToken.upsert({
     *   create: {
     *     // ... data to create a RefreshToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RefreshToken we want to update
     *   }
     * })
     */
    upsert<T extends RefreshTokenUpsertArgs>(args: SelectSubset<T, RefreshTokenUpsertArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenCountArgs} args - Arguments to filter RefreshTokens to count.
     * @example
     * // Count the number of RefreshTokens
     * const count = await prisma.refreshToken.count({
     *   where: {
     *     // ... the filter for the RefreshTokens we want to count
     *   }
     * })
    **/
    count<T extends RefreshTokenCountArgs>(
      args?: Subset<T, RefreshTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefreshTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefreshTokenAggregateArgs>(args: Subset<T, RefreshTokenAggregateArgs>): Prisma.PrismaPromise<GetRefreshTokenAggregateType<T>>

    /**
     * Group by RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefreshTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefreshTokenGroupByArgs['orderBy'] }
        : { orderBy?: RefreshTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefreshTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefreshTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RefreshToken model
   */
  readonly fields: RefreshTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RefreshToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefreshTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RefreshToken model
   */
  interface RefreshTokenFieldRefs {
    readonly id: FieldRef<"RefreshToken", 'String'>
    readonly token: FieldRef<"RefreshToken", 'String'>
    readonly userId: FieldRef<"RefreshToken", 'String'>
    readonly expiresAt: FieldRef<"RefreshToken", 'DateTime'>
    readonly createdAt: FieldRef<"RefreshToken", 'DateTime'>
    readonly isRevoked: FieldRef<"RefreshToken", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * RefreshToken findUnique
   */
  export type RefreshTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findUniqueOrThrow
   */
  export type RefreshTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findFirst
   */
  export type RefreshTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findFirstOrThrow
   */
  export type RefreshTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findMany
   */
  export type RefreshTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshTokens to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken create
   */
  export type RefreshTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a RefreshToken.
     */
    data: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
  }

  /**
   * RefreshToken createMany
   */
  export type RefreshTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RefreshTokens.
     */
    data: RefreshTokenCreateManyInput | RefreshTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefreshToken createManyAndReturn
   */
  export type RefreshTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * The data used to create many RefreshTokens.
     */
    data: RefreshTokenCreateManyInput | RefreshTokenCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RefreshToken update
   */
  export type RefreshTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a RefreshToken.
     */
    data: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
    /**
     * Choose, which RefreshToken to update.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken updateMany
   */
  export type RefreshTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RefreshTokens.
     */
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyInput>
    /**
     * Filter which RefreshTokens to update
     */
    where?: RefreshTokenWhereInput
    /**
     * Limit how many RefreshTokens to update.
     */
    limit?: number
  }

  /**
   * RefreshToken updateManyAndReturn
   */
  export type RefreshTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * The data used to update RefreshTokens.
     */
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyInput>
    /**
     * Filter which RefreshTokens to update
     */
    where?: RefreshTokenWhereInput
    /**
     * Limit how many RefreshTokens to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RefreshToken upsert
   */
  export type RefreshTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the RefreshToken to update in case it exists.
     */
    where: RefreshTokenWhereUniqueInput
    /**
     * In case the RefreshToken found by the `where` argument doesn't exist, create a new RefreshToken with this data.
     */
    create: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
    /**
     * In case the RefreshToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
  }

  /**
   * RefreshToken delete
   */
  export type RefreshTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter which RefreshToken to delete.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken deleteMany
   */
  export type RefreshTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshTokens to delete
     */
    where?: RefreshTokenWhereInput
    /**
     * Limit how many RefreshTokens to delete.
     */
    limit?: number
  }

  /**
   * RefreshToken without action
   */
  export type RefreshTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
  }


  /**
   * Model Patient
   */

  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientMinAggregateOutputType = {
    id: string | null
    userId: string | null
    patientNumber: string | null
    bloodType: $Enums.BloodType | null
    allergies: string | null
    medicalHistory: string | null
    emergencyContact: string | null
    emergencyPhone: string | null
    insuranceProvider: string | null
    insuranceNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    patientNumber: string | null
    bloodType: $Enums.BloodType | null
    allergies: string | null
    medicalHistory: string | null
    emergencyContact: string | null
    emergencyPhone: string | null
    insuranceProvider: string | null
    insuranceNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientCountAggregateOutputType = {
    id: number
    userId: number
    patientNumber: number
    bloodType: number
    allergies: number
    medicalHistory: number
    emergencyContact: number
    emergencyPhone: number
    insuranceProvider: number
    insuranceNumber: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PatientMinAggregateInputType = {
    id?: true
    userId?: true
    patientNumber?: true
    bloodType?: true
    allergies?: true
    medicalHistory?: true
    emergencyContact?: true
    emergencyPhone?: true
    insuranceProvider?: true
    insuranceNumber?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientMaxAggregateInputType = {
    id?: true
    userId?: true
    patientNumber?: true
    bloodType?: true
    allergies?: true
    medicalHistory?: true
    emergencyContact?: true
    emergencyPhone?: true
    insuranceProvider?: true
    insuranceNumber?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientCountAggregateInputType = {
    id?: true
    userId?: true
    patientNumber?: true
    bloodType?: true
    allergies?: true
    medicalHistory?: true
    emergencyContact?: true
    emergencyPhone?: true
    insuranceProvider?: true
    insuranceNumber?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patient to aggregate.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type PatientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithAggregationInput | PatientOrderByWithAggregationInput[]
    by: PatientScalarFieldEnum[] | PatientScalarFieldEnum
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }

  export type PatientGroupByOutputType = {
    id: string
    userId: string
    patientNumber: string
    bloodType: $Enums.BloodType | null
    allergies: string | null
    medicalHistory: string | null
    emergencyContact: string | null
    emergencyPhone: string | null
    insuranceProvider: string | null
    insuranceNumber: string | null
    createdAt: Date
    updatedAt: Date
    _count: PatientCountAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type PatientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    patientNumber?: boolean
    bloodType?: boolean
    allergies?: boolean
    medicalHistory?: boolean
    emergencyContact?: boolean
    emergencyPhone?: boolean
    insuranceProvider?: boolean
    insuranceNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    patientNumber?: boolean
    bloodType?: boolean
    allergies?: boolean
    medicalHistory?: boolean
    emergencyContact?: boolean
    emergencyPhone?: boolean
    insuranceProvider?: boolean
    insuranceNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    patientNumber?: boolean
    bloodType?: boolean
    allergies?: boolean
    medicalHistory?: boolean
    emergencyContact?: boolean
    emergencyPhone?: boolean
    insuranceProvider?: boolean
    insuranceNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectScalar = {
    id?: boolean
    userId?: boolean
    patientNumber?: boolean
    bloodType?: boolean
    allergies?: boolean
    medicalHistory?: boolean
    emergencyContact?: boolean
    emergencyPhone?: boolean
    insuranceProvider?: boolean
    insuranceNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PatientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "patientNumber" | "bloodType" | "allergies" | "medicalHistory" | "emergencyContact" | "emergencyPhone" | "insuranceProvider" | "insuranceNumber" | "createdAt" | "updatedAt", ExtArgs["result"]["patient"]>
  export type PatientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PatientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PatientIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PatientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Patient"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      patientNumber: string
      bloodType: $Enums.BloodType | null
      allergies: string | null
      medicalHistory: string | null
      emergencyContact: string | null
      emergencyPhone: string | null
      insuranceProvider: string | null
      insuranceNumber: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["patient"]>
    composites: {}
  }

  type PatientGetPayload<S extends boolean | null | undefined | PatientDefaultArgs> = $Result.GetResult<Prisma.$PatientPayload, S>

  type PatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface PatientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patient'], meta: { name: 'Patient' } }
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientFindUniqueArgs>(args: SelectSubset<T, PatientFindUniqueArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Patient that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientFindFirstArgs>(args?: SelectSubset<T, PatientFindFirstArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Patient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientWithIdOnly = await prisma.patient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientFindManyArgs>(args?: SelectSubset<T, PatientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
     */
    create<T extends PatientCreateArgs>(args: SelectSubset<T, PatientCreateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Patients.
     * @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientCreateManyArgs>(args?: SelectSubset<T, PatientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Patients and returns the data saved in the database.
     * @param {PatientCreateManyAndReturnArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Patients and only return the `id`
     * const patientWithIdOnly = await prisma.patient.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
     */
    delete<T extends PatientDeleteArgs>(args: SelectSubset<T, PatientDeleteArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientUpdateArgs>(args: SelectSubset<T, PatientUpdateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientDeleteManyArgs>(args?: SelectSubset<T, PatientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientUpdateManyArgs>(args: SelectSubset<T, PatientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients and returns the data updated in the database.
     * @param {PatientUpdateManyAndReturnArgs} args - Arguments to update many Patients.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Patients and only return the `id`
     * const patientWithIdOnly = await prisma.patient.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PatientUpdateManyAndReturnArgs>(args: SelectSubset<T, PatientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
     */
    upsert<T extends PatientUpsertArgs>(args: SelectSubset<T, PatientUpsertArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Patient model
   */
  readonly fields: PatientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Patient model
   */
  interface PatientFieldRefs {
    readonly id: FieldRef<"Patient", 'String'>
    readonly userId: FieldRef<"Patient", 'String'>
    readonly patientNumber: FieldRef<"Patient", 'String'>
    readonly bloodType: FieldRef<"Patient", 'BloodType'>
    readonly allergies: FieldRef<"Patient", 'String'>
    readonly medicalHistory: FieldRef<"Patient", 'String'>
    readonly emergencyContact: FieldRef<"Patient", 'String'>
    readonly emergencyPhone: FieldRef<"Patient", 'String'>
    readonly insuranceProvider: FieldRef<"Patient", 'String'>
    readonly insuranceNumber: FieldRef<"Patient", 'String'>
    readonly createdAt: FieldRef<"Patient", 'DateTime'>
    readonly updatedAt: FieldRef<"Patient", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Patient findUnique
   */
  export type PatientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findUniqueOrThrow
   */
  export type PatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findFirst
   */
  export type PatientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findFirstOrThrow
   */
  export type PatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findMany
   */
  export type PatientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient create
   */
  export type PatientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to create a Patient.
     */
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }

  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Patient createManyAndReturn
   */
  export type PatientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Patient update
   */
  export type PatientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to update a Patient.
     */
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to update.
     */
    limit?: number
  }

  /**
   * Patient updateManyAndReturn
   */
  export type PatientUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Patient upsert
   */
  export type PatientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The filter to search for the Patient to update in case it exists.
     */
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     */
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }

  /**
   * Patient delete
   */
  export type PatientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter which Patient to delete.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patients to delete
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to delete.
     */
    limit?: number
  }

  /**
   * Patient without action
   */
  export type PatientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
  }


  /**
   * Model Staff
   */

  export type AggregateStaff = {
    _count: StaffCountAggregateOutputType | null
    _avg: StaffAvgAggregateOutputType | null
    _sum: StaffSumAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  export type StaffAvgAggregateOutputType = {
    salary: Decimal | null
  }

  export type StaffSumAggregateOutputType = {
    salary: Decimal | null
  }

  export type StaffMinAggregateOutputType = {
    id: string | null
    userId: string | null
    staffNumber: string | null
    department: string | null
    position: string | null
    specialization: string | null
    licenseNumber: string | null
    hiredDate: Date | null
    salary: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StaffMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    staffNumber: string | null
    department: string | null
    position: string | null
    specialization: string | null
    licenseNumber: string | null
    hiredDate: Date | null
    salary: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StaffCountAggregateOutputType = {
    id: number
    userId: number
    staffNumber: number
    department: number
    position: number
    specialization: number
    licenseNumber: number
    hiredDate: number
    salary: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StaffAvgAggregateInputType = {
    salary?: true
  }

  export type StaffSumAggregateInputType = {
    salary?: true
  }

  export type StaffMinAggregateInputType = {
    id?: true
    userId?: true
    staffNumber?: true
    department?: true
    position?: true
    specialization?: true
    licenseNumber?: true
    hiredDate?: true
    salary?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StaffMaxAggregateInputType = {
    id?: true
    userId?: true
    staffNumber?: true
    department?: true
    position?: true
    specialization?: true
    licenseNumber?: true
    hiredDate?: true
    salary?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StaffCountAggregateInputType = {
    id?: true
    userId?: true
    staffNumber?: true
    department?: true
    position?: true
    specialization?: true
    licenseNumber?: true
    hiredDate?: true
    salary?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StaffAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Staff to aggregate.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Staff
    **/
    _count?: true | StaffCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StaffAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StaffSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffMaxAggregateInputType
  }

  export type GetStaffAggregateType<T extends StaffAggregateArgs> = {
        [P in keyof T & keyof AggregateStaff]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaff[P]>
      : GetScalarType<T[P], AggregateStaff[P]>
  }




  export type StaffGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffWhereInput
    orderBy?: StaffOrderByWithAggregationInput | StaffOrderByWithAggregationInput[]
    by: StaffScalarFieldEnum[] | StaffScalarFieldEnum
    having?: StaffScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffCountAggregateInputType | true
    _avg?: StaffAvgAggregateInputType
    _sum?: StaffSumAggregateInputType
    _min?: StaffMinAggregateInputType
    _max?: StaffMaxAggregateInputType
  }

  export type StaffGroupByOutputType = {
    id: string
    userId: string
    staffNumber: string
    department: string | null
    position: string | null
    specialization: string | null
    licenseNumber: string | null
    hiredDate: Date | null
    salary: Decimal | null
    createdAt: Date
    updatedAt: Date
    _count: StaffCountAggregateOutputType | null
    _avg: StaffAvgAggregateOutputType | null
    _sum: StaffSumAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  type GetStaffGroupByPayload<T extends StaffGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffGroupByOutputType[P]>
            : GetScalarType<T[P], StaffGroupByOutputType[P]>
        }
      >
    >


  export type StaffSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    staffNumber?: boolean
    department?: boolean
    position?: boolean
    specialization?: boolean
    licenseNumber?: boolean
    hiredDate?: boolean
    salary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    doctorProfile?: boolean | Staff$doctorProfileArgs<ExtArgs>
  }, ExtArgs["result"]["staff"]>

  export type StaffSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    staffNumber?: boolean
    department?: boolean
    position?: boolean
    specialization?: boolean
    licenseNumber?: boolean
    hiredDate?: boolean
    salary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staff"]>

  export type StaffSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    staffNumber?: boolean
    department?: boolean
    position?: boolean
    specialization?: boolean
    licenseNumber?: boolean
    hiredDate?: boolean
    salary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staff"]>

  export type StaffSelectScalar = {
    id?: boolean
    userId?: boolean
    staffNumber?: boolean
    department?: boolean
    position?: boolean
    specialization?: boolean
    licenseNumber?: boolean
    hiredDate?: boolean
    salary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StaffOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "staffNumber" | "department" | "position" | "specialization" | "licenseNumber" | "hiredDate" | "salary" | "createdAt" | "updatedAt", ExtArgs["result"]["staff"]>
  export type StaffInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    doctorProfile?: boolean | Staff$doctorProfileArgs<ExtArgs>
  }
  export type StaffIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StaffIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StaffPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Staff"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      doctorProfile: Prisma.$DoctorPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      staffNumber: string
      department: string | null
      position: string | null
      specialization: string | null
      licenseNumber: string | null
      hiredDate: Date | null
      salary: Prisma.Decimal | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["staff"]>
    composites: {}
  }

  type StaffGetPayload<S extends boolean | null | undefined | StaffDefaultArgs> = $Result.GetResult<Prisma.$StaffPayload, S>

  type StaffCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StaffFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StaffCountAggregateInputType | true
    }

  export interface StaffDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Staff'], meta: { name: 'Staff' } }
    /**
     * Find zero or one Staff that matches the filter.
     * @param {StaffFindUniqueArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaffFindUniqueArgs>(args: SelectSubset<T, StaffFindUniqueArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Staff that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StaffFindUniqueOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaffFindUniqueOrThrowArgs>(args: SelectSubset<T, StaffFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindFirstArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaffFindFirstArgs>(args?: SelectSubset<T, StaffFindFirstArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Staff that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindFirstOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaffFindFirstOrThrowArgs>(args?: SelectSubset<T, StaffFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Staff
     * const staff = await prisma.staff.findMany()
     * 
     * // Get first 10 Staff
     * const staff = await prisma.staff.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const staffWithIdOnly = await prisma.staff.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StaffFindManyArgs>(args?: SelectSubset<T, StaffFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Staff.
     * @param {StaffCreateArgs} args - Arguments to create a Staff.
     * @example
     * // Create one Staff
     * const Staff = await prisma.staff.create({
     *   data: {
     *     // ... data to create a Staff
     *   }
     * })
     * 
     */
    create<T extends StaffCreateArgs>(args: SelectSubset<T, StaffCreateArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Staff.
     * @param {StaffCreateManyArgs} args - Arguments to create many Staff.
     * @example
     * // Create many Staff
     * const staff = await prisma.staff.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaffCreateManyArgs>(args?: SelectSubset<T, StaffCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Staff and returns the data saved in the database.
     * @param {StaffCreateManyAndReturnArgs} args - Arguments to create many Staff.
     * @example
     * // Create many Staff
     * const staff = await prisma.staff.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Staff and only return the `id`
     * const staffWithIdOnly = await prisma.staff.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StaffCreateManyAndReturnArgs>(args?: SelectSubset<T, StaffCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Staff.
     * @param {StaffDeleteArgs} args - Arguments to delete one Staff.
     * @example
     * // Delete one Staff
     * const Staff = await prisma.staff.delete({
     *   where: {
     *     // ... filter to delete one Staff
     *   }
     * })
     * 
     */
    delete<T extends StaffDeleteArgs>(args: SelectSubset<T, StaffDeleteArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Staff.
     * @param {StaffUpdateArgs} args - Arguments to update one Staff.
     * @example
     * // Update one Staff
     * const staff = await prisma.staff.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaffUpdateArgs>(args: SelectSubset<T, StaffUpdateArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Staff.
     * @param {StaffDeleteManyArgs} args - Arguments to filter Staff to delete.
     * @example
     * // Delete a few Staff
     * const { count } = await prisma.staff.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaffDeleteManyArgs>(args?: SelectSubset<T, StaffDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Staff
     * const staff = await prisma.staff.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaffUpdateManyArgs>(args: SelectSubset<T, StaffUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Staff and returns the data updated in the database.
     * @param {StaffUpdateManyAndReturnArgs} args - Arguments to update many Staff.
     * @example
     * // Update many Staff
     * const staff = await prisma.staff.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Staff and only return the `id`
     * const staffWithIdOnly = await prisma.staff.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StaffUpdateManyAndReturnArgs>(args: SelectSubset<T, StaffUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Staff.
     * @param {StaffUpsertArgs} args - Arguments to update or create a Staff.
     * @example
     * // Update or create a Staff
     * const staff = await prisma.staff.upsert({
     *   create: {
     *     // ... data to create a Staff
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Staff we want to update
     *   }
     * })
     */
    upsert<T extends StaffUpsertArgs>(args: SelectSubset<T, StaffUpsertArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffCountArgs} args - Arguments to filter Staff to count.
     * @example
     * // Count the number of Staff
     * const count = await prisma.staff.count({
     *   where: {
     *     // ... the filter for the Staff we want to count
     *   }
     * })
    **/
    count<T extends StaffCountArgs>(
      args?: Subset<T, StaffCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffAggregateArgs>(args: Subset<T, StaffAggregateArgs>): Prisma.PrismaPromise<GetStaffAggregateType<T>>

    /**
     * Group by Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffGroupByArgs['orderBy'] }
        : { orderBy?: StaffGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Staff model
   */
  readonly fields: StaffFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Staff.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    doctorProfile<T extends Staff$doctorProfileArgs<ExtArgs> = {}>(args?: Subset<T, Staff$doctorProfileArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Staff model
   */
  interface StaffFieldRefs {
    readonly id: FieldRef<"Staff", 'String'>
    readonly userId: FieldRef<"Staff", 'String'>
    readonly staffNumber: FieldRef<"Staff", 'String'>
    readonly department: FieldRef<"Staff", 'String'>
    readonly position: FieldRef<"Staff", 'String'>
    readonly specialization: FieldRef<"Staff", 'String'>
    readonly licenseNumber: FieldRef<"Staff", 'String'>
    readonly hiredDate: FieldRef<"Staff", 'DateTime'>
    readonly salary: FieldRef<"Staff", 'Decimal'>
    readonly createdAt: FieldRef<"Staff", 'DateTime'>
    readonly updatedAt: FieldRef<"Staff", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Staff findUnique
   */
  export type StaffFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff findUniqueOrThrow
   */
  export type StaffFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff findFirst
   */
  export type StaffFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Staff.
     */
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff findFirstOrThrow
   */
  export type StaffFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Staff.
     */
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff findMany
   */
  export type StaffFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff create
   */
  export type StaffCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The data needed to create a Staff.
     */
    data: XOR<StaffCreateInput, StaffUncheckedCreateInput>
  }

  /**
   * Staff createMany
   */
  export type StaffCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Staff.
     */
    data: StaffCreateManyInput | StaffCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Staff createManyAndReturn
   */
  export type StaffCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * The data used to create many Staff.
     */
    data: StaffCreateManyInput | StaffCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Staff update
   */
  export type StaffUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The data needed to update a Staff.
     */
    data: XOR<StaffUpdateInput, StaffUncheckedUpdateInput>
    /**
     * Choose, which Staff to update.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff updateMany
   */
  export type StaffUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Staff.
     */
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyInput>
    /**
     * Filter which Staff to update
     */
    where?: StaffWhereInput
    /**
     * Limit how many Staff to update.
     */
    limit?: number
  }

  /**
   * Staff updateManyAndReturn
   */
  export type StaffUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * The data used to update Staff.
     */
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyInput>
    /**
     * Filter which Staff to update
     */
    where?: StaffWhereInput
    /**
     * Limit how many Staff to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Staff upsert
   */
  export type StaffUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The filter to search for the Staff to update in case it exists.
     */
    where: StaffWhereUniqueInput
    /**
     * In case the Staff found by the `where` argument doesn't exist, create a new Staff with this data.
     */
    create: XOR<StaffCreateInput, StaffUncheckedCreateInput>
    /**
     * In case the Staff was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffUpdateInput, StaffUncheckedUpdateInput>
  }

  /**
   * Staff delete
   */
  export type StaffDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter which Staff to delete.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff deleteMany
   */
  export type StaffDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Staff to delete
     */
    where?: StaffWhereInput
    /**
     * Limit how many Staff to delete.
     */
    limit?: number
  }

  /**
   * Staff.doctorProfile
   */
  export type Staff$doctorProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    where?: DoctorWhereInput
  }

  /**
   * Staff without action
   */
  export type StaffDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
  }


  /**
   * Model Doctor
   */

  export type AggregateDoctor = {
    _count: DoctorCountAggregateOutputType | null
    _avg: DoctorAvgAggregateOutputType | null
    _sum: DoctorSumAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  export type DoctorAvgAggregateOutputType = {
    yearsOfExperience: number | null
    consultationFee: Decimal | null
  }

  export type DoctorSumAggregateOutputType = {
    yearsOfExperience: number | null
    consultationFee: Decimal | null
  }

  export type DoctorMinAggregateOutputType = {
    id: string | null
    userId: string | null
    staffId: string | null
    doctorNumber: string | null
    medicalLicense: string | null
    specialization: string | null
    subSpecialization: string | null
    boardCertification: string | null
    yearsOfExperience: number | null
    education: string | null
    hospitalAffiliation: string | null
    consultationFee: Decimal | null
    isAvailable: boolean | null
    workingHours: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoctorMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    staffId: string | null
    doctorNumber: string | null
    medicalLicense: string | null
    specialization: string | null
    subSpecialization: string | null
    boardCertification: string | null
    yearsOfExperience: number | null
    education: string | null
    hospitalAffiliation: string | null
    consultationFee: Decimal | null
    isAvailable: boolean | null
    workingHours: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoctorCountAggregateOutputType = {
    id: number
    userId: number
    staffId: number
    doctorNumber: number
    medicalLicense: number
    specialization: number
    subSpecialization: number
    boardCertification: number
    yearsOfExperience: number
    education: number
    hospitalAffiliation: number
    consultationFee: number
    isAvailable: number
    workingHours: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DoctorAvgAggregateInputType = {
    yearsOfExperience?: true
    consultationFee?: true
  }

  export type DoctorSumAggregateInputType = {
    yearsOfExperience?: true
    consultationFee?: true
  }

  export type DoctorMinAggregateInputType = {
    id?: true
    userId?: true
    staffId?: true
    doctorNumber?: true
    medicalLicense?: true
    specialization?: true
    subSpecialization?: true
    boardCertification?: true
    yearsOfExperience?: true
    education?: true
    hospitalAffiliation?: true
    consultationFee?: true
    isAvailable?: true
    workingHours?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoctorMaxAggregateInputType = {
    id?: true
    userId?: true
    staffId?: true
    doctorNumber?: true
    medicalLicense?: true
    specialization?: true
    subSpecialization?: true
    boardCertification?: true
    yearsOfExperience?: true
    education?: true
    hospitalAffiliation?: true
    consultationFee?: true
    isAvailable?: true
    workingHours?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoctorCountAggregateInputType = {
    id?: true
    userId?: true
    staffId?: true
    doctorNumber?: true
    medicalLicense?: true
    specialization?: true
    subSpecialization?: true
    boardCertification?: true
    yearsOfExperience?: true
    education?: true
    hospitalAffiliation?: true
    consultationFee?: true
    isAvailable?: true
    workingHours?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DoctorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doctor to aggregate.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Doctors
    **/
    _count?: true | DoctorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DoctorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DoctorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorMaxAggregateInputType
  }

  export type GetDoctorAggregateType<T extends DoctorAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctor[P]>
      : GetScalarType<T[P], AggregateDoctor[P]>
  }




  export type DoctorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorWhereInput
    orderBy?: DoctorOrderByWithAggregationInput | DoctorOrderByWithAggregationInput[]
    by: DoctorScalarFieldEnum[] | DoctorScalarFieldEnum
    having?: DoctorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorCountAggregateInputType | true
    _avg?: DoctorAvgAggregateInputType
    _sum?: DoctorSumAggregateInputType
    _min?: DoctorMinAggregateInputType
    _max?: DoctorMaxAggregateInputType
  }

  export type DoctorGroupByOutputType = {
    id: string
    userId: string
    staffId: string
    doctorNumber: string
    medicalLicense: string
    specialization: string
    subSpecialization: string | null
    boardCertification: string | null
    yearsOfExperience: number | null
    education: string | null
    hospitalAffiliation: string | null
    consultationFee: Decimal | null
    isAvailable: boolean
    workingHours: string | null
    createdAt: Date
    updatedAt: Date
    _count: DoctorCountAggregateOutputType | null
    _avg: DoctorAvgAggregateOutputType | null
    _sum: DoctorSumAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  type GetDoctorGroupByPayload<T extends DoctorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorGroupByOutputType[P]>
        }
      >
    >


  export type DoctorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    staffId?: boolean
    doctorNumber?: boolean
    medicalLicense?: boolean
    specialization?: boolean
    subSpecialization?: boolean
    boardCertification?: boolean
    yearsOfExperience?: boolean
    education?: boolean
    hospitalAffiliation?: boolean
    consultationFee?: boolean
    isAvailable?: boolean
    workingHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor"]>

  export type DoctorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    staffId?: boolean
    doctorNumber?: boolean
    medicalLicense?: boolean
    specialization?: boolean
    subSpecialization?: boolean
    boardCertification?: boolean
    yearsOfExperience?: boolean
    education?: boolean
    hospitalAffiliation?: boolean
    consultationFee?: boolean
    isAvailable?: boolean
    workingHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor"]>

  export type DoctorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    staffId?: boolean
    doctorNumber?: boolean
    medicalLicense?: boolean
    specialization?: boolean
    subSpecialization?: boolean
    boardCertification?: boolean
    yearsOfExperience?: boolean
    education?: boolean
    hospitalAffiliation?: boolean
    consultationFee?: boolean
    isAvailable?: boolean
    workingHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor"]>

  export type DoctorSelectScalar = {
    id?: boolean
    userId?: boolean
    staffId?: boolean
    doctorNumber?: boolean
    medicalLicense?: boolean
    specialization?: boolean
    subSpecialization?: boolean
    boardCertification?: boolean
    yearsOfExperience?: boolean
    education?: boolean
    hospitalAffiliation?: boolean
    consultationFee?: boolean
    isAvailable?: boolean
    workingHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DoctorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "staffId" | "doctorNumber" | "medicalLicense" | "specialization" | "subSpecialization" | "boardCertification" | "yearsOfExperience" | "education" | "hospitalAffiliation" | "consultationFee" | "isAvailable" | "workingHours" | "createdAt" | "updatedAt", ExtArgs["result"]["doctor"]>
  export type DoctorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }
  export type DoctorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }
  export type DoctorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    staff?: boolean | StaffDefaultArgs<ExtArgs>
  }

  export type $DoctorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Doctor"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      staff: Prisma.$StaffPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      staffId: string
      doctorNumber: string
      medicalLicense: string
      specialization: string
      subSpecialization: string | null
      boardCertification: string | null
      yearsOfExperience: number | null
      education: string | null
      hospitalAffiliation: string | null
      consultationFee: Prisma.Decimal | null
      isAvailable: boolean
      workingHours: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["doctor"]>
    composites: {}
  }

  type DoctorGetPayload<S extends boolean | null | undefined | DoctorDefaultArgs> = $Result.GetResult<Prisma.$DoctorPayload, S>

  type DoctorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DoctorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DoctorCountAggregateInputType | true
    }

  export interface DoctorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Doctor'], meta: { name: 'Doctor' } }
    /**
     * Find zero or one Doctor that matches the filter.
     * @param {DoctorFindUniqueArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoctorFindUniqueArgs>(args: SelectSubset<T, DoctorFindUniqueArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Doctor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DoctorFindUniqueOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoctorFindUniqueOrThrowArgs>(args: SelectSubset<T, DoctorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Doctor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindFirstArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoctorFindFirstArgs>(args?: SelectSubset<T, DoctorFindFirstArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Doctor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindFirstOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoctorFindFirstOrThrowArgs>(args?: SelectSubset<T, DoctorFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Doctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doctors
     * const doctors = await prisma.doctor.findMany()
     * 
     * // Get first 10 Doctors
     * const doctors = await prisma.doctor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorWithIdOnly = await prisma.doctor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DoctorFindManyArgs>(args?: SelectSubset<T, DoctorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Doctor.
     * @param {DoctorCreateArgs} args - Arguments to create a Doctor.
     * @example
     * // Create one Doctor
     * const Doctor = await prisma.doctor.create({
     *   data: {
     *     // ... data to create a Doctor
     *   }
     * })
     * 
     */
    create<T extends DoctorCreateArgs>(args: SelectSubset<T, DoctorCreateArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Doctors.
     * @param {DoctorCreateManyArgs} args - Arguments to create many Doctors.
     * @example
     * // Create many Doctors
     * const doctor = await prisma.doctor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoctorCreateManyArgs>(args?: SelectSubset<T, DoctorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Doctors and returns the data saved in the database.
     * @param {DoctorCreateManyAndReturnArgs} args - Arguments to create many Doctors.
     * @example
     * // Create many Doctors
     * const doctor = await prisma.doctor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Doctors and only return the `id`
     * const doctorWithIdOnly = await prisma.doctor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoctorCreateManyAndReturnArgs>(args?: SelectSubset<T, DoctorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Doctor.
     * @param {DoctorDeleteArgs} args - Arguments to delete one Doctor.
     * @example
     * // Delete one Doctor
     * const Doctor = await prisma.doctor.delete({
     *   where: {
     *     // ... filter to delete one Doctor
     *   }
     * })
     * 
     */
    delete<T extends DoctorDeleteArgs>(args: SelectSubset<T, DoctorDeleteArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Doctor.
     * @param {DoctorUpdateArgs} args - Arguments to update one Doctor.
     * @example
     * // Update one Doctor
     * const doctor = await prisma.doctor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoctorUpdateArgs>(args: SelectSubset<T, DoctorUpdateArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Doctors.
     * @param {DoctorDeleteManyArgs} args - Arguments to filter Doctors to delete.
     * @example
     * // Delete a few Doctors
     * const { count } = await prisma.doctor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoctorDeleteManyArgs>(args?: SelectSubset<T, DoctorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doctors
     * const doctor = await prisma.doctor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoctorUpdateManyArgs>(args: SelectSubset<T, DoctorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctors and returns the data updated in the database.
     * @param {DoctorUpdateManyAndReturnArgs} args - Arguments to update many Doctors.
     * @example
     * // Update many Doctors
     * const doctor = await prisma.doctor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Doctors and only return the `id`
     * const doctorWithIdOnly = await prisma.doctor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DoctorUpdateManyAndReturnArgs>(args: SelectSubset<T, DoctorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Doctor.
     * @param {DoctorUpsertArgs} args - Arguments to update or create a Doctor.
     * @example
     * // Update or create a Doctor
     * const doctor = await prisma.doctor.upsert({
     *   create: {
     *     // ... data to create a Doctor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doctor we want to update
     *   }
     * })
     */
    upsert<T extends DoctorUpsertArgs>(args: SelectSubset<T, DoctorUpsertArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorCountArgs} args - Arguments to filter Doctors to count.
     * @example
     * // Count the number of Doctors
     * const count = await prisma.doctor.count({
     *   where: {
     *     // ... the filter for the Doctors we want to count
     *   }
     * })
    **/
    count<T extends DoctorCountArgs>(
      args?: Subset<T, DoctorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorAggregateArgs>(args: Subset<T, DoctorAggregateArgs>): Prisma.PrismaPromise<GetDoctorAggregateType<T>>

    /**
     * Group by Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorGroupByArgs['orderBy'] }
        : { orderBy?: DoctorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Doctor model
   */
  readonly fields: DoctorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Doctor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    staff<T extends StaffDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaffDefaultArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Doctor model
   */
  interface DoctorFieldRefs {
    readonly id: FieldRef<"Doctor", 'String'>
    readonly userId: FieldRef<"Doctor", 'String'>
    readonly staffId: FieldRef<"Doctor", 'String'>
    readonly doctorNumber: FieldRef<"Doctor", 'String'>
    readonly medicalLicense: FieldRef<"Doctor", 'String'>
    readonly specialization: FieldRef<"Doctor", 'String'>
    readonly subSpecialization: FieldRef<"Doctor", 'String'>
    readonly boardCertification: FieldRef<"Doctor", 'String'>
    readonly yearsOfExperience: FieldRef<"Doctor", 'Int'>
    readonly education: FieldRef<"Doctor", 'String'>
    readonly hospitalAffiliation: FieldRef<"Doctor", 'String'>
    readonly consultationFee: FieldRef<"Doctor", 'Decimal'>
    readonly isAvailable: FieldRef<"Doctor", 'Boolean'>
    readonly workingHours: FieldRef<"Doctor", 'String'>
    readonly createdAt: FieldRef<"Doctor", 'DateTime'>
    readonly updatedAt: FieldRef<"Doctor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Doctor findUnique
   */
  export type DoctorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where: DoctorWhereUniqueInput
  }

  /**
   * Doctor findUniqueOrThrow
   */
  export type DoctorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where: DoctorWhereUniqueInput
  }

  /**
   * Doctor findFirst
   */
  export type DoctorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     */
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * Doctor findFirstOrThrow
   */
  export type DoctorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     */
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * Doctor findMany
   */
  export type DoctorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctors to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * Doctor create
   */
  export type DoctorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The data needed to create a Doctor.
     */
    data: XOR<DoctorCreateInput, DoctorUncheckedCreateInput>
  }

  /**
   * Doctor createMany
   */
  export type DoctorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Doctors.
     */
    data: DoctorCreateManyInput | DoctorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Doctor createManyAndReturn
   */
  export type DoctorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * The data used to create many Doctors.
     */
    data: DoctorCreateManyInput | DoctorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Doctor update
   */
  export type DoctorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The data needed to update a Doctor.
     */
    data: XOR<DoctorUpdateInput, DoctorUncheckedUpdateInput>
    /**
     * Choose, which Doctor to update.
     */
    where: DoctorWhereUniqueInput
  }

  /**
   * Doctor updateMany
   */
  export type DoctorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Doctors.
     */
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyInput>
    /**
     * Filter which Doctors to update
     */
    where?: DoctorWhereInput
    /**
     * Limit how many Doctors to update.
     */
    limit?: number
  }

  /**
   * Doctor updateManyAndReturn
   */
  export type DoctorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * The data used to update Doctors.
     */
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyInput>
    /**
     * Filter which Doctors to update
     */
    where?: DoctorWhereInput
    /**
     * Limit how many Doctors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Doctor upsert
   */
  export type DoctorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The filter to search for the Doctor to update in case it exists.
     */
    where: DoctorWhereUniqueInput
    /**
     * In case the Doctor found by the `where` argument doesn't exist, create a new Doctor with this data.
     */
    create: XOR<DoctorCreateInput, DoctorUncheckedCreateInput>
    /**
     * In case the Doctor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorUpdateInput, DoctorUncheckedUpdateInput>
  }

  /**
   * Doctor delete
   */
  export type DoctorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter which Doctor to delete.
     */
    where: DoctorWhereUniqueInput
  }

  /**
   * Doctor deleteMany
   */
  export type DoctorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doctors to delete
     */
    where?: DoctorWhereInput
    /**
     * Limit how many Doctors to delete.
     */
    limit?: number
  }

  /**
   * Doctor without action
   */
  export type DoctorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
  }


  /**
   * Model Partner
   */

  export type AggregatePartner = {
    _count: PartnerCountAggregateOutputType | null
    _min: PartnerMinAggregateOutputType | null
    _max: PartnerMaxAggregateOutputType | null
  }

  export type PartnerMinAggregateOutputType = {
    id: string | null
    userId: string | null
    institutionName: string | null
    institutionType: $Enums.PartnerType | null
    licenseNumber: string | null
    website: string | null
    contactPerson: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PartnerMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    institutionName: string | null
    institutionType: $Enums.PartnerType | null
    licenseNumber: string | null
    website: string | null
    contactPerson: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PartnerCountAggregateOutputType = {
    id: number
    userId: number
    institutionName: number
    institutionType: number
    licenseNumber: number
    website: number
    contactPerson: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PartnerMinAggregateInputType = {
    id?: true
    userId?: true
    institutionName?: true
    institutionType?: true
    licenseNumber?: true
    website?: true
    contactPerson?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PartnerMaxAggregateInputType = {
    id?: true
    userId?: true
    institutionName?: true
    institutionType?: true
    licenseNumber?: true
    website?: true
    contactPerson?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PartnerCountAggregateInputType = {
    id?: true
    userId?: true
    institutionName?: true
    institutionType?: true
    licenseNumber?: true
    website?: true
    contactPerson?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PartnerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partner to aggregate.
     */
    where?: PartnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnerOrderByWithRelationInput | PartnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Partners
    **/
    _count?: true | PartnerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartnerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartnerMaxAggregateInputType
  }

  export type GetPartnerAggregateType<T extends PartnerAggregateArgs> = {
        [P in keyof T & keyof AggregatePartner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartner[P]>
      : GetScalarType<T[P], AggregatePartner[P]>
  }




  export type PartnerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartnerWhereInput
    orderBy?: PartnerOrderByWithAggregationInput | PartnerOrderByWithAggregationInput[]
    by: PartnerScalarFieldEnum[] | PartnerScalarFieldEnum
    having?: PartnerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartnerCountAggregateInputType | true
    _min?: PartnerMinAggregateInputType
    _max?: PartnerMaxAggregateInputType
  }

  export type PartnerGroupByOutputType = {
    id: string
    userId: string
    institutionName: string
    institutionType: $Enums.PartnerType
    licenseNumber: string | null
    website: string | null
    contactPerson: string | null
    createdAt: Date
    updatedAt: Date
    _count: PartnerCountAggregateOutputType | null
    _min: PartnerMinAggregateOutputType | null
    _max: PartnerMaxAggregateOutputType | null
  }

  type GetPartnerGroupByPayload<T extends PartnerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartnerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartnerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartnerGroupByOutputType[P]>
            : GetScalarType<T[P], PartnerGroupByOutputType[P]>
        }
      >
    >


  export type PartnerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    institutionName?: boolean
    institutionType?: boolean
    licenseNumber?: boolean
    website?: boolean
    contactPerson?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partner"]>

  export type PartnerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    institutionName?: boolean
    institutionType?: boolean
    licenseNumber?: boolean
    website?: boolean
    contactPerson?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partner"]>

  export type PartnerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    institutionName?: boolean
    institutionType?: boolean
    licenseNumber?: boolean
    website?: boolean
    contactPerson?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partner"]>

  export type PartnerSelectScalar = {
    id?: boolean
    userId?: boolean
    institutionName?: boolean
    institutionType?: boolean
    licenseNumber?: boolean
    website?: boolean
    contactPerson?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PartnerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "institutionName" | "institutionType" | "licenseNumber" | "website" | "contactPerson" | "createdAt" | "updatedAt", ExtArgs["result"]["partner"]>
  export type PartnerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PartnerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PartnerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PartnerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Partner"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      institutionName: string
      institutionType: $Enums.PartnerType
      licenseNumber: string | null
      website: string | null
      contactPerson: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["partner"]>
    composites: {}
  }

  type PartnerGetPayload<S extends boolean | null | undefined | PartnerDefaultArgs> = $Result.GetResult<Prisma.$PartnerPayload, S>

  type PartnerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PartnerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PartnerCountAggregateInputType | true
    }

  export interface PartnerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Partner'], meta: { name: 'Partner' } }
    /**
     * Find zero or one Partner that matches the filter.
     * @param {PartnerFindUniqueArgs} args - Arguments to find a Partner
     * @example
     * // Get one Partner
     * const partner = await prisma.partner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartnerFindUniqueArgs>(args: SelectSubset<T, PartnerFindUniqueArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Partner that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PartnerFindUniqueOrThrowArgs} args - Arguments to find a Partner
     * @example
     * // Get one Partner
     * const partner = await prisma.partner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartnerFindUniqueOrThrowArgs>(args: SelectSubset<T, PartnerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Partner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerFindFirstArgs} args - Arguments to find a Partner
     * @example
     * // Get one Partner
     * const partner = await prisma.partner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartnerFindFirstArgs>(args?: SelectSubset<T, PartnerFindFirstArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Partner that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerFindFirstOrThrowArgs} args - Arguments to find a Partner
     * @example
     * // Get one Partner
     * const partner = await prisma.partner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartnerFindFirstOrThrowArgs>(args?: SelectSubset<T, PartnerFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Partners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Partners
     * const partners = await prisma.partner.findMany()
     * 
     * // Get first 10 Partners
     * const partners = await prisma.partner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partnerWithIdOnly = await prisma.partner.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PartnerFindManyArgs>(args?: SelectSubset<T, PartnerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Partner.
     * @param {PartnerCreateArgs} args - Arguments to create a Partner.
     * @example
     * // Create one Partner
     * const Partner = await prisma.partner.create({
     *   data: {
     *     // ... data to create a Partner
     *   }
     * })
     * 
     */
    create<T extends PartnerCreateArgs>(args: SelectSubset<T, PartnerCreateArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Partners.
     * @param {PartnerCreateManyArgs} args - Arguments to create many Partners.
     * @example
     * // Create many Partners
     * const partner = await prisma.partner.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartnerCreateManyArgs>(args?: SelectSubset<T, PartnerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Partners and returns the data saved in the database.
     * @param {PartnerCreateManyAndReturnArgs} args - Arguments to create many Partners.
     * @example
     * // Create many Partners
     * const partner = await prisma.partner.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Partners and only return the `id`
     * const partnerWithIdOnly = await prisma.partner.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PartnerCreateManyAndReturnArgs>(args?: SelectSubset<T, PartnerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Partner.
     * @param {PartnerDeleteArgs} args - Arguments to delete one Partner.
     * @example
     * // Delete one Partner
     * const Partner = await prisma.partner.delete({
     *   where: {
     *     // ... filter to delete one Partner
     *   }
     * })
     * 
     */
    delete<T extends PartnerDeleteArgs>(args: SelectSubset<T, PartnerDeleteArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Partner.
     * @param {PartnerUpdateArgs} args - Arguments to update one Partner.
     * @example
     * // Update one Partner
     * const partner = await prisma.partner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartnerUpdateArgs>(args: SelectSubset<T, PartnerUpdateArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Partners.
     * @param {PartnerDeleteManyArgs} args - Arguments to filter Partners to delete.
     * @example
     * // Delete a few Partners
     * const { count } = await prisma.partner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartnerDeleteManyArgs>(args?: SelectSubset<T, PartnerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Partners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Partners
     * const partner = await prisma.partner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartnerUpdateManyArgs>(args: SelectSubset<T, PartnerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Partners and returns the data updated in the database.
     * @param {PartnerUpdateManyAndReturnArgs} args - Arguments to update many Partners.
     * @example
     * // Update many Partners
     * const partner = await prisma.partner.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Partners and only return the `id`
     * const partnerWithIdOnly = await prisma.partner.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PartnerUpdateManyAndReturnArgs>(args: SelectSubset<T, PartnerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Partner.
     * @param {PartnerUpsertArgs} args - Arguments to update or create a Partner.
     * @example
     * // Update or create a Partner
     * const partner = await prisma.partner.upsert({
     *   create: {
     *     // ... data to create a Partner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Partner we want to update
     *   }
     * })
     */
    upsert<T extends PartnerUpsertArgs>(args: SelectSubset<T, PartnerUpsertArgs<ExtArgs>>): Prisma__PartnerClient<$Result.GetResult<Prisma.$PartnerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Partners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerCountArgs} args - Arguments to filter Partners to count.
     * @example
     * // Count the number of Partners
     * const count = await prisma.partner.count({
     *   where: {
     *     // ... the filter for the Partners we want to count
     *   }
     * })
    **/
    count<T extends PartnerCountArgs>(
      args?: Subset<T, PartnerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartnerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Partner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartnerAggregateArgs>(args: Subset<T, PartnerAggregateArgs>): Prisma.PrismaPromise<GetPartnerAggregateType<T>>

    /**
     * Group by Partner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartnerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartnerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartnerGroupByArgs['orderBy'] }
        : { orderBy?: PartnerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartnerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartnerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Partner model
   */
  readonly fields: PartnerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Partner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartnerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Partner model
   */
  interface PartnerFieldRefs {
    readonly id: FieldRef<"Partner", 'String'>
    readonly userId: FieldRef<"Partner", 'String'>
    readonly institutionName: FieldRef<"Partner", 'String'>
    readonly institutionType: FieldRef<"Partner", 'PartnerType'>
    readonly licenseNumber: FieldRef<"Partner", 'String'>
    readonly website: FieldRef<"Partner", 'String'>
    readonly contactPerson: FieldRef<"Partner", 'String'>
    readonly createdAt: FieldRef<"Partner", 'DateTime'>
    readonly updatedAt: FieldRef<"Partner", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Partner findUnique
   */
  export type PartnerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
    /**
     * Filter, which Partner to fetch.
     */
    where: PartnerWhereUniqueInput
  }

  /**
   * Partner findUniqueOrThrow
   */
  export type PartnerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
    /**
     * Filter, which Partner to fetch.
     */
    where: PartnerWhereUniqueInput
  }

  /**
   * Partner findFirst
   */
  export type PartnerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
    /**
     * Filter, which Partner to fetch.
     */
    where?: PartnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnerOrderByWithRelationInput | PartnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partners.
     */
    cursor?: PartnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partners.
     */
    distinct?: PartnerScalarFieldEnum | PartnerScalarFieldEnum[]
  }

  /**
   * Partner findFirstOrThrow
   */
  export type PartnerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
    /**
     * Filter, which Partner to fetch.
     */
    where?: PartnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnerOrderByWithRelationInput | PartnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partners.
     */
    cursor?: PartnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partners.
     */
    distinct?: PartnerScalarFieldEnum | PartnerScalarFieldEnum[]
  }

  /**
   * Partner findMany
   */
  export type PartnerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
    /**
     * Filter, which Partners to fetch.
     */
    where?: PartnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partners to fetch.
     */
    orderBy?: PartnerOrderByWithRelationInput | PartnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Partners.
     */
    cursor?: PartnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partners.
     */
    skip?: number
    distinct?: PartnerScalarFieldEnum | PartnerScalarFieldEnum[]
  }

  /**
   * Partner create
   */
  export type PartnerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
    /**
     * The data needed to create a Partner.
     */
    data: XOR<PartnerCreateInput, PartnerUncheckedCreateInput>
  }

  /**
   * Partner createMany
   */
  export type PartnerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Partners.
     */
    data: PartnerCreateManyInput | PartnerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Partner createManyAndReturn
   */
  export type PartnerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * The data used to create many Partners.
     */
    data: PartnerCreateManyInput | PartnerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Partner update
   */
  export type PartnerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
    /**
     * The data needed to update a Partner.
     */
    data: XOR<PartnerUpdateInput, PartnerUncheckedUpdateInput>
    /**
     * Choose, which Partner to update.
     */
    where: PartnerWhereUniqueInput
  }

  /**
   * Partner updateMany
   */
  export type PartnerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Partners.
     */
    data: XOR<PartnerUpdateManyMutationInput, PartnerUncheckedUpdateManyInput>
    /**
     * Filter which Partners to update
     */
    where?: PartnerWhereInput
    /**
     * Limit how many Partners to update.
     */
    limit?: number
  }

  /**
   * Partner updateManyAndReturn
   */
  export type PartnerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * The data used to update Partners.
     */
    data: XOR<PartnerUpdateManyMutationInput, PartnerUncheckedUpdateManyInput>
    /**
     * Filter which Partners to update
     */
    where?: PartnerWhereInput
    /**
     * Limit how many Partners to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Partner upsert
   */
  export type PartnerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
    /**
     * The filter to search for the Partner to update in case it exists.
     */
    where: PartnerWhereUniqueInput
    /**
     * In case the Partner found by the `where` argument doesn't exist, create a new Partner with this data.
     */
    create: XOR<PartnerCreateInput, PartnerUncheckedCreateInput>
    /**
     * In case the Partner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartnerUpdateInput, PartnerUncheckedUpdateInput>
  }

  /**
   * Partner delete
   */
  export type PartnerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
    /**
     * Filter which Partner to delete.
     */
    where: PartnerWhereUniqueInput
  }

  /**
   * Partner deleteMany
   */
  export type PartnerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partners to delete
     */
    where?: PartnerWhereInput
    /**
     * Limit how many Partners to delete.
     */
    limit?: number
  }

  /**
   * Partner without action
   */
  export type PartnerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partner
     */
    select?: PartnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partner
     */
    omit?: PartnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartnerInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AppointmentScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    doctorId: 'doctorId',
    facilityId: 'facilityId',
    date: 'date',
    time: 'time',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum]


  export const PatientAppointmentScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    doctorId: 'doctorId',
    date: 'date',
    time: 'time',
    status: 'status',
    name: 'name',
    appointmentId: 'appointmentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PatientAppointmentScalarFieldEnum = (typeof PatientAppointmentScalarFieldEnum)[keyof typeof PatientAppointmentScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    encounterId: 'encounterId',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const TransactionItemScalarFieldEnum: {
    id: 'id',
    transactionId: 'transactionId',
    name: 'name',
    description: 'description',
    amount: 'amount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TransactionItemScalarFieldEnum = (typeof TransactionItemScalarFieldEnum)[keyof typeof TransactionItemScalarFieldEnum]


  export const PaymentPlanScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    cycle: 'cycle',
    numberOfPayments: 'numberOfPayments',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentPlanScalarFieldEnum = (typeof PaymentPlanScalarFieldEnum)[keyof typeof PaymentPlanScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    transactionId: 'transactionId',
    amount: 'amount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const PaymentInstalmentScalarFieldEnum: {
    id: 'id',
    paymentId: 'paymentId',
    planId: 'planId',
    instalmentNumber: 'instalmentNumber',
    amountDue: 'amountDue',
    amountPaid: 'amountPaid',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentInstalmentScalarFieldEnum = (typeof PaymentInstalmentScalarFieldEnum)[keyof typeof PaymentInstalmentScalarFieldEnum]


  export const ClinicScalarFieldEnum: {
    id: 'id',
    roomId: 'roomId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClinicScalarFieldEnum = (typeof ClinicScalarFieldEnum)[keyof typeof ClinicScalarFieldEnum]


  export const ClinicScheduleScalarFieldEnum: {
    id: 'id',
    clinicId: 'clinicId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClinicScheduleScalarFieldEnum = (typeof ClinicScheduleScalarFieldEnum)[keyof typeof ClinicScheduleScalarFieldEnum]


  export const PatientEncounterScalarFieldEnum: {
    id: 'id',
    encounterId: 'encounterId',
    patientProfileId: 'patientProfileId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PatientEncounterScalarFieldEnum = (typeof PatientEncounterScalarFieldEnum)[keyof typeof PatientEncounterScalarFieldEnum]


  export const OutpatientEncounterScalarFieldEnum: {
    id: 'id',
    patientProfileId: 'patientProfileId',
    date: 'date',
    time: 'time',
    chiefComplaint: 'chiefComplaint',
    doctorDiagnosis: 'doctorDiagnosis',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OutpatientEncounterScalarFieldEnum = (typeof OutpatientEncounterScalarFieldEnum)[keyof typeof OutpatientEncounterScalarFieldEnum]


  export const InpatientEncounterScalarFieldEnum: {
    id: 'id',
    patientProfileId: 'patientProfileId',
    date: 'date',
    time: 'time',
    chiefComplaint: 'chiefComplaint',
    doctorDiagnosis: 'doctorDiagnosis',
    triage: 'triage',
    disposition: 'disposition',
    dispositionDate: 'dispositionDate',
    dispositionTime: 'dispositionTime',
    dispositionNote: 'dispositionNote',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InpatientEncounterScalarFieldEnum = (typeof InpatientEncounterScalarFieldEnum)[keyof typeof InpatientEncounterScalarFieldEnum]


  export const InpatientEncounterChartScalarFieldEnum: {
    id: 'id',
    encounterId: 'encounterId',
    staffId: 'staffId',
    chart: 'chart',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InpatientEncounterChartScalarFieldEnum = (typeof InpatientEncounterChartScalarFieldEnum)[keyof typeof InpatientEncounterChartScalarFieldEnum]


  export const InpatientEncounterOrderScalarFieldEnum: {
    id: 'id',
    encounterId: 'encounterId',
    type: 'type',
    order: 'order',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InpatientEncounterOrderScalarFieldEnum = (typeof InpatientEncounterOrderScalarFieldEnum)[keyof typeof InpatientEncounterOrderScalarFieldEnum]


  export const BuildingScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BuildingScalarFieldEnum = (typeof BuildingScalarFieldEnum)[keyof typeof BuildingScalarFieldEnum]


  export const RoomScalarFieldEnum: {
    id: 'id',
    buildingId: 'buildingId',
    type: 'type',
    identifier: 'identifier',
    description: 'description',
    capacity: 'capacity',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RoomScalarFieldEnum = (typeof RoomScalarFieldEnum)[keyof typeof RoomScalarFieldEnum]


  export const FacilityLogScalarFieldEnum: {
    id: 'id',
    timestamp: 'timestamp',
    user: 'user',
    role: 'role',
    action: 'action',
    roomIdentifier: 'roomIdentifier',
    type: 'type',
    oldStatus: 'oldStatus',
    newStatus: 'newStatus'
  };

  export type FacilityLogScalarFieldEnum = (typeof FacilityLogScalarFieldEnum)[keyof typeof FacilityLogScalarFieldEnum]


  export const InsuranceProviderScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    email: 'email',
    phone: 'phone',
    address: 'address',
    city: 'city',
    state: 'state',
    zip: 'zip',
    country: 'country',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InsuranceProviderScalarFieldEnum = (typeof InsuranceProviderScalarFieldEnum)[keyof typeof InsuranceProviderScalarFieldEnum]


  export const InsuranceClaimScalarFieldEnum: {
    id: 'id',
    providerId: 'providerId',
    status: 'status',
    message: 'message',
    amount: 'amount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InsuranceClaimScalarFieldEnum = (typeof InsuranceClaimScalarFieldEnum)[keyof typeof InsuranceClaimScalarFieldEnum]


  export const InsuranceClaimItemScalarFieldEnum: {
    id: 'id',
    claimId: 'claimId',
    name: 'name',
    description: 'description',
    amount: 'amount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InsuranceClaimItemScalarFieldEnum = (typeof InsuranceClaimItemScalarFieldEnum)[keyof typeof InsuranceClaimItemScalarFieldEnum]


  export const LogScalarFieldEnum: {
    id: 'id',
    user: 'user',
    action: 'action',
    entity: 'entity',
    data: 'data',
    ipAddress: 'ipAddress',
    timestamp: 'timestamp'
  };

  export type LogScalarFieldEnum = (typeof LogScalarFieldEnum)[keyof typeof LogScalarFieldEnum]


  export const PatientProfileScalarFieldEnum: {
    id: 'id',
    lastName: 'lastName',
    firstName: 'firstName',
    middleName: 'middleName',
    suffix: 'suffix',
    birthdate: 'birthdate',
    birthplace: 'birthplace',
    sex: 'sex',
    maritalStatus: 'maritalStatus',
    nationality: 'nationality',
    religion: 'religion',
    bloodType: 'bloodType',
    archived: 'archived',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PatientProfileScalarFieldEnum = (typeof PatientProfileScalarFieldEnum)[keyof typeof PatientProfileScalarFieldEnum]


  export const AddressScalarFieldEnum: {
    id: 'id',
    patientProfileId: 'patientProfileId',
    label: 'label',
    country: 'country',
    state: 'state',
    zipCode: 'zipCode',
    city: 'city',
    address: 'address',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const ContactScalarFieldEnum: {
    id: 'id',
    patientProfileId: 'patientProfileId',
    type: 'type',
    value: 'value',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ContactScalarFieldEnum = (typeof ContactScalarFieldEnum)[keyof typeof ContactScalarFieldEnum]


  export const EmploymentScalarFieldEnum: {
    id: 'id',
    patientProfileId: 'patientProfileId',
    employer: 'employer',
    contactPerson: 'contactPerson',
    address: 'address',
    phone: 'phone',
    email: 'email',
    website: 'website',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmploymentScalarFieldEnum = (typeof EmploymentScalarFieldEnum)[keyof typeof EmploymentScalarFieldEnum]


  export const EmergencyContactScalarFieldEnum: {
    id: 'id',
    patientProfileId: 'patientProfileId',
    lastName: 'lastName',
    firstName: 'firstName',
    middleName: 'middleName',
    suffix: 'suffix',
    relationship: 'relationship',
    phone: 'phone',
    email: 'email',
    address: 'address',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmergencyContactScalarFieldEnum = (typeof EmergencyContactScalarFieldEnum)[keyof typeof EmergencyContactScalarFieldEnum]


  export const ConsentScalarFieldEnum: {
    id: 'id',
    patientProfileId: 'patientProfileId',
    documentUrl: 'documentUrl',
    signature: 'signature',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ConsentScalarFieldEnum = (typeof ConsentScalarFieldEnum)[keyof typeof ConsentScalarFieldEnum]


  export const MedicalRecordRequestScalarFieldEnum: {
    id: 'id',
    patientProfileId: 'patientProfileId',
    inpatientEncounterId: 'inpatientEncounterId',
    type: 'type',
    status: 'status',
    fileUrl: 'fileUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MedicalRecordRequestScalarFieldEnum = (typeof MedicalRecordRequestScalarFieldEnum)[keyof typeof MedicalRecordRequestScalarFieldEnum]


  export const PharmacySupplierScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    contact: 'contact',
    address: 'address',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PharmacySupplierScalarFieldEnum = (typeof PharmacySupplierScalarFieldEnum)[keyof typeof PharmacySupplierScalarFieldEnum]


  export const PharmacyBrandScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PharmacyBrandScalarFieldEnum = (typeof PharmacyBrandScalarFieldEnum)[keyof typeof PharmacyBrandScalarFieldEnum]


  export const PharmacyItemCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PharmacyItemCategoryScalarFieldEnum = (typeof PharmacyItemCategoryScalarFieldEnum)[keyof typeof PharmacyItemCategoryScalarFieldEnum]


  export const PharmacyItemScalarFieldEnum: {
    id: 'id',
    brandId: 'brandId',
    categoryId: 'categoryId',
    name: 'name',
    form: 'form',
    route: 'route',
    strength: 'strength',
    stock: 'stock',
    unit: 'unit',
    sku: 'sku',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PharmacyItemScalarFieldEnum = (typeof PharmacyItemScalarFieldEnum)[keyof typeof PharmacyItemScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    phone: 'phone',
    role: 'role',
    status: 'status',
    isEmailVerified: 'isEmailVerified',
    emailVerifiedAt: 'emailVerifiedAt',
    avatar: 'avatar',
    dateOfBirth: 'dateOfBirth',
    gender: 'gender',
    address: 'address',
    city: 'city',
    province: 'province',
    zipCode: 'zipCode',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastLoginAt: 'lastLoginAt',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RefreshTokenScalarFieldEnum: {
    id: 'id',
    token: 'token',
    userId: 'userId',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    isRevoked: 'isRevoked'
  };

  export type RefreshTokenScalarFieldEnum = (typeof RefreshTokenScalarFieldEnum)[keyof typeof RefreshTokenScalarFieldEnum]


  export const PatientScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    patientNumber: 'patientNumber',
    bloodType: 'bloodType',
    allergies: 'allergies',
    medicalHistory: 'medicalHistory',
    emergencyContact: 'emergencyContact',
    emergencyPhone: 'emergencyPhone',
    insuranceProvider: 'insuranceProvider',
    insuranceNumber: 'insuranceNumber',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const StaffScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    staffNumber: 'staffNumber',
    department: 'department',
    position: 'position',
    specialization: 'specialization',
    licenseNumber: 'licenseNumber',
    hiredDate: 'hiredDate',
    salary: 'salary',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StaffScalarFieldEnum = (typeof StaffScalarFieldEnum)[keyof typeof StaffScalarFieldEnum]


  export const DoctorScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    staffId: 'staffId',
    doctorNumber: 'doctorNumber',
    medicalLicense: 'medicalLicense',
    specialization: 'specialization',
    subSpecialization: 'subSpecialization',
    boardCertification: 'boardCertification',
    yearsOfExperience: 'yearsOfExperience',
    education: 'education',
    hospitalAffiliation: 'hospitalAffiliation',
    consultationFee: 'consultationFee',
    isAvailable: 'isAvailable',
    workingHours: 'workingHours',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DoctorScalarFieldEnum = (typeof DoctorScalarFieldEnum)[keyof typeof DoctorScalarFieldEnum]


  export const PartnerScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    institutionName: 'institutionName',
    institutionType: 'institutionType',
    licenseNumber: 'licenseNumber',
    website: 'website',
    contactPerson: 'contactPerson',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PartnerScalarFieldEnum = (typeof PartnerScalarFieldEnum)[keyof typeof PartnerScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'AppointmentStatus'
   */
  export type EnumAppointmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentStatus'>
    


  /**
   * Reference to a field of type 'AppointmentStatus[]'
   */
  export type ListEnumAppointmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentStatus[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'OutpatientEncounterType'
   */
  export type EnumOutpatientEncounterTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OutpatientEncounterType'>
    


  /**
   * Reference to a field of type 'OutpatientEncounterType[]'
   */
  export type ListEnumOutpatientEncounterTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OutpatientEncounterType[]'>
    


  /**
   * Reference to a field of type 'InpatientTriage'
   */
  export type EnumInpatientTriageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InpatientTriage'>
    


  /**
   * Reference to a field of type 'InpatientTriage[]'
   */
  export type ListEnumInpatientTriageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InpatientTriage[]'>
    


  /**
   * Reference to a field of type 'InpatientDisposition'
   */
  export type EnumInpatientDispositionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InpatientDisposition'>
    


  /**
   * Reference to a field of type 'InpatientDisposition[]'
   */
  export type ListEnumInpatientDispositionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InpatientDisposition[]'>
    


  /**
   * Reference to a field of type 'InpatientEncounterOrderType'
   */
  export type EnumInpatientEncounterOrderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InpatientEncounterOrderType'>
    


  /**
   * Reference to a field of type 'InpatientEncounterOrderType[]'
   */
  export type ListEnumInpatientEncounterOrderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InpatientEncounterOrderType[]'>
    


  /**
   * Reference to a field of type 'InpatientEncounterOrderStatus'
   */
  export type EnumInpatientEncounterOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InpatientEncounterOrderStatus'>
    


  /**
   * Reference to a field of type 'InpatientEncounterOrderStatus[]'
   */
  export type ListEnumInpatientEncounterOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InpatientEncounterOrderStatus[]'>
    


  /**
   * Reference to a field of type 'RoomType'
   */
  export type EnumRoomTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoomType'>
    


  /**
   * Reference to a field of type 'RoomType[]'
   */
  export type ListEnumRoomTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoomType[]'>
    


  /**
   * Reference to a field of type 'RoomStatus'
   */
  export type EnumRoomStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoomStatus'>
    


  /**
   * Reference to a field of type 'RoomStatus[]'
   */
  export type ListEnumRoomStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoomStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Sex'
   */
  export type EnumSexFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Sex'>
    


  /**
   * Reference to a field of type 'Sex[]'
   */
  export type ListEnumSexFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Sex[]'>
    


  /**
   * Reference to a field of type 'MaritalStatus'
   */
  export type EnumMaritalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaritalStatus'>
    


  /**
   * Reference to a field of type 'MaritalStatus[]'
   */
  export type ListEnumMaritalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaritalStatus[]'>
    


  /**
   * Reference to a field of type 'BloodType'
   */
  export type EnumBloodTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BloodType'>
    


  /**
   * Reference to a field of type 'BloodType[]'
   */
  export type ListEnumBloodTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BloodType[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'ContactType'
   */
  export type EnumContactTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContactType'>
    


  /**
   * Reference to a field of type 'ContactType[]'
   */
  export type ListEnumContactTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContactType[]'>
    


  /**
   * Reference to a field of type 'Relationship'
   */
  export type EnumRelationshipFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Relationship'>
    


  /**
   * Reference to a field of type 'Relationship[]'
   */
  export type ListEnumRelationshipFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Relationship[]'>
    


  /**
   * Reference to a field of type 'PharmacyItemForm'
   */
  export type EnumPharmacyItemFormFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PharmacyItemForm'>
    


  /**
   * Reference to a field of type 'PharmacyItemForm[]'
   */
  export type ListEnumPharmacyItemFormFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PharmacyItemForm[]'>
    


  /**
   * Reference to a field of type 'PharmacyItemRoute'
   */
  export type EnumPharmacyItemRouteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PharmacyItemRoute'>
    


  /**
   * Reference to a field of type 'PharmacyItemRoute[]'
   */
  export type ListEnumPharmacyItemRouteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PharmacyItemRoute[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'UserStatus'
   */
  export type EnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus'>
    


  /**
   * Reference to a field of type 'UserStatus[]'
   */
  export type ListEnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus[]'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'PartnerType'
   */
  export type EnumPartnerTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PartnerType'>
    


  /**
   * Reference to a field of type 'PartnerType[]'
   */
  export type ListEnumPartnerTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PartnerType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AppointmentWhereInput = {
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    id?: UuidFilter<"Appointment"> | string
    patientId?: UuidFilter<"Appointment"> | string
    doctorId?: UuidFilter<"Appointment"> | string
    facilityId?: UuidNullableFilter<"Appointment"> | string | null
    date?: StringFilter<"Appointment"> | string
    time?: StringFilter<"Appointment"> | string
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    patient?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
    facility?: XOR<RoomNullableScalarRelationFilter, RoomWhereInput> | null
    patientAppointment?: XOR<PatientAppointmentNullableScalarRelationFilter, PatientAppointmentWhereInput> | null
  }

  export type AppointmentOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    facilityId?: SortOrderInput | SortOrder
    date?: SortOrder
    time?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patient?: PatientProfileOrderByWithRelationInput
    facility?: RoomOrderByWithRelationInput
    patientAppointment?: PatientAppointmentOrderByWithRelationInput
  }

  export type AppointmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    patientId?: UuidFilter<"Appointment"> | string
    doctorId?: UuidFilter<"Appointment"> | string
    facilityId?: UuidNullableFilter<"Appointment"> | string | null
    date?: StringFilter<"Appointment"> | string
    time?: StringFilter<"Appointment"> | string
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    patient?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
    facility?: XOR<RoomNullableScalarRelationFilter, RoomWhereInput> | null
    patientAppointment?: XOR<PatientAppointmentNullableScalarRelationFilter, PatientAppointmentWhereInput> | null
  }, "id">

  export type AppointmentOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    facilityId?: SortOrderInput | SortOrder
    date?: SortOrder
    time?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AppointmentCountOrderByAggregateInput
    _max?: AppointmentMaxOrderByAggregateInput
    _min?: AppointmentMinOrderByAggregateInput
  }

  export type AppointmentScalarWhereWithAggregatesInput = {
    AND?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    OR?: AppointmentScalarWhereWithAggregatesInput[]
    NOT?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Appointment"> | string
    patientId?: UuidWithAggregatesFilter<"Appointment"> | string
    doctorId?: UuidWithAggregatesFilter<"Appointment"> | string
    facilityId?: UuidNullableWithAggregatesFilter<"Appointment"> | string | null
    date?: StringWithAggregatesFilter<"Appointment"> | string
    time?: StringWithAggregatesFilter<"Appointment"> | string
    status?: EnumAppointmentStatusWithAggregatesFilter<"Appointment"> | $Enums.AppointmentStatus
    createdAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
  }

  export type PatientAppointmentWhereInput = {
    AND?: PatientAppointmentWhereInput | PatientAppointmentWhereInput[]
    OR?: PatientAppointmentWhereInput[]
    NOT?: PatientAppointmentWhereInput | PatientAppointmentWhereInput[]
    id?: UuidFilter<"PatientAppointment"> | string
    patientId?: UuidFilter<"PatientAppointment"> | string
    doctorId?: StringFilter<"PatientAppointment"> | string
    date?: StringFilter<"PatientAppointment"> | string
    time?: StringFilter<"PatientAppointment"> | string
    status?: EnumAppointmentStatusFilter<"PatientAppointment"> | $Enums.AppointmentStatus
    name?: StringNullableFilter<"PatientAppointment"> | string | null
    appointmentId?: UuidNullableFilter<"PatientAppointment"> | string | null
    createdAt?: DateTimeFilter<"PatientAppointment"> | Date | string
    updatedAt?: DateTimeFilter<"PatientAppointment"> | Date | string
    patient?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
    appointment?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
  }

  export type PatientAppointmentOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    date?: SortOrder
    time?: SortOrder
    status?: SortOrder
    name?: SortOrderInput | SortOrder
    appointmentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patient?: PatientProfileOrderByWithRelationInput
    appointment?: AppointmentOrderByWithRelationInput
  }

  export type PatientAppointmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    appointmentId?: string
    AND?: PatientAppointmentWhereInput | PatientAppointmentWhereInput[]
    OR?: PatientAppointmentWhereInput[]
    NOT?: PatientAppointmentWhereInput | PatientAppointmentWhereInput[]
    patientId?: UuidFilter<"PatientAppointment"> | string
    doctorId?: StringFilter<"PatientAppointment"> | string
    date?: StringFilter<"PatientAppointment"> | string
    time?: StringFilter<"PatientAppointment"> | string
    status?: EnumAppointmentStatusFilter<"PatientAppointment"> | $Enums.AppointmentStatus
    name?: StringNullableFilter<"PatientAppointment"> | string | null
    createdAt?: DateTimeFilter<"PatientAppointment"> | Date | string
    updatedAt?: DateTimeFilter<"PatientAppointment"> | Date | string
    patient?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
    appointment?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
  }, "id" | "appointmentId">

  export type PatientAppointmentOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    date?: SortOrder
    time?: SortOrder
    status?: SortOrder
    name?: SortOrderInput | SortOrder
    appointmentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PatientAppointmentCountOrderByAggregateInput
    _max?: PatientAppointmentMaxOrderByAggregateInput
    _min?: PatientAppointmentMinOrderByAggregateInput
  }

  export type PatientAppointmentScalarWhereWithAggregatesInput = {
    AND?: PatientAppointmentScalarWhereWithAggregatesInput | PatientAppointmentScalarWhereWithAggregatesInput[]
    OR?: PatientAppointmentScalarWhereWithAggregatesInput[]
    NOT?: PatientAppointmentScalarWhereWithAggregatesInput | PatientAppointmentScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"PatientAppointment"> | string
    patientId?: UuidWithAggregatesFilter<"PatientAppointment"> | string
    doctorId?: StringWithAggregatesFilter<"PatientAppointment"> | string
    date?: StringWithAggregatesFilter<"PatientAppointment"> | string
    time?: StringWithAggregatesFilter<"PatientAppointment"> | string
    status?: EnumAppointmentStatusWithAggregatesFilter<"PatientAppointment"> | $Enums.AppointmentStatus
    name?: StringNullableWithAggregatesFilter<"PatientAppointment"> | string | null
    appointmentId?: UuidNullableWithAggregatesFilter<"PatientAppointment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PatientAppointment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PatientAppointment"> | Date | string
  }

  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    id?: UuidFilter<"Transaction"> | string
    encounterId?: UuidFilter<"Transaction"> | string
    status?: StringFilter<"Transaction"> | string
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    encounter?: XOR<PatientEncounterScalarRelationFilter, PatientEncounterWhereInput>
    items?: TransactionItemListRelationFilter
    payments?: PaymentListRelationFilter
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    encounterId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    encounter?: PatientEncounterOrderByWithRelationInput
    items?: TransactionItemOrderByRelationAggregateInput
    payments?: PaymentOrderByRelationAggregateInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    encounterId?: string
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    status?: StringFilter<"Transaction"> | string
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    encounter?: XOR<PatientEncounterScalarRelationFilter, PatientEncounterWhereInput>
    items?: TransactionItemListRelationFilter
    payments?: PaymentListRelationFilter
  }, "id" | "encounterId">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    encounterId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Transaction"> | string
    encounterId?: UuidWithAggregatesFilter<"Transaction"> | string
    status?: StringWithAggregatesFilter<"Transaction"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
  }

  export type TransactionItemWhereInput = {
    AND?: TransactionItemWhereInput | TransactionItemWhereInput[]
    OR?: TransactionItemWhereInput[]
    NOT?: TransactionItemWhereInput | TransactionItemWhereInput[]
    id?: UuidFilter<"TransactionItem"> | string
    transactionId?: UuidFilter<"TransactionItem"> | string
    name?: StringFilter<"TransactionItem"> | string
    description?: StringNullableFilter<"TransactionItem"> | string | null
    amount?: IntFilter<"TransactionItem"> | number
    createdAt?: DateTimeFilter<"TransactionItem"> | Date | string
    updatedAt?: DateTimeFilter<"TransactionItem"> | Date | string
    transaction?: XOR<TransactionScalarRelationFilter, TransactionWhereInput>
  }

  export type TransactionItemOrderByWithRelationInput = {
    id?: SortOrder
    transactionId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    transaction?: TransactionOrderByWithRelationInput
  }

  export type TransactionItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TransactionItemWhereInput | TransactionItemWhereInput[]
    OR?: TransactionItemWhereInput[]
    NOT?: TransactionItemWhereInput | TransactionItemWhereInput[]
    transactionId?: UuidFilter<"TransactionItem"> | string
    name?: StringFilter<"TransactionItem"> | string
    description?: StringNullableFilter<"TransactionItem"> | string | null
    amount?: IntFilter<"TransactionItem"> | number
    createdAt?: DateTimeFilter<"TransactionItem"> | Date | string
    updatedAt?: DateTimeFilter<"TransactionItem"> | Date | string
    transaction?: XOR<TransactionScalarRelationFilter, TransactionWhereInput>
  }, "id">

  export type TransactionItemOrderByWithAggregationInput = {
    id?: SortOrder
    transactionId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TransactionItemCountOrderByAggregateInput
    _avg?: TransactionItemAvgOrderByAggregateInput
    _max?: TransactionItemMaxOrderByAggregateInput
    _min?: TransactionItemMinOrderByAggregateInput
    _sum?: TransactionItemSumOrderByAggregateInput
  }

  export type TransactionItemScalarWhereWithAggregatesInput = {
    AND?: TransactionItemScalarWhereWithAggregatesInput | TransactionItemScalarWhereWithAggregatesInput[]
    OR?: TransactionItemScalarWhereWithAggregatesInput[]
    NOT?: TransactionItemScalarWhereWithAggregatesInput | TransactionItemScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"TransactionItem"> | string
    transactionId?: UuidWithAggregatesFilter<"TransactionItem"> | string
    name?: StringWithAggregatesFilter<"TransactionItem"> | string
    description?: StringNullableWithAggregatesFilter<"TransactionItem"> | string | null
    amount?: IntWithAggregatesFilter<"TransactionItem"> | number
    createdAt?: DateTimeWithAggregatesFilter<"TransactionItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TransactionItem"> | Date | string
  }

  export type PaymentPlanWhereInput = {
    AND?: PaymentPlanWhereInput | PaymentPlanWhereInput[]
    OR?: PaymentPlanWhereInput[]
    NOT?: PaymentPlanWhereInput | PaymentPlanWhereInput[]
    id?: UuidFilter<"PaymentPlan"> | string
    name?: StringFilter<"PaymentPlan"> | string
    description?: StringNullableFilter<"PaymentPlan"> | string | null
    cycle?: StringFilter<"PaymentPlan"> | string
    numberOfPayments?: IntFilter<"PaymentPlan"> | number
    createdAt?: DateTimeFilter<"PaymentPlan"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentPlan"> | Date | string
    instalments?: PaymentInstalmentListRelationFilter
  }

  export type PaymentPlanOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    cycle?: SortOrder
    numberOfPayments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    instalments?: PaymentInstalmentOrderByRelationAggregateInput
  }

  export type PaymentPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PaymentPlanWhereInput | PaymentPlanWhereInput[]
    OR?: PaymentPlanWhereInput[]
    NOT?: PaymentPlanWhereInput | PaymentPlanWhereInput[]
    name?: StringFilter<"PaymentPlan"> | string
    description?: StringNullableFilter<"PaymentPlan"> | string | null
    cycle?: StringFilter<"PaymentPlan"> | string
    numberOfPayments?: IntFilter<"PaymentPlan"> | number
    createdAt?: DateTimeFilter<"PaymentPlan"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentPlan"> | Date | string
    instalments?: PaymentInstalmentListRelationFilter
  }, "id">

  export type PaymentPlanOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    cycle?: SortOrder
    numberOfPayments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaymentPlanCountOrderByAggregateInput
    _avg?: PaymentPlanAvgOrderByAggregateInput
    _max?: PaymentPlanMaxOrderByAggregateInput
    _min?: PaymentPlanMinOrderByAggregateInput
    _sum?: PaymentPlanSumOrderByAggregateInput
  }

  export type PaymentPlanScalarWhereWithAggregatesInput = {
    AND?: PaymentPlanScalarWhereWithAggregatesInput | PaymentPlanScalarWhereWithAggregatesInput[]
    OR?: PaymentPlanScalarWhereWithAggregatesInput[]
    NOT?: PaymentPlanScalarWhereWithAggregatesInput | PaymentPlanScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"PaymentPlan"> | string
    name?: StringWithAggregatesFilter<"PaymentPlan"> | string
    description?: StringNullableWithAggregatesFilter<"PaymentPlan"> | string | null
    cycle?: StringWithAggregatesFilter<"PaymentPlan"> | string
    numberOfPayments?: IntWithAggregatesFilter<"PaymentPlan"> | number
    createdAt?: DateTimeWithAggregatesFilter<"PaymentPlan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PaymentPlan"> | Date | string
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: UuidFilter<"Payment"> | string
    transactionId?: UuidFilter<"Payment"> | string
    amount?: IntFilter<"Payment"> | number
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    transaction?: XOR<TransactionScalarRelationFilter, TransactionWhereInput>
    instalments?: PaymentInstalmentListRelationFilter
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    transactionId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    transaction?: TransactionOrderByWithRelationInput
    instalments?: PaymentInstalmentOrderByRelationAggregateInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    transactionId?: UuidFilter<"Payment"> | string
    amount?: IntFilter<"Payment"> | number
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    transaction?: XOR<TransactionScalarRelationFilter, TransactionWhereInput>
    instalments?: PaymentInstalmentListRelationFilter
  }, "id">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    transactionId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Payment"> | string
    transactionId?: UuidWithAggregatesFilter<"Payment"> | string
    amount?: IntWithAggregatesFilter<"Payment"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
  }

  export type PaymentInstalmentWhereInput = {
    AND?: PaymentInstalmentWhereInput | PaymentInstalmentWhereInput[]
    OR?: PaymentInstalmentWhereInput[]
    NOT?: PaymentInstalmentWhereInput | PaymentInstalmentWhereInput[]
    id?: UuidFilter<"PaymentInstalment"> | string
    paymentId?: UuidFilter<"PaymentInstalment"> | string
    planId?: UuidFilter<"PaymentInstalment"> | string
    instalmentNumber?: IntFilter<"PaymentInstalment"> | number
    amountDue?: IntFilter<"PaymentInstalment"> | number
    amountPaid?: IntFilter<"PaymentInstalment"> | number
    createdAt?: DateTimeFilter<"PaymentInstalment"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentInstalment"> | Date | string
    payment?: XOR<PaymentScalarRelationFilter, PaymentWhereInput>
    plan?: XOR<PaymentPlanScalarRelationFilter, PaymentPlanWhereInput>
  }

  export type PaymentInstalmentOrderByWithRelationInput = {
    id?: SortOrder
    paymentId?: SortOrder
    planId?: SortOrder
    instalmentNumber?: SortOrder
    amountDue?: SortOrder
    amountPaid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    payment?: PaymentOrderByWithRelationInput
    plan?: PaymentPlanOrderByWithRelationInput
  }

  export type PaymentInstalmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PaymentInstalmentWhereInput | PaymentInstalmentWhereInput[]
    OR?: PaymentInstalmentWhereInput[]
    NOT?: PaymentInstalmentWhereInput | PaymentInstalmentWhereInput[]
    paymentId?: UuidFilter<"PaymentInstalment"> | string
    planId?: UuidFilter<"PaymentInstalment"> | string
    instalmentNumber?: IntFilter<"PaymentInstalment"> | number
    amountDue?: IntFilter<"PaymentInstalment"> | number
    amountPaid?: IntFilter<"PaymentInstalment"> | number
    createdAt?: DateTimeFilter<"PaymentInstalment"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentInstalment"> | Date | string
    payment?: XOR<PaymentScalarRelationFilter, PaymentWhereInput>
    plan?: XOR<PaymentPlanScalarRelationFilter, PaymentPlanWhereInput>
  }, "id">

  export type PaymentInstalmentOrderByWithAggregationInput = {
    id?: SortOrder
    paymentId?: SortOrder
    planId?: SortOrder
    instalmentNumber?: SortOrder
    amountDue?: SortOrder
    amountPaid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaymentInstalmentCountOrderByAggregateInput
    _avg?: PaymentInstalmentAvgOrderByAggregateInput
    _max?: PaymentInstalmentMaxOrderByAggregateInput
    _min?: PaymentInstalmentMinOrderByAggregateInput
    _sum?: PaymentInstalmentSumOrderByAggregateInput
  }

  export type PaymentInstalmentScalarWhereWithAggregatesInput = {
    AND?: PaymentInstalmentScalarWhereWithAggregatesInput | PaymentInstalmentScalarWhereWithAggregatesInput[]
    OR?: PaymentInstalmentScalarWhereWithAggregatesInput[]
    NOT?: PaymentInstalmentScalarWhereWithAggregatesInput | PaymentInstalmentScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"PaymentInstalment"> | string
    paymentId?: UuidWithAggregatesFilter<"PaymentInstalment"> | string
    planId?: UuidWithAggregatesFilter<"PaymentInstalment"> | string
    instalmentNumber?: IntWithAggregatesFilter<"PaymentInstalment"> | number
    amountDue?: IntWithAggregatesFilter<"PaymentInstalment"> | number
    amountPaid?: IntWithAggregatesFilter<"PaymentInstalment"> | number
    createdAt?: DateTimeWithAggregatesFilter<"PaymentInstalment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PaymentInstalment"> | Date | string
  }

  export type ClinicWhereInput = {
    AND?: ClinicWhereInput | ClinicWhereInput[]
    OR?: ClinicWhereInput[]
    NOT?: ClinicWhereInput | ClinicWhereInput[]
    id?: UuidFilter<"Clinic"> | string
    roomId?: UuidFilter<"Clinic"> | string
    createdAt?: DateTimeFilter<"Clinic"> | Date | string
    updatedAt?: DateTimeFilter<"Clinic"> | Date | string
    schedules?: ClinicScheduleListRelationFilter
  }

  export type ClinicOrderByWithRelationInput = {
    id?: SortOrder
    roomId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    schedules?: ClinicScheduleOrderByRelationAggregateInput
  }

  export type ClinicWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClinicWhereInput | ClinicWhereInput[]
    OR?: ClinicWhereInput[]
    NOT?: ClinicWhereInput | ClinicWhereInput[]
    roomId?: UuidFilter<"Clinic"> | string
    createdAt?: DateTimeFilter<"Clinic"> | Date | string
    updatedAt?: DateTimeFilter<"Clinic"> | Date | string
    schedules?: ClinicScheduleListRelationFilter
  }, "id">

  export type ClinicOrderByWithAggregationInput = {
    id?: SortOrder
    roomId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClinicCountOrderByAggregateInput
    _max?: ClinicMaxOrderByAggregateInput
    _min?: ClinicMinOrderByAggregateInput
  }

  export type ClinicScalarWhereWithAggregatesInput = {
    AND?: ClinicScalarWhereWithAggregatesInput | ClinicScalarWhereWithAggregatesInput[]
    OR?: ClinicScalarWhereWithAggregatesInput[]
    NOT?: ClinicScalarWhereWithAggregatesInput | ClinicScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Clinic"> | string
    roomId?: UuidWithAggregatesFilter<"Clinic"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Clinic"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Clinic"> | Date | string
  }

  export type ClinicScheduleWhereInput = {
    AND?: ClinicScheduleWhereInput | ClinicScheduleWhereInput[]
    OR?: ClinicScheduleWhereInput[]
    NOT?: ClinicScheduleWhereInput | ClinicScheduleWhereInput[]
    id?: UuidFilter<"ClinicSchedule"> | string
    clinicId?: UuidFilter<"ClinicSchedule"> | string
    createdAt?: DateTimeFilter<"ClinicSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"ClinicSchedule"> | Date | string
    clinic?: XOR<ClinicScalarRelationFilter, ClinicWhereInput>
  }

  export type ClinicScheduleOrderByWithRelationInput = {
    id?: SortOrder
    clinicId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinic?: ClinicOrderByWithRelationInput
  }

  export type ClinicScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClinicScheduleWhereInput | ClinicScheduleWhereInput[]
    OR?: ClinicScheduleWhereInput[]
    NOT?: ClinicScheduleWhereInput | ClinicScheduleWhereInput[]
    clinicId?: UuidFilter<"ClinicSchedule"> | string
    createdAt?: DateTimeFilter<"ClinicSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"ClinicSchedule"> | Date | string
    clinic?: XOR<ClinicScalarRelationFilter, ClinicWhereInput>
  }, "id">

  export type ClinicScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    clinicId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClinicScheduleCountOrderByAggregateInput
    _max?: ClinicScheduleMaxOrderByAggregateInput
    _min?: ClinicScheduleMinOrderByAggregateInput
  }

  export type ClinicScheduleScalarWhereWithAggregatesInput = {
    AND?: ClinicScheduleScalarWhereWithAggregatesInput | ClinicScheduleScalarWhereWithAggregatesInput[]
    OR?: ClinicScheduleScalarWhereWithAggregatesInput[]
    NOT?: ClinicScheduleScalarWhereWithAggregatesInput | ClinicScheduleScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ClinicSchedule"> | string
    clinicId?: UuidWithAggregatesFilter<"ClinicSchedule"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ClinicSchedule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ClinicSchedule"> | Date | string
  }

  export type PatientEncounterWhereInput = {
    AND?: PatientEncounterWhereInput | PatientEncounterWhereInput[]
    OR?: PatientEncounterWhereInput[]
    NOT?: PatientEncounterWhereInput | PatientEncounterWhereInput[]
    id?: UuidFilter<"PatientEncounter"> | string
    encounterId?: UuidFilter<"PatientEncounter"> | string
    patientProfileId?: UuidFilter<"PatientEncounter"> | string
    createdAt?: DateTimeFilter<"PatientEncounter"> | Date | string
    updatedAt?: DateTimeFilter<"PatientEncounter"> | Date | string
    patientProfile?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
    transaction?: XOR<TransactionNullableScalarRelationFilter, TransactionWhereInput> | null
  }

  export type PatientEncounterOrderByWithRelationInput = {
    id?: SortOrder
    encounterId?: SortOrder
    patientProfileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientProfile?: PatientProfileOrderByWithRelationInput
    transaction?: TransactionOrderByWithRelationInput
  }

  export type PatientEncounterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    encounterId?: string
    AND?: PatientEncounterWhereInput | PatientEncounterWhereInput[]
    OR?: PatientEncounterWhereInput[]
    NOT?: PatientEncounterWhereInput | PatientEncounterWhereInput[]
    patientProfileId?: UuidFilter<"PatientEncounter"> | string
    createdAt?: DateTimeFilter<"PatientEncounter"> | Date | string
    updatedAt?: DateTimeFilter<"PatientEncounter"> | Date | string
    patientProfile?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
    transaction?: XOR<TransactionNullableScalarRelationFilter, TransactionWhereInput> | null
  }, "id" | "encounterId">

  export type PatientEncounterOrderByWithAggregationInput = {
    id?: SortOrder
    encounterId?: SortOrder
    patientProfileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PatientEncounterCountOrderByAggregateInput
    _max?: PatientEncounterMaxOrderByAggregateInput
    _min?: PatientEncounterMinOrderByAggregateInput
  }

  export type PatientEncounterScalarWhereWithAggregatesInput = {
    AND?: PatientEncounterScalarWhereWithAggregatesInput | PatientEncounterScalarWhereWithAggregatesInput[]
    OR?: PatientEncounterScalarWhereWithAggregatesInput[]
    NOT?: PatientEncounterScalarWhereWithAggregatesInput | PatientEncounterScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"PatientEncounter"> | string
    encounterId?: UuidWithAggregatesFilter<"PatientEncounter"> | string
    patientProfileId?: UuidWithAggregatesFilter<"PatientEncounter"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PatientEncounter"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PatientEncounter"> | Date | string
  }

  export type OutpatientEncounterWhereInput = {
    AND?: OutpatientEncounterWhereInput | OutpatientEncounterWhereInput[]
    OR?: OutpatientEncounterWhereInput[]
    NOT?: OutpatientEncounterWhereInput | OutpatientEncounterWhereInput[]
    id?: UuidFilter<"OutpatientEncounter"> | string
    patientProfileId?: UuidFilter<"OutpatientEncounter"> | string
    date?: StringFilter<"OutpatientEncounter"> | string
    time?: StringFilter<"OutpatientEncounter"> | string
    chiefComplaint?: StringFilter<"OutpatientEncounter"> | string
    doctorDiagnosis?: StringFilter<"OutpatientEncounter"> | string
    type?: EnumOutpatientEncounterTypeFilter<"OutpatientEncounter"> | $Enums.OutpatientEncounterType
    createdAt?: DateTimeFilter<"OutpatientEncounter"> | Date | string
    updatedAt?: DateTimeFilter<"OutpatientEncounter"> | Date | string
    patientProfile?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
  }

  export type OutpatientEncounterOrderByWithRelationInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    date?: SortOrder
    time?: SortOrder
    chiefComplaint?: SortOrder
    doctorDiagnosis?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientProfile?: PatientProfileOrderByWithRelationInput
  }

  export type OutpatientEncounterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OutpatientEncounterWhereInput | OutpatientEncounterWhereInput[]
    OR?: OutpatientEncounterWhereInput[]
    NOT?: OutpatientEncounterWhereInput | OutpatientEncounterWhereInput[]
    patientProfileId?: UuidFilter<"OutpatientEncounter"> | string
    date?: StringFilter<"OutpatientEncounter"> | string
    time?: StringFilter<"OutpatientEncounter"> | string
    chiefComplaint?: StringFilter<"OutpatientEncounter"> | string
    doctorDiagnosis?: StringFilter<"OutpatientEncounter"> | string
    type?: EnumOutpatientEncounterTypeFilter<"OutpatientEncounter"> | $Enums.OutpatientEncounterType
    createdAt?: DateTimeFilter<"OutpatientEncounter"> | Date | string
    updatedAt?: DateTimeFilter<"OutpatientEncounter"> | Date | string
    patientProfile?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
  }, "id">

  export type OutpatientEncounterOrderByWithAggregationInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    date?: SortOrder
    time?: SortOrder
    chiefComplaint?: SortOrder
    doctorDiagnosis?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OutpatientEncounterCountOrderByAggregateInput
    _max?: OutpatientEncounterMaxOrderByAggregateInput
    _min?: OutpatientEncounterMinOrderByAggregateInput
  }

  export type OutpatientEncounterScalarWhereWithAggregatesInput = {
    AND?: OutpatientEncounterScalarWhereWithAggregatesInput | OutpatientEncounterScalarWhereWithAggregatesInput[]
    OR?: OutpatientEncounterScalarWhereWithAggregatesInput[]
    NOT?: OutpatientEncounterScalarWhereWithAggregatesInput | OutpatientEncounterScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"OutpatientEncounter"> | string
    patientProfileId?: UuidWithAggregatesFilter<"OutpatientEncounter"> | string
    date?: StringWithAggregatesFilter<"OutpatientEncounter"> | string
    time?: StringWithAggregatesFilter<"OutpatientEncounter"> | string
    chiefComplaint?: StringWithAggregatesFilter<"OutpatientEncounter"> | string
    doctorDiagnosis?: StringWithAggregatesFilter<"OutpatientEncounter"> | string
    type?: EnumOutpatientEncounterTypeWithAggregatesFilter<"OutpatientEncounter"> | $Enums.OutpatientEncounterType
    createdAt?: DateTimeWithAggregatesFilter<"OutpatientEncounter"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OutpatientEncounter"> | Date | string
  }

  export type InpatientEncounterWhereInput = {
    AND?: InpatientEncounterWhereInput | InpatientEncounterWhereInput[]
    OR?: InpatientEncounterWhereInput[]
    NOT?: InpatientEncounterWhereInput | InpatientEncounterWhereInput[]
    id?: UuidFilter<"InpatientEncounter"> | string
    patientProfileId?: UuidFilter<"InpatientEncounter"> | string
    date?: StringFilter<"InpatientEncounter"> | string
    time?: StringFilter<"InpatientEncounter"> | string
    chiefComplaint?: StringFilter<"InpatientEncounter"> | string
    doctorDiagnosis?: StringFilter<"InpatientEncounter"> | string
    triage?: EnumInpatientTriageFilter<"InpatientEncounter"> | $Enums.InpatientTriage
    disposition?: EnumInpatientDispositionFilter<"InpatientEncounter"> | $Enums.InpatientDisposition
    dispositionDate?: StringNullableFilter<"InpatientEncounter"> | string | null
    dispositionTime?: StringNullableFilter<"InpatientEncounter"> | string | null
    dispositionNote?: StringNullableFilter<"InpatientEncounter"> | string | null
    createdAt?: DateTimeFilter<"InpatientEncounter"> | Date | string
    updatedAt?: DateTimeFilter<"InpatientEncounter"> | Date | string
    patientProfile?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
    charts?: InpatientEncounterChartListRelationFilter
    orders?: InpatientEncounterOrderListRelationFilter
    medicalRecordRequest?: MedicalRecordRequestListRelationFilter
  }

  export type InpatientEncounterOrderByWithRelationInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    date?: SortOrder
    time?: SortOrder
    chiefComplaint?: SortOrder
    doctorDiagnosis?: SortOrder
    triage?: SortOrder
    disposition?: SortOrder
    dispositionDate?: SortOrderInput | SortOrder
    dispositionTime?: SortOrderInput | SortOrder
    dispositionNote?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientProfile?: PatientProfileOrderByWithRelationInput
    charts?: InpatientEncounterChartOrderByRelationAggregateInput
    orders?: InpatientEncounterOrderOrderByRelationAggregateInput
    medicalRecordRequest?: MedicalRecordRequestOrderByRelationAggregateInput
  }

  export type InpatientEncounterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InpatientEncounterWhereInput | InpatientEncounterWhereInput[]
    OR?: InpatientEncounterWhereInput[]
    NOT?: InpatientEncounterWhereInput | InpatientEncounterWhereInput[]
    patientProfileId?: UuidFilter<"InpatientEncounter"> | string
    date?: StringFilter<"InpatientEncounter"> | string
    time?: StringFilter<"InpatientEncounter"> | string
    chiefComplaint?: StringFilter<"InpatientEncounter"> | string
    doctorDiagnosis?: StringFilter<"InpatientEncounter"> | string
    triage?: EnumInpatientTriageFilter<"InpatientEncounter"> | $Enums.InpatientTriage
    disposition?: EnumInpatientDispositionFilter<"InpatientEncounter"> | $Enums.InpatientDisposition
    dispositionDate?: StringNullableFilter<"InpatientEncounter"> | string | null
    dispositionTime?: StringNullableFilter<"InpatientEncounter"> | string | null
    dispositionNote?: StringNullableFilter<"InpatientEncounter"> | string | null
    createdAt?: DateTimeFilter<"InpatientEncounter"> | Date | string
    updatedAt?: DateTimeFilter<"InpatientEncounter"> | Date | string
    patientProfile?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
    charts?: InpatientEncounterChartListRelationFilter
    orders?: InpatientEncounterOrderListRelationFilter
    medicalRecordRequest?: MedicalRecordRequestListRelationFilter
  }, "id">

  export type InpatientEncounterOrderByWithAggregationInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    date?: SortOrder
    time?: SortOrder
    chiefComplaint?: SortOrder
    doctorDiagnosis?: SortOrder
    triage?: SortOrder
    disposition?: SortOrder
    dispositionDate?: SortOrderInput | SortOrder
    dispositionTime?: SortOrderInput | SortOrder
    dispositionNote?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InpatientEncounterCountOrderByAggregateInput
    _max?: InpatientEncounterMaxOrderByAggregateInput
    _min?: InpatientEncounterMinOrderByAggregateInput
  }

  export type InpatientEncounterScalarWhereWithAggregatesInput = {
    AND?: InpatientEncounterScalarWhereWithAggregatesInput | InpatientEncounterScalarWhereWithAggregatesInput[]
    OR?: InpatientEncounterScalarWhereWithAggregatesInput[]
    NOT?: InpatientEncounterScalarWhereWithAggregatesInput | InpatientEncounterScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"InpatientEncounter"> | string
    patientProfileId?: UuidWithAggregatesFilter<"InpatientEncounter"> | string
    date?: StringWithAggregatesFilter<"InpatientEncounter"> | string
    time?: StringWithAggregatesFilter<"InpatientEncounter"> | string
    chiefComplaint?: StringWithAggregatesFilter<"InpatientEncounter"> | string
    doctorDiagnosis?: StringWithAggregatesFilter<"InpatientEncounter"> | string
    triage?: EnumInpatientTriageWithAggregatesFilter<"InpatientEncounter"> | $Enums.InpatientTriage
    disposition?: EnumInpatientDispositionWithAggregatesFilter<"InpatientEncounter"> | $Enums.InpatientDisposition
    dispositionDate?: StringNullableWithAggregatesFilter<"InpatientEncounter"> | string | null
    dispositionTime?: StringNullableWithAggregatesFilter<"InpatientEncounter"> | string | null
    dispositionNote?: StringNullableWithAggregatesFilter<"InpatientEncounter"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"InpatientEncounter"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InpatientEncounter"> | Date | string
  }

  export type InpatientEncounterChartWhereInput = {
    AND?: InpatientEncounterChartWhereInput | InpatientEncounterChartWhereInput[]
    OR?: InpatientEncounterChartWhereInput[]
    NOT?: InpatientEncounterChartWhereInput | InpatientEncounterChartWhereInput[]
    id?: UuidFilter<"InpatientEncounterChart"> | string
    encounterId?: UuidFilter<"InpatientEncounterChart"> | string
    staffId?: UuidFilter<"InpatientEncounterChart"> | string
    chart?: StringFilter<"InpatientEncounterChart"> | string
    createdAt?: DateTimeFilter<"InpatientEncounterChart"> | Date | string
    updatedAt?: DateTimeFilter<"InpatientEncounterChart"> | Date | string
    encounter?: XOR<InpatientEncounterScalarRelationFilter, InpatientEncounterWhereInput>
  }

  export type InpatientEncounterChartOrderByWithRelationInput = {
    id?: SortOrder
    encounterId?: SortOrder
    staffId?: SortOrder
    chart?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    encounter?: InpatientEncounterOrderByWithRelationInput
  }

  export type InpatientEncounterChartWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InpatientEncounterChartWhereInput | InpatientEncounterChartWhereInput[]
    OR?: InpatientEncounterChartWhereInput[]
    NOT?: InpatientEncounterChartWhereInput | InpatientEncounterChartWhereInput[]
    encounterId?: UuidFilter<"InpatientEncounterChart"> | string
    staffId?: UuidFilter<"InpatientEncounterChart"> | string
    chart?: StringFilter<"InpatientEncounterChart"> | string
    createdAt?: DateTimeFilter<"InpatientEncounterChart"> | Date | string
    updatedAt?: DateTimeFilter<"InpatientEncounterChart"> | Date | string
    encounter?: XOR<InpatientEncounterScalarRelationFilter, InpatientEncounterWhereInput>
  }, "id">

  export type InpatientEncounterChartOrderByWithAggregationInput = {
    id?: SortOrder
    encounterId?: SortOrder
    staffId?: SortOrder
    chart?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InpatientEncounterChartCountOrderByAggregateInput
    _max?: InpatientEncounterChartMaxOrderByAggregateInput
    _min?: InpatientEncounterChartMinOrderByAggregateInput
  }

  export type InpatientEncounterChartScalarWhereWithAggregatesInput = {
    AND?: InpatientEncounterChartScalarWhereWithAggregatesInput | InpatientEncounterChartScalarWhereWithAggregatesInput[]
    OR?: InpatientEncounterChartScalarWhereWithAggregatesInput[]
    NOT?: InpatientEncounterChartScalarWhereWithAggregatesInput | InpatientEncounterChartScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"InpatientEncounterChart"> | string
    encounterId?: UuidWithAggregatesFilter<"InpatientEncounterChart"> | string
    staffId?: UuidWithAggregatesFilter<"InpatientEncounterChart"> | string
    chart?: StringWithAggregatesFilter<"InpatientEncounterChart"> | string
    createdAt?: DateTimeWithAggregatesFilter<"InpatientEncounterChart"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InpatientEncounterChart"> | Date | string
  }

  export type InpatientEncounterOrderWhereInput = {
    AND?: InpatientEncounterOrderWhereInput | InpatientEncounterOrderWhereInput[]
    OR?: InpatientEncounterOrderWhereInput[]
    NOT?: InpatientEncounterOrderWhereInput | InpatientEncounterOrderWhereInput[]
    id?: UuidFilter<"InpatientEncounterOrder"> | string
    encounterId?: UuidFilter<"InpatientEncounterOrder"> | string
    type?: EnumInpatientEncounterOrderTypeFilter<"InpatientEncounterOrder"> | $Enums.InpatientEncounterOrderType
    order?: StringFilter<"InpatientEncounterOrder"> | string
    status?: EnumInpatientEncounterOrderStatusFilter<"InpatientEncounterOrder"> | $Enums.InpatientEncounterOrderStatus
    createdAt?: DateTimeFilter<"InpatientEncounterOrder"> | Date | string
    updatedAt?: DateTimeFilter<"InpatientEncounterOrder"> | Date | string
    encounter?: XOR<InpatientEncounterScalarRelationFilter, InpatientEncounterWhereInput>
  }

  export type InpatientEncounterOrderOrderByWithRelationInput = {
    id?: SortOrder
    encounterId?: SortOrder
    type?: SortOrder
    order?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    encounter?: InpatientEncounterOrderByWithRelationInput
  }

  export type InpatientEncounterOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InpatientEncounterOrderWhereInput | InpatientEncounterOrderWhereInput[]
    OR?: InpatientEncounterOrderWhereInput[]
    NOT?: InpatientEncounterOrderWhereInput | InpatientEncounterOrderWhereInput[]
    encounterId?: UuidFilter<"InpatientEncounterOrder"> | string
    type?: EnumInpatientEncounterOrderTypeFilter<"InpatientEncounterOrder"> | $Enums.InpatientEncounterOrderType
    order?: StringFilter<"InpatientEncounterOrder"> | string
    status?: EnumInpatientEncounterOrderStatusFilter<"InpatientEncounterOrder"> | $Enums.InpatientEncounterOrderStatus
    createdAt?: DateTimeFilter<"InpatientEncounterOrder"> | Date | string
    updatedAt?: DateTimeFilter<"InpatientEncounterOrder"> | Date | string
    encounter?: XOR<InpatientEncounterScalarRelationFilter, InpatientEncounterWhereInput>
  }, "id">

  export type InpatientEncounterOrderOrderByWithAggregationInput = {
    id?: SortOrder
    encounterId?: SortOrder
    type?: SortOrder
    order?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InpatientEncounterOrderCountOrderByAggregateInput
    _max?: InpatientEncounterOrderMaxOrderByAggregateInput
    _min?: InpatientEncounterOrderMinOrderByAggregateInput
  }

  export type InpatientEncounterOrderScalarWhereWithAggregatesInput = {
    AND?: InpatientEncounterOrderScalarWhereWithAggregatesInput | InpatientEncounterOrderScalarWhereWithAggregatesInput[]
    OR?: InpatientEncounterOrderScalarWhereWithAggregatesInput[]
    NOT?: InpatientEncounterOrderScalarWhereWithAggregatesInput | InpatientEncounterOrderScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"InpatientEncounterOrder"> | string
    encounterId?: UuidWithAggregatesFilter<"InpatientEncounterOrder"> | string
    type?: EnumInpatientEncounterOrderTypeWithAggregatesFilter<"InpatientEncounterOrder"> | $Enums.InpatientEncounterOrderType
    order?: StringWithAggregatesFilter<"InpatientEncounterOrder"> | string
    status?: EnumInpatientEncounterOrderStatusWithAggregatesFilter<"InpatientEncounterOrder"> | $Enums.InpatientEncounterOrderStatus
    createdAt?: DateTimeWithAggregatesFilter<"InpatientEncounterOrder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InpatientEncounterOrder"> | Date | string
  }

  export type BuildingWhereInput = {
    AND?: BuildingWhereInput | BuildingWhereInput[]
    OR?: BuildingWhereInput[]
    NOT?: BuildingWhereInput | BuildingWhereInput[]
    id?: UuidFilter<"Building"> | string
    name?: StringFilter<"Building"> | string
    createdAt?: DateTimeFilter<"Building"> | Date | string
    updatedAt?: DateTimeFilter<"Building"> | Date | string
    rooms?: RoomListRelationFilter
  }

  export type BuildingOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rooms?: RoomOrderByRelationAggregateInput
  }

  export type BuildingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BuildingWhereInput | BuildingWhereInput[]
    OR?: BuildingWhereInput[]
    NOT?: BuildingWhereInput | BuildingWhereInput[]
    name?: StringFilter<"Building"> | string
    createdAt?: DateTimeFilter<"Building"> | Date | string
    updatedAt?: DateTimeFilter<"Building"> | Date | string
    rooms?: RoomListRelationFilter
  }, "id">

  export type BuildingOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BuildingCountOrderByAggregateInput
    _max?: BuildingMaxOrderByAggregateInput
    _min?: BuildingMinOrderByAggregateInput
  }

  export type BuildingScalarWhereWithAggregatesInput = {
    AND?: BuildingScalarWhereWithAggregatesInput | BuildingScalarWhereWithAggregatesInput[]
    OR?: BuildingScalarWhereWithAggregatesInput[]
    NOT?: BuildingScalarWhereWithAggregatesInput | BuildingScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Building"> | string
    name?: StringWithAggregatesFilter<"Building"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Building"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Building"> | Date | string
  }

  export type RoomWhereInput = {
    AND?: RoomWhereInput | RoomWhereInput[]
    OR?: RoomWhereInput[]
    NOT?: RoomWhereInput | RoomWhereInput[]
    id?: UuidFilter<"Room"> | string
    buildingId?: UuidFilter<"Room"> | string
    type?: EnumRoomTypeFilter<"Room"> | $Enums.RoomType
    identifier?: StringFilter<"Room"> | string
    description?: StringNullableFilter<"Room"> | string | null
    capacity?: IntNullableFilter<"Room"> | number | null
    status?: EnumRoomStatusFilter<"Room"> | $Enums.RoomStatus
    createdAt?: DateTimeFilter<"Room"> | Date | string
    updatedAt?: DateTimeFilter<"Room"> | Date | string
    building?: XOR<BuildingScalarRelationFilter, BuildingWhereInput>
    appointments?: AppointmentListRelationFilter
  }

  export type RoomOrderByWithRelationInput = {
    id?: SortOrder
    buildingId?: SortOrder
    type?: SortOrder
    identifier?: SortOrder
    description?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    building?: BuildingOrderByWithRelationInput
    appointments?: AppointmentOrderByRelationAggregateInput
  }

  export type RoomWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    identifier?: string
    AND?: RoomWhereInput | RoomWhereInput[]
    OR?: RoomWhereInput[]
    NOT?: RoomWhereInput | RoomWhereInput[]
    buildingId?: UuidFilter<"Room"> | string
    type?: EnumRoomTypeFilter<"Room"> | $Enums.RoomType
    description?: StringNullableFilter<"Room"> | string | null
    capacity?: IntNullableFilter<"Room"> | number | null
    status?: EnumRoomStatusFilter<"Room"> | $Enums.RoomStatus
    createdAt?: DateTimeFilter<"Room"> | Date | string
    updatedAt?: DateTimeFilter<"Room"> | Date | string
    building?: XOR<BuildingScalarRelationFilter, BuildingWhereInput>
    appointments?: AppointmentListRelationFilter
  }, "id" | "identifier">

  export type RoomOrderByWithAggregationInput = {
    id?: SortOrder
    buildingId?: SortOrder
    type?: SortOrder
    identifier?: SortOrder
    description?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RoomCountOrderByAggregateInput
    _avg?: RoomAvgOrderByAggregateInput
    _max?: RoomMaxOrderByAggregateInput
    _min?: RoomMinOrderByAggregateInput
    _sum?: RoomSumOrderByAggregateInput
  }

  export type RoomScalarWhereWithAggregatesInput = {
    AND?: RoomScalarWhereWithAggregatesInput | RoomScalarWhereWithAggregatesInput[]
    OR?: RoomScalarWhereWithAggregatesInput[]
    NOT?: RoomScalarWhereWithAggregatesInput | RoomScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Room"> | string
    buildingId?: UuidWithAggregatesFilter<"Room"> | string
    type?: EnumRoomTypeWithAggregatesFilter<"Room"> | $Enums.RoomType
    identifier?: StringWithAggregatesFilter<"Room"> | string
    description?: StringNullableWithAggregatesFilter<"Room"> | string | null
    capacity?: IntNullableWithAggregatesFilter<"Room"> | number | null
    status?: EnumRoomStatusWithAggregatesFilter<"Room"> | $Enums.RoomStatus
    createdAt?: DateTimeWithAggregatesFilter<"Room"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Room"> | Date | string
  }

  export type FacilityLogWhereInput = {
    AND?: FacilityLogWhereInput | FacilityLogWhereInput[]
    OR?: FacilityLogWhereInput[]
    NOT?: FacilityLogWhereInput | FacilityLogWhereInput[]
    id?: IntFilter<"FacilityLog"> | number
    timestamp?: DateTimeFilter<"FacilityLog"> | Date | string
    user?: StringFilter<"FacilityLog"> | string
    role?: StringFilter<"FacilityLog"> | string
    action?: StringFilter<"FacilityLog"> | string
    roomIdentifier?: StringFilter<"FacilityLog"> | string
    type?: StringFilter<"FacilityLog"> | string
    oldStatus?: StringNullableFilter<"FacilityLog"> | string | null
    newStatus?: StringNullableFilter<"FacilityLog"> | string | null
  }

  export type FacilityLogOrderByWithRelationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    user?: SortOrder
    role?: SortOrder
    action?: SortOrder
    roomIdentifier?: SortOrder
    type?: SortOrder
    oldStatus?: SortOrderInput | SortOrder
    newStatus?: SortOrderInput | SortOrder
  }

  export type FacilityLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FacilityLogWhereInput | FacilityLogWhereInput[]
    OR?: FacilityLogWhereInput[]
    NOT?: FacilityLogWhereInput | FacilityLogWhereInput[]
    timestamp?: DateTimeFilter<"FacilityLog"> | Date | string
    user?: StringFilter<"FacilityLog"> | string
    role?: StringFilter<"FacilityLog"> | string
    action?: StringFilter<"FacilityLog"> | string
    roomIdentifier?: StringFilter<"FacilityLog"> | string
    type?: StringFilter<"FacilityLog"> | string
    oldStatus?: StringNullableFilter<"FacilityLog"> | string | null
    newStatus?: StringNullableFilter<"FacilityLog"> | string | null
  }, "id">

  export type FacilityLogOrderByWithAggregationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    user?: SortOrder
    role?: SortOrder
    action?: SortOrder
    roomIdentifier?: SortOrder
    type?: SortOrder
    oldStatus?: SortOrderInput | SortOrder
    newStatus?: SortOrderInput | SortOrder
    _count?: FacilityLogCountOrderByAggregateInput
    _avg?: FacilityLogAvgOrderByAggregateInput
    _max?: FacilityLogMaxOrderByAggregateInput
    _min?: FacilityLogMinOrderByAggregateInput
    _sum?: FacilityLogSumOrderByAggregateInput
  }

  export type FacilityLogScalarWhereWithAggregatesInput = {
    AND?: FacilityLogScalarWhereWithAggregatesInput | FacilityLogScalarWhereWithAggregatesInput[]
    OR?: FacilityLogScalarWhereWithAggregatesInput[]
    NOT?: FacilityLogScalarWhereWithAggregatesInput | FacilityLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FacilityLog"> | number
    timestamp?: DateTimeWithAggregatesFilter<"FacilityLog"> | Date | string
    user?: StringWithAggregatesFilter<"FacilityLog"> | string
    role?: StringWithAggregatesFilter<"FacilityLog"> | string
    action?: StringWithAggregatesFilter<"FacilityLog"> | string
    roomIdentifier?: StringWithAggregatesFilter<"FacilityLog"> | string
    type?: StringWithAggregatesFilter<"FacilityLog"> | string
    oldStatus?: StringNullableWithAggregatesFilter<"FacilityLog"> | string | null
    newStatus?: StringNullableWithAggregatesFilter<"FacilityLog"> | string | null
  }

  export type InsuranceProviderWhereInput = {
    AND?: InsuranceProviderWhereInput | InsuranceProviderWhereInput[]
    OR?: InsuranceProviderWhereInput[]
    NOT?: InsuranceProviderWhereInput | InsuranceProviderWhereInput[]
    id?: UuidFilter<"InsuranceProvider"> | string
    name?: StringFilter<"InsuranceProvider"> | string
    description?: StringNullableFilter<"InsuranceProvider"> | string | null
    email?: StringNullableFilter<"InsuranceProvider"> | string | null
    phone?: StringNullableFilter<"InsuranceProvider"> | string | null
    address?: StringNullableFilter<"InsuranceProvider"> | string | null
    city?: StringNullableFilter<"InsuranceProvider"> | string | null
    state?: StringNullableFilter<"InsuranceProvider"> | string | null
    zip?: StringNullableFilter<"InsuranceProvider"> | string | null
    country?: StringNullableFilter<"InsuranceProvider"> | string | null
    createdAt?: DateTimeFilter<"InsuranceProvider"> | Date | string
    updatedAt?: DateTimeFilter<"InsuranceProvider"> | Date | string
    claims?: InsuranceClaimListRelationFilter
  }

  export type InsuranceProviderOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    zip?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    claims?: InsuranceClaimOrderByRelationAggregateInput
  }

  export type InsuranceProviderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: InsuranceProviderWhereInput | InsuranceProviderWhereInput[]
    OR?: InsuranceProviderWhereInput[]
    NOT?: InsuranceProviderWhereInput | InsuranceProviderWhereInput[]
    description?: StringNullableFilter<"InsuranceProvider"> | string | null
    email?: StringNullableFilter<"InsuranceProvider"> | string | null
    phone?: StringNullableFilter<"InsuranceProvider"> | string | null
    address?: StringNullableFilter<"InsuranceProvider"> | string | null
    city?: StringNullableFilter<"InsuranceProvider"> | string | null
    state?: StringNullableFilter<"InsuranceProvider"> | string | null
    zip?: StringNullableFilter<"InsuranceProvider"> | string | null
    country?: StringNullableFilter<"InsuranceProvider"> | string | null
    createdAt?: DateTimeFilter<"InsuranceProvider"> | Date | string
    updatedAt?: DateTimeFilter<"InsuranceProvider"> | Date | string
    claims?: InsuranceClaimListRelationFilter
  }, "id" | "name">

  export type InsuranceProviderOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    zip?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InsuranceProviderCountOrderByAggregateInput
    _max?: InsuranceProviderMaxOrderByAggregateInput
    _min?: InsuranceProviderMinOrderByAggregateInput
  }

  export type InsuranceProviderScalarWhereWithAggregatesInput = {
    AND?: InsuranceProviderScalarWhereWithAggregatesInput | InsuranceProviderScalarWhereWithAggregatesInput[]
    OR?: InsuranceProviderScalarWhereWithAggregatesInput[]
    NOT?: InsuranceProviderScalarWhereWithAggregatesInput | InsuranceProviderScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"InsuranceProvider"> | string
    name?: StringWithAggregatesFilter<"InsuranceProvider"> | string
    description?: StringNullableWithAggregatesFilter<"InsuranceProvider"> | string | null
    email?: StringNullableWithAggregatesFilter<"InsuranceProvider"> | string | null
    phone?: StringNullableWithAggregatesFilter<"InsuranceProvider"> | string | null
    address?: StringNullableWithAggregatesFilter<"InsuranceProvider"> | string | null
    city?: StringNullableWithAggregatesFilter<"InsuranceProvider"> | string | null
    state?: StringNullableWithAggregatesFilter<"InsuranceProvider"> | string | null
    zip?: StringNullableWithAggregatesFilter<"InsuranceProvider"> | string | null
    country?: StringNullableWithAggregatesFilter<"InsuranceProvider"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"InsuranceProvider"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InsuranceProvider"> | Date | string
  }

  export type InsuranceClaimWhereInput = {
    AND?: InsuranceClaimWhereInput | InsuranceClaimWhereInput[]
    OR?: InsuranceClaimWhereInput[]
    NOT?: InsuranceClaimWhereInput | InsuranceClaimWhereInput[]
    id?: UuidFilter<"InsuranceClaim"> | string
    providerId?: UuidFilter<"InsuranceClaim"> | string
    status?: StringFilter<"InsuranceClaim"> | string
    message?: StringNullableFilter<"InsuranceClaim"> | string | null
    amount?: IntFilter<"InsuranceClaim"> | number
    createdAt?: DateTimeFilter<"InsuranceClaim"> | Date | string
    updatedAt?: DateTimeFilter<"InsuranceClaim"> | Date | string
    provider?: XOR<InsuranceProviderScalarRelationFilter, InsuranceProviderWhereInput>
    items?: InsuranceClaimItemListRelationFilter
  }

  export type InsuranceClaimOrderByWithRelationInput = {
    id?: SortOrder
    providerId?: SortOrder
    status?: SortOrder
    message?: SortOrderInput | SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    provider?: InsuranceProviderOrderByWithRelationInput
    items?: InsuranceClaimItemOrderByRelationAggregateInput
  }

  export type InsuranceClaimWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InsuranceClaimWhereInput | InsuranceClaimWhereInput[]
    OR?: InsuranceClaimWhereInput[]
    NOT?: InsuranceClaimWhereInput | InsuranceClaimWhereInput[]
    providerId?: UuidFilter<"InsuranceClaim"> | string
    status?: StringFilter<"InsuranceClaim"> | string
    message?: StringNullableFilter<"InsuranceClaim"> | string | null
    amount?: IntFilter<"InsuranceClaim"> | number
    createdAt?: DateTimeFilter<"InsuranceClaim"> | Date | string
    updatedAt?: DateTimeFilter<"InsuranceClaim"> | Date | string
    provider?: XOR<InsuranceProviderScalarRelationFilter, InsuranceProviderWhereInput>
    items?: InsuranceClaimItemListRelationFilter
  }, "id">

  export type InsuranceClaimOrderByWithAggregationInput = {
    id?: SortOrder
    providerId?: SortOrder
    status?: SortOrder
    message?: SortOrderInput | SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InsuranceClaimCountOrderByAggregateInput
    _avg?: InsuranceClaimAvgOrderByAggregateInput
    _max?: InsuranceClaimMaxOrderByAggregateInput
    _min?: InsuranceClaimMinOrderByAggregateInput
    _sum?: InsuranceClaimSumOrderByAggregateInput
  }

  export type InsuranceClaimScalarWhereWithAggregatesInput = {
    AND?: InsuranceClaimScalarWhereWithAggregatesInput | InsuranceClaimScalarWhereWithAggregatesInput[]
    OR?: InsuranceClaimScalarWhereWithAggregatesInput[]
    NOT?: InsuranceClaimScalarWhereWithAggregatesInput | InsuranceClaimScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"InsuranceClaim"> | string
    providerId?: UuidWithAggregatesFilter<"InsuranceClaim"> | string
    status?: StringWithAggregatesFilter<"InsuranceClaim"> | string
    message?: StringNullableWithAggregatesFilter<"InsuranceClaim"> | string | null
    amount?: IntWithAggregatesFilter<"InsuranceClaim"> | number
    createdAt?: DateTimeWithAggregatesFilter<"InsuranceClaim"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InsuranceClaim"> | Date | string
  }

  export type InsuranceClaimItemWhereInput = {
    AND?: InsuranceClaimItemWhereInput | InsuranceClaimItemWhereInput[]
    OR?: InsuranceClaimItemWhereInput[]
    NOT?: InsuranceClaimItemWhereInput | InsuranceClaimItemWhereInput[]
    id?: UuidFilter<"InsuranceClaimItem"> | string
    claimId?: UuidFilter<"InsuranceClaimItem"> | string
    name?: StringFilter<"InsuranceClaimItem"> | string
    description?: StringNullableFilter<"InsuranceClaimItem"> | string | null
    amount?: IntFilter<"InsuranceClaimItem"> | number
    createdAt?: DateTimeFilter<"InsuranceClaimItem"> | Date | string
    updatedAt?: DateTimeFilter<"InsuranceClaimItem"> | Date | string
    claim?: XOR<InsuranceClaimScalarRelationFilter, InsuranceClaimWhereInput>
  }

  export type InsuranceClaimItemOrderByWithRelationInput = {
    id?: SortOrder
    claimId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    claim?: InsuranceClaimOrderByWithRelationInput
  }

  export type InsuranceClaimItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InsuranceClaimItemWhereInput | InsuranceClaimItemWhereInput[]
    OR?: InsuranceClaimItemWhereInput[]
    NOT?: InsuranceClaimItemWhereInput | InsuranceClaimItemWhereInput[]
    claimId?: UuidFilter<"InsuranceClaimItem"> | string
    name?: StringFilter<"InsuranceClaimItem"> | string
    description?: StringNullableFilter<"InsuranceClaimItem"> | string | null
    amount?: IntFilter<"InsuranceClaimItem"> | number
    createdAt?: DateTimeFilter<"InsuranceClaimItem"> | Date | string
    updatedAt?: DateTimeFilter<"InsuranceClaimItem"> | Date | string
    claim?: XOR<InsuranceClaimScalarRelationFilter, InsuranceClaimWhereInput>
  }, "id">

  export type InsuranceClaimItemOrderByWithAggregationInput = {
    id?: SortOrder
    claimId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InsuranceClaimItemCountOrderByAggregateInput
    _avg?: InsuranceClaimItemAvgOrderByAggregateInput
    _max?: InsuranceClaimItemMaxOrderByAggregateInput
    _min?: InsuranceClaimItemMinOrderByAggregateInput
    _sum?: InsuranceClaimItemSumOrderByAggregateInput
  }

  export type InsuranceClaimItemScalarWhereWithAggregatesInput = {
    AND?: InsuranceClaimItemScalarWhereWithAggregatesInput | InsuranceClaimItemScalarWhereWithAggregatesInput[]
    OR?: InsuranceClaimItemScalarWhereWithAggregatesInput[]
    NOT?: InsuranceClaimItemScalarWhereWithAggregatesInput | InsuranceClaimItemScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"InsuranceClaimItem"> | string
    claimId?: UuidWithAggregatesFilter<"InsuranceClaimItem"> | string
    name?: StringWithAggregatesFilter<"InsuranceClaimItem"> | string
    description?: StringNullableWithAggregatesFilter<"InsuranceClaimItem"> | string | null
    amount?: IntWithAggregatesFilter<"InsuranceClaimItem"> | number
    createdAt?: DateTimeWithAggregatesFilter<"InsuranceClaimItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InsuranceClaimItem"> | Date | string
  }

  export type LogWhereInput = {
    AND?: LogWhereInput | LogWhereInput[]
    OR?: LogWhereInput[]
    NOT?: LogWhereInput | LogWhereInput[]
    id?: UuidFilter<"Log"> | string
    user?: StringFilter<"Log"> | string
    action?: StringFilter<"Log"> | string
    entity?: StringFilter<"Log"> | string
    data?: JsonFilter<"Log">
    ipAddress?: StringFilter<"Log"> | string
    timestamp?: DateTimeFilter<"Log"> | Date | string
  }

  export type LogOrderByWithRelationInput = {
    id?: SortOrder
    user?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    data?: SortOrder
    ipAddress?: SortOrder
    timestamp?: SortOrder
  }

  export type LogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LogWhereInput | LogWhereInput[]
    OR?: LogWhereInput[]
    NOT?: LogWhereInput | LogWhereInput[]
    user?: StringFilter<"Log"> | string
    action?: StringFilter<"Log"> | string
    entity?: StringFilter<"Log"> | string
    data?: JsonFilter<"Log">
    ipAddress?: StringFilter<"Log"> | string
    timestamp?: DateTimeFilter<"Log"> | Date | string
  }, "id">

  export type LogOrderByWithAggregationInput = {
    id?: SortOrder
    user?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    data?: SortOrder
    ipAddress?: SortOrder
    timestamp?: SortOrder
    _count?: LogCountOrderByAggregateInput
    _max?: LogMaxOrderByAggregateInput
    _min?: LogMinOrderByAggregateInput
  }

  export type LogScalarWhereWithAggregatesInput = {
    AND?: LogScalarWhereWithAggregatesInput | LogScalarWhereWithAggregatesInput[]
    OR?: LogScalarWhereWithAggregatesInput[]
    NOT?: LogScalarWhereWithAggregatesInput | LogScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Log"> | string
    user?: StringWithAggregatesFilter<"Log"> | string
    action?: StringWithAggregatesFilter<"Log"> | string
    entity?: StringWithAggregatesFilter<"Log"> | string
    data?: JsonWithAggregatesFilter<"Log">
    ipAddress?: StringWithAggregatesFilter<"Log"> | string
    timestamp?: DateTimeWithAggregatesFilter<"Log"> | Date | string
  }

  export type PatientProfileWhereInput = {
    AND?: PatientProfileWhereInput | PatientProfileWhereInput[]
    OR?: PatientProfileWhereInput[]
    NOT?: PatientProfileWhereInput | PatientProfileWhereInput[]
    id?: UuidFilter<"PatientProfile"> | string
    lastName?: StringFilter<"PatientProfile"> | string
    firstName?: StringFilter<"PatientProfile"> | string
    middleName?: StringNullableFilter<"PatientProfile"> | string | null
    suffix?: StringNullableFilter<"PatientProfile"> | string | null
    birthdate?: StringNullableFilter<"PatientProfile"> | string | null
    birthplace?: StringNullableFilter<"PatientProfile"> | string | null
    sex?: EnumSexNullableFilter<"PatientProfile"> | $Enums.Sex | null
    maritalStatus?: EnumMaritalStatusNullableFilter<"PatientProfile"> | $Enums.MaritalStatus | null
    nationality?: StringNullableFilter<"PatientProfile"> | string | null
    religion?: StringNullableFilter<"PatientProfile"> | string | null
    bloodType?: EnumBloodTypeNullableFilter<"PatientProfile"> | $Enums.BloodType | null
    archived?: BoolFilter<"PatientProfile"> | boolean
    createdAt?: DateTimeFilter<"PatientProfile"> | Date | string
    updatedAt?: DateTimeFilter<"PatientProfile"> | Date | string
    patientEncounters?: PatientEncounterListRelationFilter
    inpatientEncounters?: InpatientEncounterListRelationFilter
    outpatientEncounters?: OutpatientEncounterListRelationFilter
    appointments?: AppointmentListRelationFilter
    patientAppointments?: PatientAppointmentListRelationFilter
    addresses?: AddressListRelationFilter
    contacts?: ContactListRelationFilter
    employments?: EmploymentListRelationFilter
    emergencyContacts?: EmergencyContactListRelationFilter
    medicalRecordRequests?: MedicalRecordRequestListRelationFilter
    consent?: XOR<ConsentNullableScalarRelationFilter, ConsentWhereInput> | null
  }

  export type PatientProfileOrderByWithRelationInput = {
    id?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    suffix?: SortOrderInput | SortOrder
    birthdate?: SortOrderInput | SortOrder
    birthplace?: SortOrderInput | SortOrder
    sex?: SortOrderInput | SortOrder
    maritalStatus?: SortOrderInput | SortOrder
    nationality?: SortOrderInput | SortOrder
    religion?: SortOrderInput | SortOrder
    bloodType?: SortOrderInput | SortOrder
    archived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientEncounters?: PatientEncounterOrderByRelationAggregateInput
    inpatientEncounters?: InpatientEncounterOrderByRelationAggregateInput
    outpatientEncounters?: OutpatientEncounterOrderByRelationAggregateInput
    appointments?: AppointmentOrderByRelationAggregateInput
    patientAppointments?: PatientAppointmentOrderByRelationAggregateInput
    addresses?: AddressOrderByRelationAggregateInput
    contacts?: ContactOrderByRelationAggregateInput
    employments?: EmploymentOrderByRelationAggregateInput
    emergencyContacts?: EmergencyContactOrderByRelationAggregateInput
    medicalRecordRequests?: MedicalRecordRequestOrderByRelationAggregateInput
    consent?: ConsentOrderByWithRelationInput
  }

  export type PatientProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PatientProfileWhereInput | PatientProfileWhereInput[]
    OR?: PatientProfileWhereInput[]
    NOT?: PatientProfileWhereInput | PatientProfileWhereInput[]
    lastName?: StringFilter<"PatientProfile"> | string
    firstName?: StringFilter<"PatientProfile"> | string
    middleName?: StringNullableFilter<"PatientProfile"> | string | null
    suffix?: StringNullableFilter<"PatientProfile"> | string | null
    birthdate?: StringNullableFilter<"PatientProfile"> | string | null
    birthplace?: StringNullableFilter<"PatientProfile"> | string | null
    sex?: EnumSexNullableFilter<"PatientProfile"> | $Enums.Sex | null
    maritalStatus?: EnumMaritalStatusNullableFilter<"PatientProfile"> | $Enums.MaritalStatus | null
    nationality?: StringNullableFilter<"PatientProfile"> | string | null
    religion?: StringNullableFilter<"PatientProfile"> | string | null
    bloodType?: EnumBloodTypeNullableFilter<"PatientProfile"> | $Enums.BloodType | null
    archived?: BoolFilter<"PatientProfile"> | boolean
    createdAt?: DateTimeFilter<"PatientProfile"> | Date | string
    updatedAt?: DateTimeFilter<"PatientProfile"> | Date | string
    patientEncounters?: PatientEncounterListRelationFilter
    inpatientEncounters?: InpatientEncounterListRelationFilter
    outpatientEncounters?: OutpatientEncounterListRelationFilter
    appointments?: AppointmentListRelationFilter
    patientAppointments?: PatientAppointmentListRelationFilter
    addresses?: AddressListRelationFilter
    contacts?: ContactListRelationFilter
    employments?: EmploymentListRelationFilter
    emergencyContacts?: EmergencyContactListRelationFilter
    medicalRecordRequests?: MedicalRecordRequestListRelationFilter
    consent?: XOR<ConsentNullableScalarRelationFilter, ConsentWhereInput> | null
  }, "id">

  export type PatientProfileOrderByWithAggregationInput = {
    id?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    suffix?: SortOrderInput | SortOrder
    birthdate?: SortOrderInput | SortOrder
    birthplace?: SortOrderInput | SortOrder
    sex?: SortOrderInput | SortOrder
    maritalStatus?: SortOrderInput | SortOrder
    nationality?: SortOrderInput | SortOrder
    religion?: SortOrderInput | SortOrder
    bloodType?: SortOrderInput | SortOrder
    archived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PatientProfileCountOrderByAggregateInput
    _max?: PatientProfileMaxOrderByAggregateInput
    _min?: PatientProfileMinOrderByAggregateInput
  }

  export type PatientProfileScalarWhereWithAggregatesInput = {
    AND?: PatientProfileScalarWhereWithAggregatesInput | PatientProfileScalarWhereWithAggregatesInput[]
    OR?: PatientProfileScalarWhereWithAggregatesInput[]
    NOT?: PatientProfileScalarWhereWithAggregatesInput | PatientProfileScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"PatientProfile"> | string
    lastName?: StringWithAggregatesFilter<"PatientProfile"> | string
    firstName?: StringWithAggregatesFilter<"PatientProfile"> | string
    middleName?: StringNullableWithAggregatesFilter<"PatientProfile"> | string | null
    suffix?: StringNullableWithAggregatesFilter<"PatientProfile"> | string | null
    birthdate?: StringNullableWithAggregatesFilter<"PatientProfile"> | string | null
    birthplace?: StringNullableWithAggregatesFilter<"PatientProfile"> | string | null
    sex?: EnumSexNullableWithAggregatesFilter<"PatientProfile"> | $Enums.Sex | null
    maritalStatus?: EnumMaritalStatusNullableWithAggregatesFilter<"PatientProfile"> | $Enums.MaritalStatus | null
    nationality?: StringNullableWithAggregatesFilter<"PatientProfile"> | string | null
    religion?: StringNullableWithAggregatesFilter<"PatientProfile"> | string | null
    bloodType?: EnumBloodTypeNullableWithAggregatesFilter<"PatientProfile"> | $Enums.BloodType | null
    archived?: BoolWithAggregatesFilter<"PatientProfile"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"PatientProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PatientProfile"> | Date | string
  }

  export type AddressWhereInput = {
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    id?: UuidFilter<"Address"> | string
    patientProfileId?: UuidFilter<"Address"> | string
    label?: StringFilter<"Address"> | string
    country?: StringFilter<"Address"> | string
    state?: StringFilter<"Address"> | string
    zipCode?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    address?: StringFilter<"Address"> | string
    createdAt?: DateTimeFilter<"Address"> | Date | string
    updatedAt?: DateTimeFilter<"Address"> | Date | string
    patientProfile?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
  }

  export type AddressOrderByWithRelationInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    label?: SortOrder
    country?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    city?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientProfile?: PatientProfileOrderByWithRelationInput
  }

  export type AddressWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    patientProfileId?: UuidFilter<"Address"> | string
    label?: StringFilter<"Address"> | string
    country?: StringFilter<"Address"> | string
    state?: StringFilter<"Address"> | string
    zipCode?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    address?: StringFilter<"Address"> | string
    createdAt?: DateTimeFilter<"Address"> | Date | string
    updatedAt?: DateTimeFilter<"Address"> | Date | string
    patientProfile?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
  }, "id">

  export type AddressOrderByWithAggregationInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    label?: SortOrder
    country?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    city?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AddressCountOrderByAggregateInput
    _max?: AddressMaxOrderByAggregateInput
    _min?: AddressMinOrderByAggregateInput
  }

  export type AddressScalarWhereWithAggregatesInput = {
    AND?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    OR?: AddressScalarWhereWithAggregatesInput[]
    NOT?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Address"> | string
    patientProfileId?: UuidWithAggregatesFilter<"Address"> | string
    label?: StringWithAggregatesFilter<"Address"> | string
    country?: StringWithAggregatesFilter<"Address"> | string
    state?: StringWithAggregatesFilter<"Address"> | string
    zipCode?: StringWithAggregatesFilter<"Address"> | string
    city?: StringWithAggregatesFilter<"Address"> | string
    address?: StringWithAggregatesFilter<"Address"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Address"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Address"> | Date | string
  }

  export type ContactWhereInput = {
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    id?: UuidFilter<"Contact"> | string
    patientProfileId?: UuidFilter<"Contact"> | string
    type?: EnumContactTypeFilter<"Contact"> | $Enums.ContactType
    value?: StringFilter<"Contact"> | string
    createdAt?: DateTimeFilter<"Contact"> | Date | string
    updatedAt?: DateTimeFilter<"Contact"> | Date | string
    patientProfile?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
  }

  export type ContactOrderByWithRelationInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    type?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientProfile?: PatientProfileOrderByWithRelationInput
  }

  export type ContactWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    patientProfileId?: UuidFilter<"Contact"> | string
    type?: EnumContactTypeFilter<"Contact"> | $Enums.ContactType
    value?: StringFilter<"Contact"> | string
    createdAt?: DateTimeFilter<"Contact"> | Date | string
    updatedAt?: DateTimeFilter<"Contact"> | Date | string
    patientProfile?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
  }, "id">

  export type ContactOrderByWithAggregationInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    type?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ContactCountOrderByAggregateInput
    _max?: ContactMaxOrderByAggregateInput
    _min?: ContactMinOrderByAggregateInput
  }

  export type ContactScalarWhereWithAggregatesInput = {
    AND?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    OR?: ContactScalarWhereWithAggregatesInput[]
    NOT?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Contact"> | string
    patientProfileId?: UuidWithAggregatesFilter<"Contact"> | string
    type?: EnumContactTypeWithAggregatesFilter<"Contact"> | $Enums.ContactType
    value?: StringWithAggregatesFilter<"Contact"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Contact"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Contact"> | Date | string
  }

  export type EmploymentWhereInput = {
    AND?: EmploymentWhereInput | EmploymentWhereInput[]
    OR?: EmploymentWhereInput[]
    NOT?: EmploymentWhereInput | EmploymentWhereInput[]
    id?: UuidFilter<"Employment"> | string
    patientProfileId?: UuidFilter<"Employment"> | string
    employer?: StringFilter<"Employment"> | string
    contactPerson?: StringNullableFilter<"Employment"> | string | null
    address?: StringNullableFilter<"Employment"> | string | null
    phone?: StringNullableFilter<"Employment"> | string | null
    email?: StringNullableFilter<"Employment"> | string | null
    website?: StringNullableFilter<"Employment"> | string | null
    createdAt?: DateTimeFilter<"Employment"> | Date | string
    updatedAt?: DateTimeFilter<"Employment"> | Date | string
    patientProfile?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
  }

  export type EmploymentOrderByWithRelationInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    employer?: SortOrder
    contactPerson?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientProfile?: PatientProfileOrderByWithRelationInput
  }

  export type EmploymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmploymentWhereInput | EmploymentWhereInput[]
    OR?: EmploymentWhereInput[]
    NOT?: EmploymentWhereInput | EmploymentWhereInput[]
    patientProfileId?: UuidFilter<"Employment"> | string
    employer?: StringFilter<"Employment"> | string
    contactPerson?: StringNullableFilter<"Employment"> | string | null
    address?: StringNullableFilter<"Employment"> | string | null
    phone?: StringNullableFilter<"Employment"> | string | null
    email?: StringNullableFilter<"Employment"> | string | null
    website?: StringNullableFilter<"Employment"> | string | null
    createdAt?: DateTimeFilter<"Employment"> | Date | string
    updatedAt?: DateTimeFilter<"Employment"> | Date | string
    patientProfile?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
  }, "id">

  export type EmploymentOrderByWithAggregationInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    employer?: SortOrder
    contactPerson?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmploymentCountOrderByAggregateInput
    _max?: EmploymentMaxOrderByAggregateInput
    _min?: EmploymentMinOrderByAggregateInput
  }

  export type EmploymentScalarWhereWithAggregatesInput = {
    AND?: EmploymentScalarWhereWithAggregatesInput | EmploymentScalarWhereWithAggregatesInput[]
    OR?: EmploymentScalarWhereWithAggregatesInput[]
    NOT?: EmploymentScalarWhereWithAggregatesInput | EmploymentScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Employment"> | string
    patientProfileId?: UuidWithAggregatesFilter<"Employment"> | string
    employer?: StringWithAggregatesFilter<"Employment"> | string
    contactPerson?: StringNullableWithAggregatesFilter<"Employment"> | string | null
    address?: StringNullableWithAggregatesFilter<"Employment"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Employment"> | string | null
    email?: StringNullableWithAggregatesFilter<"Employment"> | string | null
    website?: StringNullableWithAggregatesFilter<"Employment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Employment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Employment"> | Date | string
  }

  export type EmergencyContactWhereInput = {
    AND?: EmergencyContactWhereInput | EmergencyContactWhereInput[]
    OR?: EmergencyContactWhereInput[]
    NOT?: EmergencyContactWhereInput | EmergencyContactWhereInput[]
    id?: UuidFilter<"EmergencyContact"> | string
    patientProfileId?: UuidFilter<"EmergencyContact"> | string
    lastName?: StringFilter<"EmergencyContact"> | string
    firstName?: StringFilter<"EmergencyContact"> | string
    middleName?: StringNullableFilter<"EmergencyContact"> | string | null
    suffix?: StringNullableFilter<"EmergencyContact"> | string | null
    relationship?: EnumRelationshipFilter<"EmergencyContact"> | $Enums.Relationship
    phone?: StringNullableFilter<"EmergencyContact"> | string | null
    email?: StringNullableFilter<"EmergencyContact"> | string | null
    address?: StringNullableFilter<"EmergencyContact"> | string | null
    createdAt?: DateTimeFilter<"EmergencyContact"> | Date | string
    updatedAt?: DateTimeFilter<"EmergencyContact"> | Date | string
    patientProfile?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
  }

  export type EmergencyContactOrderByWithRelationInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    suffix?: SortOrderInput | SortOrder
    relationship?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientProfile?: PatientProfileOrderByWithRelationInput
  }

  export type EmergencyContactWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmergencyContactWhereInput | EmergencyContactWhereInput[]
    OR?: EmergencyContactWhereInput[]
    NOT?: EmergencyContactWhereInput | EmergencyContactWhereInput[]
    patientProfileId?: UuidFilter<"EmergencyContact"> | string
    lastName?: StringFilter<"EmergencyContact"> | string
    firstName?: StringFilter<"EmergencyContact"> | string
    middleName?: StringNullableFilter<"EmergencyContact"> | string | null
    suffix?: StringNullableFilter<"EmergencyContact"> | string | null
    relationship?: EnumRelationshipFilter<"EmergencyContact"> | $Enums.Relationship
    phone?: StringNullableFilter<"EmergencyContact"> | string | null
    email?: StringNullableFilter<"EmergencyContact"> | string | null
    address?: StringNullableFilter<"EmergencyContact"> | string | null
    createdAt?: DateTimeFilter<"EmergencyContact"> | Date | string
    updatedAt?: DateTimeFilter<"EmergencyContact"> | Date | string
    patientProfile?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
  }, "id">

  export type EmergencyContactOrderByWithAggregationInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    suffix?: SortOrderInput | SortOrder
    relationship?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmergencyContactCountOrderByAggregateInput
    _max?: EmergencyContactMaxOrderByAggregateInput
    _min?: EmergencyContactMinOrderByAggregateInput
  }

  export type EmergencyContactScalarWhereWithAggregatesInput = {
    AND?: EmergencyContactScalarWhereWithAggregatesInput | EmergencyContactScalarWhereWithAggregatesInput[]
    OR?: EmergencyContactScalarWhereWithAggregatesInput[]
    NOT?: EmergencyContactScalarWhereWithAggregatesInput | EmergencyContactScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"EmergencyContact"> | string
    patientProfileId?: UuidWithAggregatesFilter<"EmergencyContact"> | string
    lastName?: StringWithAggregatesFilter<"EmergencyContact"> | string
    firstName?: StringWithAggregatesFilter<"EmergencyContact"> | string
    middleName?: StringNullableWithAggregatesFilter<"EmergencyContact"> | string | null
    suffix?: StringNullableWithAggregatesFilter<"EmergencyContact"> | string | null
    relationship?: EnumRelationshipWithAggregatesFilter<"EmergencyContact"> | $Enums.Relationship
    phone?: StringNullableWithAggregatesFilter<"EmergencyContact"> | string | null
    email?: StringNullableWithAggregatesFilter<"EmergencyContact"> | string | null
    address?: StringNullableWithAggregatesFilter<"EmergencyContact"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"EmergencyContact"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmergencyContact"> | Date | string
  }

  export type ConsentWhereInput = {
    AND?: ConsentWhereInput | ConsentWhereInput[]
    OR?: ConsentWhereInput[]
    NOT?: ConsentWhereInput | ConsentWhereInput[]
    id?: UuidFilter<"Consent"> | string
    patientProfileId?: UuidFilter<"Consent"> | string
    documentUrl?: StringFilter<"Consent"> | string
    signature?: StringFilter<"Consent"> | string
    createdAt?: DateTimeFilter<"Consent"> | Date | string
    updatedAt?: DateTimeFilter<"Consent"> | Date | string
    patientProfile?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
  }

  export type ConsentOrderByWithRelationInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    documentUrl?: SortOrder
    signature?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientProfile?: PatientProfileOrderByWithRelationInput
  }

  export type ConsentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    patientProfileId?: string
    AND?: ConsentWhereInput | ConsentWhereInput[]
    OR?: ConsentWhereInput[]
    NOT?: ConsentWhereInput | ConsentWhereInput[]
    documentUrl?: StringFilter<"Consent"> | string
    signature?: StringFilter<"Consent"> | string
    createdAt?: DateTimeFilter<"Consent"> | Date | string
    updatedAt?: DateTimeFilter<"Consent"> | Date | string
    patientProfile?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
  }, "id" | "patientProfileId">

  export type ConsentOrderByWithAggregationInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    documentUrl?: SortOrder
    signature?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ConsentCountOrderByAggregateInput
    _max?: ConsentMaxOrderByAggregateInput
    _min?: ConsentMinOrderByAggregateInput
  }

  export type ConsentScalarWhereWithAggregatesInput = {
    AND?: ConsentScalarWhereWithAggregatesInput | ConsentScalarWhereWithAggregatesInput[]
    OR?: ConsentScalarWhereWithAggregatesInput[]
    NOT?: ConsentScalarWhereWithAggregatesInput | ConsentScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Consent"> | string
    patientProfileId?: UuidWithAggregatesFilter<"Consent"> | string
    documentUrl?: StringWithAggregatesFilter<"Consent"> | string
    signature?: StringWithAggregatesFilter<"Consent"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Consent"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Consent"> | Date | string
  }

  export type MedicalRecordRequestWhereInput = {
    AND?: MedicalRecordRequestWhereInput | MedicalRecordRequestWhereInput[]
    OR?: MedicalRecordRequestWhereInput[]
    NOT?: MedicalRecordRequestWhereInput | MedicalRecordRequestWhereInput[]
    id?: UuidFilter<"MedicalRecordRequest"> | string
    patientProfileId?: UuidFilter<"MedicalRecordRequest"> | string
    inpatientEncounterId?: UuidFilter<"MedicalRecordRequest"> | string
    type?: StringFilter<"MedicalRecordRequest"> | string
    status?: StringFilter<"MedicalRecordRequest"> | string
    fileUrl?: StringFilter<"MedicalRecordRequest"> | string
    createdAt?: DateTimeFilter<"MedicalRecordRequest"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalRecordRequest"> | Date | string
    patientProfile?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
    inpatientEncounter?: XOR<InpatientEncounterScalarRelationFilter, InpatientEncounterWhereInput>
  }

  export type MedicalRecordRequestOrderByWithRelationInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    inpatientEncounterId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientProfile?: PatientProfileOrderByWithRelationInput
    inpatientEncounter?: InpatientEncounterOrderByWithRelationInput
  }

  export type MedicalRecordRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MedicalRecordRequestWhereInput | MedicalRecordRequestWhereInput[]
    OR?: MedicalRecordRequestWhereInput[]
    NOT?: MedicalRecordRequestWhereInput | MedicalRecordRequestWhereInput[]
    patientProfileId?: UuidFilter<"MedicalRecordRequest"> | string
    inpatientEncounterId?: UuidFilter<"MedicalRecordRequest"> | string
    type?: StringFilter<"MedicalRecordRequest"> | string
    status?: StringFilter<"MedicalRecordRequest"> | string
    fileUrl?: StringFilter<"MedicalRecordRequest"> | string
    createdAt?: DateTimeFilter<"MedicalRecordRequest"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalRecordRequest"> | Date | string
    patientProfile?: XOR<PatientProfileScalarRelationFilter, PatientProfileWhereInput>
    inpatientEncounter?: XOR<InpatientEncounterScalarRelationFilter, InpatientEncounterWhereInput>
  }, "id">

  export type MedicalRecordRequestOrderByWithAggregationInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    inpatientEncounterId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MedicalRecordRequestCountOrderByAggregateInput
    _max?: MedicalRecordRequestMaxOrderByAggregateInput
    _min?: MedicalRecordRequestMinOrderByAggregateInput
  }

  export type MedicalRecordRequestScalarWhereWithAggregatesInput = {
    AND?: MedicalRecordRequestScalarWhereWithAggregatesInput | MedicalRecordRequestScalarWhereWithAggregatesInput[]
    OR?: MedicalRecordRequestScalarWhereWithAggregatesInput[]
    NOT?: MedicalRecordRequestScalarWhereWithAggregatesInput | MedicalRecordRequestScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"MedicalRecordRequest"> | string
    patientProfileId?: UuidWithAggregatesFilter<"MedicalRecordRequest"> | string
    inpatientEncounterId?: UuidWithAggregatesFilter<"MedicalRecordRequest"> | string
    type?: StringWithAggregatesFilter<"MedicalRecordRequest"> | string
    status?: StringWithAggregatesFilter<"MedicalRecordRequest"> | string
    fileUrl?: StringWithAggregatesFilter<"MedicalRecordRequest"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MedicalRecordRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MedicalRecordRequest"> | Date | string
  }

  export type PharmacySupplierWhereInput = {
    AND?: PharmacySupplierWhereInput | PharmacySupplierWhereInput[]
    OR?: PharmacySupplierWhereInput[]
    NOT?: PharmacySupplierWhereInput | PharmacySupplierWhereInput[]
    id?: UuidFilter<"PharmacySupplier"> | string
    name?: StringFilter<"PharmacySupplier"> | string
    email?: StringNullableFilter<"PharmacySupplier"> | string | null
    contact?: StringNullableFilter<"PharmacySupplier"> | string | null
    address?: StringNullableFilter<"PharmacySupplier"> | string | null
    notes?: StringNullableFilter<"PharmacySupplier"> | string | null
    createdAt?: DateTimeFilter<"PharmacySupplier"> | Date | string
    updatedAt?: DateTimeFilter<"PharmacySupplier"> | Date | string
  }

  export type PharmacySupplierOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    contact?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PharmacySupplierWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PharmacySupplierWhereInput | PharmacySupplierWhereInput[]
    OR?: PharmacySupplierWhereInput[]
    NOT?: PharmacySupplierWhereInput | PharmacySupplierWhereInput[]
    name?: StringFilter<"PharmacySupplier"> | string
    email?: StringNullableFilter<"PharmacySupplier"> | string | null
    contact?: StringNullableFilter<"PharmacySupplier"> | string | null
    address?: StringNullableFilter<"PharmacySupplier"> | string | null
    notes?: StringNullableFilter<"PharmacySupplier"> | string | null
    createdAt?: DateTimeFilter<"PharmacySupplier"> | Date | string
    updatedAt?: DateTimeFilter<"PharmacySupplier"> | Date | string
  }, "id">

  export type PharmacySupplierOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    contact?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PharmacySupplierCountOrderByAggregateInput
    _max?: PharmacySupplierMaxOrderByAggregateInput
    _min?: PharmacySupplierMinOrderByAggregateInput
  }

  export type PharmacySupplierScalarWhereWithAggregatesInput = {
    AND?: PharmacySupplierScalarWhereWithAggregatesInput | PharmacySupplierScalarWhereWithAggregatesInput[]
    OR?: PharmacySupplierScalarWhereWithAggregatesInput[]
    NOT?: PharmacySupplierScalarWhereWithAggregatesInput | PharmacySupplierScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"PharmacySupplier"> | string
    name?: StringWithAggregatesFilter<"PharmacySupplier"> | string
    email?: StringNullableWithAggregatesFilter<"PharmacySupplier"> | string | null
    contact?: StringNullableWithAggregatesFilter<"PharmacySupplier"> | string | null
    address?: StringNullableWithAggregatesFilter<"PharmacySupplier"> | string | null
    notes?: StringNullableWithAggregatesFilter<"PharmacySupplier"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PharmacySupplier"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PharmacySupplier"> | Date | string
  }

  export type PharmacyBrandWhereInput = {
    AND?: PharmacyBrandWhereInput | PharmacyBrandWhereInput[]
    OR?: PharmacyBrandWhereInput[]
    NOT?: PharmacyBrandWhereInput | PharmacyBrandWhereInput[]
    id?: UuidFilter<"PharmacyBrand"> | string
    name?: StringFilter<"PharmacyBrand"> | string
    createdAt?: DateTimeFilter<"PharmacyBrand"> | Date | string
    updatedAt?: DateTimeFilter<"PharmacyBrand"> | Date | string
    items?: PharmacyItemListRelationFilter
  }

  export type PharmacyBrandOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    items?: PharmacyItemOrderByRelationAggregateInput
  }

  export type PharmacyBrandWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PharmacyBrandWhereInput | PharmacyBrandWhereInput[]
    OR?: PharmacyBrandWhereInput[]
    NOT?: PharmacyBrandWhereInput | PharmacyBrandWhereInput[]
    name?: StringFilter<"PharmacyBrand"> | string
    createdAt?: DateTimeFilter<"PharmacyBrand"> | Date | string
    updatedAt?: DateTimeFilter<"PharmacyBrand"> | Date | string
    items?: PharmacyItemListRelationFilter
  }, "id">

  export type PharmacyBrandOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PharmacyBrandCountOrderByAggregateInput
    _max?: PharmacyBrandMaxOrderByAggregateInput
    _min?: PharmacyBrandMinOrderByAggregateInput
  }

  export type PharmacyBrandScalarWhereWithAggregatesInput = {
    AND?: PharmacyBrandScalarWhereWithAggregatesInput | PharmacyBrandScalarWhereWithAggregatesInput[]
    OR?: PharmacyBrandScalarWhereWithAggregatesInput[]
    NOT?: PharmacyBrandScalarWhereWithAggregatesInput | PharmacyBrandScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"PharmacyBrand"> | string
    name?: StringWithAggregatesFilter<"PharmacyBrand"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PharmacyBrand"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PharmacyBrand"> | Date | string
  }

  export type PharmacyItemCategoryWhereInput = {
    AND?: PharmacyItemCategoryWhereInput | PharmacyItemCategoryWhereInput[]
    OR?: PharmacyItemCategoryWhereInput[]
    NOT?: PharmacyItemCategoryWhereInput | PharmacyItemCategoryWhereInput[]
    id?: UuidFilter<"PharmacyItemCategory"> | string
    name?: StringFilter<"PharmacyItemCategory"> | string
    createdAt?: DateTimeFilter<"PharmacyItemCategory"> | Date | string
    updatedAt?: DateTimeFilter<"PharmacyItemCategory"> | Date | string
    items?: PharmacyItemListRelationFilter
  }

  export type PharmacyItemCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    items?: PharmacyItemOrderByRelationAggregateInput
  }

  export type PharmacyItemCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PharmacyItemCategoryWhereInput | PharmacyItemCategoryWhereInput[]
    OR?: PharmacyItemCategoryWhereInput[]
    NOT?: PharmacyItemCategoryWhereInput | PharmacyItemCategoryWhereInput[]
    name?: StringFilter<"PharmacyItemCategory"> | string
    createdAt?: DateTimeFilter<"PharmacyItemCategory"> | Date | string
    updatedAt?: DateTimeFilter<"PharmacyItemCategory"> | Date | string
    items?: PharmacyItemListRelationFilter
  }, "id">

  export type PharmacyItemCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PharmacyItemCategoryCountOrderByAggregateInput
    _max?: PharmacyItemCategoryMaxOrderByAggregateInput
    _min?: PharmacyItemCategoryMinOrderByAggregateInput
  }

  export type PharmacyItemCategoryScalarWhereWithAggregatesInput = {
    AND?: PharmacyItemCategoryScalarWhereWithAggregatesInput | PharmacyItemCategoryScalarWhereWithAggregatesInput[]
    OR?: PharmacyItemCategoryScalarWhereWithAggregatesInput[]
    NOT?: PharmacyItemCategoryScalarWhereWithAggregatesInput | PharmacyItemCategoryScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"PharmacyItemCategory"> | string
    name?: StringWithAggregatesFilter<"PharmacyItemCategory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PharmacyItemCategory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PharmacyItemCategory"> | Date | string
  }

  export type PharmacyItemWhereInput = {
    AND?: PharmacyItemWhereInput | PharmacyItemWhereInput[]
    OR?: PharmacyItemWhereInput[]
    NOT?: PharmacyItemWhereInput | PharmacyItemWhereInput[]
    id?: UuidFilter<"PharmacyItem"> | string
    brandId?: UuidFilter<"PharmacyItem"> | string
    categoryId?: UuidFilter<"PharmacyItem"> | string
    name?: StringFilter<"PharmacyItem"> | string
    form?: EnumPharmacyItemFormFilter<"PharmacyItem"> | $Enums.PharmacyItemForm
    route?: EnumPharmacyItemRouteFilter<"PharmacyItem"> | $Enums.PharmacyItemRoute
    strength?: StringFilter<"PharmacyItem"> | string
    stock?: IntFilter<"PharmacyItem"> | number
    unit?: StringFilter<"PharmacyItem"> | string
    sku?: StringNullableFilter<"PharmacyItem"> | string | null
    createdAt?: DateTimeFilter<"PharmacyItem"> | Date | string
    updatedAt?: DateTimeFilter<"PharmacyItem"> | Date | string
    brand?: XOR<PharmacyBrandScalarRelationFilter, PharmacyBrandWhereInput>
    category?: XOR<PharmacyItemCategoryScalarRelationFilter, PharmacyItemCategoryWhereInput>
  }

  export type PharmacyItemOrderByWithRelationInput = {
    id?: SortOrder
    brandId?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    form?: SortOrder
    route?: SortOrder
    strength?: SortOrder
    stock?: SortOrder
    unit?: SortOrder
    sku?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    brand?: PharmacyBrandOrderByWithRelationInput
    category?: PharmacyItemCategoryOrderByWithRelationInput
  }

  export type PharmacyItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PharmacyItemWhereInput | PharmacyItemWhereInput[]
    OR?: PharmacyItemWhereInput[]
    NOT?: PharmacyItemWhereInput | PharmacyItemWhereInput[]
    brandId?: UuidFilter<"PharmacyItem"> | string
    categoryId?: UuidFilter<"PharmacyItem"> | string
    name?: StringFilter<"PharmacyItem"> | string
    form?: EnumPharmacyItemFormFilter<"PharmacyItem"> | $Enums.PharmacyItemForm
    route?: EnumPharmacyItemRouteFilter<"PharmacyItem"> | $Enums.PharmacyItemRoute
    strength?: StringFilter<"PharmacyItem"> | string
    stock?: IntFilter<"PharmacyItem"> | number
    unit?: StringFilter<"PharmacyItem"> | string
    sku?: StringNullableFilter<"PharmacyItem"> | string | null
    createdAt?: DateTimeFilter<"PharmacyItem"> | Date | string
    updatedAt?: DateTimeFilter<"PharmacyItem"> | Date | string
    brand?: XOR<PharmacyBrandScalarRelationFilter, PharmacyBrandWhereInput>
    category?: XOR<PharmacyItemCategoryScalarRelationFilter, PharmacyItemCategoryWhereInput>
  }, "id">

  export type PharmacyItemOrderByWithAggregationInput = {
    id?: SortOrder
    brandId?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    form?: SortOrder
    route?: SortOrder
    strength?: SortOrder
    stock?: SortOrder
    unit?: SortOrder
    sku?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PharmacyItemCountOrderByAggregateInput
    _avg?: PharmacyItemAvgOrderByAggregateInput
    _max?: PharmacyItemMaxOrderByAggregateInput
    _min?: PharmacyItemMinOrderByAggregateInput
    _sum?: PharmacyItemSumOrderByAggregateInput
  }

  export type PharmacyItemScalarWhereWithAggregatesInput = {
    AND?: PharmacyItemScalarWhereWithAggregatesInput | PharmacyItemScalarWhereWithAggregatesInput[]
    OR?: PharmacyItemScalarWhereWithAggregatesInput[]
    NOT?: PharmacyItemScalarWhereWithAggregatesInput | PharmacyItemScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"PharmacyItem"> | string
    brandId?: UuidWithAggregatesFilter<"PharmacyItem"> | string
    categoryId?: UuidWithAggregatesFilter<"PharmacyItem"> | string
    name?: StringWithAggregatesFilter<"PharmacyItem"> | string
    form?: EnumPharmacyItemFormWithAggregatesFilter<"PharmacyItem"> | $Enums.PharmacyItemForm
    route?: EnumPharmacyItemRouteWithAggregatesFilter<"PharmacyItem"> | $Enums.PharmacyItemRoute
    strength?: StringWithAggregatesFilter<"PharmacyItem"> | string
    stock?: IntWithAggregatesFilter<"PharmacyItem"> | number
    unit?: StringWithAggregatesFilter<"PharmacyItem"> | string
    sku?: StringNullableWithAggregatesFilter<"PharmacyItem"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PharmacyItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PharmacyItem"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    isEmailVerified?: BoolFilter<"User"> | boolean
    emailVerifiedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    gender?: EnumGenderNullableFilter<"User"> | $Enums.Gender | null
    address?: StringNullableFilter<"User"> | string | null
    city?: StringNullableFilter<"User"> | string | null
    province?: StringNullableFilter<"User"> | string | null
    zipCode?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdBy?: StringNullableFilter<"User"> | string | null
    updatedBy?: StringNullableFilter<"User"> | string | null
    refreshTokens?: RefreshTokenListRelationFilter
    patientProfile?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
    staffProfile?: XOR<StaffNullableScalarRelationFilter, StaffWhereInput> | null
    partnerProfile?: XOR<PartnerNullableScalarRelationFilter, PartnerWhereInput> | null
    doctorProfile?: XOR<DoctorNullableScalarRelationFilter, DoctorWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrderInput | SortOrder
    role?: SortOrder
    status?: SortOrder
    isEmailVerified?: SortOrder
    emailVerifiedAt?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    province?: SortOrderInput | SortOrder
    zipCode?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    refreshTokens?: RefreshTokenOrderByRelationAggregateInput
    patientProfile?: PatientOrderByWithRelationInput
    staffProfile?: StaffOrderByWithRelationInput
    partnerProfile?: PartnerOrderByWithRelationInput
    doctorProfile?: DoctorOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    isEmailVerified?: BoolFilter<"User"> | boolean
    emailVerifiedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    gender?: EnumGenderNullableFilter<"User"> | $Enums.Gender | null
    address?: StringNullableFilter<"User"> | string | null
    city?: StringNullableFilter<"User"> | string | null
    province?: StringNullableFilter<"User"> | string | null
    zipCode?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdBy?: StringNullableFilter<"User"> | string | null
    updatedBy?: StringNullableFilter<"User"> | string | null
    refreshTokens?: RefreshTokenListRelationFilter
    patientProfile?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
    staffProfile?: XOR<StaffNullableScalarRelationFilter, StaffWhereInput> | null
    partnerProfile?: XOR<PartnerNullableScalarRelationFilter, PartnerWhereInput> | null
    doctorProfile?: XOR<DoctorNullableScalarRelationFilter, DoctorWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrderInput | SortOrder
    role?: SortOrder
    status?: SortOrder
    isEmailVerified?: SortOrder
    emailVerifiedAt?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    province?: SortOrderInput | SortOrder
    zipCode?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    status?: EnumUserStatusWithAggregatesFilter<"User"> | $Enums.UserStatus
    isEmailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    emailVerifiedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    gender?: EnumGenderNullableWithAggregatesFilter<"User"> | $Enums.Gender | null
    address?: StringNullableWithAggregatesFilter<"User"> | string | null
    city?: StringNullableWithAggregatesFilter<"User"> | string | null
    province?: StringNullableWithAggregatesFilter<"User"> | string | null
    zipCode?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdBy?: StringNullableWithAggregatesFilter<"User"> | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type RefreshTokenWhereInput = {
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    id?: StringFilter<"RefreshToken"> | string
    token?: StringFilter<"RefreshToken"> | string
    userId?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    isRevoked?: BoolFilter<"RefreshToken"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type RefreshTokenOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    isRevoked?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type RefreshTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    userId?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    isRevoked?: BoolFilter<"RefreshToken"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type RefreshTokenOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    isRevoked?: SortOrder
    _count?: RefreshTokenCountOrderByAggregateInput
    _max?: RefreshTokenMaxOrderByAggregateInput
    _min?: RefreshTokenMinOrderByAggregateInput
  }

  export type RefreshTokenScalarWhereWithAggregatesInput = {
    AND?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    OR?: RefreshTokenScalarWhereWithAggregatesInput[]
    NOT?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RefreshToken"> | string
    token?: StringWithAggregatesFilter<"RefreshToken"> | string
    userId?: StringWithAggregatesFilter<"RefreshToken"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
    isRevoked?: BoolWithAggregatesFilter<"RefreshToken"> | boolean
  }

  export type PatientWhereInput = {
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    id?: StringFilter<"Patient"> | string
    userId?: StringFilter<"Patient"> | string
    patientNumber?: StringFilter<"Patient"> | string
    bloodType?: EnumBloodTypeNullableFilter<"Patient"> | $Enums.BloodType | null
    allergies?: StringNullableFilter<"Patient"> | string | null
    medicalHistory?: StringNullableFilter<"Patient"> | string | null
    emergencyContact?: StringNullableFilter<"Patient"> | string | null
    emergencyPhone?: StringNullableFilter<"Patient"> | string | null
    insuranceProvider?: StringNullableFilter<"Patient"> | string | null
    insuranceNumber?: StringNullableFilter<"Patient"> | string | null
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PatientOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    patientNumber?: SortOrder
    bloodType?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    medicalHistory?: SortOrderInput | SortOrder
    emergencyContact?: SortOrderInput | SortOrder
    emergencyPhone?: SortOrderInput | SortOrder
    insuranceProvider?: SortOrderInput | SortOrder
    insuranceNumber?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PatientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    patientNumber?: string
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    bloodType?: EnumBloodTypeNullableFilter<"Patient"> | $Enums.BloodType | null
    allergies?: StringNullableFilter<"Patient"> | string | null
    medicalHistory?: StringNullableFilter<"Patient"> | string | null
    emergencyContact?: StringNullableFilter<"Patient"> | string | null
    emergencyPhone?: StringNullableFilter<"Patient"> | string | null
    insuranceProvider?: StringNullableFilter<"Patient"> | string | null
    insuranceNumber?: StringNullableFilter<"Patient"> | string | null
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId" | "patientNumber">

  export type PatientOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    patientNumber?: SortOrder
    bloodType?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    medicalHistory?: SortOrderInput | SortOrder
    emergencyContact?: SortOrderInput | SortOrder
    emergencyPhone?: SortOrderInput | SortOrder
    insuranceProvider?: SortOrderInput | SortOrder
    insuranceNumber?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PatientCountOrderByAggregateInput
    _max?: PatientMaxOrderByAggregateInput
    _min?: PatientMinOrderByAggregateInput
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    OR?: PatientScalarWhereWithAggregatesInput[]
    NOT?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Patient"> | string
    userId?: StringWithAggregatesFilter<"Patient"> | string
    patientNumber?: StringWithAggregatesFilter<"Patient"> | string
    bloodType?: EnumBloodTypeNullableWithAggregatesFilter<"Patient"> | $Enums.BloodType | null
    allergies?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    medicalHistory?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    emergencyContact?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    emergencyPhone?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    insuranceProvider?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    insuranceNumber?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
  }

  export type StaffWhereInput = {
    AND?: StaffWhereInput | StaffWhereInput[]
    OR?: StaffWhereInput[]
    NOT?: StaffWhereInput | StaffWhereInput[]
    id?: StringFilter<"Staff"> | string
    userId?: StringFilter<"Staff"> | string
    staffNumber?: StringFilter<"Staff"> | string
    department?: StringNullableFilter<"Staff"> | string | null
    position?: StringNullableFilter<"Staff"> | string | null
    specialization?: StringNullableFilter<"Staff"> | string | null
    licenseNumber?: StringNullableFilter<"Staff"> | string | null
    hiredDate?: DateTimeNullableFilter<"Staff"> | Date | string | null
    salary?: DecimalNullableFilter<"Staff"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"Staff"> | Date | string
    updatedAt?: DateTimeFilter<"Staff"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    doctorProfile?: XOR<DoctorNullableScalarRelationFilter, DoctorWhereInput> | null
  }

  export type StaffOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    staffNumber?: SortOrder
    department?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    specialization?: SortOrderInput | SortOrder
    licenseNumber?: SortOrderInput | SortOrder
    hiredDate?: SortOrderInput | SortOrder
    salary?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    doctorProfile?: DoctorOrderByWithRelationInput
  }

  export type StaffWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    staffNumber?: string
    AND?: StaffWhereInput | StaffWhereInput[]
    OR?: StaffWhereInput[]
    NOT?: StaffWhereInput | StaffWhereInput[]
    department?: StringNullableFilter<"Staff"> | string | null
    position?: StringNullableFilter<"Staff"> | string | null
    specialization?: StringNullableFilter<"Staff"> | string | null
    licenseNumber?: StringNullableFilter<"Staff"> | string | null
    hiredDate?: DateTimeNullableFilter<"Staff"> | Date | string | null
    salary?: DecimalNullableFilter<"Staff"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"Staff"> | Date | string
    updatedAt?: DateTimeFilter<"Staff"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    doctorProfile?: XOR<DoctorNullableScalarRelationFilter, DoctorWhereInput> | null
  }, "id" | "userId" | "staffNumber">

  export type StaffOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    staffNumber?: SortOrder
    department?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    specialization?: SortOrderInput | SortOrder
    licenseNumber?: SortOrderInput | SortOrder
    hiredDate?: SortOrderInput | SortOrder
    salary?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StaffCountOrderByAggregateInput
    _avg?: StaffAvgOrderByAggregateInput
    _max?: StaffMaxOrderByAggregateInput
    _min?: StaffMinOrderByAggregateInput
    _sum?: StaffSumOrderByAggregateInput
  }

  export type StaffScalarWhereWithAggregatesInput = {
    AND?: StaffScalarWhereWithAggregatesInput | StaffScalarWhereWithAggregatesInput[]
    OR?: StaffScalarWhereWithAggregatesInput[]
    NOT?: StaffScalarWhereWithAggregatesInput | StaffScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Staff"> | string
    userId?: StringWithAggregatesFilter<"Staff"> | string
    staffNumber?: StringWithAggregatesFilter<"Staff"> | string
    department?: StringNullableWithAggregatesFilter<"Staff"> | string | null
    position?: StringNullableWithAggregatesFilter<"Staff"> | string | null
    specialization?: StringNullableWithAggregatesFilter<"Staff"> | string | null
    licenseNumber?: StringNullableWithAggregatesFilter<"Staff"> | string | null
    hiredDate?: DateTimeNullableWithAggregatesFilter<"Staff"> | Date | string | null
    salary?: DecimalNullableWithAggregatesFilter<"Staff"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Staff"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Staff"> | Date | string
  }

  export type DoctorWhereInput = {
    AND?: DoctorWhereInput | DoctorWhereInput[]
    OR?: DoctorWhereInput[]
    NOT?: DoctorWhereInput | DoctorWhereInput[]
    id?: StringFilter<"Doctor"> | string
    userId?: StringFilter<"Doctor"> | string
    staffId?: StringFilter<"Doctor"> | string
    doctorNumber?: StringFilter<"Doctor"> | string
    medicalLicense?: StringFilter<"Doctor"> | string
    specialization?: StringFilter<"Doctor"> | string
    subSpecialization?: StringNullableFilter<"Doctor"> | string | null
    boardCertification?: StringNullableFilter<"Doctor"> | string | null
    yearsOfExperience?: IntNullableFilter<"Doctor"> | number | null
    education?: StringNullableFilter<"Doctor"> | string | null
    hospitalAffiliation?: StringNullableFilter<"Doctor"> | string | null
    consultationFee?: DecimalNullableFilter<"Doctor"> | Decimal | DecimalJsLike | number | string | null
    isAvailable?: BoolFilter<"Doctor"> | boolean
    workingHours?: StringNullableFilter<"Doctor"> | string | null
    createdAt?: DateTimeFilter<"Doctor"> | Date | string
    updatedAt?: DateTimeFilter<"Doctor"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    staff?: XOR<StaffScalarRelationFilter, StaffWhereInput>
  }

  export type DoctorOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    staffId?: SortOrder
    doctorNumber?: SortOrder
    medicalLicense?: SortOrder
    specialization?: SortOrder
    subSpecialization?: SortOrderInput | SortOrder
    boardCertification?: SortOrderInput | SortOrder
    yearsOfExperience?: SortOrderInput | SortOrder
    education?: SortOrderInput | SortOrder
    hospitalAffiliation?: SortOrderInput | SortOrder
    consultationFee?: SortOrderInput | SortOrder
    isAvailable?: SortOrder
    workingHours?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    staff?: StaffOrderByWithRelationInput
  }

  export type DoctorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    staffId?: string
    doctorNumber?: string
    AND?: DoctorWhereInput | DoctorWhereInput[]
    OR?: DoctorWhereInput[]
    NOT?: DoctorWhereInput | DoctorWhereInput[]
    medicalLicense?: StringFilter<"Doctor"> | string
    specialization?: StringFilter<"Doctor"> | string
    subSpecialization?: StringNullableFilter<"Doctor"> | string | null
    boardCertification?: StringNullableFilter<"Doctor"> | string | null
    yearsOfExperience?: IntNullableFilter<"Doctor"> | number | null
    education?: StringNullableFilter<"Doctor"> | string | null
    hospitalAffiliation?: StringNullableFilter<"Doctor"> | string | null
    consultationFee?: DecimalNullableFilter<"Doctor"> | Decimal | DecimalJsLike | number | string | null
    isAvailable?: BoolFilter<"Doctor"> | boolean
    workingHours?: StringNullableFilter<"Doctor"> | string | null
    createdAt?: DateTimeFilter<"Doctor"> | Date | string
    updatedAt?: DateTimeFilter<"Doctor"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    staff?: XOR<StaffScalarRelationFilter, StaffWhereInput>
  }, "id" | "userId" | "staffId" | "doctorNumber">

  export type DoctorOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    staffId?: SortOrder
    doctorNumber?: SortOrder
    medicalLicense?: SortOrder
    specialization?: SortOrder
    subSpecialization?: SortOrderInput | SortOrder
    boardCertification?: SortOrderInput | SortOrder
    yearsOfExperience?: SortOrderInput | SortOrder
    education?: SortOrderInput | SortOrder
    hospitalAffiliation?: SortOrderInput | SortOrder
    consultationFee?: SortOrderInput | SortOrder
    isAvailable?: SortOrder
    workingHours?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DoctorCountOrderByAggregateInput
    _avg?: DoctorAvgOrderByAggregateInput
    _max?: DoctorMaxOrderByAggregateInput
    _min?: DoctorMinOrderByAggregateInput
    _sum?: DoctorSumOrderByAggregateInput
  }

  export type DoctorScalarWhereWithAggregatesInput = {
    AND?: DoctorScalarWhereWithAggregatesInput | DoctorScalarWhereWithAggregatesInput[]
    OR?: DoctorScalarWhereWithAggregatesInput[]
    NOT?: DoctorScalarWhereWithAggregatesInput | DoctorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Doctor"> | string
    userId?: StringWithAggregatesFilter<"Doctor"> | string
    staffId?: StringWithAggregatesFilter<"Doctor"> | string
    doctorNumber?: StringWithAggregatesFilter<"Doctor"> | string
    medicalLicense?: StringWithAggregatesFilter<"Doctor"> | string
    specialization?: StringWithAggregatesFilter<"Doctor"> | string
    subSpecialization?: StringNullableWithAggregatesFilter<"Doctor"> | string | null
    boardCertification?: StringNullableWithAggregatesFilter<"Doctor"> | string | null
    yearsOfExperience?: IntNullableWithAggregatesFilter<"Doctor"> | number | null
    education?: StringNullableWithAggregatesFilter<"Doctor"> | string | null
    hospitalAffiliation?: StringNullableWithAggregatesFilter<"Doctor"> | string | null
    consultationFee?: DecimalNullableWithAggregatesFilter<"Doctor"> | Decimal | DecimalJsLike | number | string | null
    isAvailable?: BoolWithAggregatesFilter<"Doctor"> | boolean
    workingHours?: StringNullableWithAggregatesFilter<"Doctor"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Doctor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Doctor"> | Date | string
  }

  export type PartnerWhereInput = {
    AND?: PartnerWhereInput | PartnerWhereInput[]
    OR?: PartnerWhereInput[]
    NOT?: PartnerWhereInput | PartnerWhereInput[]
    id?: StringFilter<"Partner"> | string
    userId?: StringFilter<"Partner"> | string
    institutionName?: StringFilter<"Partner"> | string
    institutionType?: EnumPartnerTypeFilter<"Partner"> | $Enums.PartnerType
    licenseNumber?: StringNullableFilter<"Partner"> | string | null
    website?: StringNullableFilter<"Partner"> | string | null
    contactPerson?: StringNullableFilter<"Partner"> | string | null
    createdAt?: DateTimeFilter<"Partner"> | Date | string
    updatedAt?: DateTimeFilter<"Partner"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PartnerOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    institutionName?: SortOrder
    institutionType?: SortOrder
    licenseNumber?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    contactPerson?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PartnerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: PartnerWhereInput | PartnerWhereInput[]
    OR?: PartnerWhereInput[]
    NOT?: PartnerWhereInput | PartnerWhereInput[]
    institutionName?: StringFilter<"Partner"> | string
    institutionType?: EnumPartnerTypeFilter<"Partner"> | $Enums.PartnerType
    licenseNumber?: StringNullableFilter<"Partner"> | string | null
    website?: StringNullableFilter<"Partner"> | string | null
    contactPerson?: StringNullableFilter<"Partner"> | string | null
    createdAt?: DateTimeFilter<"Partner"> | Date | string
    updatedAt?: DateTimeFilter<"Partner"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type PartnerOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    institutionName?: SortOrder
    institutionType?: SortOrder
    licenseNumber?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    contactPerson?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PartnerCountOrderByAggregateInput
    _max?: PartnerMaxOrderByAggregateInput
    _min?: PartnerMinOrderByAggregateInput
  }

  export type PartnerScalarWhereWithAggregatesInput = {
    AND?: PartnerScalarWhereWithAggregatesInput | PartnerScalarWhereWithAggregatesInput[]
    OR?: PartnerScalarWhereWithAggregatesInput[]
    NOT?: PartnerScalarWhereWithAggregatesInput | PartnerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Partner"> | string
    userId?: StringWithAggregatesFilter<"Partner"> | string
    institutionName?: StringWithAggregatesFilter<"Partner"> | string
    institutionType?: EnumPartnerTypeWithAggregatesFilter<"Partner"> | $Enums.PartnerType
    licenseNumber?: StringNullableWithAggregatesFilter<"Partner"> | string | null
    website?: StringNullableWithAggregatesFilter<"Partner"> | string | null
    contactPerson?: StringNullableWithAggregatesFilter<"Partner"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Partner"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Partner"> | Date | string
  }

  export type AppointmentCreateInput = {
    id?: string
    doctorId: string
    date: string
    time: string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientProfileCreateNestedOneWithoutAppointmentsInput
    facility?: RoomCreateNestedOneWithoutAppointmentsInput
    patientAppointment?: PatientAppointmentCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateInput = {
    id?: string
    patientId: string
    doctorId: string
    facilityId?: string | null
    date: string
    time: string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    patientAppointment?: PatientAppointmentUncheckedCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientProfileUpdateOneRequiredWithoutAppointmentsNestedInput
    facility?: RoomUpdateOneWithoutAppointmentsNestedInput
    patientAppointment?: PatientAppointmentUpdateOneWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    facilityId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientAppointment?: PatientAppointmentUncheckedUpdateOneWithoutAppointmentNestedInput
  }

  export type AppointmentCreateManyInput = {
    id?: string
    patientId: string
    doctorId: string
    facilityId?: string | null
    date: string
    time: string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    facilityId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientAppointmentCreateInput = {
    id?: string
    doctorId: string
    date: string
    time: string
    status?: $Enums.AppointmentStatus
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientProfileCreateNestedOneWithoutPatientAppointmentsInput
    appointment?: AppointmentCreateNestedOneWithoutPatientAppointmentInput
  }

  export type PatientAppointmentUncheckedCreateInput = {
    id?: string
    patientId: string
    doctorId: string
    date: string
    time: string
    status?: $Enums.AppointmentStatus
    name?: string | null
    appointmentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientAppointmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientProfileUpdateOneRequiredWithoutPatientAppointmentsNestedInput
    appointment?: AppointmentUpdateOneWithoutPatientAppointmentNestedInput
  }

  export type PatientAppointmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    name?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientAppointmentCreateManyInput = {
    id?: string
    patientId: string
    doctorId: string
    date: string
    time: string
    status?: $Enums.AppointmentStatus
    name?: string | null
    appointmentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientAppointmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientAppointmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    name?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    encounter: PatientEncounterCreateNestedOneWithoutTransactionInput
    items?: TransactionItemCreateNestedManyWithoutTransactionInput
    payments?: PaymentCreateNestedManyWithoutTransactionInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: string
    encounterId: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: TransactionItemUncheckedCreateNestedManyWithoutTransactionInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTransactionInput
  }

  export type TransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    encounter?: PatientEncounterUpdateOneRequiredWithoutTransactionNestedInput
    items?: TransactionItemUpdateManyWithoutTransactionNestedInput
    payments?: PaymentUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    encounterId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: TransactionItemUncheckedUpdateManyWithoutTransactionNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionCreateManyInput = {
    id?: string
    encounterId: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    encounterId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionItemCreateInput = {
    id?: string
    name: string
    description?: string | null
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transaction: TransactionCreateNestedOneWithoutItemsInput
  }

  export type TransactionItemUncheckedCreateInput = {
    id?: string
    transactionId: string
    name: string
    description?: string | null
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transaction?: TransactionUpdateOneRequiredWithoutItemsNestedInput
  }

  export type TransactionItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    transactionId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionItemCreateManyInput = {
    id?: string
    transactionId: string
    name: string
    description?: string | null
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    transactionId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentPlanCreateInput = {
    id?: string
    name: string
    description?: string | null
    cycle: string
    numberOfPayments: number
    createdAt?: Date | string
    updatedAt?: Date | string
    instalments?: PaymentInstalmentCreateNestedManyWithoutPlanInput
  }

  export type PaymentPlanUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    cycle: string
    numberOfPayments: number
    createdAt?: Date | string
    updatedAt?: Date | string
    instalments?: PaymentInstalmentUncheckedCreateNestedManyWithoutPlanInput
  }

  export type PaymentPlanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cycle?: StringFieldUpdateOperationsInput | string
    numberOfPayments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instalments?: PaymentInstalmentUpdateManyWithoutPlanNestedInput
  }

  export type PaymentPlanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cycle?: StringFieldUpdateOperationsInput | string
    numberOfPayments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instalments?: PaymentInstalmentUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type PaymentPlanCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    cycle: string
    numberOfPayments: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentPlanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cycle?: StringFieldUpdateOperationsInput | string
    numberOfPayments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentPlanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cycle?: StringFieldUpdateOperationsInput | string
    numberOfPayments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateInput = {
    id?: string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transaction: TransactionCreateNestedOneWithoutPaymentsInput
    instalments?: PaymentInstalmentCreateNestedManyWithoutPaymentInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: string
    transactionId: string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    instalments?: PaymentInstalmentUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type PaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transaction?: TransactionUpdateOneRequiredWithoutPaymentsNestedInput
    instalments?: PaymentInstalmentUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    transactionId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instalments?: PaymentInstalmentUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentCreateManyInput = {
    id?: string
    transactionId: string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    transactionId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentInstalmentCreateInput = {
    id?: string
    instalmentNumber: number
    amountDue: number
    amountPaid: number
    createdAt?: Date | string
    updatedAt?: Date | string
    payment: PaymentCreateNestedOneWithoutInstalmentsInput
    plan: PaymentPlanCreateNestedOneWithoutInstalmentsInput
  }

  export type PaymentInstalmentUncheckedCreateInput = {
    id?: string
    paymentId: string
    planId: string
    instalmentNumber: number
    amountDue: number
    amountPaid: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentInstalmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    instalmentNumber?: IntFieldUpdateOperationsInput | number
    amountDue?: IntFieldUpdateOperationsInput | number
    amountPaid?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment?: PaymentUpdateOneRequiredWithoutInstalmentsNestedInput
    plan?: PaymentPlanUpdateOneRequiredWithoutInstalmentsNestedInput
  }

  export type PaymentInstalmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    instalmentNumber?: IntFieldUpdateOperationsInput | number
    amountDue?: IntFieldUpdateOperationsInput | number
    amountPaid?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentInstalmentCreateManyInput = {
    id?: string
    paymentId: string
    planId: string
    instalmentNumber: number
    amountDue: number
    amountPaid: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentInstalmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    instalmentNumber?: IntFieldUpdateOperationsInput | number
    amountDue?: IntFieldUpdateOperationsInput | number
    amountPaid?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentInstalmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    instalmentNumber?: IntFieldUpdateOperationsInput | number
    amountDue?: IntFieldUpdateOperationsInput | number
    amountPaid?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicCreateInput = {
    id?: string
    roomId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    schedules?: ClinicScheduleCreateNestedManyWithoutClinicInput
  }

  export type ClinicUncheckedCreateInput = {
    id?: string
    roomId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    schedules?: ClinicScheduleUncheckedCreateNestedManyWithoutClinicInput
  }

  export type ClinicUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedules?: ClinicScheduleUpdateManyWithoutClinicNestedInput
  }

  export type ClinicUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedules?: ClinicScheduleUncheckedUpdateManyWithoutClinicNestedInput
  }

  export type ClinicCreateManyInput = {
    id?: string
    roomId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClinicUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicScheduleCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic: ClinicCreateNestedOneWithoutSchedulesInput
  }

  export type ClinicScheduleUncheckedCreateInput = {
    id?: string
    clinicId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClinicScheduleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneRequiredWithoutSchedulesNestedInput
  }

  export type ClinicScheduleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicScheduleCreateManyInput = {
    id?: string
    clinicId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClinicScheduleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicScheduleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientEncounterCreateInput = {
    id?: string
    encounterId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patientProfile: PatientProfileCreateNestedOneWithoutPatientEncountersInput
    transaction?: TransactionCreateNestedOneWithoutEncounterInput
  }

  export type PatientEncounterUncheckedCreateInput = {
    id?: string
    encounterId: string
    patientProfileId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    transaction?: TransactionUncheckedCreateNestedOneWithoutEncounterInput
  }

  export type PatientEncounterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    encounterId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientProfile?: PatientProfileUpdateOneRequiredWithoutPatientEncountersNestedInput
    transaction?: TransactionUpdateOneWithoutEncounterNestedInput
  }

  export type PatientEncounterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    encounterId?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transaction?: TransactionUncheckedUpdateOneWithoutEncounterNestedInput
  }

  export type PatientEncounterCreateManyInput = {
    id?: string
    encounterId: string
    patientProfileId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientEncounterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    encounterId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientEncounterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    encounterId?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OutpatientEncounterCreateInput = {
    id?: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    type: $Enums.OutpatientEncounterType
    createdAt?: Date | string
    updatedAt?: Date | string
    patientProfile: PatientProfileCreateNestedOneWithoutOutpatientEncountersInput
  }

  export type OutpatientEncounterUncheckedCreateInput = {
    id?: string
    patientProfileId: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    type: $Enums.OutpatientEncounterType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OutpatientEncounterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: StringFieldUpdateOperationsInput | string
    doctorDiagnosis?: StringFieldUpdateOperationsInput | string
    type?: EnumOutpatientEncounterTypeFieldUpdateOperationsInput | $Enums.OutpatientEncounterType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientProfile?: PatientProfileUpdateOneRequiredWithoutOutpatientEncountersNestedInput
  }

  export type OutpatientEncounterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: StringFieldUpdateOperationsInput | string
    doctorDiagnosis?: StringFieldUpdateOperationsInput | string
    type?: EnumOutpatientEncounterTypeFieldUpdateOperationsInput | $Enums.OutpatientEncounterType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OutpatientEncounterCreateManyInput = {
    id?: string
    patientProfileId: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    type: $Enums.OutpatientEncounterType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OutpatientEncounterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: StringFieldUpdateOperationsInput | string
    doctorDiagnosis?: StringFieldUpdateOperationsInput | string
    type?: EnumOutpatientEncounterTypeFieldUpdateOperationsInput | $Enums.OutpatientEncounterType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OutpatientEncounterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: StringFieldUpdateOperationsInput | string
    doctorDiagnosis?: StringFieldUpdateOperationsInput | string
    type?: EnumOutpatientEncounterTypeFieldUpdateOperationsInput | $Enums.OutpatientEncounterType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InpatientEncounterCreateInput = {
    id?: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    triage: $Enums.InpatientTriage
    disposition?: $Enums.InpatientDisposition
    dispositionDate?: string | null
    dispositionTime?: string | null
    dispositionNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientProfile: PatientProfileCreateNestedOneWithoutInpatientEncountersInput
    charts?: InpatientEncounterChartCreateNestedManyWithoutEncounterInput
    orders?: InpatientEncounterOrderCreateNestedManyWithoutEncounterInput
    medicalRecordRequest?: MedicalRecordRequestCreateNestedManyWithoutInpatientEncounterInput
  }

  export type InpatientEncounterUncheckedCreateInput = {
    id?: string
    patientProfileId: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    triage: $Enums.InpatientTriage
    disposition?: $Enums.InpatientDisposition
    dispositionDate?: string | null
    dispositionTime?: string | null
    dispositionNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    charts?: InpatientEncounterChartUncheckedCreateNestedManyWithoutEncounterInput
    orders?: InpatientEncounterOrderUncheckedCreateNestedManyWithoutEncounterInput
    medicalRecordRequest?: MedicalRecordRequestUncheckedCreateNestedManyWithoutInpatientEncounterInput
  }

  export type InpatientEncounterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: StringFieldUpdateOperationsInput | string
    doctorDiagnosis?: StringFieldUpdateOperationsInput | string
    triage?: EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
    disposition?: EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
    dispositionDate?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionTime?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientProfile?: PatientProfileUpdateOneRequiredWithoutInpatientEncountersNestedInput
    charts?: InpatientEncounterChartUpdateManyWithoutEncounterNestedInput
    orders?: InpatientEncounterOrderUpdateManyWithoutEncounterNestedInput
    medicalRecordRequest?: MedicalRecordRequestUpdateManyWithoutInpatientEncounterNestedInput
  }

  export type InpatientEncounterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: StringFieldUpdateOperationsInput | string
    doctorDiagnosis?: StringFieldUpdateOperationsInput | string
    triage?: EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
    disposition?: EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
    dispositionDate?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionTime?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    charts?: InpatientEncounterChartUncheckedUpdateManyWithoutEncounterNestedInput
    orders?: InpatientEncounterOrderUncheckedUpdateManyWithoutEncounterNestedInput
    medicalRecordRequest?: MedicalRecordRequestUncheckedUpdateManyWithoutInpatientEncounterNestedInput
  }

  export type InpatientEncounterCreateManyInput = {
    id?: string
    patientProfileId: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    triage: $Enums.InpatientTriage
    disposition?: $Enums.InpatientDisposition
    dispositionDate?: string | null
    dispositionTime?: string | null
    dispositionNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InpatientEncounterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: StringFieldUpdateOperationsInput | string
    doctorDiagnosis?: StringFieldUpdateOperationsInput | string
    triage?: EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
    disposition?: EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
    dispositionDate?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionTime?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InpatientEncounterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: StringFieldUpdateOperationsInput | string
    doctorDiagnosis?: StringFieldUpdateOperationsInput | string
    triage?: EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
    disposition?: EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
    dispositionDate?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionTime?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InpatientEncounterChartCreateInput = {
    id?: string
    staffId: string
    chart: string
    createdAt?: Date | string
    updatedAt?: Date | string
    encounter: InpatientEncounterCreateNestedOneWithoutChartsInput
  }

  export type InpatientEncounterChartUncheckedCreateInput = {
    id?: string
    encounterId: string
    staffId: string
    chart: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InpatientEncounterChartUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    chart?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    encounter?: InpatientEncounterUpdateOneRequiredWithoutChartsNestedInput
  }

  export type InpatientEncounterChartUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    encounterId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    chart?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InpatientEncounterChartCreateManyInput = {
    id?: string
    encounterId: string
    staffId: string
    chart: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InpatientEncounterChartUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    chart?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InpatientEncounterChartUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    encounterId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    chart?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InpatientEncounterOrderCreateInput = {
    id?: string
    type: $Enums.InpatientEncounterOrderType
    order: string
    status: $Enums.InpatientEncounterOrderStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    encounter: InpatientEncounterCreateNestedOneWithoutOrdersInput
  }

  export type InpatientEncounterOrderUncheckedCreateInput = {
    id?: string
    encounterId: string
    type: $Enums.InpatientEncounterOrderType
    order: string
    status: $Enums.InpatientEncounterOrderStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InpatientEncounterOrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumInpatientEncounterOrderTypeFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderType
    order?: StringFieldUpdateOperationsInput | string
    status?: EnumInpatientEncounterOrderStatusFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    encounter?: InpatientEncounterUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type InpatientEncounterOrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    encounterId?: StringFieldUpdateOperationsInput | string
    type?: EnumInpatientEncounterOrderTypeFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderType
    order?: StringFieldUpdateOperationsInput | string
    status?: EnumInpatientEncounterOrderStatusFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InpatientEncounterOrderCreateManyInput = {
    id?: string
    encounterId: string
    type: $Enums.InpatientEncounterOrderType
    order: string
    status: $Enums.InpatientEncounterOrderStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InpatientEncounterOrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumInpatientEncounterOrderTypeFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderType
    order?: StringFieldUpdateOperationsInput | string
    status?: EnumInpatientEncounterOrderStatusFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InpatientEncounterOrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    encounterId?: StringFieldUpdateOperationsInput | string
    type?: EnumInpatientEncounterOrderTypeFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderType
    order?: StringFieldUpdateOperationsInput | string
    status?: EnumInpatientEncounterOrderStatusFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rooms?: RoomCreateNestedManyWithoutBuildingInput
  }

  export type BuildingUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rooms?: RoomUncheckedCreateNestedManyWithoutBuildingInput
  }

  export type BuildingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rooms?: RoomUpdateManyWithoutBuildingNestedInput
  }

  export type BuildingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rooms?: RoomUncheckedUpdateManyWithoutBuildingNestedInput
  }

  export type BuildingCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BuildingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomCreateInput = {
    id?: string
    type: $Enums.RoomType
    identifier: string
    description?: string | null
    capacity?: number | null
    status: $Enums.RoomStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    building: BuildingCreateNestedOneWithoutRoomsInput
    appointments?: AppointmentCreateNestedManyWithoutFacilityInput
  }

  export type RoomUncheckedCreateInput = {
    id?: string
    buildingId: string
    type: $Enums.RoomType
    identifier: string
    description?: string | null
    capacity?: number | null
    status: $Enums.RoomStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutFacilityInput
  }

  export type RoomUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    identifier?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumRoomStatusFieldUpdateOperationsInput | $Enums.RoomStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    building?: BuildingUpdateOneRequiredWithoutRoomsNestedInput
    appointments?: AppointmentUpdateManyWithoutFacilityNestedInput
  }

  export type RoomUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    buildingId?: StringFieldUpdateOperationsInput | string
    type?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    identifier?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumRoomStatusFieldUpdateOperationsInput | $Enums.RoomStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutFacilityNestedInput
  }

  export type RoomCreateManyInput = {
    id?: string
    buildingId: string
    type: $Enums.RoomType
    identifier: string
    description?: string | null
    capacity?: number | null
    status: $Enums.RoomStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    identifier?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumRoomStatusFieldUpdateOperationsInput | $Enums.RoomStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    buildingId?: StringFieldUpdateOperationsInput | string
    type?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    identifier?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumRoomStatusFieldUpdateOperationsInput | $Enums.RoomStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacilityLogCreateInput = {
    timestamp?: Date | string
    user: string
    role: string
    action: string
    roomIdentifier: string
    type: string
    oldStatus?: string | null
    newStatus?: string | null
  }

  export type FacilityLogUncheckedCreateInput = {
    id?: number
    timestamp?: Date | string
    user: string
    role: string
    action: string
    roomIdentifier: string
    type: string
    oldStatus?: string | null
    newStatus?: string | null
  }

  export type FacilityLogUpdateInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    roomIdentifier?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    oldStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FacilityLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    roomIdentifier?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    oldStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FacilityLogCreateManyInput = {
    id?: number
    timestamp?: Date | string
    user: string
    role: string
    action: string
    roomIdentifier: string
    type: string
    oldStatus?: string | null
    newStatus?: string | null
  }

  export type FacilityLogUpdateManyMutationInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    roomIdentifier?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    oldStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FacilityLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    roomIdentifier?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    oldStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InsuranceProviderCreateInput = {
    id?: string
    name: string
    description?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    claims?: InsuranceClaimCreateNestedManyWithoutProviderInput
  }

  export type InsuranceProviderUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    claims?: InsuranceClaimUncheckedCreateNestedManyWithoutProviderInput
  }

  export type InsuranceProviderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    claims?: InsuranceClaimUpdateManyWithoutProviderNestedInput
  }

  export type InsuranceProviderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    claims?: InsuranceClaimUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type InsuranceProviderCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InsuranceProviderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsuranceProviderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsuranceClaimCreateInput = {
    id?: string
    status: string
    message?: string | null
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    provider: InsuranceProviderCreateNestedOneWithoutClaimsInput
    items?: InsuranceClaimItemCreateNestedManyWithoutClaimInput
  }

  export type InsuranceClaimUncheckedCreateInput = {
    id?: string
    providerId: string
    status: string
    message?: string | null
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: InsuranceClaimItemUncheckedCreateNestedManyWithoutClaimInput
  }

  export type InsuranceClaimUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: InsuranceProviderUpdateOneRequiredWithoutClaimsNestedInput
    items?: InsuranceClaimItemUpdateManyWithoutClaimNestedInput
  }

  export type InsuranceClaimUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: InsuranceClaimItemUncheckedUpdateManyWithoutClaimNestedInput
  }

  export type InsuranceClaimCreateManyInput = {
    id?: string
    providerId: string
    status: string
    message?: string | null
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InsuranceClaimUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsuranceClaimUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsuranceClaimItemCreateInput = {
    id?: string
    name: string
    description?: string | null
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    claim: InsuranceClaimCreateNestedOneWithoutItemsInput
  }

  export type InsuranceClaimItemUncheckedCreateInput = {
    id?: string
    claimId: string
    name: string
    description?: string | null
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InsuranceClaimItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    claim?: InsuranceClaimUpdateOneRequiredWithoutItemsNestedInput
  }

  export type InsuranceClaimItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    claimId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsuranceClaimItemCreateManyInput = {
    id?: string
    claimId: string
    name: string
    description?: string | null
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InsuranceClaimItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsuranceClaimItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    claimId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogCreateInput = {
    id?: string
    user: string
    action: string
    entity: string
    data: JsonNullValueInput | InputJsonValue
    ipAddress: string
    timestamp?: Date | string
  }

  export type LogUncheckedCreateInput = {
    id?: string
    user: string
    action: string
    entity: string
    data: JsonNullValueInput | InputJsonValue
    ipAddress: string
    timestamp?: Date | string
  }

  export type LogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    ipAddress?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    ipAddress?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogCreateManyInput = {
    id?: string
    user: string
    action: string
    entity: string
    data: JsonNullValueInput | InputJsonValue
    ipAddress: string
    timestamp?: Date | string
  }

  export type LogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    ipAddress?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    ipAddress?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientProfileCreateInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterCreateNestedManyWithoutPatientProfileInput
    inpatientEncounters?: InpatientEncounterCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    patientAppointments?: PatientAppointmentCreateNestedManyWithoutPatientInput
    addresses?: AddressCreateNestedManyWithoutPatientProfileInput
    contacts?: ContactCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileUncheckedCreateInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    inpatientEncounters?: InpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    patientAppointments?: PatientAppointmentUncheckedCreateNestedManyWithoutPatientInput
    addresses?: AddressUncheckedCreateNestedManyWithoutPatientProfileInput
    contacts?: ContactUncheckedCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentUncheckedCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUpdateManyWithoutPatientProfileNestedInput
    inpatientEncounters?: InpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    patientAppointments?: PatientAppointmentUpdateManyWithoutPatientNestedInput
    addresses?: AddressUpdateManyWithoutPatientProfileNestedInput
    contacts?: ContactUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUpdateOneWithoutPatientProfileNestedInput
  }

  export type PatientProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    inpatientEncounters?: InpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    patientAppointments?: PatientAppointmentUncheckedUpdateManyWithoutPatientNestedInput
    addresses?: AddressUncheckedUpdateManyWithoutPatientProfileNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUncheckedUpdateOneWithoutPatientProfileNestedInput
  }

  export type PatientProfileCreateManyInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressCreateInput = {
    id?: string
    label: string
    country: string
    state: string
    zipCode: string
    city: string
    address: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patientProfile: PatientProfileCreateNestedOneWithoutAddressesInput
  }

  export type AddressUncheckedCreateInput = {
    id?: string
    patientProfileId: string
    label: string
    country: string
    state: string
    zipCode: string
    city: string
    address: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientProfile?: PatientProfileUpdateOneRequiredWithoutAddressesNestedInput
  }

  export type AddressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressCreateManyInput = {
    id?: string
    patientProfileId: string
    label: string
    country: string
    state: string
    zipCode: string
    city: string
    address: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactCreateInput = {
    id?: string
    type: $Enums.ContactType
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patientProfile: PatientProfileCreateNestedOneWithoutContactsInput
  }

  export type ContactUncheckedCreateInput = {
    id?: string
    patientProfileId: string
    type: $Enums.ContactType
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContactUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumContactTypeFieldUpdateOperationsInput | $Enums.ContactType
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientProfile?: PatientProfileUpdateOneRequiredWithoutContactsNestedInput
  }

  export type ContactUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    type?: EnumContactTypeFieldUpdateOperationsInput | $Enums.ContactType
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactCreateManyInput = {
    id?: string
    patientProfileId: string
    type: $Enums.ContactType
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContactUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumContactTypeFieldUpdateOperationsInput | $Enums.ContactType
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    type?: EnumContactTypeFieldUpdateOperationsInput | $Enums.ContactType
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmploymentCreateInput = {
    id?: string
    employer: string
    contactPerson?: string | null
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientProfile: PatientProfileCreateNestedOneWithoutEmploymentsInput
  }

  export type EmploymentUncheckedCreateInput = {
    id?: string
    patientProfileId: string
    employer: string
    contactPerson?: string | null
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmploymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employer?: StringFieldUpdateOperationsInput | string
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientProfile?: PatientProfileUpdateOneRequiredWithoutEmploymentsNestedInput
  }

  export type EmploymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    employer?: StringFieldUpdateOperationsInput | string
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmploymentCreateManyInput = {
    id?: string
    patientProfileId: string
    employer: string
    contactPerson?: string | null
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmploymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    employer?: StringFieldUpdateOperationsInput | string
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmploymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    employer?: StringFieldUpdateOperationsInput | string
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmergencyContactCreateInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    relationship: $Enums.Relationship
    phone?: string | null
    email?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientProfile: PatientProfileCreateNestedOneWithoutEmergencyContactsInput
  }

  export type EmergencyContactUncheckedCreateInput = {
    id?: string
    patientProfileId: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    relationship: $Enums.Relationship
    phone?: string | null
    email?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmergencyContactUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    relationship?: EnumRelationshipFieldUpdateOperationsInput | $Enums.Relationship
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientProfile?: PatientProfileUpdateOneRequiredWithoutEmergencyContactsNestedInput
  }

  export type EmergencyContactUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    relationship?: EnumRelationshipFieldUpdateOperationsInput | $Enums.Relationship
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmergencyContactCreateManyInput = {
    id?: string
    patientProfileId: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    relationship: $Enums.Relationship
    phone?: string | null
    email?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmergencyContactUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    relationship?: EnumRelationshipFieldUpdateOperationsInput | $Enums.Relationship
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmergencyContactUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    relationship?: EnumRelationshipFieldUpdateOperationsInput | $Enums.Relationship
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsentCreateInput = {
    id?: string
    documentUrl: string
    signature: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patientProfile: PatientProfileCreateNestedOneWithoutConsentInput
  }

  export type ConsentUncheckedCreateInput = {
    id?: string
    patientProfileId: string
    documentUrl: string
    signature: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentUrl?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientProfile?: PatientProfileUpdateOneRequiredWithoutConsentNestedInput
  }

  export type ConsentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    documentUrl?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsentCreateManyInput = {
    id?: string
    patientProfileId: string
    documentUrl: string
    signature: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentUrl?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    documentUrl?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalRecordRequestCreateInput = {
    id?: string
    type: string
    status: string
    fileUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patientProfile: PatientProfileCreateNestedOneWithoutMedicalRecordRequestsInput
    inpatientEncounter: InpatientEncounterCreateNestedOneWithoutMedicalRecordRequestInput
  }

  export type MedicalRecordRequestUncheckedCreateInput = {
    id?: string
    patientProfileId: string
    inpatientEncounterId: string
    type: string
    status: string
    fileUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalRecordRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientProfile?: PatientProfileUpdateOneRequiredWithoutMedicalRecordRequestsNestedInput
    inpatientEncounter?: InpatientEncounterUpdateOneRequiredWithoutMedicalRecordRequestNestedInput
  }

  export type MedicalRecordRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    inpatientEncounterId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalRecordRequestCreateManyInput = {
    id?: string
    patientProfileId: string
    inpatientEncounterId: string
    type: string
    status: string
    fileUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalRecordRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalRecordRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    inpatientEncounterId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PharmacySupplierCreateInput = {
    id?: string
    name: string
    email?: string | null
    contact?: string | null
    address?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PharmacySupplierUncheckedCreateInput = {
    id?: string
    name: string
    email?: string | null
    contact?: string | null
    address?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PharmacySupplierUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PharmacySupplierUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PharmacySupplierCreateManyInput = {
    id?: string
    name: string
    email?: string | null
    contact?: string | null
    address?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PharmacySupplierUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PharmacySupplierUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PharmacyBrandCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: PharmacyItemCreateNestedManyWithoutBrandInput
  }

  export type PharmacyBrandUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: PharmacyItemUncheckedCreateNestedManyWithoutBrandInput
  }

  export type PharmacyBrandUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: PharmacyItemUpdateManyWithoutBrandNestedInput
  }

  export type PharmacyBrandUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: PharmacyItemUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type PharmacyBrandCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PharmacyBrandUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PharmacyBrandUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PharmacyItemCategoryCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: PharmacyItemCreateNestedManyWithoutCategoryInput
  }

  export type PharmacyItemCategoryUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: PharmacyItemUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type PharmacyItemCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: PharmacyItemUpdateManyWithoutCategoryNestedInput
  }

  export type PharmacyItemCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: PharmacyItemUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type PharmacyItemCategoryCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PharmacyItemCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PharmacyItemCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PharmacyItemCreateInput = {
    id?: string
    name: string
    form: $Enums.PharmacyItemForm
    route: $Enums.PharmacyItemRoute
    strength: string
    stock: number
    unit: string
    sku?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: PharmacyBrandCreateNestedOneWithoutItemsInput
    category: PharmacyItemCategoryCreateNestedOneWithoutItemsInput
  }

  export type PharmacyItemUncheckedCreateInput = {
    id?: string
    brandId: string
    categoryId: string
    name: string
    form: $Enums.PharmacyItemForm
    route: $Enums.PharmacyItemRoute
    strength: string
    stock: number
    unit: string
    sku?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PharmacyItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    form?: EnumPharmacyItemFormFieldUpdateOperationsInput | $Enums.PharmacyItemForm
    route?: EnumPharmacyItemRouteFieldUpdateOperationsInput | $Enums.PharmacyItemRoute
    strength?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: PharmacyBrandUpdateOneRequiredWithoutItemsNestedInput
    category?: PharmacyItemCategoryUpdateOneRequiredWithoutItemsNestedInput
  }

  export type PharmacyItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    form?: EnumPharmacyItemFormFieldUpdateOperationsInput | $Enums.PharmacyItemForm
    route?: EnumPharmacyItemRouteFieldUpdateOperationsInput | $Enums.PharmacyItemRoute
    strength?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PharmacyItemCreateManyInput = {
    id?: string
    brandId: string
    categoryId: string
    name: string
    form: $Enums.PharmacyItemForm
    route: $Enums.PharmacyItemRoute
    strength: string
    stock: number
    unit: string
    sku?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PharmacyItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    form?: EnumPharmacyItemFormFieldUpdateOperationsInput | $Enums.PharmacyItemForm
    route?: EnumPharmacyItemRouteFieldUpdateOperationsInput | $Enums.PharmacyItemRoute
    strength?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PharmacyItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    form?: EnumPharmacyItemFormFieldUpdateOperationsInput | $Enums.PharmacyItemForm
    route?: EnumPharmacyItemRouteFieldUpdateOperationsInput | $Enums.PharmacyItemRoute
    strength?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    status?: $Enums.UserStatus
    isEmailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    avatar?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    province?: string | null
    zipCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdBy?: string | null
    updatedBy?: string | null
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    staffProfile?: StaffCreateNestedOneWithoutUserInput
    partnerProfile?: PartnerCreateNestedOneWithoutUserInput
    doctorProfile?: DoctorCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    status?: $Enums.UserStatus
    isEmailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    avatar?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    province?: string | null
    zipCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdBy?: string | null
    updatedBy?: string | null
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    staffProfile?: StaffUncheckedCreateNestedOneWithoutUserInput
    partnerProfile?: PartnerUncheckedCreateNestedOneWithoutUserInput
    doctorProfile?: DoctorUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    staffProfile?: StaffUpdateOneWithoutUserNestedInput
    partnerProfile?: PartnerUpdateOneWithoutUserNestedInput
    doctorProfile?: DoctorUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    staffProfile?: StaffUncheckedUpdateOneWithoutUserNestedInput
    partnerProfile?: PartnerUncheckedUpdateOneWithoutUserNestedInput
    doctorProfile?: DoctorUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    status?: $Enums.UserStatus
    isEmailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    avatar?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    province?: string | null
    zipCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdBy?: string | null
    updatedBy?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RefreshTokenCreateInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    isRevoked?: boolean
    user: UserCreateNestedOneWithoutRefreshTokensInput
  }

  export type RefreshTokenUncheckedCreateInput = {
    id?: string
    token: string
    userId: string
    expiresAt: Date | string
    createdAt?: Date | string
    isRevoked?: boolean
  }

  export type RefreshTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutRefreshTokensNestedInput
  }

  export type RefreshTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RefreshTokenCreateManyInput = {
    id?: string
    token: string
    userId: string
    expiresAt: Date | string
    createdAt?: Date | string
    isRevoked?: boolean
  }

  export type RefreshTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RefreshTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PatientCreateInput = {
    id?: string
    patientNumber: string
    bloodType?: $Enums.BloodType | null
    allergies?: string | null
    medicalHistory?: string | null
    emergencyContact?: string | null
    emergencyPhone?: string | null
    insuranceProvider?: string | null
    insuranceNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientUncheckedCreateInput = {
    id?: string
    userId: string
    patientNumber: string
    bloodType?: $Enums.BloodType | null
    allergies?: string | null
    medicalHistory?: string | null
    emergencyContact?: string | null
    emergencyPhone?: string | null
    insuranceProvider?: string | null
    insuranceNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientNumber?: StringFieldUpdateOperationsInput | string
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceProvider?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPatientProfileNestedInput
  }

  export type PatientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    patientNumber?: StringFieldUpdateOperationsInput | string
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceProvider?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCreateManyInput = {
    id?: string
    userId: string
    patientNumber: string
    bloodType?: $Enums.BloodType | null
    allergies?: string | null
    medicalHistory?: string | null
    emergencyContact?: string | null
    emergencyPhone?: string | null
    insuranceProvider?: string | null
    insuranceNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientNumber?: StringFieldUpdateOperationsInput | string
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceProvider?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    patientNumber?: StringFieldUpdateOperationsInput | string
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceProvider?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffCreateInput = {
    id?: string
    staffNumber: string
    department?: string | null
    position?: string | null
    specialization?: string | null
    licenseNumber?: string | null
    hiredDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffProfileInput
    doctorProfile?: DoctorCreateNestedOneWithoutStaffInput
  }

  export type StaffUncheckedCreateInput = {
    id?: string
    userId: string
    staffNumber: string
    department?: string | null
    position?: string | null
    specialization?: string | null
    licenseNumber?: string | null
    hiredDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorProfile?: DoctorUncheckedCreateNestedOneWithoutStaffInput
  }

  export type StaffUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffNumber?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    hiredDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffProfileNestedInput
    doctorProfile?: DoctorUpdateOneWithoutStaffNestedInput
  }

  export type StaffUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    staffNumber?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    hiredDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorProfile?: DoctorUncheckedUpdateOneWithoutStaffNestedInput
  }

  export type StaffCreateManyInput = {
    id?: string
    userId: string
    staffNumber: string
    department?: string | null
    position?: string | null
    specialization?: string | null
    licenseNumber?: string | null
    hiredDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffNumber?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    hiredDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    staffNumber?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    hiredDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorCreateInput = {
    id?: string
    doctorNumber: string
    medicalLicense: string
    specialization: string
    subSpecialization?: string | null
    boardCertification?: string | null
    yearsOfExperience?: number | null
    education?: string | null
    hospitalAffiliation?: string | null
    consultationFee?: Decimal | DecimalJsLike | number | string | null
    isAvailable?: boolean
    workingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDoctorProfileInput
    staff: StaffCreateNestedOneWithoutDoctorProfileInput
  }

  export type DoctorUncheckedCreateInput = {
    id?: string
    userId: string
    staffId: string
    doctorNumber: string
    medicalLicense: string
    specialization: string
    subSpecialization?: string | null
    boardCertification?: string | null
    yearsOfExperience?: number | null
    education?: string | null
    hospitalAffiliation?: string | null
    consultationFee?: Decimal | DecimalJsLike | number | string | null
    isAvailable?: boolean
    workingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorNumber?: StringFieldUpdateOperationsInput | string
    medicalLicense?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    subSpecialization?: NullableStringFieldUpdateOperationsInput | string | null
    boardCertification?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    consultationFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    workingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDoctorProfileNestedInput
    staff?: StaffUpdateOneRequiredWithoutDoctorProfileNestedInput
  }

  export type DoctorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    doctorNumber?: StringFieldUpdateOperationsInput | string
    medicalLicense?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    subSpecialization?: NullableStringFieldUpdateOperationsInput | string | null
    boardCertification?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    consultationFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    workingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorCreateManyInput = {
    id?: string
    userId: string
    staffId: string
    doctorNumber: string
    medicalLicense: string
    specialization: string
    subSpecialization?: string | null
    boardCertification?: string | null
    yearsOfExperience?: number | null
    education?: string | null
    hospitalAffiliation?: string | null
    consultationFee?: Decimal | DecimalJsLike | number | string | null
    isAvailable?: boolean
    workingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorNumber?: StringFieldUpdateOperationsInput | string
    medicalLicense?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    subSpecialization?: NullableStringFieldUpdateOperationsInput | string | null
    boardCertification?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    consultationFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    workingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    doctorNumber?: StringFieldUpdateOperationsInput | string
    medicalLicense?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    subSpecialization?: NullableStringFieldUpdateOperationsInput | string | null
    boardCertification?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    consultationFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    workingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartnerCreateInput = {
    id?: string
    institutionName: string
    institutionType: $Enums.PartnerType
    licenseNumber?: string | null
    website?: string | null
    contactPerson?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPartnerProfileInput
  }

  export type PartnerUncheckedCreateInput = {
    id?: string
    userId: string
    institutionName: string
    institutionType: $Enums.PartnerType
    licenseNumber?: string | null
    website?: string | null
    contactPerson?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartnerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionName?: StringFieldUpdateOperationsInput | string
    institutionType?: EnumPartnerTypeFieldUpdateOperationsInput | $Enums.PartnerType
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPartnerProfileNestedInput
  }

  export type PartnerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    institutionName?: StringFieldUpdateOperationsInput | string
    institutionType?: EnumPartnerTypeFieldUpdateOperationsInput | $Enums.PartnerType
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartnerCreateManyInput = {
    id?: string
    userId: string
    institutionName: string
    institutionType: $Enums.PartnerType
    licenseNumber?: string | null
    website?: string | null
    contactPerson?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartnerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionName?: StringFieldUpdateOperationsInput | string
    institutionType?: EnumPartnerTypeFieldUpdateOperationsInput | $Enums.PartnerType
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartnerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    institutionName?: StringFieldUpdateOperationsInput | string
    institutionType?: EnumPartnerTypeFieldUpdateOperationsInput | $Enums.PartnerType
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type UuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumAppointmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusFilter<$PrismaModel> | $Enums.AppointmentStatus
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PatientProfileScalarRelationFilter = {
    is?: PatientProfileWhereInput
    isNot?: PatientProfileWhereInput
  }

  export type RoomNullableScalarRelationFilter = {
    is?: RoomWhereInput | null
    isNot?: RoomWhereInput | null
  }

  export type PatientAppointmentNullableScalarRelationFilter = {
    is?: PatientAppointmentWhereInput | null
    isNot?: PatientAppointmentWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AppointmentCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    facilityId?: SortOrder
    date?: SortOrder
    time?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    facilityId?: SortOrder
    date?: SortOrder
    time?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    facilityId?: SortOrder
    date?: SortOrder
    time?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type UuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumAppointmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAppointmentStatusFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type AppointmentNullableScalarRelationFilter = {
    is?: AppointmentWhereInput | null
    isNot?: AppointmentWhereInput | null
  }

  export type PatientAppointmentCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    date?: SortOrder
    time?: SortOrder
    status?: SortOrder
    name?: SortOrder
    appointmentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientAppointmentMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    date?: SortOrder
    time?: SortOrder
    status?: SortOrder
    name?: SortOrder
    appointmentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientAppointmentMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    date?: SortOrder
    time?: SortOrder
    status?: SortOrder
    name?: SortOrder
    appointmentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type PatientEncounterScalarRelationFilter = {
    is?: PatientEncounterWhereInput
    isNot?: PatientEncounterWhereInput
  }

  export type TransactionItemListRelationFilter = {
    every?: TransactionItemWhereInput
    some?: TransactionItemWhereInput
    none?: TransactionItemWhereInput
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type TransactionItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    encounterId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    encounterId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    encounterId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type TransactionScalarRelationFilter = {
    is?: TransactionWhereInput
    isNot?: TransactionWhereInput
  }

  export type TransactionItemCountOrderByAggregateInput = {
    id?: SortOrder
    transactionId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionItemAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type TransactionItemMaxOrderByAggregateInput = {
    id?: SortOrder
    transactionId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionItemMinOrderByAggregateInput = {
    id?: SortOrder
    transactionId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionItemSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type PaymentInstalmentListRelationFilter = {
    every?: PaymentInstalmentWhereInput
    some?: PaymentInstalmentWhereInput
    none?: PaymentInstalmentWhereInput
  }

  export type PaymentInstalmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentPlanCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    cycle?: SortOrder
    numberOfPayments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentPlanAvgOrderByAggregateInput = {
    numberOfPayments?: SortOrder
  }

  export type PaymentPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    cycle?: SortOrder
    numberOfPayments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentPlanMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    cycle?: SortOrder
    numberOfPayments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentPlanSumOrderByAggregateInput = {
    numberOfPayments?: SortOrder
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    transactionId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    transactionId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    transactionId?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type PaymentScalarRelationFilter = {
    is?: PaymentWhereInput
    isNot?: PaymentWhereInput
  }

  export type PaymentPlanScalarRelationFilter = {
    is?: PaymentPlanWhereInput
    isNot?: PaymentPlanWhereInput
  }

  export type PaymentInstalmentCountOrderByAggregateInput = {
    id?: SortOrder
    paymentId?: SortOrder
    planId?: SortOrder
    instalmentNumber?: SortOrder
    amountDue?: SortOrder
    amountPaid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentInstalmentAvgOrderByAggregateInput = {
    instalmentNumber?: SortOrder
    amountDue?: SortOrder
    amountPaid?: SortOrder
  }

  export type PaymentInstalmentMaxOrderByAggregateInput = {
    id?: SortOrder
    paymentId?: SortOrder
    planId?: SortOrder
    instalmentNumber?: SortOrder
    amountDue?: SortOrder
    amountPaid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentInstalmentMinOrderByAggregateInput = {
    id?: SortOrder
    paymentId?: SortOrder
    planId?: SortOrder
    instalmentNumber?: SortOrder
    amountDue?: SortOrder
    amountPaid?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentInstalmentSumOrderByAggregateInput = {
    instalmentNumber?: SortOrder
    amountDue?: SortOrder
    amountPaid?: SortOrder
  }

  export type ClinicScheduleListRelationFilter = {
    every?: ClinicScheduleWhereInput
    some?: ClinicScheduleWhereInput
    none?: ClinicScheduleWhereInput
  }

  export type ClinicScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClinicCountOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClinicMaxOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClinicMinOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClinicScalarRelationFilter = {
    is?: ClinicWhereInput
    isNot?: ClinicWhereInput
  }

  export type ClinicScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClinicScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClinicScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionNullableScalarRelationFilter = {
    is?: TransactionWhereInput | null
    isNot?: TransactionWhereInput | null
  }

  export type PatientEncounterCountOrderByAggregateInput = {
    id?: SortOrder
    encounterId?: SortOrder
    patientProfileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientEncounterMaxOrderByAggregateInput = {
    id?: SortOrder
    encounterId?: SortOrder
    patientProfileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientEncounterMinOrderByAggregateInput = {
    id?: SortOrder
    encounterId?: SortOrder
    patientProfileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumOutpatientEncounterTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.OutpatientEncounterType | EnumOutpatientEncounterTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OutpatientEncounterType[] | ListEnumOutpatientEncounterTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OutpatientEncounterType[] | ListEnumOutpatientEncounterTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOutpatientEncounterTypeFilter<$PrismaModel> | $Enums.OutpatientEncounterType
  }

  export type OutpatientEncounterCountOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    date?: SortOrder
    time?: SortOrder
    chiefComplaint?: SortOrder
    doctorDiagnosis?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OutpatientEncounterMaxOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    date?: SortOrder
    time?: SortOrder
    chiefComplaint?: SortOrder
    doctorDiagnosis?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OutpatientEncounterMinOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    date?: SortOrder
    time?: SortOrder
    chiefComplaint?: SortOrder
    doctorDiagnosis?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumOutpatientEncounterTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OutpatientEncounterType | EnumOutpatientEncounterTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OutpatientEncounterType[] | ListEnumOutpatientEncounterTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OutpatientEncounterType[] | ListEnumOutpatientEncounterTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOutpatientEncounterTypeWithAggregatesFilter<$PrismaModel> | $Enums.OutpatientEncounterType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOutpatientEncounterTypeFilter<$PrismaModel>
    _max?: NestedEnumOutpatientEncounterTypeFilter<$PrismaModel>
  }

  export type EnumInpatientTriageFilter<$PrismaModel = never> = {
    equals?: $Enums.InpatientTriage | EnumInpatientTriageFieldRefInput<$PrismaModel>
    in?: $Enums.InpatientTriage[] | ListEnumInpatientTriageFieldRefInput<$PrismaModel>
    notIn?: $Enums.InpatientTriage[] | ListEnumInpatientTriageFieldRefInput<$PrismaModel>
    not?: NestedEnumInpatientTriageFilter<$PrismaModel> | $Enums.InpatientTriage
  }

  export type EnumInpatientDispositionFilter<$PrismaModel = never> = {
    equals?: $Enums.InpatientDisposition | EnumInpatientDispositionFieldRefInput<$PrismaModel>
    in?: $Enums.InpatientDisposition[] | ListEnumInpatientDispositionFieldRefInput<$PrismaModel>
    notIn?: $Enums.InpatientDisposition[] | ListEnumInpatientDispositionFieldRefInput<$PrismaModel>
    not?: NestedEnumInpatientDispositionFilter<$PrismaModel> | $Enums.InpatientDisposition
  }

  export type InpatientEncounterChartListRelationFilter = {
    every?: InpatientEncounterChartWhereInput
    some?: InpatientEncounterChartWhereInput
    none?: InpatientEncounterChartWhereInput
  }

  export type InpatientEncounterOrderListRelationFilter = {
    every?: InpatientEncounterOrderWhereInput
    some?: InpatientEncounterOrderWhereInput
    none?: InpatientEncounterOrderWhereInput
  }

  export type MedicalRecordRequestListRelationFilter = {
    every?: MedicalRecordRequestWhereInput
    some?: MedicalRecordRequestWhereInput
    none?: MedicalRecordRequestWhereInput
  }

  export type InpatientEncounterChartOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InpatientEncounterOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MedicalRecordRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InpatientEncounterCountOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    date?: SortOrder
    time?: SortOrder
    chiefComplaint?: SortOrder
    doctorDiagnosis?: SortOrder
    triage?: SortOrder
    disposition?: SortOrder
    dispositionDate?: SortOrder
    dispositionTime?: SortOrder
    dispositionNote?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InpatientEncounterMaxOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    date?: SortOrder
    time?: SortOrder
    chiefComplaint?: SortOrder
    doctorDiagnosis?: SortOrder
    triage?: SortOrder
    disposition?: SortOrder
    dispositionDate?: SortOrder
    dispositionTime?: SortOrder
    dispositionNote?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InpatientEncounterMinOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    date?: SortOrder
    time?: SortOrder
    chiefComplaint?: SortOrder
    doctorDiagnosis?: SortOrder
    triage?: SortOrder
    disposition?: SortOrder
    dispositionDate?: SortOrder
    dispositionTime?: SortOrder
    dispositionNote?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumInpatientTriageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InpatientTriage | EnumInpatientTriageFieldRefInput<$PrismaModel>
    in?: $Enums.InpatientTriage[] | ListEnumInpatientTriageFieldRefInput<$PrismaModel>
    notIn?: $Enums.InpatientTriage[] | ListEnumInpatientTriageFieldRefInput<$PrismaModel>
    not?: NestedEnumInpatientTriageWithAggregatesFilter<$PrismaModel> | $Enums.InpatientTriage
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInpatientTriageFilter<$PrismaModel>
    _max?: NestedEnumInpatientTriageFilter<$PrismaModel>
  }

  export type EnumInpatientDispositionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InpatientDisposition | EnumInpatientDispositionFieldRefInput<$PrismaModel>
    in?: $Enums.InpatientDisposition[] | ListEnumInpatientDispositionFieldRefInput<$PrismaModel>
    notIn?: $Enums.InpatientDisposition[] | ListEnumInpatientDispositionFieldRefInput<$PrismaModel>
    not?: NestedEnumInpatientDispositionWithAggregatesFilter<$PrismaModel> | $Enums.InpatientDisposition
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInpatientDispositionFilter<$PrismaModel>
    _max?: NestedEnumInpatientDispositionFilter<$PrismaModel>
  }

  export type InpatientEncounterScalarRelationFilter = {
    is?: InpatientEncounterWhereInput
    isNot?: InpatientEncounterWhereInput
  }

  export type InpatientEncounterChartCountOrderByAggregateInput = {
    id?: SortOrder
    encounterId?: SortOrder
    staffId?: SortOrder
    chart?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InpatientEncounterChartMaxOrderByAggregateInput = {
    id?: SortOrder
    encounterId?: SortOrder
    staffId?: SortOrder
    chart?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InpatientEncounterChartMinOrderByAggregateInput = {
    id?: SortOrder
    encounterId?: SortOrder
    staffId?: SortOrder
    chart?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumInpatientEncounterOrderTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InpatientEncounterOrderType | EnumInpatientEncounterOrderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InpatientEncounterOrderType[] | ListEnumInpatientEncounterOrderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InpatientEncounterOrderType[] | ListEnumInpatientEncounterOrderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInpatientEncounterOrderTypeFilter<$PrismaModel> | $Enums.InpatientEncounterOrderType
  }

  export type EnumInpatientEncounterOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InpatientEncounterOrderStatus | EnumInpatientEncounterOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InpatientEncounterOrderStatus[] | ListEnumInpatientEncounterOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InpatientEncounterOrderStatus[] | ListEnumInpatientEncounterOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInpatientEncounterOrderStatusFilter<$PrismaModel> | $Enums.InpatientEncounterOrderStatus
  }

  export type InpatientEncounterOrderCountOrderByAggregateInput = {
    id?: SortOrder
    encounterId?: SortOrder
    type?: SortOrder
    order?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InpatientEncounterOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    encounterId?: SortOrder
    type?: SortOrder
    order?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InpatientEncounterOrderMinOrderByAggregateInput = {
    id?: SortOrder
    encounterId?: SortOrder
    type?: SortOrder
    order?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumInpatientEncounterOrderTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InpatientEncounterOrderType | EnumInpatientEncounterOrderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InpatientEncounterOrderType[] | ListEnumInpatientEncounterOrderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InpatientEncounterOrderType[] | ListEnumInpatientEncounterOrderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInpatientEncounterOrderTypeWithAggregatesFilter<$PrismaModel> | $Enums.InpatientEncounterOrderType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInpatientEncounterOrderTypeFilter<$PrismaModel>
    _max?: NestedEnumInpatientEncounterOrderTypeFilter<$PrismaModel>
  }

  export type EnumInpatientEncounterOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InpatientEncounterOrderStatus | EnumInpatientEncounterOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InpatientEncounterOrderStatus[] | ListEnumInpatientEncounterOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InpatientEncounterOrderStatus[] | ListEnumInpatientEncounterOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInpatientEncounterOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.InpatientEncounterOrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInpatientEncounterOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumInpatientEncounterOrderStatusFilter<$PrismaModel>
  }

  export type RoomListRelationFilter = {
    every?: RoomWhereInput
    some?: RoomWhereInput
    none?: RoomWhereInput
  }

  export type RoomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BuildingCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BuildingMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BuildingMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumRoomTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RoomType | EnumRoomTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoomTypeFilter<$PrismaModel> | $Enums.RoomType
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumRoomStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RoomStatus | EnumRoomStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RoomStatus[] | ListEnumRoomStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoomStatus[] | ListEnumRoomStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRoomStatusFilter<$PrismaModel> | $Enums.RoomStatus
  }

  export type BuildingScalarRelationFilter = {
    is?: BuildingWhereInput
    isNot?: BuildingWhereInput
  }

  export type AppointmentListRelationFilter = {
    every?: AppointmentWhereInput
    some?: AppointmentWhereInput
    none?: AppointmentWhereInput
  }

  export type AppointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoomCountOrderByAggregateInput = {
    id?: SortOrder
    buildingId?: SortOrder
    type?: SortOrder
    identifier?: SortOrder
    description?: SortOrder
    capacity?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomAvgOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type RoomMaxOrderByAggregateInput = {
    id?: SortOrder
    buildingId?: SortOrder
    type?: SortOrder
    identifier?: SortOrder
    description?: SortOrder
    capacity?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomMinOrderByAggregateInput = {
    id?: SortOrder
    buildingId?: SortOrder
    type?: SortOrder
    identifier?: SortOrder
    description?: SortOrder
    capacity?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomSumOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type EnumRoomTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoomType | EnumRoomTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoomTypeWithAggregatesFilter<$PrismaModel> | $Enums.RoomType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoomTypeFilter<$PrismaModel>
    _max?: NestedEnumRoomTypeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumRoomStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoomStatus | EnumRoomStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RoomStatus[] | ListEnumRoomStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoomStatus[] | ListEnumRoomStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRoomStatusWithAggregatesFilter<$PrismaModel> | $Enums.RoomStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoomStatusFilter<$PrismaModel>
    _max?: NestedEnumRoomStatusFilter<$PrismaModel>
  }

  export type FacilityLogCountOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    user?: SortOrder
    role?: SortOrder
    action?: SortOrder
    roomIdentifier?: SortOrder
    type?: SortOrder
    oldStatus?: SortOrder
    newStatus?: SortOrder
  }

  export type FacilityLogAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FacilityLogMaxOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    user?: SortOrder
    role?: SortOrder
    action?: SortOrder
    roomIdentifier?: SortOrder
    type?: SortOrder
    oldStatus?: SortOrder
    newStatus?: SortOrder
  }

  export type FacilityLogMinOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    user?: SortOrder
    role?: SortOrder
    action?: SortOrder
    roomIdentifier?: SortOrder
    type?: SortOrder
    oldStatus?: SortOrder
    newStatus?: SortOrder
  }

  export type FacilityLogSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type InsuranceClaimListRelationFilter = {
    every?: InsuranceClaimWhereInput
    some?: InsuranceClaimWhereInput
    none?: InsuranceClaimWhereInput
  }

  export type InsuranceClaimOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InsuranceProviderCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip?: SortOrder
    country?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InsuranceProviderMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip?: SortOrder
    country?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InsuranceProviderMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip?: SortOrder
    country?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InsuranceProviderScalarRelationFilter = {
    is?: InsuranceProviderWhereInput
    isNot?: InsuranceProviderWhereInput
  }

  export type InsuranceClaimItemListRelationFilter = {
    every?: InsuranceClaimItemWhereInput
    some?: InsuranceClaimItemWhereInput
    none?: InsuranceClaimItemWhereInput
  }

  export type InsuranceClaimItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InsuranceClaimCountOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InsuranceClaimAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type InsuranceClaimMaxOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InsuranceClaimMinOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InsuranceClaimSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type InsuranceClaimScalarRelationFilter = {
    is?: InsuranceClaimWhereInput
    isNot?: InsuranceClaimWhereInput
  }

  export type InsuranceClaimItemCountOrderByAggregateInput = {
    id?: SortOrder
    claimId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InsuranceClaimItemAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type InsuranceClaimItemMaxOrderByAggregateInput = {
    id?: SortOrder
    claimId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InsuranceClaimItemMinOrderByAggregateInput = {
    id?: SortOrder
    claimId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InsuranceClaimItemSumOrderByAggregateInput = {
    amount?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type LogCountOrderByAggregateInput = {
    id?: SortOrder
    user?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    data?: SortOrder
    ipAddress?: SortOrder
    timestamp?: SortOrder
  }

  export type LogMaxOrderByAggregateInput = {
    id?: SortOrder
    user?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    ipAddress?: SortOrder
    timestamp?: SortOrder
  }

  export type LogMinOrderByAggregateInput = {
    id?: SortOrder
    user?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    ipAddress?: SortOrder
    timestamp?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type EnumSexNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel> | null
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel> | null
    not?: NestedEnumSexNullableFilter<$PrismaModel> | $Enums.Sex | null
  }

  export type EnumMaritalStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MaritalStatus | EnumMaritalStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMaritalStatusNullableFilter<$PrismaModel> | $Enums.MaritalStatus | null
  }

  export type EnumBloodTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.BloodType | EnumBloodTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BloodType[] | ListEnumBloodTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BloodType[] | ListEnumBloodTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBloodTypeNullableFilter<$PrismaModel> | $Enums.BloodType | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PatientEncounterListRelationFilter = {
    every?: PatientEncounterWhereInput
    some?: PatientEncounterWhereInput
    none?: PatientEncounterWhereInput
  }

  export type InpatientEncounterListRelationFilter = {
    every?: InpatientEncounterWhereInput
    some?: InpatientEncounterWhereInput
    none?: InpatientEncounterWhereInput
  }

  export type OutpatientEncounterListRelationFilter = {
    every?: OutpatientEncounterWhereInput
    some?: OutpatientEncounterWhereInput
    none?: OutpatientEncounterWhereInput
  }

  export type PatientAppointmentListRelationFilter = {
    every?: PatientAppointmentWhereInput
    some?: PatientAppointmentWhereInput
    none?: PatientAppointmentWhereInput
  }

  export type AddressListRelationFilter = {
    every?: AddressWhereInput
    some?: AddressWhereInput
    none?: AddressWhereInput
  }

  export type ContactListRelationFilter = {
    every?: ContactWhereInput
    some?: ContactWhereInput
    none?: ContactWhereInput
  }

  export type EmploymentListRelationFilter = {
    every?: EmploymentWhereInput
    some?: EmploymentWhereInput
    none?: EmploymentWhereInput
  }

  export type EmergencyContactListRelationFilter = {
    every?: EmergencyContactWhereInput
    some?: EmergencyContactWhereInput
    none?: EmergencyContactWhereInput
  }

  export type ConsentNullableScalarRelationFilter = {
    is?: ConsentWhereInput | null
    isNot?: ConsentWhereInput | null
  }

  export type PatientEncounterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InpatientEncounterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OutpatientEncounterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientAppointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AddressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContactOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmploymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmergencyContactOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientProfileCountOrderByAggregateInput = {
    id?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    suffix?: SortOrder
    birthdate?: SortOrder
    birthplace?: SortOrder
    sex?: SortOrder
    maritalStatus?: SortOrder
    nationality?: SortOrder
    religion?: SortOrder
    bloodType?: SortOrder
    archived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    suffix?: SortOrder
    birthdate?: SortOrder
    birthplace?: SortOrder
    sex?: SortOrder
    maritalStatus?: SortOrder
    nationality?: SortOrder
    religion?: SortOrder
    bloodType?: SortOrder
    archived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientProfileMinOrderByAggregateInput = {
    id?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    suffix?: SortOrder
    birthdate?: SortOrder
    birthplace?: SortOrder
    sex?: SortOrder
    maritalStatus?: SortOrder
    nationality?: SortOrder
    religion?: SortOrder
    bloodType?: SortOrder
    archived?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumSexNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel> | null
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel> | null
    not?: NestedEnumSexNullableWithAggregatesFilter<$PrismaModel> | $Enums.Sex | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumSexNullableFilter<$PrismaModel>
    _max?: NestedEnumSexNullableFilter<$PrismaModel>
  }

  export type EnumMaritalStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaritalStatus | EnumMaritalStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMaritalStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.MaritalStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMaritalStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumMaritalStatusNullableFilter<$PrismaModel>
  }

  export type EnumBloodTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BloodType | EnumBloodTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BloodType[] | ListEnumBloodTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BloodType[] | ListEnumBloodTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBloodTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.BloodType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBloodTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumBloodTypeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type AddressCountOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    label?: SortOrder
    country?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    city?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AddressMaxOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    label?: SortOrder
    country?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    city?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AddressMinOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    label?: SortOrder
    country?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    city?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumContactTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ContactType | EnumContactTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContactType[] | ListEnumContactTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContactType[] | ListEnumContactTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumContactTypeFilter<$PrismaModel> | $Enums.ContactType
  }

  export type ContactCountOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    type?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContactMaxOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    type?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContactMinOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    type?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumContactTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContactType | EnumContactTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContactType[] | ListEnumContactTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContactType[] | ListEnumContactTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumContactTypeWithAggregatesFilter<$PrismaModel> | $Enums.ContactType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContactTypeFilter<$PrismaModel>
    _max?: NestedEnumContactTypeFilter<$PrismaModel>
  }

  export type EmploymentCountOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    employer?: SortOrder
    contactPerson?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    website?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmploymentMaxOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    employer?: SortOrder
    contactPerson?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    website?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmploymentMinOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    employer?: SortOrder
    contactPerson?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    website?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumRelationshipFilter<$PrismaModel = never> = {
    equals?: $Enums.Relationship | EnumRelationshipFieldRefInput<$PrismaModel>
    in?: $Enums.Relationship[] | ListEnumRelationshipFieldRefInput<$PrismaModel>
    notIn?: $Enums.Relationship[] | ListEnumRelationshipFieldRefInput<$PrismaModel>
    not?: NestedEnumRelationshipFilter<$PrismaModel> | $Enums.Relationship
  }

  export type EmergencyContactCountOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    suffix?: SortOrder
    relationship?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmergencyContactMaxOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    suffix?: SortOrder
    relationship?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmergencyContactMinOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    suffix?: SortOrder
    relationship?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumRelationshipWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Relationship | EnumRelationshipFieldRefInput<$PrismaModel>
    in?: $Enums.Relationship[] | ListEnumRelationshipFieldRefInput<$PrismaModel>
    notIn?: $Enums.Relationship[] | ListEnumRelationshipFieldRefInput<$PrismaModel>
    not?: NestedEnumRelationshipWithAggregatesFilter<$PrismaModel> | $Enums.Relationship
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRelationshipFilter<$PrismaModel>
    _max?: NestedEnumRelationshipFilter<$PrismaModel>
  }

  export type ConsentCountOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    documentUrl?: SortOrder
    signature?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConsentMaxOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    documentUrl?: SortOrder
    signature?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConsentMinOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    documentUrl?: SortOrder
    signature?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalRecordRequestCountOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    inpatientEncounterId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalRecordRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    inpatientEncounterId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalRecordRequestMinOrderByAggregateInput = {
    id?: SortOrder
    patientProfileId?: SortOrder
    inpatientEncounterId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PharmacySupplierCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    contact?: SortOrder
    address?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PharmacySupplierMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    contact?: SortOrder
    address?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PharmacySupplierMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    contact?: SortOrder
    address?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PharmacyItemListRelationFilter = {
    every?: PharmacyItemWhereInput
    some?: PharmacyItemWhereInput
    none?: PharmacyItemWhereInput
  }

  export type PharmacyItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PharmacyBrandCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PharmacyBrandMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PharmacyBrandMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PharmacyItemCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PharmacyItemCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PharmacyItemCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPharmacyItemFormFilter<$PrismaModel = never> = {
    equals?: $Enums.PharmacyItemForm | EnumPharmacyItemFormFieldRefInput<$PrismaModel>
    in?: $Enums.PharmacyItemForm[] | ListEnumPharmacyItemFormFieldRefInput<$PrismaModel>
    notIn?: $Enums.PharmacyItemForm[] | ListEnumPharmacyItemFormFieldRefInput<$PrismaModel>
    not?: NestedEnumPharmacyItemFormFilter<$PrismaModel> | $Enums.PharmacyItemForm
  }

  export type EnumPharmacyItemRouteFilter<$PrismaModel = never> = {
    equals?: $Enums.PharmacyItemRoute | EnumPharmacyItemRouteFieldRefInput<$PrismaModel>
    in?: $Enums.PharmacyItemRoute[] | ListEnumPharmacyItemRouteFieldRefInput<$PrismaModel>
    notIn?: $Enums.PharmacyItemRoute[] | ListEnumPharmacyItemRouteFieldRefInput<$PrismaModel>
    not?: NestedEnumPharmacyItemRouteFilter<$PrismaModel> | $Enums.PharmacyItemRoute
  }

  export type PharmacyBrandScalarRelationFilter = {
    is?: PharmacyBrandWhereInput
    isNot?: PharmacyBrandWhereInput
  }

  export type PharmacyItemCategoryScalarRelationFilter = {
    is?: PharmacyItemCategoryWhereInput
    isNot?: PharmacyItemCategoryWhereInput
  }

  export type PharmacyItemCountOrderByAggregateInput = {
    id?: SortOrder
    brandId?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    form?: SortOrder
    route?: SortOrder
    strength?: SortOrder
    stock?: SortOrder
    unit?: SortOrder
    sku?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PharmacyItemAvgOrderByAggregateInput = {
    stock?: SortOrder
  }

  export type PharmacyItemMaxOrderByAggregateInput = {
    id?: SortOrder
    brandId?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    form?: SortOrder
    route?: SortOrder
    strength?: SortOrder
    stock?: SortOrder
    unit?: SortOrder
    sku?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PharmacyItemMinOrderByAggregateInput = {
    id?: SortOrder
    brandId?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    form?: SortOrder
    route?: SortOrder
    strength?: SortOrder
    stock?: SortOrder
    unit?: SortOrder
    sku?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PharmacyItemSumOrderByAggregateInput = {
    stock?: SortOrder
  }

  export type EnumPharmacyItemFormWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PharmacyItemForm | EnumPharmacyItemFormFieldRefInput<$PrismaModel>
    in?: $Enums.PharmacyItemForm[] | ListEnumPharmacyItemFormFieldRefInput<$PrismaModel>
    notIn?: $Enums.PharmacyItemForm[] | ListEnumPharmacyItemFormFieldRefInput<$PrismaModel>
    not?: NestedEnumPharmacyItemFormWithAggregatesFilter<$PrismaModel> | $Enums.PharmacyItemForm
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPharmacyItemFormFilter<$PrismaModel>
    _max?: NestedEnumPharmacyItemFormFilter<$PrismaModel>
  }

  export type EnumPharmacyItemRouteWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PharmacyItemRoute | EnumPharmacyItemRouteFieldRefInput<$PrismaModel>
    in?: $Enums.PharmacyItemRoute[] | ListEnumPharmacyItemRouteFieldRefInput<$PrismaModel>
    notIn?: $Enums.PharmacyItemRoute[] | ListEnumPharmacyItemRouteFieldRefInput<$PrismaModel>
    not?: NestedEnumPharmacyItemRouteWithAggregatesFilter<$PrismaModel> | $Enums.PharmacyItemRoute
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPharmacyItemRouteFilter<$PrismaModel>
    _max?: NestedEnumPharmacyItemRouteFilter<$PrismaModel>
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type EnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }

  export type RefreshTokenListRelationFilter = {
    every?: RefreshTokenWhereInput
    some?: RefreshTokenWhereInput
    none?: RefreshTokenWhereInput
  }

  export type PatientNullableScalarRelationFilter = {
    is?: PatientWhereInput | null
    isNot?: PatientWhereInput | null
  }

  export type StaffNullableScalarRelationFilter = {
    is?: StaffWhereInput | null
    isNot?: StaffWhereInput | null
  }

  export type PartnerNullableScalarRelationFilter = {
    is?: PartnerWhereInput | null
    isNot?: PartnerWhereInput | null
  }

  export type DoctorNullableScalarRelationFilter = {
    is?: DoctorWhereInput | null
    isNot?: DoctorWhereInput | null
  }

  export type RefreshTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    status?: SortOrder
    isEmailVerified?: SortOrder
    emailVerifiedAt?: SortOrder
    avatar?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    city?: SortOrder
    province?: SortOrder
    zipCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    status?: SortOrder
    isEmailVerified?: SortOrder
    emailVerifiedAt?: SortOrder
    avatar?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    city?: SortOrder
    province?: SortOrder
    zipCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    status?: SortOrder
    isEmailVerified?: SortOrder
    emailVerifiedAt?: SortOrder
    avatar?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    city?: SortOrder
    province?: SortOrder
    zipCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type EnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type RefreshTokenCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    isRevoked?: SortOrder
  }

  export type RefreshTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    isRevoked?: SortOrder
  }

  export type RefreshTokenMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    isRevoked?: SortOrder
  }

  export type PatientCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    patientNumber?: SortOrder
    bloodType?: SortOrder
    allergies?: SortOrder
    medicalHistory?: SortOrder
    emergencyContact?: SortOrder
    emergencyPhone?: SortOrder
    insuranceProvider?: SortOrder
    insuranceNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    patientNumber?: SortOrder
    bloodType?: SortOrder
    allergies?: SortOrder
    medicalHistory?: SortOrder
    emergencyContact?: SortOrder
    emergencyPhone?: SortOrder
    insuranceProvider?: SortOrder
    insuranceNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    patientNumber?: SortOrder
    bloodType?: SortOrder
    allergies?: SortOrder
    medicalHistory?: SortOrder
    emergencyContact?: SortOrder
    emergencyPhone?: SortOrder
    insuranceProvider?: SortOrder
    insuranceNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type StaffCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    staffNumber?: SortOrder
    department?: SortOrder
    position?: SortOrder
    specialization?: SortOrder
    licenseNumber?: SortOrder
    hiredDate?: SortOrder
    salary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffAvgOrderByAggregateInput = {
    salary?: SortOrder
  }

  export type StaffMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    staffNumber?: SortOrder
    department?: SortOrder
    position?: SortOrder
    specialization?: SortOrder
    licenseNumber?: SortOrder
    hiredDate?: SortOrder
    salary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    staffNumber?: SortOrder
    department?: SortOrder
    position?: SortOrder
    specialization?: SortOrder
    licenseNumber?: SortOrder
    hiredDate?: SortOrder
    salary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffSumOrderByAggregateInput = {
    salary?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type StaffScalarRelationFilter = {
    is?: StaffWhereInput
    isNot?: StaffWhereInput
  }

  export type DoctorCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    staffId?: SortOrder
    doctorNumber?: SortOrder
    medicalLicense?: SortOrder
    specialization?: SortOrder
    subSpecialization?: SortOrder
    boardCertification?: SortOrder
    yearsOfExperience?: SortOrder
    education?: SortOrder
    hospitalAffiliation?: SortOrder
    consultationFee?: SortOrder
    isAvailable?: SortOrder
    workingHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorAvgOrderByAggregateInput = {
    yearsOfExperience?: SortOrder
    consultationFee?: SortOrder
  }

  export type DoctorMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    staffId?: SortOrder
    doctorNumber?: SortOrder
    medicalLicense?: SortOrder
    specialization?: SortOrder
    subSpecialization?: SortOrder
    boardCertification?: SortOrder
    yearsOfExperience?: SortOrder
    education?: SortOrder
    hospitalAffiliation?: SortOrder
    consultationFee?: SortOrder
    isAvailable?: SortOrder
    workingHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    staffId?: SortOrder
    doctorNumber?: SortOrder
    medicalLicense?: SortOrder
    specialization?: SortOrder
    subSpecialization?: SortOrder
    boardCertification?: SortOrder
    yearsOfExperience?: SortOrder
    education?: SortOrder
    hospitalAffiliation?: SortOrder
    consultationFee?: SortOrder
    isAvailable?: SortOrder
    workingHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorSumOrderByAggregateInput = {
    yearsOfExperience?: SortOrder
    consultationFee?: SortOrder
  }

  export type EnumPartnerTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PartnerType | EnumPartnerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PartnerType[] | ListEnumPartnerTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PartnerType[] | ListEnumPartnerTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPartnerTypeFilter<$PrismaModel> | $Enums.PartnerType
  }

  export type PartnerCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    institutionName?: SortOrder
    institutionType?: SortOrder
    licenseNumber?: SortOrder
    website?: SortOrder
    contactPerson?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartnerMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    institutionName?: SortOrder
    institutionType?: SortOrder
    licenseNumber?: SortOrder
    website?: SortOrder
    contactPerson?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartnerMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    institutionName?: SortOrder
    institutionType?: SortOrder
    licenseNumber?: SortOrder
    website?: SortOrder
    contactPerson?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPartnerTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PartnerType | EnumPartnerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PartnerType[] | ListEnumPartnerTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PartnerType[] | ListEnumPartnerTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPartnerTypeWithAggregatesFilter<$PrismaModel> | $Enums.PartnerType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPartnerTypeFilter<$PrismaModel>
    _max?: NestedEnumPartnerTypeFilter<$PrismaModel>
  }

  export type PatientProfileCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<PatientProfileCreateWithoutAppointmentsInput, PatientProfileUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutAppointmentsInput
    connect?: PatientProfileWhereUniqueInput
  }

  export type RoomCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<RoomCreateWithoutAppointmentsInput, RoomUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: RoomCreateOrConnectWithoutAppointmentsInput
    connect?: RoomWhereUniqueInput
  }

  export type PatientAppointmentCreateNestedOneWithoutAppointmentInput = {
    create?: XOR<PatientAppointmentCreateWithoutAppointmentInput, PatientAppointmentUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: PatientAppointmentCreateOrConnectWithoutAppointmentInput
    connect?: PatientAppointmentWhereUniqueInput
  }

  export type PatientAppointmentUncheckedCreateNestedOneWithoutAppointmentInput = {
    create?: XOR<PatientAppointmentCreateWithoutAppointmentInput, PatientAppointmentUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: PatientAppointmentCreateOrConnectWithoutAppointmentInput
    connect?: PatientAppointmentWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumAppointmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.AppointmentStatus
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PatientProfileUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<PatientProfileCreateWithoutAppointmentsInput, PatientProfileUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutAppointmentsInput
    upsert?: PatientProfileUpsertWithoutAppointmentsInput
    connect?: PatientProfileWhereUniqueInput
    update?: XOR<XOR<PatientProfileUpdateToOneWithWhereWithoutAppointmentsInput, PatientProfileUpdateWithoutAppointmentsInput>, PatientProfileUncheckedUpdateWithoutAppointmentsInput>
  }

  export type RoomUpdateOneWithoutAppointmentsNestedInput = {
    create?: XOR<RoomCreateWithoutAppointmentsInput, RoomUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: RoomCreateOrConnectWithoutAppointmentsInput
    upsert?: RoomUpsertWithoutAppointmentsInput
    disconnect?: RoomWhereInput | boolean
    delete?: RoomWhereInput | boolean
    connect?: RoomWhereUniqueInput
    update?: XOR<XOR<RoomUpdateToOneWithWhereWithoutAppointmentsInput, RoomUpdateWithoutAppointmentsInput>, RoomUncheckedUpdateWithoutAppointmentsInput>
  }

  export type PatientAppointmentUpdateOneWithoutAppointmentNestedInput = {
    create?: XOR<PatientAppointmentCreateWithoutAppointmentInput, PatientAppointmentUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: PatientAppointmentCreateOrConnectWithoutAppointmentInput
    upsert?: PatientAppointmentUpsertWithoutAppointmentInput
    disconnect?: PatientAppointmentWhereInput | boolean
    delete?: PatientAppointmentWhereInput | boolean
    connect?: PatientAppointmentWhereUniqueInput
    update?: XOR<XOR<PatientAppointmentUpdateToOneWithWhereWithoutAppointmentInput, PatientAppointmentUpdateWithoutAppointmentInput>, PatientAppointmentUncheckedUpdateWithoutAppointmentInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PatientAppointmentUncheckedUpdateOneWithoutAppointmentNestedInput = {
    create?: XOR<PatientAppointmentCreateWithoutAppointmentInput, PatientAppointmentUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: PatientAppointmentCreateOrConnectWithoutAppointmentInput
    upsert?: PatientAppointmentUpsertWithoutAppointmentInput
    disconnect?: PatientAppointmentWhereInput | boolean
    delete?: PatientAppointmentWhereInput | boolean
    connect?: PatientAppointmentWhereUniqueInput
    update?: XOR<XOR<PatientAppointmentUpdateToOneWithWhereWithoutAppointmentInput, PatientAppointmentUpdateWithoutAppointmentInput>, PatientAppointmentUncheckedUpdateWithoutAppointmentInput>
  }

  export type PatientProfileCreateNestedOneWithoutPatientAppointmentsInput = {
    create?: XOR<PatientProfileCreateWithoutPatientAppointmentsInput, PatientProfileUncheckedCreateWithoutPatientAppointmentsInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutPatientAppointmentsInput
    connect?: PatientProfileWhereUniqueInput
  }

  export type AppointmentCreateNestedOneWithoutPatientAppointmentInput = {
    create?: XOR<AppointmentCreateWithoutPatientAppointmentInput, AppointmentUncheckedCreateWithoutPatientAppointmentInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientAppointmentInput
    connect?: AppointmentWhereUniqueInput
  }

  export type PatientProfileUpdateOneRequiredWithoutPatientAppointmentsNestedInput = {
    create?: XOR<PatientProfileCreateWithoutPatientAppointmentsInput, PatientProfileUncheckedCreateWithoutPatientAppointmentsInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutPatientAppointmentsInput
    upsert?: PatientProfileUpsertWithoutPatientAppointmentsInput
    connect?: PatientProfileWhereUniqueInput
    update?: XOR<XOR<PatientProfileUpdateToOneWithWhereWithoutPatientAppointmentsInput, PatientProfileUpdateWithoutPatientAppointmentsInput>, PatientProfileUncheckedUpdateWithoutPatientAppointmentsInput>
  }

  export type AppointmentUpdateOneWithoutPatientAppointmentNestedInput = {
    create?: XOR<AppointmentCreateWithoutPatientAppointmentInput, AppointmentUncheckedCreateWithoutPatientAppointmentInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientAppointmentInput
    upsert?: AppointmentUpsertWithoutPatientAppointmentInput
    disconnect?: AppointmentWhereInput | boolean
    delete?: AppointmentWhereInput | boolean
    connect?: AppointmentWhereUniqueInput
    update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutPatientAppointmentInput, AppointmentUpdateWithoutPatientAppointmentInput>, AppointmentUncheckedUpdateWithoutPatientAppointmentInput>
  }

  export type PatientEncounterCreateNestedOneWithoutTransactionInput = {
    create?: XOR<PatientEncounterCreateWithoutTransactionInput, PatientEncounterUncheckedCreateWithoutTransactionInput>
    connectOrCreate?: PatientEncounterCreateOrConnectWithoutTransactionInput
    connect?: PatientEncounterWhereUniqueInput
  }

  export type TransactionItemCreateNestedManyWithoutTransactionInput = {
    create?: XOR<TransactionItemCreateWithoutTransactionInput, TransactionItemUncheckedCreateWithoutTransactionInput> | TransactionItemCreateWithoutTransactionInput[] | TransactionItemUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: TransactionItemCreateOrConnectWithoutTransactionInput | TransactionItemCreateOrConnectWithoutTransactionInput[]
    createMany?: TransactionItemCreateManyTransactionInputEnvelope
    connect?: TransactionItemWhereUniqueInput | TransactionItemWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutTransactionInput = {
    create?: XOR<PaymentCreateWithoutTransactionInput, PaymentUncheckedCreateWithoutTransactionInput> | PaymentCreateWithoutTransactionInput[] | PaymentUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutTransactionInput | PaymentCreateOrConnectWithoutTransactionInput[]
    createMany?: PaymentCreateManyTransactionInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type TransactionItemUncheckedCreateNestedManyWithoutTransactionInput = {
    create?: XOR<TransactionItemCreateWithoutTransactionInput, TransactionItemUncheckedCreateWithoutTransactionInput> | TransactionItemCreateWithoutTransactionInput[] | TransactionItemUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: TransactionItemCreateOrConnectWithoutTransactionInput | TransactionItemCreateOrConnectWithoutTransactionInput[]
    createMany?: TransactionItemCreateManyTransactionInputEnvelope
    connect?: TransactionItemWhereUniqueInput | TransactionItemWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutTransactionInput = {
    create?: XOR<PaymentCreateWithoutTransactionInput, PaymentUncheckedCreateWithoutTransactionInput> | PaymentCreateWithoutTransactionInput[] | PaymentUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutTransactionInput | PaymentCreateOrConnectWithoutTransactionInput[]
    createMany?: PaymentCreateManyTransactionInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type PatientEncounterUpdateOneRequiredWithoutTransactionNestedInput = {
    create?: XOR<PatientEncounterCreateWithoutTransactionInput, PatientEncounterUncheckedCreateWithoutTransactionInput>
    connectOrCreate?: PatientEncounterCreateOrConnectWithoutTransactionInput
    upsert?: PatientEncounterUpsertWithoutTransactionInput
    connect?: PatientEncounterWhereUniqueInput
    update?: XOR<XOR<PatientEncounterUpdateToOneWithWhereWithoutTransactionInput, PatientEncounterUpdateWithoutTransactionInput>, PatientEncounterUncheckedUpdateWithoutTransactionInput>
  }

  export type TransactionItemUpdateManyWithoutTransactionNestedInput = {
    create?: XOR<TransactionItemCreateWithoutTransactionInput, TransactionItemUncheckedCreateWithoutTransactionInput> | TransactionItemCreateWithoutTransactionInput[] | TransactionItemUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: TransactionItemCreateOrConnectWithoutTransactionInput | TransactionItemCreateOrConnectWithoutTransactionInput[]
    upsert?: TransactionItemUpsertWithWhereUniqueWithoutTransactionInput | TransactionItemUpsertWithWhereUniqueWithoutTransactionInput[]
    createMany?: TransactionItemCreateManyTransactionInputEnvelope
    set?: TransactionItemWhereUniqueInput | TransactionItemWhereUniqueInput[]
    disconnect?: TransactionItemWhereUniqueInput | TransactionItemWhereUniqueInput[]
    delete?: TransactionItemWhereUniqueInput | TransactionItemWhereUniqueInput[]
    connect?: TransactionItemWhereUniqueInput | TransactionItemWhereUniqueInput[]
    update?: TransactionItemUpdateWithWhereUniqueWithoutTransactionInput | TransactionItemUpdateWithWhereUniqueWithoutTransactionInput[]
    updateMany?: TransactionItemUpdateManyWithWhereWithoutTransactionInput | TransactionItemUpdateManyWithWhereWithoutTransactionInput[]
    deleteMany?: TransactionItemScalarWhereInput | TransactionItemScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutTransactionNestedInput = {
    create?: XOR<PaymentCreateWithoutTransactionInput, PaymentUncheckedCreateWithoutTransactionInput> | PaymentCreateWithoutTransactionInput[] | PaymentUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutTransactionInput | PaymentCreateOrConnectWithoutTransactionInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutTransactionInput | PaymentUpsertWithWhereUniqueWithoutTransactionInput[]
    createMany?: PaymentCreateManyTransactionInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutTransactionInput | PaymentUpdateWithWhereUniqueWithoutTransactionInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutTransactionInput | PaymentUpdateManyWithWhereWithoutTransactionInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type TransactionItemUncheckedUpdateManyWithoutTransactionNestedInput = {
    create?: XOR<TransactionItemCreateWithoutTransactionInput, TransactionItemUncheckedCreateWithoutTransactionInput> | TransactionItemCreateWithoutTransactionInput[] | TransactionItemUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: TransactionItemCreateOrConnectWithoutTransactionInput | TransactionItemCreateOrConnectWithoutTransactionInput[]
    upsert?: TransactionItemUpsertWithWhereUniqueWithoutTransactionInput | TransactionItemUpsertWithWhereUniqueWithoutTransactionInput[]
    createMany?: TransactionItemCreateManyTransactionInputEnvelope
    set?: TransactionItemWhereUniqueInput | TransactionItemWhereUniqueInput[]
    disconnect?: TransactionItemWhereUniqueInput | TransactionItemWhereUniqueInput[]
    delete?: TransactionItemWhereUniqueInput | TransactionItemWhereUniqueInput[]
    connect?: TransactionItemWhereUniqueInput | TransactionItemWhereUniqueInput[]
    update?: TransactionItemUpdateWithWhereUniqueWithoutTransactionInput | TransactionItemUpdateWithWhereUniqueWithoutTransactionInput[]
    updateMany?: TransactionItemUpdateManyWithWhereWithoutTransactionInput | TransactionItemUpdateManyWithWhereWithoutTransactionInput[]
    deleteMany?: TransactionItemScalarWhereInput | TransactionItemScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutTransactionNestedInput = {
    create?: XOR<PaymentCreateWithoutTransactionInput, PaymentUncheckedCreateWithoutTransactionInput> | PaymentCreateWithoutTransactionInput[] | PaymentUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutTransactionInput | PaymentCreateOrConnectWithoutTransactionInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutTransactionInput | PaymentUpsertWithWhereUniqueWithoutTransactionInput[]
    createMany?: PaymentCreateManyTransactionInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutTransactionInput | PaymentUpdateWithWhereUniqueWithoutTransactionInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutTransactionInput | PaymentUpdateManyWithWhereWithoutTransactionInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type TransactionCreateNestedOneWithoutItemsInput = {
    create?: XOR<TransactionCreateWithoutItemsInput, TransactionUncheckedCreateWithoutItemsInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutItemsInput
    connect?: TransactionWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TransactionUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<TransactionCreateWithoutItemsInput, TransactionUncheckedCreateWithoutItemsInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutItemsInput
    upsert?: TransactionUpsertWithoutItemsInput
    connect?: TransactionWhereUniqueInput
    update?: XOR<XOR<TransactionUpdateToOneWithWhereWithoutItemsInput, TransactionUpdateWithoutItemsInput>, TransactionUncheckedUpdateWithoutItemsInput>
  }

  export type PaymentInstalmentCreateNestedManyWithoutPlanInput = {
    create?: XOR<PaymentInstalmentCreateWithoutPlanInput, PaymentInstalmentUncheckedCreateWithoutPlanInput> | PaymentInstalmentCreateWithoutPlanInput[] | PaymentInstalmentUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PaymentInstalmentCreateOrConnectWithoutPlanInput | PaymentInstalmentCreateOrConnectWithoutPlanInput[]
    createMany?: PaymentInstalmentCreateManyPlanInputEnvelope
    connect?: PaymentInstalmentWhereUniqueInput | PaymentInstalmentWhereUniqueInput[]
  }

  export type PaymentInstalmentUncheckedCreateNestedManyWithoutPlanInput = {
    create?: XOR<PaymentInstalmentCreateWithoutPlanInput, PaymentInstalmentUncheckedCreateWithoutPlanInput> | PaymentInstalmentCreateWithoutPlanInput[] | PaymentInstalmentUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PaymentInstalmentCreateOrConnectWithoutPlanInput | PaymentInstalmentCreateOrConnectWithoutPlanInput[]
    createMany?: PaymentInstalmentCreateManyPlanInputEnvelope
    connect?: PaymentInstalmentWhereUniqueInput | PaymentInstalmentWhereUniqueInput[]
  }

  export type PaymentInstalmentUpdateManyWithoutPlanNestedInput = {
    create?: XOR<PaymentInstalmentCreateWithoutPlanInput, PaymentInstalmentUncheckedCreateWithoutPlanInput> | PaymentInstalmentCreateWithoutPlanInput[] | PaymentInstalmentUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PaymentInstalmentCreateOrConnectWithoutPlanInput | PaymentInstalmentCreateOrConnectWithoutPlanInput[]
    upsert?: PaymentInstalmentUpsertWithWhereUniqueWithoutPlanInput | PaymentInstalmentUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: PaymentInstalmentCreateManyPlanInputEnvelope
    set?: PaymentInstalmentWhereUniqueInput | PaymentInstalmentWhereUniqueInput[]
    disconnect?: PaymentInstalmentWhereUniqueInput | PaymentInstalmentWhereUniqueInput[]
    delete?: PaymentInstalmentWhereUniqueInput | PaymentInstalmentWhereUniqueInput[]
    connect?: PaymentInstalmentWhereUniqueInput | PaymentInstalmentWhereUniqueInput[]
    update?: PaymentInstalmentUpdateWithWhereUniqueWithoutPlanInput | PaymentInstalmentUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: PaymentInstalmentUpdateManyWithWhereWithoutPlanInput | PaymentInstalmentUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: PaymentInstalmentScalarWhereInput | PaymentInstalmentScalarWhereInput[]
  }

  export type PaymentInstalmentUncheckedUpdateManyWithoutPlanNestedInput = {
    create?: XOR<PaymentInstalmentCreateWithoutPlanInput, PaymentInstalmentUncheckedCreateWithoutPlanInput> | PaymentInstalmentCreateWithoutPlanInput[] | PaymentInstalmentUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PaymentInstalmentCreateOrConnectWithoutPlanInput | PaymentInstalmentCreateOrConnectWithoutPlanInput[]
    upsert?: PaymentInstalmentUpsertWithWhereUniqueWithoutPlanInput | PaymentInstalmentUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: PaymentInstalmentCreateManyPlanInputEnvelope
    set?: PaymentInstalmentWhereUniqueInput | PaymentInstalmentWhereUniqueInput[]
    disconnect?: PaymentInstalmentWhereUniqueInput | PaymentInstalmentWhereUniqueInput[]
    delete?: PaymentInstalmentWhereUniqueInput | PaymentInstalmentWhereUniqueInput[]
    connect?: PaymentInstalmentWhereUniqueInput | PaymentInstalmentWhereUniqueInput[]
    update?: PaymentInstalmentUpdateWithWhereUniqueWithoutPlanInput | PaymentInstalmentUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: PaymentInstalmentUpdateManyWithWhereWithoutPlanInput | PaymentInstalmentUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: PaymentInstalmentScalarWhereInput | PaymentInstalmentScalarWhereInput[]
  }

  export type TransactionCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<TransactionCreateWithoutPaymentsInput, TransactionUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutPaymentsInput
    connect?: TransactionWhereUniqueInput
  }

  export type PaymentInstalmentCreateNestedManyWithoutPaymentInput = {
    create?: XOR<PaymentInstalmentCreateWithoutPaymentInput, PaymentInstalmentUncheckedCreateWithoutPaymentInput> | PaymentInstalmentCreateWithoutPaymentInput[] | PaymentInstalmentUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: PaymentInstalmentCreateOrConnectWithoutPaymentInput | PaymentInstalmentCreateOrConnectWithoutPaymentInput[]
    createMany?: PaymentInstalmentCreateManyPaymentInputEnvelope
    connect?: PaymentInstalmentWhereUniqueInput | PaymentInstalmentWhereUniqueInput[]
  }

  export type PaymentInstalmentUncheckedCreateNestedManyWithoutPaymentInput = {
    create?: XOR<PaymentInstalmentCreateWithoutPaymentInput, PaymentInstalmentUncheckedCreateWithoutPaymentInput> | PaymentInstalmentCreateWithoutPaymentInput[] | PaymentInstalmentUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: PaymentInstalmentCreateOrConnectWithoutPaymentInput | PaymentInstalmentCreateOrConnectWithoutPaymentInput[]
    createMany?: PaymentInstalmentCreateManyPaymentInputEnvelope
    connect?: PaymentInstalmentWhereUniqueInput | PaymentInstalmentWhereUniqueInput[]
  }

  export type TransactionUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<TransactionCreateWithoutPaymentsInput, TransactionUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutPaymentsInput
    upsert?: TransactionUpsertWithoutPaymentsInput
    connect?: TransactionWhereUniqueInput
    update?: XOR<XOR<TransactionUpdateToOneWithWhereWithoutPaymentsInput, TransactionUpdateWithoutPaymentsInput>, TransactionUncheckedUpdateWithoutPaymentsInput>
  }

  export type PaymentInstalmentUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<PaymentInstalmentCreateWithoutPaymentInput, PaymentInstalmentUncheckedCreateWithoutPaymentInput> | PaymentInstalmentCreateWithoutPaymentInput[] | PaymentInstalmentUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: PaymentInstalmentCreateOrConnectWithoutPaymentInput | PaymentInstalmentCreateOrConnectWithoutPaymentInput[]
    upsert?: PaymentInstalmentUpsertWithWhereUniqueWithoutPaymentInput | PaymentInstalmentUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: PaymentInstalmentCreateManyPaymentInputEnvelope
    set?: PaymentInstalmentWhereUniqueInput | PaymentInstalmentWhereUniqueInput[]
    disconnect?: PaymentInstalmentWhereUniqueInput | PaymentInstalmentWhereUniqueInput[]
    delete?: PaymentInstalmentWhereUniqueInput | PaymentInstalmentWhereUniqueInput[]
    connect?: PaymentInstalmentWhereUniqueInput | PaymentInstalmentWhereUniqueInput[]
    update?: PaymentInstalmentUpdateWithWhereUniqueWithoutPaymentInput | PaymentInstalmentUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: PaymentInstalmentUpdateManyWithWhereWithoutPaymentInput | PaymentInstalmentUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: PaymentInstalmentScalarWhereInput | PaymentInstalmentScalarWhereInput[]
  }

  export type PaymentInstalmentUncheckedUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<PaymentInstalmentCreateWithoutPaymentInput, PaymentInstalmentUncheckedCreateWithoutPaymentInput> | PaymentInstalmentCreateWithoutPaymentInput[] | PaymentInstalmentUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: PaymentInstalmentCreateOrConnectWithoutPaymentInput | PaymentInstalmentCreateOrConnectWithoutPaymentInput[]
    upsert?: PaymentInstalmentUpsertWithWhereUniqueWithoutPaymentInput | PaymentInstalmentUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: PaymentInstalmentCreateManyPaymentInputEnvelope
    set?: PaymentInstalmentWhereUniqueInput | PaymentInstalmentWhereUniqueInput[]
    disconnect?: PaymentInstalmentWhereUniqueInput | PaymentInstalmentWhereUniqueInput[]
    delete?: PaymentInstalmentWhereUniqueInput | PaymentInstalmentWhereUniqueInput[]
    connect?: PaymentInstalmentWhereUniqueInput | PaymentInstalmentWhereUniqueInput[]
    update?: PaymentInstalmentUpdateWithWhereUniqueWithoutPaymentInput | PaymentInstalmentUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: PaymentInstalmentUpdateManyWithWhereWithoutPaymentInput | PaymentInstalmentUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: PaymentInstalmentScalarWhereInput | PaymentInstalmentScalarWhereInput[]
  }

  export type PaymentCreateNestedOneWithoutInstalmentsInput = {
    create?: XOR<PaymentCreateWithoutInstalmentsInput, PaymentUncheckedCreateWithoutInstalmentsInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutInstalmentsInput
    connect?: PaymentWhereUniqueInput
  }

  export type PaymentPlanCreateNestedOneWithoutInstalmentsInput = {
    create?: XOR<PaymentPlanCreateWithoutInstalmentsInput, PaymentPlanUncheckedCreateWithoutInstalmentsInput>
    connectOrCreate?: PaymentPlanCreateOrConnectWithoutInstalmentsInput
    connect?: PaymentPlanWhereUniqueInput
  }

  export type PaymentUpdateOneRequiredWithoutInstalmentsNestedInput = {
    create?: XOR<PaymentCreateWithoutInstalmentsInput, PaymentUncheckedCreateWithoutInstalmentsInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutInstalmentsInput
    upsert?: PaymentUpsertWithoutInstalmentsInput
    connect?: PaymentWhereUniqueInput
    update?: XOR<XOR<PaymentUpdateToOneWithWhereWithoutInstalmentsInput, PaymentUpdateWithoutInstalmentsInput>, PaymentUncheckedUpdateWithoutInstalmentsInput>
  }

  export type PaymentPlanUpdateOneRequiredWithoutInstalmentsNestedInput = {
    create?: XOR<PaymentPlanCreateWithoutInstalmentsInput, PaymentPlanUncheckedCreateWithoutInstalmentsInput>
    connectOrCreate?: PaymentPlanCreateOrConnectWithoutInstalmentsInput
    upsert?: PaymentPlanUpsertWithoutInstalmentsInput
    connect?: PaymentPlanWhereUniqueInput
    update?: XOR<XOR<PaymentPlanUpdateToOneWithWhereWithoutInstalmentsInput, PaymentPlanUpdateWithoutInstalmentsInput>, PaymentPlanUncheckedUpdateWithoutInstalmentsInput>
  }

  export type ClinicScheduleCreateNestedManyWithoutClinicInput = {
    create?: XOR<ClinicScheduleCreateWithoutClinicInput, ClinicScheduleUncheckedCreateWithoutClinicInput> | ClinicScheduleCreateWithoutClinicInput[] | ClinicScheduleUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: ClinicScheduleCreateOrConnectWithoutClinicInput | ClinicScheduleCreateOrConnectWithoutClinicInput[]
    createMany?: ClinicScheduleCreateManyClinicInputEnvelope
    connect?: ClinicScheduleWhereUniqueInput | ClinicScheduleWhereUniqueInput[]
  }

  export type ClinicScheduleUncheckedCreateNestedManyWithoutClinicInput = {
    create?: XOR<ClinicScheduleCreateWithoutClinicInput, ClinicScheduleUncheckedCreateWithoutClinicInput> | ClinicScheduleCreateWithoutClinicInput[] | ClinicScheduleUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: ClinicScheduleCreateOrConnectWithoutClinicInput | ClinicScheduleCreateOrConnectWithoutClinicInput[]
    createMany?: ClinicScheduleCreateManyClinicInputEnvelope
    connect?: ClinicScheduleWhereUniqueInput | ClinicScheduleWhereUniqueInput[]
  }

  export type ClinicScheduleUpdateManyWithoutClinicNestedInput = {
    create?: XOR<ClinicScheduleCreateWithoutClinicInput, ClinicScheduleUncheckedCreateWithoutClinicInput> | ClinicScheduleCreateWithoutClinicInput[] | ClinicScheduleUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: ClinicScheduleCreateOrConnectWithoutClinicInput | ClinicScheduleCreateOrConnectWithoutClinicInput[]
    upsert?: ClinicScheduleUpsertWithWhereUniqueWithoutClinicInput | ClinicScheduleUpsertWithWhereUniqueWithoutClinicInput[]
    createMany?: ClinicScheduleCreateManyClinicInputEnvelope
    set?: ClinicScheduleWhereUniqueInput | ClinicScheduleWhereUniqueInput[]
    disconnect?: ClinicScheduleWhereUniqueInput | ClinicScheduleWhereUniqueInput[]
    delete?: ClinicScheduleWhereUniqueInput | ClinicScheduleWhereUniqueInput[]
    connect?: ClinicScheduleWhereUniqueInput | ClinicScheduleWhereUniqueInput[]
    update?: ClinicScheduleUpdateWithWhereUniqueWithoutClinicInput | ClinicScheduleUpdateWithWhereUniqueWithoutClinicInput[]
    updateMany?: ClinicScheduleUpdateManyWithWhereWithoutClinicInput | ClinicScheduleUpdateManyWithWhereWithoutClinicInput[]
    deleteMany?: ClinicScheduleScalarWhereInput | ClinicScheduleScalarWhereInput[]
  }

  export type ClinicScheduleUncheckedUpdateManyWithoutClinicNestedInput = {
    create?: XOR<ClinicScheduleCreateWithoutClinicInput, ClinicScheduleUncheckedCreateWithoutClinicInput> | ClinicScheduleCreateWithoutClinicInput[] | ClinicScheduleUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: ClinicScheduleCreateOrConnectWithoutClinicInput | ClinicScheduleCreateOrConnectWithoutClinicInput[]
    upsert?: ClinicScheduleUpsertWithWhereUniqueWithoutClinicInput | ClinicScheduleUpsertWithWhereUniqueWithoutClinicInput[]
    createMany?: ClinicScheduleCreateManyClinicInputEnvelope
    set?: ClinicScheduleWhereUniqueInput | ClinicScheduleWhereUniqueInput[]
    disconnect?: ClinicScheduleWhereUniqueInput | ClinicScheduleWhereUniqueInput[]
    delete?: ClinicScheduleWhereUniqueInput | ClinicScheduleWhereUniqueInput[]
    connect?: ClinicScheduleWhereUniqueInput | ClinicScheduleWhereUniqueInput[]
    update?: ClinicScheduleUpdateWithWhereUniqueWithoutClinicInput | ClinicScheduleUpdateWithWhereUniqueWithoutClinicInput[]
    updateMany?: ClinicScheduleUpdateManyWithWhereWithoutClinicInput | ClinicScheduleUpdateManyWithWhereWithoutClinicInput[]
    deleteMany?: ClinicScheduleScalarWhereInput | ClinicScheduleScalarWhereInput[]
  }

  export type ClinicCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<ClinicCreateWithoutSchedulesInput, ClinicUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: ClinicCreateOrConnectWithoutSchedulesInput
    connect?: ClinicWhereUniqueInput
  }

  export type ClinicUpdateOneRequiredWithoutSchedulesNestedInput = {
    create?: XOR<ClinicCreateWithoutSchedulesInput, ClinicUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: ClinicCreateOrConnectWithoutSchedulesInput
    upsert?: ClinicUpsertWithoutSchedulesInput
    connect?: ClinicWhereUniqueInput
    update?: XOR<XOR<ClinicUpdateToOneWithWhereWithoutSchedulesInput, ClinicUpdateWithoutSchedulesInput>, ClinicUncheckedUpdateWithoutSchedulesInput>
  }

  export type PatientProfileCreateNestedOneWithoutPatientEncountersInput = {
    create?: XOR<PatientProfileCreateWithoutPatientEncountersInput, PatientProfileUncheckedCreateWithoutPatientEncountersInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutPatientEncountersInput
    connect?: PatientProfileWhereUniqueInput
  }

  export type TransactionCreateNestedOneWithoutEncounterInput = {
    create?: XOR<TransactionCreateWithoutEncounterInput, TransactionUncheckedCreateWithoutEncounterInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutEncounterInput
    connect?: TransactionWhereUniqueInput
  }

  export type TransactionUncheckedCreateNestedOneWithoutEncounterInput = {
    create?: XOR<TransactionCreateWithoutEncounterInput, TransactionUncheckedCreateWithoutEncounterInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutEncounterInput
    connect?: TransactionWhereUniqueInput
  }

  export type PatientProfileUpdateOneRequiredWithoutPatientEncountersNestedInput = {
    create?: XOR<PatientProfileCreateWithoutPatientEncountersInput, PatientProfileUncheckedCreateWithoutPatientEncountersInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutPatientEncountersInput
    upsert?: PatientProfileUpsertWithoutPatientEncountersInput
    connect?: PatientProfileWhereUniqueInput
    update?: XOR<XOR<PatientProfileUpdateToOneWithWhereWithoutPatientEncountersInput, PatientProfileUpdateWithoutPatientEncountersInput>, PatientProfileUncheckedUpdateWithoutPatientEncountersInput>
  }

  export type TransactionUpdateOneWithoutEncounterNestedInput = {
    create?: XOR<TransactionCreateWithoutEncounterInput, TransactionUncheckedCreateWithoutEncounterInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutEncounterInput
    upsert?: TransactionUpsertWithoutEncounterInput
    disconnect?: TransactionWhereInput | boolean
    delete?: TransactionWhereInput | boolean
    connect?: TransactionWhereUniqueInput
    update?: XOR<XOR<TransactionUpdateToOneWithWhereWithoutEncounterInput, TransactionUpdateWithoutEncounterInput>, TransactionUncheckedUpdateWithoutEncounterInput>
  }

  export type TransactionUncheckedUpdateOneWithoutEncounterNestedInput = {
    create?: XOR<TransactionCreateWithoutEncounterInput, TransactionUncheckedCreateWithoutEncounterInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutEncounterInput
    upsert?: TransactionUpsertWithoutEncounterInput
    disconnect?: TransactionWhereInput | boolean
    delete?: TransactionWhereInput | boolean
    connect?: TransactionWhereUniqueInput
    update?: XOR<XOR<TransactionUpdateToOneWithWhereWithoutEncounterInput, TransactionUpdateWithoutEncounterInput>, TransactionUncheckedUpdateWithoutEncounterInput>
  }

  export type PatientProfileCreateNestedOneWithoutOutpatientEncountersInput = {
    create?: XOR<PatientProfileCreateWithoutOutpatientEncountersInput, PatientProfileUncheckedCreateWithoutOutpatientEncountersInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutOutpatientEncountersInput
    connect?: PatientProfileWhereUniqueInput
  }

  export type EnumOutpatientEncounterTypeFieldUpdateOperationsInput = {
    set?: $Enums.OutpatientEncounterType
  }

  export type PatientProfileUpdateOneRequiredWithoutOutpatientEncountersNestedInput = {
    create?: XOR<PatientProfileCreateWithoutOutpatientEncountersInput, PatientProfileUncheckedCreateWithoutOutpatientEncountersInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutOutpatientEncountersInput
    upsert?: PatientProfileUpsertWithoutOutpatientEncountersInput
    connect?: PatientProfileWhereUniqueInput
    update?: XOR<XOR<PatientProfileUpdateToOneWithWhereWithoutOutpatientEncountersInput, PatientProfileUpdateWithoutOutpatientEncountersInput>, PatientProfileUncheckedUpdateWithoutOutpatientEncountersInput>
  }

  export type PatientProfileCreateNestedOneWithoutInpatientEncountersInput = {
    create?: XOR<PatientProfileCreateWithoutInpatientEncountersInput, PatientProfileUncheckedCreateWithoutInpatientEncountersInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutInpatientEncountersInput
    connect?: PatientProfileWhereUniqueInput
  }

  export type InpatientEncounterChartCreateNestedManyWithoutEncounterInput = {
    create?: XOR<InpatientEncounterChartCreateWithoutEncounterInput, InpatientEncounterChartUncheckedCreateWithoutEncounterInput> | InpatientEncounterChartCreateWithoutEncounterInput[] | InpatientEncounterChartUncheckedCreateWithoutEncounterInput[]
    connectOrCreate?: InpatientEncounterChartCreateOrConnectWithoutEncounterInput | InpatientEncounterChartCreateOrConnectWithoutEncounterInput[]
    createMany?: InpatientEncounterChartCreateManyEncounterInputEnvelope
    connect?: InpatientEncounterChartWhereUniqueInput | InpatientEncounterChartWhereUniqueInput[]
  }

  export type InpatientEncounterOrderCreateNestedManyWithoutEncounterInput = {
    create?: XOR<InpatientEncounterOrderCreateWithoutEncounterInput, InpatientEncounterOrderUncheckedCreateWithoutEncounterInput> | InpatientEncounterOrderCreateWithoutEncounterInput[] | InpatientEncounterOrderUncheckedCreateWithoutEncounterInput[]
    connectOrCreate?: InpatientEncounterOrderCreateOrConnectWithoutEncounterInput | InpatientEncounterOrderCreateOrConnectWithoutEncounterInput[]
    createMany?: InpatientEncounterOrderCreateManyEncounterInputEnvelope
    connect?: InpatientEncounterOrderWhereUniqueInput | InpatientEncounterOrderWhereUniqueInput[]
  }

  export type MedicalRecordRequestCreateNestedManyWithoutInpatientEncounterInput = {
    create?: XOR<MedicalRecordRequestCreateWithoutInpatientEncounterInput, MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput> | MedicalRecordRequestCreateWithoutInpatientEncounterInput[] | MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput[]
    connectOrCreate?: MedicalRecordRequestCreateOrConnectWithoutInpatientEncounterInput | MedicalRecordRequestCreateOrConnectWithoutInpatientEncounterInput[]
    createMany?: MedicalRecordRequestCreateManyInpatientEncounterInputEnvelope
    connect?: MedicalRecordRequestWhereUniqueInput | MedicalRecordRequestWhereUniqueInput[]
  }

  export type InpatientEncounterChartUncheckedCreateNestedManyWithoutEncounterInput = {
    create?: XOR<InpatientEncounterChartCreateWithoutEncounterInput, InpatientEncounterChartUncheckedCreateWithoutEncounterInput> | InpatientEncounterChartCreateWithoutEncounterInput[] | InpatientEncounterChartUncheckedCreateWithoutEncounterInput[]
    connectOrCreate?: InpatientEncounterChartCreateOrConnectWithoutEncounterInput | InpatientEncounterChartCreateOrConnectWithoutEncounterInput[]
    createMany?: InpatientEncounterChartCreateManyEncounterInputEnvelope
    connect?: InpatientEncounterChartWhereUniqueInput | InpatientEncounterChartWhereUniqueInput[]
  }

  export type InpatientEncounterOrderUncheckedCreateNestedManyWithoutEncounterInput = {
    create?: XOR<InpatientEncounterOrderCreateWithoutEncounterInput, InpatientEncounterOrderUncheckedCreateWithoutEncounterInput> | InpatientEncounterOrderCreateWithoutEncounterInput[] | InpatientEncounterOrderUncheckedCreateWithoutEncounterInput[]
    connectOrCreate?: InpatientEncounterOrderCreateOrConnectWithoutEncounterInput | InpatientEncounterOrderCreateOrConnectWithoutEncounterInput[]
    createMany?: InpatientEncounterOrderCreateManyEncounterInputEnvelope
    connect?: InpatientEncounterOrderWhereUniqueInput | InpatientEncounterOrderWhereUniqueInput[]
  }

  export type MedicalRecordRequestUncheckedCreateNestedManyWithoutInpatientEncounterInput = {
    create?: XOR<MedicalRecordRequestCreateWithoutInpatientEncounterInput, MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput> | MedicalRecordRequestCreateWithoutInpatientEncounterInput[] | MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput[]
    connectOrCreate?: MedicalRecordRequestCreateOrConnectWithoutInpatientEncounterInput | MedicalRecordRequestCreateOrConnectWithoutInpatientEncounterInput[]
    createMany?: MedicalRecordRequestCreateManyInpatientEncounterInputEnvelope
    connect?: MedicalRecordRequestWhereUniqueInput | MedicalRecordRequestWhereUniqueInput[]
  }

  export type EnumInpatientTriageFieldUpdateOperationsInput = {
    set?: $Enums.InpatientTriage
  }

  export type EnumInpatientDispositionFieldUpdateOperationsInput = {
    set?: $Enums.InpatientDisposition
  }

  export type PatientProfileUpdateOneRequiredWithoutInpatientEncountersNestedInput = {
    create?: XOR<PatientProfileCreateWithoutInpatientEncountersInput, PatientProfileUncheckedCreateWithoutInpatientEncountersInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutInpatientEncountersInput
    upsert?: PatientProfileUpsertWithoutInpatientEncountersInput
    connect?: PatientProfileWhereUniqueInput
    update?: XOR<XOR<PatientProfileUpdateToOneWithWhereWithoutInpatientEncountersInput, PatientProfileUpdateWithoutInpatientEncountersInput>, PatientProfileUncheckedUpdateWithoutInpatientEncountersInput>
  }

  export type InpatientEncounterChartUpdateManyWithoutEncounterNestedInput = {
    create?: XOR<InpatientEncounterChartCreateWithoutEncounterInput, InpatientEncounterChartUncheckedCreateWithoutEncounterInput> | InpatientEncounterChartCreateWithoutEncounterInput[] | InpatientEncounterChartUncheckedCreateWithoutEncounterInput[]
    connectOrCreate?: InpatientEncounterChartCreateOrConnectWithoutEncounterInput | InpatientEncounterChartCreateOrConnectWithoutEncounterInput[]
    upsert?: InpatientEncounterChartUpsertWithWhereUniqueWithoutEncounterInput | InpatientEncounterChartUpsertWithWhereUniqueWithoutEncounterInput[]
    createMany?: InpatientEncounterChartCreateManyEncounterInputEnvelope
    set?: InpatientEncounterChartWhereUniqueInput | InpatientEncounterChartWhereUniqueInput[]
    disconnect?: InpatientEncounterChartWhereUniqueInput | InpatientEncounterChartWhereUniqueInput[]
    delete?: InpatientEncounterChartWhereUniqueInput | InpatientEncounterChartWhereUniqueInput[]
    connect?: InpatientEncounterChartWhereUniqueInput | InpatientEncounterChartWhereUniqueInput[]
    update?: InpatientEncounterChartUpdateWithWhereUniqueWithoutEncounterInput | InpatientEncounterChartUpdateWithWhereUniqueWithoutEncounterInput[]
    updateMany?: InpatientEncounterChartUpdateManyWithWhereWithoutEncounterInput | InpatientEncounterChartUpdateManyWithWhereWithoutEncounterInput[]
    deleteMany?: InpatientEncounterChartScalarWhereInput | InpatientEncounterChartScalarWhereInput[]
  }

  export type InpatientEncounterOrderUpdateManyWithoutEncounterNestedInput = {
    create?: XOR<InpatientEncounterOrderCreateWithoutEncounterInput, InpatientEncounterOrderUncheckedCreateWithoutEncounterInput> | InpatientEncounterOrderCreateWithoutEncounterInput[] | InpatientEncounterOrderUncheckedCreateWithoutEncounterInput[]
    connectOrCreate?: InpatientEncounterOrderCreateOrConnectWithoutEncounterInput | InpatientEncounterOrderCreateOrConnectWithoutEncounterInput[]
    upsert?: InpatientEncounterOrderUpsertWithWhereUniqueWithoutEncounterInput | InpatientEncounterOrderUpsertWithWhereUniqueWithoutEncounterInput[]
    createMany?: InpatientEncounterOrderCreateManyEncounterInputEnvelope
    set?: InpatientEncounterOrderWhereUniqueInput | InpatientEncounterOrderWhereUniqueInput[]
    disconnect?: InpatientEncounterOrderWhereUniqueInput | InpatientEncounterOrderWhereUniqueInput[]
    delete?: InpatientEncounterOrderWhereUniqueInput | InpatientEncounterOrderWhereUniqueInput[]
    connect?: InpatientEncounterOrderWhereUniqueInput | InpatientEncounterOrderWhereUniqueInput[]
    update?: InpatientEncounterOrderUpdateWithWhereUniqueWithoutEncounterInput | InpatientEncounterOrderUpdateWithWhereUniqueWithoutEncounterInput[]
    updateMany?: InpatientEncounterOrderUpdateManyWithWhereWithoutEncounterInput | InpatientEncounterOrderUpdateManyWithWhereWithoutEncounterInput[]
    deleteMany?: InpatientEncounterOrderScalarWhereInput | InpatientEncounterOrderScalarWhereInput[]
  }

  export type MedicalRecordRequestUpdateManyWithoutInpatientEncounterNestedInput = {
    create?: XOR<MedicalRecordRequestCreateWithoutInpatientEncounterInput, MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput> | MedicalRecordRequestCreateWithoutInpatientEncounterInput[] | MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput[]
    connectOrCreate?: MedicalRecordRequestCreateOrConnectWithoutInpatientEncounterInput | MedicalRecordRequestCreateOrConnectWithoutInpatientEncounterInput[]
    upsert?: MedicalRecordRequestUpsertWithWhereUniqueWithoutInpatientEncounterInput | MedicalRecordRequestUpsertWithWhereUniqueWithoutInpatientEncounterInput[]
    createMany?: MedicalRecordRequestCreateManyInpatientEncounterInputEnvelope
    set?: MedicalRecordRequestWhereUniqueInput | MedicalRecordRequestWhereUniqueInput[]
    disconnect?: MedicalRecordRequestWhereUniqueInput | MedicalRecordRequestWhereUniqueInput[]
    delete?: MedicalRecordRequestWhereUniqueInput | MedicalRecordRequestWhereUniqueInput[]
    connect?: MedicalRecordRequestWhereUniqueInput | MedicalRecordRequestWhereUniqueInput[]
    update?: MedicalRecordRequestUpdateWithWhereUniqueWithoutInpatientEncounterInput | MedicalRecordRequestUpdateWithWhereUniqueWithoutInpatientEncounterInput[]
    updateMany?: MedicalRecordRequestUpdateManyWithWhereWithoutInpatientEncounterInput | MedicalRecordRequestUpdateManyWithWhereWithoutInpatientEncounterInput[]
    deleteMany?: MedicalRecordRequestScalarWhereInput | MedicalRecordRequestScalarWhereInput[]
  }

  export type InpatientEncounterChartUncheckedUpdateManyWithoutEncounterNestedInput = {
    create?: XOR<InpatientEncounterChartCreateWithoutEncounterInput, InpatientEncounterChartUncheckedCreateWithoutEncounterInput> | InpatientEncounterChartCreateWithoutEncounterInput[] | InpatientEncounterChartUncheckedCreateWithoutEncounterInput[]
    connectOrCreate?: InpatientEncounterChartCreateOrConnectWithoutEncounterInput | InpatientEncounterChartCreateOrConnectWithoutEncounterInput[]
    upsert?: InpatientEncounterChartUpsertWithWhereUniqueWithoutEncounterInput | InpatientEncounterChartUpsertWithWhereUniqueWithoutEncounterInput[]
    createMany?: InpatientEncounterChartCreateManyEncounterInputEnvelope
    set?: InpatientEncounterChartWhereUniqueInput | InpatientEncounterChartWhereUniqueInput[]
    disconnect?: InpatientEncounterChartWhereUniqueInput | InpatientEncounterChartWhereUniqueInput[]
    delete?: InpatientEncounterChartWhereUniqueInput | InpatientEncounterChartWhereUniqueInput[]
    connect?: InpatientEncounterChartWhereUniqueInput | InpatientEncounterChartWhereUniqueInput[]
    update?: InpatientEncounterChartUpdateWithWhereUniqueWithoutEncounterInput | InpatientEncounterChartUpdateWithWhereUniqueWithoutEncounterInput[]
    updateMany?: InpatientEncounterChartUpdateManyWithWhereWithoutEncounterInput | InpatientEncounterChartUpdateManyWithWhereWithoutEncounterInput[]
    deleteMany?: InpatientEncounterChartScalarWhereInput | InpatientEncounterChartScalarWhereInput[]
  }

  export type InpatientEncounterOrderUncheckedUpdateManyWithoutEncounterNestedInput = {
    create?: XOR<InpatientEncounterOrderCreateWithoutEncounterInput, InpatientEncounterOrderUncheckedCreateWithoutEncounterInput> | InpatientEncounterOrderCreateWithoutEncounterInput[] | InpatientEncounterOrderUncheckedCreateWithoutEncounterInput[]
    connectOrCreate?: InpatientEncounterOrderCreateOrConnectWithoutEncounterInput | InpatientEncounterOrderCreateOrConnectWithoutEncounterInput[]
    upsert?: InpatientEncounterOrderUpsertWithWhereUniqueWithoutEncounterInput | InpatientEncounterOrderUpsertWithWhereUniqueWithoutEncounterInput[]
    createMany?: InpatientEncounterOrderCreateManyEncounterInputEnvelope
    set?: InpatientEncounterOrderWhereUniqueInput | InpatientEncounterOrderWhereUniqueInput[]
    disconnect?: InpatientEncounterOrderWhereUniqueInput | InpatientEncounterOrderWhereUniqueInput[]
    delete?: InpatientEncounterOrderWhereUniqueInput | InpatientEncounterOrderWhereUniqueInput[]
    connect?: InpatientEncounterOrderWhereUniqueInput | InpatientEncounterOrderWhereUniqueInput[]
    update?: InpatientEncounterOrderUpdateWithWhereUniqueWithoutEncounterInput | InpatientEncounterOrderUpdateWithWhereUniqueWithoutEncounterInput[]
    updateMany?: InpatientEncounterOrderUpdateManyWithWhereWithoutEncounterInput | InpatientEncounterOrderUpdateManyWithWhereWithoutEncounterInput[]
    deleteMany?: InpatientEncounterOrderScalarWhereInput | InpatientEncounterOrderScalarWhereInput[]
  }

  export type MedicalRecordRequestUncheckedUpdateManyWithoutInpatientEncounterNestedInput = {
    create?: XOR<MedicalRecordRequestCreateWithoutInpatientEncounterInput, MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput> | MedicalRecordRequestCreateWithoutInpatientEncounterInput[] | MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput[]
    connectOrCreate?: MedicalRecordRequestCreateOrConnectWithoutInpatientEncounterInput | MedicalRecordRequestCreateOrConnectWithoutInpatientEncounterInput[]
    upsert?: MedicalRecordRequestUpsertWithWhereUniqueWithoutInpatientEncounterInput | MedicalRecordRequestUpsertWithWhereUniqueWithoutInpatientEncounterInput[]
    createMany?: MedicalRecordRequestCreateManyInpatientEncounterInputEnvelope
    set?: MedicalRecordRequestWhereUniqueInput | MedicalRecordRequestWhereUniqueInput[]
    disconnect?: MedicalRecordRequestWhereUniqueInput | MedicalRecordRequestWhereUniqueInput[]
    delete?: MedicalRecordRequestWhereUniqueInput | MedicalRecordRequestWhereUniqueInput[]
    connect?: MedicalRecordRequestWhereUniqueInput | MedicalRecordRequestWhereUniqueInput[]
    update?: MedicalRecordRequestUpdateWithWhereUniqueWithoutInpatientEncounterInput | MedicalRecordRequestUpdateWithWhereUniqueWithoutInpatientEncounterInput[]
    updateMany?: MedicalRecordRequestUpdateManyWithWhereWithoutInpatientEncounterInput | MedicalRecordRequestUpdateManyWithWhereWithoutInpatientEncounterInput[]
    deleteMany?: MedicalRecordRequestScalarWhereInput | MedicalRecordRequestScalarWhereInput[]
  }

  export type InpatientEncounterCreateNestedOneWithoutChartsInput = {
    create?: XOR<InpatientEncounterCreateWithoutChartsInput, InpatientEncounterUncheckedCreateWithoutChartsInput>
    connectOrCreate?: InpatientEncounterCreateOrConnectWithoutChartsInput
    connect?: InpatientEncounterWhereUniqueInput
  }

  export type InpatientEncounterUpdateOneRequiredWithoutChartsNestedInput = {
    create?: XOR<InpatientEncounterCreateWithoutChartsInput, InpatientEncounterUncheckedCreateWithoutChartsInput>
    connectOrCreate?: InpatientEncounterCreateOrConnectWithoutChartsInput
    upsert?: InpatientEncounterUpsertWithoutChartsInput
    connect?: InpatientEncounterWhereUniqueInput
    update?: XOR<XOR<InpatientEncounterUpdateToOneWithWhereWithoutChartsInput, InpatientEncounterUpdateWithoutChartsInput>, InpatientEncounterUncheckedUpdateWithoutChartsInput>
  }

  export type InpatientEncounterCreateNestedOneWithoutOrdersInput = {
    create?: XOR<InpatientEncounterCreateWithoutOrdersInput, InpatientEncounterUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: InpatientEncounterCreateOrConnectWithoutOrdersInput
    connect?: InpatientEncounterWhereUniqueInput
  }

  export type EnumInpatientEncounterOrderTypeFieldUpdateOperationsInput = {
    set?: $Enums.InpatientEncounterOrderType
  }

  export type EnumInpatientEncounterOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.InpatientEncounterOrderStatus
  }

  export type InpatientEncounterUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<InpatientEncounterCreateWithoutOrdersInput, InpatientEncounterUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: InpatientEncounterCreateOrConnectWithoutOrdersInput
    upsert?: InpatientEncounterUpsertWithoutOrdersInput
    connect?: InpatientEncounterWhereUniqueInput
    update?: XOR<XOR<InpatientEncounterUpdateToOneWithWhereWithoutOrdersInput, InpatientEncounterUpdateWithoutOrdersInput>, InpatientEncounterUncheckedUpdateWithoutOrdersInput>
  }

  export type RoomCreateNestedManyWithoutBuildingInput = {
    create?: XOR<RoomCreateWithoutBuildingInput, RoomUncheckedCreateWithoutBuildingInput> | RoomCreateWithoutBuildingInput[] | RoomUncheckedCreateWithoutBuildingInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutBuildingInput | RoomCreateOrConnectWithoutBuildingInput[]
    createMany?: RoomCreateManyBuildingInputEnvelope
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
  }

  export type RoomUncheckedCreateNestedManyWithoutBuildingInput = {
    create?: XOR<RoomCreateWithoutBuildingInput, RoomUncheckedCreateWithoutBuildingInput> | RoomCreateWithoutBuildingInput[] | RoomUncheckedCreateWithoutBuildingInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutBuildingInput | RoomCreateOrConnectWithoutBuildingInput[]
    createMany?: RoomCreateManyBuildingInputEnvelope
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
  }

  export type RoomUpdateManyWithoutBuildingNestedInput = {
    create?: XOR<RoomCreateWithoutBuildingInput, RoomUncheckedCreateWithoutBuildingInput> | RoomCreateWithoutBuildingInput[] | RoomUncheckedCreateWithoutBuildingInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutBuildingInput | RoomCreateOrConnectWithoutBuildingInput[]
    upsert?: RoomUpsertWithWhereUniqueWithoutBuildingInput | RoomUpsertWithWhereUniqueWithoutBuildingInput[]
    createMany?: RoomCreateManyBuildingInputEnvelope
    set?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    disconnect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    delete?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    update?: RoomUpdateWithWhereUniqueWithoutBuildingInput | RoomUpdateWithWhereUniqueWithoutBuildingInput[]
    updateMany?: RoomUpdateManyWithWhereWithoutBuildingInput | RoomUpdateManyWithWhereWithoutBuildingInput[]
    deleteMany?: RoomScalarWhereInput | RoomScalarWhereInput[]
  }

  export type RoomUncheckedUpdateManyWithoutBuildingNestedInput = {
    create?: XOR<RoomCreateWithoutBuildingInput, RoomUncheckedCreateWithoutBuildingInput> | RoomCreateWithoutBuildingInput[] | RoomUncheckedCreateWithoutBuildingInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutBuildingInput | RoomCreateOrConnectWithoutBuildingInput[]
    upsert?: RoomUpsertWithWhereUniqueWithoutBuildingInput | RoomUpsertWithWhereUniqueWithoutBuildingInput[]
    createMany?: RoomCreateManyBuildingInputEnvelope
    set?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    disconnect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    delete?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    update?: RoomUpdateWithWhereUniqueWithoutBuildingInput | RoomUpdateWithWhereUniqueWithoutBuildingInput[]
    updateMany?: RoomUpdateManyWithWhereWithoutBuildingInput | RoomUpdateManyWithWhereWithoutBuildingInput[]
    deleteMany?: RoomScalarWhereInput | RoomScalarWhereInput[]
  }

  export type BuildingCreateNestedOneWithoutRoomsInput = {
    create?: XOR<BuildingCreateWithoutRoomsInput, BuildingUncheckedCreateWithoutRoomsInput>
    connectOrCreate?: BuildingCreateOrConnectWithoutRoomsInput
    connect?: BuildingWhereUniqueInput
  }

  export type AppointmentCreateNestedManyWithoutFacilityInput = {
    create?: XOR<AppointmentCreateWithoutFacilityInput, AppointmentUncheckedCreateWithoutFacilityInput> | AppointmentCreateWithoutFacilityInput[] | AppointmentUncheckedCreateWithoutFacilityInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutFacilityInput | AppointmentCreateOrConnectWithoutFacilityInput[]
    createMany?: AppointmentCreateManyFacilityInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutFacilityInput = {
    create?: XOR<AppointmentCreateWithoutFacilityInput, AppointmentUncheckedCreateWithoutFacilityInput> | AppointmentCreateWithoutFacilityInput[] | AppointmentUncheckedCreateWithoutFacilityInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutFacilityInput | AppointmentCreateOrConnectWithoutFacilityInput[]
    createMany?: AppointmentCreateManyFacilityInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type EnumRoomTypeFieldUpdateOperationsInput = {
    set?: $Enums.RoomType
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumRoomStatusFieldUpdateOperationsInput = {
    set?: $Enums.RoomStatus
  }

  export type BuildingUpdateOneRequiredWithoutRoomsNestedInput = {
    create?: XOR<BuildingCreateWithoutRoomsInput, BuildingUncheckedCreateWithoutRoomsInput>
    connectOrCreate?: BuildingCreateOrConnectWithoutRoomsInput
    upsert?: BuildingUpsertWithoutRoomsInput
    connect?: BuildingWhereUniqueInput
    update?: XOR<XOR<BuildingUpdateToOneWithWhereWithoutRoomsInput, BuildingUpdateWithoutRoomsInput>, BuildingUncheckedUpdateWithoutRoomsInput>
  }

  export type AppointmentUpdateManyWithoutFacilityNestedInput = {
    create?: XOR<AppointmentCreateWithoutFacilityInput, AppointmentUncheckedCreateWithoutFacilityInput> | AppointmentCreateWithoutFacilityInput[] | AppointmentUncheckedCreateWithoutFacilityInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutFacilityInput | AppointmentCreateOrConnectWithoutFacilityInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutFacilityInput | AppointmentUpsertWithWhereUniqueWithoutFacilityInput[]
    createMany?: AppointmentCreateManyFacilityInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutFacilityInput | AppointmentUpdateWithWhereUniqueWithoutFacilityInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutFacilityInput | AppointmentUpdateManyWithWhereWithoutFacilityInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutFacilityNestedInput = {
    create?: XOR<AppointmentCreateWithoutFacilityInput, AppointmentUncheckedCreateWithoutFacilityInput> | AppointmentCreateWithoutFacilityInput[] | AppointmentUncheckedCreateWithoutFacilityInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutFacilityInput | AppointmentCreateOrConnectWithoutFacilityInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutFacilityInput | AppointmentUpsertWithWhereUniqueWithoutFacilityInput[]
    createMany?: AppointmentCreateManyFacilityInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutFacilityInput | AppointmentUpdateWithWhereUniqueWithoutFacilityInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutFacilityInput | AppointmentUpdateManyWithWhereWithoutFacilityInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type InsuranceClaimCreateNestedManyWithoutProviderInput = {
    create?: XOR<InsuranceClaimCreateWithoutProviderInput, InsuranceClaimUncheckedCreateWithoutProviderInput> | InsuranceClaimCreateWithoutProviderInput[] | InsuranceClaimUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: InsuranceClaimCreateOrConnectWithoutProviderInput | InsuranceClaimCreateOrConnectWithoutProviderInput[]
    createMany?: InsuranceClaimCreateManyProviderInputEnvelope
    connect?: InsuranceClaimWhereUniqueInput | InsuranceClaimWhereUniqueInput[]
  }

  export type InsuranceClaimUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<InsuranceClaimCreateWithoutProviderInput, InsuranceClaimUncheckedCreateWithoutProviderInput> | InsuranceClaimCreateWithoutProviderInput[] | InsuranceClaimUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: InsuranceClaimCreateOrConnectWithoutProviderInput | InsuranceClaimCreateOrConnectWithoutProviderInput[]
    createMany?: InsuranceClaimCreateManyProviderInputEnvelope
    connect?: InsuranceClaimWhereUniqueInput | InsuranceClaimWhereUniqueInput[]
  }

  export type InsuranceClaimUpdateManyWithoutProviderNestedInput = {
    create?: XOR<InsuranceClaimCreateWithoutProviderInput, InsuranceClaimUncheckedCreateWithoutProviderInput> | InsuranceClaimCreateWithoutProviderInput[] | InsuranceClaimUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: InsuranceClaimCreateOrConnectWithoutProviderInput | InsuranceClaimCreateOrConnectWithoutProviderInput[]
    upsert?: InsuranceClaimUpsertWithWhereUniqueWithoutProviderInput | InsuranceClaimUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: InsuranceClaimCreateManyProviderInputEnvelope
    set?: InsuranceClaimWhereUniqueInput | InsuranceClaimWhereUniqueInput[]
    disconnect?: InsuranceClaimWhereUniqueInput | InsuranceClaimWhereUniqueInput[]
    delete?: InsuranceClaimWhereUniqueInput | InsuranceClaimWhereUniqueInput[]
    connect?: InsuranceClaimWhereUniqueInput | InsuranceClaimWhereUniqueInput[]
    update?: InsuranceClaimUpdateWithWhereUniqueWithoutProviderInput | InsuranceClaimUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: InsuranceClaimUpdateManyWithWhereWithoutProviderInput | InsuranceClaimUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: InsuranceClaimScalarWhereInput | InsuranceClaimScalarWhereInput[]
  }

  export type InsuranceClaimUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<InsuranceClaimCreateWithoutProviderInput, InsuranceClaimUncheckedCreateWithoutProviderInput> | InsuranceClaimCreateWithoutProviderInput[] | InsuranceClaimUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: InsuranceClaimCreateOrConnectWithoutProviderInput | InsuranceClaimCreateOrConnectWithoutProviderInput[]
    upsert?: InsuranceClaimUpsertWithWhereUniqueWithoutProviderInput | InsuranceClaimUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: InsuranceClaimCreateManyProviderInputEnvelope
    set?: InsuranceClaimWhereUniqueInput | InsuranceClaimWhereUniqueInput[]
    disconnect?: InsuranceClaimWhereUniqueInput | InsuranceClaimWhereUniqueInput[]
    delete?: InsuranceClaimWhereUniqueInput | InsuranceClaimWhereUniqueInput[]
    connect?: InsuranceClaimWhereUniqueInput | InsuranceClaimWhereUniqueInput[]
    update?: InsuranceClaimUpdateWithWhereUniqueWithoutProviderInput | InsuranceClaimUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: InsuranceClaimUpdateManyWithWhereWithoutProviderInput | InsuranceClaimUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: InsuranceClaimScalarWhereInput | InsuranceClaimScalarWhereInput[]
  }

  export type InsuranceProviderCreateNestedOneWithoutClaimsInput = {
    create?: XOR<InsuranceProviderCreateWithoutClaimsInput, InsuranceProviderUncheckedCreateWithoutClaimsInput>
    connectOrCreate?: InsuranceProviderCreateOrConnectWithoutClaimsInput
    connect?: InsuranceProviderWhereUniqueInput
  }

  export type InsuranceClaimItemCreateNestedManyWithoutClaimInput = {
    create?: XOR<InsuranceClaimItemCreateWithoutClaimInput, InsuranceClaimItemUncheckedCreateWithoutClaimInput> | InsuranceClaimItemCreateWithoutClaimInput[] | InsuranceClaimItemUncheckedCreateWithoutClaimInput[]
    connectOrCreate?: InsuranceClaimItemCreateOrConnectWithoutClaimInput | InsuranceClaimItemCreateOrConnectWithoutClaimInput[]
    createMany?: InsuranceClaimItemCreateManyClaimInputEnvelope
    connect?: InsuranceClaimItemWhereUniqueInput | InsuranceClaimItemWhereUniqueInput[]
  }

  export type InsuranceClaimItemUncheckedCreateNestedManyWithoutClaimInput = {
    create?: XOR<InsuranceClaimItemCreateWithoutClaimInput, InsuranceClaimItemUncheckedCreateWithoutClaimInput> | InsuranceClaimItemCreateWithoutClaimInput[] | InsuranceClaimItemUncheckedCreateWithoutClaimInput[]
    connectOrCreate?: InsuranceClaimItemCreateOrConnectWithoutClaimInput | InsuranceClaimItemCreateOrConnectWithoutClaimInput[]
    createMany?: InsuranceClaimItemCreateManyClaimInputEnvelope
    connect?: InsuranceClaimItemWhereUniqueInput | InsuranceClaimItemWhereUniqueInput[]
  }

  export type InsuranceProviderUpdateOneRequiredWithoutClaimsNestedInput = {
    create?: XOR<InsuranceProviderCreateWithoutClaimsInput, InsuranceProviderUncheckedCreateWithoutClaimsInput>
    connectOrCreate?: InsuranceProviderCreateOrConnectWithoutClaimsInput
    upsert?: InsuranceProviderUpsertWithoutClaimsInput
    connect?: InsuranceProviderWhereUniqueInput
    update?: XOR<XOR<InsuranceProviderUpdateToOneWithWhereWithoutClaimsInput, InsuranceProviderUpdateWithoutClaimsInput>, InsuranceProviderUncheckedUpdateWithoutClaimsInput>
  }

  export type InsuranceClaimItemUpdateManyWithoutClaimNestedInput = {
    create?: XOR<InsuranceClaimItemCreateWithoutClaimInput, InsuranceClaimItemUncheckedCreateWithoutClaimInput> | InsuranceClaimItemCreateWithoutClaimInput[] | InsuranceClaimItemUncheckedCreateWithoutClaimInput[]
    connectOrCreate?: InsuranceClaimItemCreateOrConnectWithoutClaimInput | InsuranceClaimItemCreateOrConnectWithoutClaimInput[]
    upsert?: InsuranceClaimItemUpsertWithWhereUniqueWithoutClaimInput | InsuranceClaimItemUpsertWithWhereUniqueWithoutClaimInput[]
    createMany?: InsuranceClaimItemCreateManyClaimInputEnvelope
    set?: InsuranceClaimItemWhereUniqueInput | InsuranceClaimItemWhereUniqueInput[]
    disconnect?: InsuranceClaimItemWhereUniqueInput | InsuranceClaimItemWhereUniqueInput[]
    delete?: InsuranceClaimItemWhereUniqueInput | InsuranceClaimItemWhereUniqueInput[]
    connect?: InsuranceClaimItemWhereUniqueInput | InsuranceClaimItemWhereUniqueInput[]
    update?: InsuranceClaimItemUpdateWithWhereUniqueWithoutClaimInput | InsuranceClaimItemUpdateWithWhereUniqueWithoutClaimInput[]
    updateMany?: InsuranceClaimItemUpdateManyWithWhereWithoutClaimInput | InsuranceClaimItemUpdateManyWithWhereWithoutClaimInput[]
    deleteMany?: InsuranceClaimItemScalarWhereInput | InsuranceClaimItemScalarWhereInput[]
  }

  export type InsuranceClaimItemUncheckedUpdateManyWithoutClaimNestedInput = {
    create?: XOR<InsuranceClaimItemCreateWithoutClaimInput, InsuranceClaimItemUncheckedCreateWithoutClaimInput> | InsuranceClaimItemCreateWithoutClaimInput[] | InsuranceClaimItemUncheckedCreateWithoutClaimInput[]
    connectOrCreate?: InsuranceClaimItemCreateOrConnectWithoutClaimInput | InsuranceClaimItemCreateOrConnectWithoutClaimInput[]
    upsert?: InsuranceClaimItemUpsertWithWhereUniqueWithoutClaimInput | InsuranceClaimItemUpsertWithWhereUniqueWithoutClaimInput[]
    createMany?: InsuranceClaimItemCreateManyClaimInputEnvelope
    set?: InsuranceClaimItemWhereUniqueInput | InsuranceClaimItemWhereUniqueInput[]
    disconnect?: InsuranceClaimItemWhereUniqueInput | InsuranceClaimItemWhereUniqueInput[]
    delete?: InsuranceClaimItemWhereUniqueInput | InsuranceClaimItemWhereUniqueInput[]
    connect?: InsuranceClaimItemWhereUniqueInput | InsuranceClaimItemWhereUniqueInput[]
    update?: InsuranceClaimItemUpdateWithWhereUniqueWithoutClaimInput | InsuranceClaimItemUpdateWithWhereUniqueWithoutClaimInput[]
    updateMany?: InsuranceClaimItemUpdateManyWithWhereWithoutClaimInput | InsuranceClaimItemUpdateManyWithWhereWithoutClaimInput[]
    deleteMany?: InsuranceClaimItemScalarWhereInput | InsuranceClaimItemScalarWhereInput[]
  }

  export type InsuranceClaimCreateNestedOneWithoutItemsInput = {
    create?: XOR<InsuranceClaimCreateWithoutItemsInput, InsuranceClaimUncheckedCreateWithoutItemsInput>
    connectOrCreate?: InsuranceClaimCreateOrConnectWithoutItemsInput
    connect?: InsuranceClaimWhereUniqueInput
  }

  export type InsuranceClaimUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<InsuranceClaimCreateWithoutItemsInput, InsuranceClaimUncheckedCreateWithoutItemsInput>
    connectOrCreate?: InsuranceClaimCreateOrConnectWithoutItemsInput
    upsert?: InsuranceClaimUpsertWithoutItemsInput
    connect?: InsuranceClaimWhereUniqueInput
    update?: XOR<XOR<InsuranceClaimUpdateToOneWithWhereWithoutItemsInput, InsuranceClaimUpdateWithoutItemsInput>, InsuranceClaimUncheckedUpdateWithoutItemsInput>
  }

  export type PatientEncounterCreateNestedManyWithoutPatientProfileInput = {
    create?: XOR<PatientEncounterCreateWithoutPatientProfileInput, PatientEncounterUncheckedCreateWithoutPatientProfileInput> | PatientEncounterCreateWithoutPatientProfileInput[] | PatientEncounterUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: PatientEncounterCreateOrConnectWithoutPatientProfileInput | PatientEncounterCreateOrConnectWithoutPatientProfileInput[]
    createMany?: PatientEncounterCreateManyPatientProfileInputEnvelope
    connect?: PatientEncounterWhereUniqueInput | PatientEncounterWhereUniqueInput[]
  }

  export type InpatientEncounterCreateNestedManyWithoutPatientProfileInput = {
    create?: XOR<InpatientEncounterCreateWithoutPatientProfileInput, InpatientEncounterUncheckedCreateWithoutPatientProfileInput> | InpatientEncounterCreateWithoutPatientProfileInput[] | InpatientEncounterUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: InpatientEncounterCreateOrConnectWithoutPatientProfileInput | InpatientEncounterCreateOrConnectWithoutPatientProfileInput[]
    createMany?: InpatientEncounterCreateManyPatientProfileInputEnvelope
    connect?: InpatientEncounterWhereUniqueInput | InpatientEncounterWhereUniqueInput[]
  }

  export type OutpatientEncounterCreateNestedManyWithoutPatientProfileInput = {
    create?: XOR<OutpatientEncounterCreateWithoutPatientProfileInput, OutpatientEncounterUncheckedCreateWithoutPatientProfileInput> | OutpatientEncounterCreateWithoutPatientProfileInput[] | OutpatientEncounterUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: OutpatientEncounterCreateOrConnectWithoutPatientProfileInput | OutpatientEncounterCreateOrConnectWithoutPatientProfileInput[]
    createMany?: OutpatientEncounterCreateManyPatientProfileInputEnvelope
    connect?: OutpatientEncounterWhereUniqueInput | OutpatientEncounterWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutPatientInput = {
    create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
    createMany?: AppointmentCreateManyPatientInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PatientAppointmentCreateNestedManyWithoutPatientInput = {
    create?: XOR<PatientAppointmentCreateWithoutPatientInput, PatientAppointmentUncheckedCreateWithoutPatientInput> | PatientAppointmentCreateWithoutPatientInput[] | PatientAppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientAppointmentCreateOrConnectWithoutPatientInput | PatientAppointmentCreateOrConnectWithoutPatientInput[]
    createMany?: PatientAppointmentCreateManyPatientInputEnvelope
    connect?: PatientAppointmentWhereUniqueInput | PatientAppointmentWhereUniqueInput[]
  }

  export type AddressCreateNestedManyWithoutPatientProfileInput = {
    create?: XOR<AddressCreateWithoutPatientProfileInput, AddressUncheckedCreateWithoutPatientProfileInput> | AddressCreateWithoutPatientProfileInput[] | AddressUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutPatientProfileInput | AddressCreateOrConnectWithoutPatientProfileInput[]
    createMany?: AddressCreateManyPatientProfileInputEnvelope
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
  }

  export type ContactCreateNestedManyWithoutPatientProfileInput = {
    create?: XOR<ContactCreateWithoutPatientProfileInput, ContactUncheckedCreateWithoutPatientProfileInput> | ContactCreateWithoutPatientProfileInput[] | ContactUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutPatientProfileInput | ContactCreateOrConnectWithoutPatientProfileInput[]
    createMany?: ContactCreateManyPatientProfileInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type EmploymentCreateNestedManyWithoutPatientProfileInput = {
    create?: XOR<EmploymentCreateWithoutPatientProfileInput, EmploymentUncheckedCreateWithoutPatientProfileInput> | EmploymentCreateWithoutPatientProfileInput[] | EmploymentUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: EmploymentCreateOrConnectWithoutPatientProfileInput | EmploymentCreateOrConnectWithoutPatientProfileInput[]
    createMany?: EmploymentCreateManyPatientProfileInputEnvelope
    connect?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
  }

  export type EmergencyContactCreateNestedManyWithoutPatientProfileInput = {
    create?: XOR<EmergencyContactCreateWithoutPatientProfileInput, EmergencyContactUncheckedCreateWithoutPatientProfileInput> | EmergencyContactCreateWithoutPatientProfileInput[] | EmergencyContactUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: EmergencyContactCreateOrConnectWithoutPatientProfileInput | EmergencyContactCreateOrConnectWithoutPatientProfileInput[]
    createMany?: EmergencyContactCreateManyPatientProfileInputEnvelope
    connect?: EmergencyContactWhereUniqueInput | EmergencyContactWhereUniqueInput[]
  }

  export type MedicalRecordRequestCreateNestedManyWithoutPatientProfileInput = {
    create?: XOR<MedicalRecordRequestCreateWithoutPatientProfileInput, MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput> | MedicalRecordRequestCreateWithoutPatientProfileInput[] | MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: MedicalRecordRequestCreateOrConnectWithoutPatientProfileInput | MedicalRecordRequestCreateOrConnectWithoutPatientProfileInput[]
    createMany?: MedicalRecordRequestCreateManyPatientProfileInputEnvelope
    connect?: MedicalRecordRequestWhereUniqueInput | MedicalRecordRequestWhereUniqueInput[]
  }

  export type ConsentCreateNestedOneWithoutPatientProfileInput = {
    create?: XOR<ConsentCreateWithoutPatientProfileInput, ConsentUncheckedCreateWithoutPatientProfileInput>
    connectOrCreate?: ConsentCreateOrConnectWithoutPatientProfileInput
    connect?: ConsentWhereUniqueInput
  }

  export type PatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput = {
    create?: XOR<PatientEncounterCreateWithoutPatientProfileInput, PatientEncounterUncheckedCreateWithoutPatientProfileInput> | PatientEncounterCreateWithoutPatientProfileInput[] | PatientEncounterUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: PatientEncounterCreateOrConnectWithoutPatientProfileInput | PatientEncounterCreateOrConnectWithoutPatientProfileInput[]
    createMany?: PatientEncounterCreateManyPatientProfileInputEnvelope
    connect?: PatientEncounterWhereUniqueInput | PatientEncounterWhereUniqueInput[]
  }

  export type InpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput = {
    create?: XOR<InpatientEncounterCreateWithoutPatientProfileInput, InpatientEncounterUncheckedCreateWithoutPatientProfileInput> | InpatientEncounterCreateWithoutPatientProfileInput[] | InpatientEncounterUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: InpatientEncounterCreateOrConnectWithoutPatientProfileInput | InpatientEncounterCreateOrConnectWithoutPatientProfileInput[]
    createMany?: InpatientEncounterCreateManyPatientProfileInputEnvelope
    connect?: InpatientEncounterWhereUniqueInput | InpatientEncounterWhereUniqueInput[]
  }

  export type OutpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput = {
    create?: XOR<OutpatientEncounterCreateWithoutPatientProfileInput, OutpatientEncounterUncheckedCreateWithoutPatientProfileInput> | OutpatientEncounterCreateWithoutPatientProfileInput[] | OutpatientEncounterUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: OutpatientEncounterCreateOrConnectWithoutPatientProfileInput | OutpatientEncounterCreateOrConnectWithoutPatientProfileInput[]
    createMany?: OutpatientEncounterCreateManyPatientProfileInputEnvelope
    connect?: OutpatientEncounterWhereUniqueInput | OutpatientEncounterWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
    createMany?: AppointmentCreateManyPatientInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PatientAppointmentUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<PatientAppointmentCreateWithoutPatientInput, PatientAppointmentUncheckedCreateWithoutPatientInput> | PatientAppointmentCreateWithoutPatientInput[] | PatientAppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientAppointmentCreateOrConnectWithoutPatientInput | PatientAppointmentCreateOrConnectWithoutPatientInput[]
    createMany?: PatientAppointmentCreateManyPatientInputEnvelope
    connect?: PatientAppointmentWhereUniqueInput | PatientAppointmentWhereUniqueInput[]
  }

  export type AddressUncheckedCreateNestedManyWithoutPatientProfileInput = {
    create?: XOR<AddressCreateWithoutPatientProfileInput, AddressUncheckedCreateWithoutPatientProfileInput> | AddressCreateWithoutPatientProfileInput[] | AddressUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutPatientProfileInput | AddressCreateOrConnectWithoutPatientProfileInput[]
    createMany?: AddressCreateManyPatientProfileInputEnvelope
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
  }

  export type ContactUncheckedCreateNestedManyWithoutPatientProfileInput = {
    create?: XOR<ContactCreateWithoutPatientProfileInput, ContactUncheckedCreateWithoutPatientProfileInput> | ContactCreateWithoutPatientProfileInput[] | ContactUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutPatientProfileInput | ContactCreateOrConnectWithoutPatientProfileInput[]
    createMany?: ContactCreateManyPatientProfileInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type EmploymentUncheckedCreateNestedManyWithoutPatientProfileInput = {
    create?: XOR<EmploymentCreateWithoutPatientProfileInput, EmploymentUncheckedCreateWithoutPatientProfileInput> | EmploymentCreateWithoutPatientProfileInput[] | EmploymentUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: EmploymentCreateOrConnectWithoutPatientProfileInput | EmploymentCreateOrConnectWithoutPatientProfileInput[]
    createMany?: EmploymentCreateManyPatientProfileInputEnvelope
    connect?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
  }

  export type EmergencyContactUncheckedCreateNestedManyWithoutPatientProfileInput = {
    create?: XOR<EmergencyContactCreateWithoutPatientProfileInput, EmergencyContactUncheckedCreateWithoutPatientProfileInput> | EmergencyContactCreateWithoutPatientProfileInput[] | EmergencyContactUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: EmergencyContactCreateOrConnectWithoutPatientProfileInput | EmergencyContactCreateOrConnectWithoutPatientProfileInput[]
    createMany?: EmergencyContactCreateManyPatientProfileInputEnvelope
    connect?: EmergencyContactWhereUniqueInput | EmergencyContactWhereUniqueInput[]
  }

  export type MedicalRecordRequestUncheckedCreateNestedManyWithoutPatientProfileInput = {
    create?: XOR<MedicalRecordRequestCreateWithoutPatientProfileInput, MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput> | MedicalRecordRequestCreateWithoutPatientProfileInput[] | MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: MedicalRecordRequestCreateOrConnectWithoutPatientProfileInput | MedicalRecordRequestCreateOrConnectWithoutPatientProfileInput[]
    createMany?: MedicalRecordRequestCreateManyPatientProfileInputEnvelope
    connect?: MedicalRecordRequestWhereUniqueInput | MedicalRecordRequestWhereUniqueInput[]
  }

  export type ConsentUncheckedCreateNestedOneWithoutPatientProfileInput = {
    create?: XOR<ConsentCreateWithoutPatientProfileInput, ConsentUncheckedCreateWithoutPatientProfileInput>
    connectOrCreate?: ConsentCreateOrConnectWithoutPatientProfileInput
    connect?: ConsentWhereUniqueInput
  }

  export type NullableEnumSexFieldUpdateOperationsInput = {
    set?: $Enums.Sex | null
  }

  export type NullableEnumMaritalStatusFieldUpdateOperationsInput = {
    set?: $Enums.MaritalStatus | null
  }

  export type NullableEnumBloodTypeFieldUpdateOperationsInput = {
    set?: $Enums.BloodType | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type PatientEncounterUpdateManyWithoutPatientProfileNestedInput = {
    create?: XOR<PatientEncounterCreateWithoutPatientProfileInput, PatientEncounterUncheckedCreateWithoutPatientProfileInput> | PatientEncounterCreateWithoutPatientProfileInput[] | PatientEncounterUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: PatientEncounterCreateOrConnectWithoutPatientProfileInput | PatientEncounterCreateOrConnectWithoutPatientProfileInput[]
    upsert?: PatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput | PatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput[]
    createMany?: PatientEncounterCreateManyPatientProfileInputEnvelope
    set?: PatientEncounterWhereUniqueInput | PatientEncounterWhereUniqueInput[]
    disconnect?: PatientEncounterWhereUniqueInput | PatientEncounterWhereUniqueInput[]
    delete?: PatientEncounterWhereUniqueInput | PatientEncounterWhereUniqueInput[]
    connect?: PatientEncounterWhereUniqueInput | PatientEncounterWhereUniqueInput[]
    update?: PatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput | PatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput[]
    updateMany?: PatientEncounterUpdateManyWithWhereWithoutPatientProfileInput | PatientEncounterUpdateManyWithWhereWithoutPatientProfileInput[]
    deleteMany?: PatientEncounterScalarWhereInput | PatientEncounterScalarWhereInput[]
  }

  export type InpatientEncounterUpdateManyWithoutPatientProfileNestedInput = {
    create?: XOR<InpatientEncounterCreateWithoutPatientProfileInput, InpatientEncounterUncheckedCreateWithoutPatientProfileInput> | InpatientEncounterCreateWithoutPatientProfileInput[] | InpatientEncounterUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: InpatientEncounterCreateOrConnectWithoutPatientProfileInput | InpatientEncounterCreateOrConnectWithoutPatientProfileInput[]
    upsert?: InpatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput | InpatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput[]
    createMany?: InpatientEncounterCreateManyPatientProfileInputEnvelope
    set?: InpatientEncounterWhereUniqueInput | InpatientEncounterWhereUniqueInput[]
    disconnect?: InpatientEncounterWhereUniqueInput | InpatientEncounterWhereUniqueInput[]
    delete?: InpatientEncounterWhereUniqueInput | InpatientEncounterWhereUniqueInput[]
    connect?: InpatientEncounterWhereUniqueInput | InpatientEncounterWhereUniqueInput[]
    update?: InpatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput | InpatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput[]
    updateMany?: InpatientEncounterUpdateManyWithWhereWithoutPatientProfileInput | InpatientEncounterUpdateManyWithWhereWithoutPatientProfileInput[]
    deleteMany?: InpatientEncounterScalarWhereInput | InpatientEncounterScalarWhereInput[]
  }

  export type OutpatientEncounterUpdateManyWithoutPatientProfileNestedInput = {
    create?: XOR<OutpatientEncounterCreateWithoutPatientProfileInput, OutpatientEncounterUncheckedCreateWithoutPatientProfileInput> | OutpatientEncounterCreateWithoutPatientProfileInput[] | OutpatientEncounterUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: OutpatientEncounterCreateOrConnectWithoutPatientProfileInput | OutpatientEncounterCreateOrConnectWithoutPatientProfileInput[]
    upsert?: OutpatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput | OutpatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput[]
    createMany?: OutpatientEncounterCreateManyPatientProfileInputEnvelope
    set?: OutpatientEncounterWhereUniqueInput | OutpatientEncounterWhereUniqueInput[]
    disconnect?: OutpatientEncounterWhereUniqueInput | OutpatientEncounterWhereUniqueInput[]
    delete?: OutpatientEncounterWhereUniqueInput | OutpatientEncounterWhereUniqueInput[]
    connect?: OutpatientEncounterWhereUniqueInput | OutpatientEncounterWhereUniqueInput[]
    update?: OutpatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput | OutpatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput[]
    updateMany?: OutpatientEncounterUpdateManyWithWhereWithoutPatientProfileInput | OutpatientEncounterUpdateManyWithWhereWithoutPatientProfileInput[]
    deleteMany?: OutpatientEncounterScalarWhereInput | OutpatientEncounterScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutPatientNestedInput = {
    create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutPatientInput | AppointmentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: AppointmentCreateManyPatientInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutPatientInput | AppointmentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutPatientInput | AppointmentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type PatientAppointmentUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PatientAppointmentCreateWithoutPatientInput, PatientAppointmentUncheckedCreateWithoutPatientInput> | PatientAppointmentCreateWithoutPatientInput[] | PatientAppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientAppointmentCreateOrConnectWithoutPatientInput | PatientAppointmentCreateOrConnectWithoutPatientInput[]
    upsert?: PatientAppointmentUpsertWithWhereUniqueWithoutPatientInput | PatientAppointmentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PatientAppointmentCreateManyPatientInputEnvelope
    set?: PatientAppointmentWhereUniqueInput | PatientAppointmentWhereUniqueInput[]
    disconnect?: PatientAppointmentWhereUniqueInput | PatientAppointmentWhereUniqueInput[]
    delete?: PatientAppointmentWhereUniqueInput | PatientAppointmentWhereUniqueInput[]
    connect?: PatientAppointmentWhereUniqueInput | PatientAppointmentWhereUniqueInput[]
    update?: PatientAppointmentUpdateWithWhereUniqueWithoutPatientInput | PatientAppointmentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PatientAppointmentUpdateManyWithWhereWithoutPatientInput | PatientAppointmentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PatientAppointmentScalarWhereInput | PatientAppointmentScalarWhereInput[]
  }

  export type AddressUpdateManyWithoutPatientProfileNestedInput = {
    create?: XOR<AddressCreateWithoutPatientProfileInput, AddressUncheckedCreateWithoutPatientProfileInput> | AddressCreateWithoutPatientProfileInput[] | AddressUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutPatientProfileInput | AddressCreateOrConnectWithoutPatientProfileInput[]
    upsert?: AddressUpsertWithWhereUniqueWithoutPatientProfileInput | AddressUpsertWithWhereUniqueWithoutPatientProfileInput[]
    createMany?: AddressCreateManyPatientProfileInputEnvelope
    set?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    disconnect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    delete?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    update?: AddressUpdateWithWhereUniqueWithoutPatientProfileInput | AddressUpdateWithWhereUniqueWithoutPatientProfileInput[]
    updateMany?: AddressUpdateManyWithWhereWithoutPatientProfileInput | AddressUpdateManyWithWhereWithoutPatientProfileInput[]
    deleteMany?: AddressScalarWhereInput | AddressScalarWhereInput[]
  }

  export type ContactUpdateManyWithoutPatientProfileNestedInput = {
    create?: XOR<ContactCreateWithoutPatientProfileInput, ContactUncheckedCreateWithoutPatientProfileInput> | ContactCreateWithoutPatientProfileInput[] | ContactUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutPatientProfileInput | ContactCreateOrConnectWithoutPatientProfileInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutPatientProfileInput | ContactUpsertWithWhereUniqueWithoutPatientProfileInput[]
    createMany?: ContactCreateManyPatientProfileInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutPatientProfileInput | ContactUpdateWithWhereUniqueWithoutPatientProfileInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutPatientProfileInput | ContactUpdateManyWithWhereWithoutPatientProfileInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type EmploymentUpdateManyWithoutPatientProfileNestedInput = {
    create?: XOR<EmploymentCreateWithoutPatientProfileInput, EmploymentUncheckedCreateWithoutPatientProfileInput> | EmploymentCreateWithoutPatientProfileInput[] | EmploymentUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: EmploymentCreateOrConnectWithoutPatientProfileInput | EmploymentCreateOrConnectWithoutPatientProfileInput[]
    upsert?: EmploymentUpsertWithWhereUniqueWithoutPatientProfileInput | EmploymentUpsertWithWhereUniqueWithoutPatientProfileInput[]
    createMany?: EmploymentCreateManyPatientProfileInputEnvelope
    set?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    disconnect?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    delete?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    connect?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    update?: EmploymentUpdateWithWhereUniqueWithoutPatientProfileInput | EmploymentUpdateWithWhereUniqueWithoutPatientProfileInput[]
    updateMany?: EmploymentUpdateManyWithWhereWithoutPatientProfileInput | EmploymentUpdateManyWithWhereWithoutPatientProfileInput[]
    deleteMany?: EmploymentScalarWhereInput | EmploymentScalarWhereInput[]
  }

  export type EmergencyContactUpdateManyWithoutPatientProfileNestedInput = {
    create?: XOR<EmergencyContactCreateWithoutPatientProfileInput, EmergencyContactUncheckedCreateWithoutPatientProfileInput> | EmergencyContactCreateWithoutPatientProfileInput[] | EmergencyContactUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: EmergencyContactCreateOrConnectWithoutPatientProfileInput | EmergencyContactCreateOrConnectWithoutPatientProfileInput[]
    upsert?: EmergencyContactUpsertWithWhereUniqueWithoutPatientProfileInput | EmergencyContactUpsertWithWhereUniqueWithoutPatientProfileInput[]
    createMany?: EmergencyContactCreateManyPatientProfileInputEnvelope
    set?: EmergencyContactWhereUniqueInput | EmergencyContactWhereUniqueInput[]
    disconnect?: EmergencyContactWhereUniqueInput | EmergencyContactWhereUniqueInput[]
    delete?: EmergencyContactWhereUniqueInput | EmergencyContactWhereUniqueInput[]
    connect?: EmergencyContactWhereUniqueInput | EmergencyContactWhereUniqueInput[]
    update?: EmergencyContactUpdateWithWhereUniqueWithoutPatientProfileInput | EmergencyContactUpdateWithWhereUniqueWithoutPatientProfileInput[]
    updateMany?: EmergencyContactUpdateManyWithWhereWithoutPatientProfileInput | EmergencyContactUpdateManyWithWhereWithoutPatientProfileInput[]
    deleteMany?: EmergencyContactScalarWhereInput | EmergencyContactScalarWhereInput[]
  }

  export type MedicalRecordRequestUpdateManyWithoutPatientProfileNestedInput = {
    create?: XOR<MedicalRecordRequestCreateWithoutPatientProfileInput, MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput> | MedicalRecordRequestCreateWithoutPatientProfileInput[] | MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: MedicalRecordRequestCreateOrConnectWithoutPatientProfileInput | MedicalRecordRequestCreateOrConnectWithoutPatientProfileInput[]
    upsert?: MedicalRecordRequestUpsertWithWhereUniqueWithoutPatientProfileInput | MedicalRecordRequestUpsertWithWhereUniqueWithoutPatientProfileInput[]
    createMany?: MedicalRecordRequestCreateManyPatientProfileInputEnvelope
    set?: MedicalRecordRequestWhereUniqueInput | MedicalRecordRequestWhereUniqueInput[]
    disconnect?: MedicalRecordRequestWhereUniqueInput | MedicalRecordRequestWhereUniqueInput[]
    delete?: MedicalRecordRequestWhereUniqueInput | MedicalRecordRequestWhereUniqueInput[]
    connect?: MedicalRecordRequestWhereUniqueInput | MedicalRecordRequestWhereUniqueInput[]
    update?: MedicalRecordRequestUpdateWithWhereUniqueWithoutPatientProfileInput | MedicalRecordRequestUpdateWithWhereUniqueWithoutPatientProfileInput[]
    updateMany?: MedicalRecordRequestUpdateManyWithWhereWithoutPatientProfileInput | MedicalRecordRequestUpdateManyWithWhereWithoutPatientProfileInput[]
    deleteMany?: MedicalRecordRequestScalarWhereInput | MedicalRecordRequestScalarWhereInput[]
  }

  export type ConsentUpdateOneWithoutPatientProfileNestedInput = {
    create?: XOR<ConsentCreateWithoutPatientProfileInput, ConsentUncheckedCreateWithoutPatientProfileInput>
    connectOrCreate?: ConsentCreateOrConnectWithoutPatientProfileInput
    upsert?: ConsentUpsertWithoutPatientProfileInput
    disconnect?: ConsentWhereInput | boolean
    delete?: ConsentWhereInput | boolean
    connect?: ConsentWhereUniqueInput
    update?: XOR<XOR<ConsentUpdateToOneWithWhereWithoutPatientProfileInput, ConsentUpdateWithoutPatientProfileInput>, ConsentUncheckedUpdateWithoutPatientProfileInput>
  }

  export type PatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput = {
    create?: XOR<PatientEncounterCreateWithoutPatientProfileInput, PatientEncounterUncheckedCreateWithoutPatientProfileInput> | PatientEncounterCreateWithoutPatientProfileInput[] | PatientEncounterUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: PatientEncounterCreateOrConnectWithoutPatientProfileInput | PatientEncounterCreateOrConnectWithoutPatientProfileInput[]
    upsert?: PatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput | PatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput[]
    createMany?: PatientEncounterCreateManyPatientProfileInputEnvelope
    set?: PatientEncounterWhereUniqueInput | PatientEncounterWhereUniqueInput[]
    disconnect?: PatientEncounterWhereUniqueInput | PatientEncounterWhereUniqueInput[]
    delete?: PatientEncounterWhereUniqueInput | PatientEncounterWhereUniqueInput[]
    connect?: PatientEncounterWhereUniqueInput | PatientEncounterWhereUniqueInput[]
    update?: PatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput | PatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput[]
    updateMany?: PatientEncounterUpdateManyWithWhereWithoutPatientProfileInput | PatientEncounterUpdateManyWithWhereWithoutPatientProfileInput[]
    deleteMany?: PatientEncounterScalarWhereInput | PatientEncounterScalarWhereInput[]
  }

  export type InpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput = {
    create?: XOR<InpatientEncounterCreateWithoutPatientProfileInput, InpatientEncounterUncheckedCreateWithoutPatientProfileInput> | InpatientEncounterCreateWithoutPatientProfileInput[] | InpatientEncounterUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: InpatientEncounterCreateOrConnectWithoutPatientProfileInput | InpatientEncounterCreateOrConnectWithoutPatientProfileInput[]
    upsert?: InpatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput | InpatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput[]
    createMany?: InpatientEncounterCreateManyPatientProfileInputEnvelope
    set?: InpatientEncounterWhereUniqueInput | InpatientEncounterWhereUniqueInput[]
    disconnect?: InpatientEncounterWhereUniqueInput | InpatientEncounterWhereUniqueInput[]
    delete?: InpatientEncounterWhereUniqueInput | InpatientEncounterWhereUniqueInput[]
    connect?: InpatientEncounterWhereUniqueInput | InpatientEncounterWhereUniqueInput[]
    update?: InpatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput | InpatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput[]
    updateMany?: InpatientEncounterUpdateManyWithWhereWithoutPatientProfileInput | InpatientEncounterUpdateManyWithWhereWithoutPatientProfileInput[]
    deleteMany?: InpatientEncounterScalarWhereInput | InpatientEncounterScalarWhereInput[]
  }

  export type OutpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput = {
    create?: XOR<OutpatientEncounterCreateWithoutPatientProfileInput, OutpatientEncounterUncheckedCreateWithoutPatientProfileInput> | OutpatientEncounterCreateWithoutPatientProfileInput[] | OutpatientEncounterUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: OutpatientEncounterCreateOrConnectWithoutPatientProfileInput | OutpatientEncounterCreateOrConnectWithoutPatientProfileInput[]
    upsert?: OutpatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput | OutpatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput[]
    createMany?: OutpatientEncounterCreateManyPatientProfileInputEnvelope
    set?: OutpatientEncounterWhereUniqueInput | OutpatientEncounterWhereUniqueInput[]
    disconnect?: OutpatientEncounterWhereUniqueInput | OutpatientEncounterWhereUniqueInput[]
    delete?: OutpatientEncounterWhereUniqueInput | OutpatientEncounterWhereUniqueInput[]
    connect?: OutpatientEncounterWhereUniqueInput | OutpatientEncounterWhereUniqueInput[]
    update?: OutpatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput | OutpatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput[]
    updateMany?: OutpatientEncounterUpdateManyWithWhereWithoutPatientProfileInput | OutpatientEncounterUpdateManyWithWhereWithoutPatientProfileInput[]
    deleteMany?: OutpatientEncounterScalarWhereInput | OutpatientEncounterScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutPatientInput | AppointmentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: AppointmentCreateManyPatientInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutPatientInput | AppointmentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutPatientInput | AppointmentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type PatientAppointmentUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PatientAppointmentCreateWithoutPatientInput, PatientAppointmentUncheckedCreateWithoutPatientInput> | PatientAppointmentCreateWithoutPatientInput[] | PatientAppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientAppointmentCreateOrConnectWithoutPatientInput | PatientAppointmentCreateOrConnectWithoutPatientInput[]
    upsert?: PatientAppointmentUpsertWithWhereUniqueWithoutPatientInput | PatientAppointmentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PatientAppointmentCreateManyPatientInputEnvelope
    set?: PatientAppointmentWhereUniqueInput | PatientAppointmentWhereUniqueInput[]
    disconnect?: PatientAppointmentWhereUniqueInput | PatientAppointmentWhereUniqueInput[]
    delete?: PatientAppointmentWhereUniqueInput | PatientAppointmentWhereUniqueInput[]
    connect?: PatientAppointmentWhereUniqueInput | PatientAppointmentWhereUniqueInput[]
    update?: PatientAppointmentUpdateWithWhereUniqueWithoutPatientInput | PatientAppointmentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PatientAppointmentUpdateManyWithWhereWithoutPatientInput | PatientAppointmentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PatientAppointmentScalarWhereInput | PatientAppointmentScalarWhereInput[]
  }

  export type AddressUncheckedUpdateManyWithoutPatientProfileNestedInput = {
    create?: XOR<AddressCreateWithoutPatientProfileInput, AddressUncheckedCreateWithoutPatientProfileInput> | AddressCreateWithoutPatientProfileInput[] | AddressUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutPatientProfileInput | AddressCreateOrConnectWithoutPatientProfileInput[]
    upsert?: AddressUpsertWithWhereUniqueWithoutPatientProfileInput | AddressUpsertWithWhereUniqueWithoutPatientProfileInput[]
    createMany?: AddressCreateManyPatientProfileInputEnvelope
    set?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    disconnect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    delete?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    update?: AddressUpdateWithWhereUniqueWithoutPatientProfileInput | AddressUpdateWithWhereUniqueWithoutPatientProfileInput[]
    updateMany?: AddressUpdateManyWithWhereWithoutPatientProfileInput | AddressUpdateManyWithWhereWithoutPatientProfileInput[]
    deleteMany?: AddressScalarWhereInput | AddressScalarWhereInput[]
  }

  export type ContactUncheckedUpdateManyWithoutPatientProfileNestedInput = {
    create?: XOR<ContactCreateWithoutPatientProfileInput, ContactUncheckedCreateWithoutPatientProfileInput> | ContactCreateWithoutPatientProfileInput[] | ContactUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutPatientProfileInput | ContactCreateOrConnectWithoutPatientProfileInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutPatientProfileInput | ContactUpsertWithWhereUniqueWithoutPatientProfileInput[]
    createMany?: ContactCreateManyPatientProfileInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutPatientProfileInput | ContactUpdateWithWhereUniqueWithoutPatientProfileInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutPatientProfileInput | ContactUpdateManyWithWhereWithoutPatientProfileInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type EmploymentUncheckedUpdateManyWithoutPatientProfileNestedInput = {
    create?: XOR<EmploymentCreateWithoutPatientProfileInput, EmploymentUncheckedCreateWithoutPatientProfileInput> | EmploymentCreateWithoutPatientProfileInput[] | EmploymentUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: EmploymentCreateOrConnectWithoutPatientProfileInput | EmploymentCreateOrConnectWithoutPatientProfileInput[]
    upsert?: EmploymentUpsertWithWhereUniqueWithoutPatientProfileInput | EmploymentUpsertWithWhereUniqueWithoutPatientProfileInput[]
    createMany?: EmploymentCreateManyPatientProfileInputEnvelope
    set?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    disconnect?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    delete?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    connect?: EmploymentWhereUniqueInput | EmploymentWhereUniqueInput[]
    update?: EmploymentUpdateWithWhereUniqueWithoutPatientProfileInput | EmploymentUpdateWithWhereUniqueWithoutPatientProfileInput[]
    updateMany?: EmploymentUpdateManyWithWhereWithoutPatientProfileInput | EmploymentUpdateManyWithWhereWithoutPatientProfileInput[]
    deleteMany?: EmploymentScalarWhereInput | EmploymentScalarWhereInput[]
  }

  export type EmergencyContactUncheckedUpdateManyWithoutPatientProfileNestedInput = {
    create?: XOR<EmergencyContactCreateWithoutPatientProfileInput, EmergencyContactUncheckedCreateWithoutPatientProfileInput> | EmergencyContactCreateWithoutPatientProfileInput[] | EmergencyContactUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: EmergencyContactCreateOrConnectWithoutPatientProfileInput | EmergencyContactCreateOrConnectWithoutPatientProfileInput[]
    upsert?: EmergencyContactUpsertWithWhereUniqueWithoutPatientProfileInput | EmergencyContactUpsertWithWhereUniqueWithoutPatientProfileInput[]
    createMany?: EmergencyContactCreateManyPatientProfileInputEnvelope
    set?: EmergencyContactWhereUniqueInput | EmergencyContactWhereUniqueInput[]
    disconnect?: EmergencyContactWhereUniqueInput | EmergencyContactWhereUniqueInput[]
    delete?: EmergencyContactWhereUniqueInput | EmergencyContactWhereUniqueInput[]
    connect?: EmergencyContactWhereUniqueInput | EmergencyContactWhereUniqueInput[]
    update?: EmergencyContactUpdateWithWhereUniqueWithoutPatientProfileInput | EmergencyContactUpdateWithWhereUniqueWithoutPatientProfileInput[]
    updateMany?: EmergencyContactUpdateManyWithWhereWithoutPatientProfileInput | EmergencyContactUpdateManyWithWhereWithoutPatientProfileInput[]
    deleteMany?: EmergencyContactScalarWhereInput | EmergencyContactScalarWhereInput[]
  }

  export type MedicalRecordRequestUncheckedUpdateManyWithoutPatientProfileNestedInput = {
    create?: XOR<MedicalRecordRequestCreateWithoutPatientProfileInput, MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput> | MedicalRecordRequestCreateWithoutPatientProfileInput[] | MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput[]
    connectOrCreate?: MedicalRecordRequestCreateOrConnectWithoutPatientProfileInput | MedicalRecordRequestCreateOrConnectWithoutPatientProfileInput[]
    upsert?: MedicalRecordRequestUpsertWithWhereUniqueWithoutPatientProfileInput | MedicalRecordRequestUpsertWithWhereUniqueWithoutPatientProfileInput[]
    createMany?: MedicalRecordRequestCreateManyPatientProfileInputEnvelope
    set?: MedicalRecordRequestWhereUniqueInput | MedicalRecordRequestWhereUniqueInput[]
    disconnect?: MedicalRecordRequestWhereUniqueInput | MedicalRecordRequestWhereUniqueInput[]
    delete?: MedicalRecordRequestWhereUniqueInput | MedicalRecordRequestWhereUniqueInput[]
    connect?: MedicalRecordRequestWhereUniqueInput | MedicalRecordRequestWhereUniqueInput[]
    update?: MedicalRecordRequestUpdateWithWhereUniqueWithoutPatientProfileInput | MedicalRecordRequestUpdateWithWhereUniqueWithoutPatientProfileInput[]
    updateMany?: MedicalRecordRequestUpdateManyWithWhereWithoutPatientProfileInput | MedicalRecordRequestUpdateManyWithWhereWithoutPatientProfileInput[]
    deleteMany?: MedicalRecordRequestScalarWhereInput | MedicalRecordRequestScalarWhereInput[]
  }

  export type ConsentUncheckedUpdateOneWithoutPatientProfileNestedInput = {
    create?: XOR<ConsentCreateWithoutPatientProfileInput, ConsentUncheckedCreateWithoutPatientProfileInput>
    connectOrCreate?: ConsentCreateOrConnectWithoutPatientProfileInput
    upsert?: ConsentUpsertWithoutPatientProfileInput
    disconnect?: ConsentWhereInput | boolean
    delete?: ConsentWhereInput | boolean
    connect?: ConsentWhereUniqueInput
    update?: XOR<XOR<ConsentUpdateToOneWithWhereWithoutPatientProfileInput, ConsentUpdateWithoutPatientProfileInput>, ConsentUncheckedUpdateWithoutPatientProfileInput>
  }

  export type PatientProfileCreateNestedOneWithoutAddressesInput = {
    create?: XOR<PatientProfileCreateWithoutAddressesInput, PatientProfileUncheckedCreateWithoutAddressesInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutAddressesInput
    connect?: PatientProfileWhereUniqueInput
  }

  export type PatientProfileUpdateOneRequiredWithoutAddressesNestedInput = {
    create?: XOR<PatientProfileCreateWithoutAddressesInput, PatientProfileUncheckedCreateWithoutAddressesInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutAddressesInput
    upsert?: PatientProfileUpsertWithoutAddressesInput
    connect?: PatientProfileWhereUniqueInput
    update?: XOR<XOR<PatientProfileUpdateToOneWithWhereWithoutAddressesInput, PatientProfileUpdateWithoutAddressesInput>, PatientProfileUncheckedUpdateWithoutAddressesInput>
  }

  export type PatientProfileCreateNestedOneWithoutContactsInput = {
    create?: XOR<PatientProfileCreateWithoutContactsInput, PatientProfileUncheckedCreateWithoutContactsInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutContactsInput
    connect?: PatientProfileWhereUniqueInput
  }

  export type EnumContactTypeFieldUpdateOperationsInput = {
    set?: $Enums.ContactType
  }

  export type PatientProfileUpdateOneRequiredWithoutContactsNestedInput = {
    create?: XOR<PatientProfileCreateWithoutContactsInput, PatientProfileUncheckedCreateWithoutContactsInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutContactsInput
    upsert?: PatientProfileUpsertWithoutContactsInput
    connect?: PatientProfileWhereUniqueInput
    update?: XOR<XOR<PatientProfileUpdateToOneWithWhereWithoutContactsInput, PatientProfileUpdateWithoutContactsInput>, PatientProfileUncheckedUpdateWithoutContactsInput>
  }

  export type PatientProfileCreateNestedOneWithoutEmploymentsInput = {
    create?: XOR<PatientProfileCreateWithoutEmploymentsInput, PatientProfileUncheckedCreateWithoutEmploymentsInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutEmploymentsInput
    connect?: PatientProfileWhereUniqueInput
  }

  export type PatientProfileUpdateOneRequiredWithoutEmploymentsNestedInput = {
    create?: XOR<PatientProfileCreateWithoutEmploymentsInput, PatientProfileUncheckedCreateWithoutEmploymentsInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutEmploymentsInput
    upsert?: PatientProfileUpsertWithoutEmploymentsInput
    connect?: PatientProfileWhereUniqueInput
    update?: XOR<XOR<PatientProfileUpdateToOneWithWhereWithoutEmploymentsInput, PatientProfileUpdateWithoutEmploymentsInput>, PatientProfileUncheckedUpdateWithoutEmploymentsInput>
  }

  export type PatientProfileCreateNestedOneWithoutEmergencyContactsInput = {
    create?: XOR<PatientProfileCreateWithoutEmergencyContactsInput, PatientProfileUncheckedCreateWithoutEmergencyContactsInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutEmergencyContactsInput
    connect?: PatientProfileWhereUniqueInput
  }

  export type EnumRelationshipFieldUpdateOperationsInput = {
    set?: $Enums.Relationship
  }

  export type PatientProfileUpdateOneRequiredWithoutEmergencyContactsNestedInput = {
    create?: XOR<PatientProfileCreateWithoutEmergencyContactsInput, PatientProfileUncheckedCreateWithoutEmergencyContactsInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutEmergencyContactsInput
    upsert?: PatientProfileUpsertWithoutEmergencyContactsInput
    connect?: PatientProfileWhereUniqueInput
    update?: XOR<XOR<PatientProfileUpdateToOneWithWhereWithoutEmergencyContactsInput, PatientProfileUpdateWithoutEmergencyContactsInput>, PatientProfileUncheckedUpdateWithoutEmergencyContactsInput>
  }

  export type PatientProfileCreateNestedOneWithoutConsentInput = {
    create?: XOR<PatientProfileCreateWithoutConsentInput, PatientProfileUncheckedCreateWithoutConsentInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutConsentInput
    connect?: PatientProfileWhereUniqueInput
  }

  export type PatientProfileUpdateOneRequiredWithoutConsentNestedInput = {
    create?: XOR<PatientProfileCreateWithoutConsentInput, PatientProfileUncheckedCreateWithoutConsentInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutConsentInput
    upsert?: PatientProfileUpsertWithoutConsentInput
    connect?: PatientProfileWhereUniqueInput
    update?: XOR<XOR<PatientProfileUpdateToOneWithWhereWithoutConsentInput, PatientProfileUpdateWithoutConsentInput>, PatientProfileUncheckedUpdateWithoutConsentInput>
  }

  export type PatientProfileCreateNestedOneWithoutMedicalRecordRequestsInput = {
    create?: XOR<PatientProfileCreateWithoutMedicalRecordRequestsInput, PatientProfileUncheckedCreateWithoutMedicalRecordRequestsInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutMedicalRecordRequestsInput
    connect?: PatientProfileWhereUniqueInput
  }

  export type InpatientEncounterCreateNestedOneWithoutMedicalRecordRequestInput = {
    create?: XOR<InpatientEncounterCreateWithoutMedicalRecordRequestInput, InpatientEncounterUncheckedCreateWithoutMedicalRecordRequestInput>
    connectOrCreate?: InpatientEncounterCreateOrConnectWithoutMedicalRecordRequestInput
    connect?: InpatientEncounterWhereUniqueInput
  }

  export type PatientProfileUpdateOneRequiredWithoutMedicalRecordRequestsNestedInput = {
    create?: XOR<PatientProfileCreateWithoutMedicalRecordRequestsInput, PatientProfileUncheckedCreateWithoutMedicalRecordRequestsInput>
    connectOrCreate?: PatientProfileCreateOrConnectWithoutMedicalRecordRequestsInput
    upsert?: PatientProfileUpsertWithoutMedicalRecordRequestsInput
    connect?: PatientProfileWhereUniqueInput
    update?: XOR<XOR<PatientProfileUpdateToOneWithWhereWithoutMedicalRecordRequestsInput, PatientProfileUpdateWithoutMedicalRecordRequestsInput>, PatientProfileUncheckedUpdateWithoutMedicalRecordRequestsInput>
  }

  export type InpatientEncounterUpdateOneRequiredWithoutMedicalRecordRequestNestedInput = {
    create?: XOR<InpatientEncounterCreateWithoutMedicalRecordRequestInput, InpatientEncounterUncheckedCreateWithoutMedicalRecordRequestInput>
    connectOrCreate?: InpatientEncounterCreateOrConnectWithoutMedicalRecordRequestInput
    upsert?: InpatientEncounterUpsertWithoutMedicalRecordRequestInput
    connect?: InpatientEncounterWhereUniqueInput
    update?: XOR<XOR<InpatientEncounterUpdateToOneWithWhereWithoutMedicalRecordRequestInput, InpatientEncounterUpdateWithoutMedicalRecordRequestInput>, InpatientEncounterUncheckedUpdateWithoutMedicalRecordRequestInput>
  }

  export type PharmacyItemCreateNestedManyWithoutBrandInput = {
    create?: XOR<PharmacyItemCreateWithoutBrandInput, PharmacyItemUncheckedCreateWithoutBrandInput> | PharmacyItemCreateWithoutBrandInput[] | PharmacyItemUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: PharmacyItemCreateOrConnectWithoutBrandInput | PharmacyItemCreateOrConnectWithoutBrandInput[]
    createMany?: PharmacyItemCreateManyBrandInputEnvelope
    connect?: PharmacyItemWhereUniqueInput | PharmacyItemWhereUniqueInput[]
  }

  export type PharmacyItemUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<PharmacyItemCreateWithoutBrandInput, PharmacyItemUncheckedCreateWithoutBrandInput> | PharmacyItemCreateWithoutBrandInput[] | PharmacyItemUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: PharmacyItemCreateOrConnectWithoutBrandInput | PharmacyItemCreateOrConnectWithoutBrandInput[]
    createMany?: PharmacyItemCreateManyBrandInputEnvelope
    connect?: PharmacyItemWhereUniqueInput | PharmacyItemWhereUniqueInput[]
  }

  export type PharmacyItemUpdateManyWithoutBrandNestedInput = {
    create?: XOR<PharmacyItemCreateWithoutBrandInput, PharmacyItemUncheckedCreateWithoutBrandInput> | PharmacyItemCreateWithoutBrandInput[] | PharmacyItemUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: PharmacyItemCreateOrConnectWithoutBrandInput | PharmacyItemCreateOrConnectWithoutBrandInput[]
    upsert?: PharmacyItemUpsertWithWhereUniqueWithoutBrandInput | PharmacyItemUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: PharmacyItemCreateManyBrandInputEnvelope
    set?: PharmacyItemWhereUniqueInput | PharmacyItemWhereUniqueInput[]
    disconnect?: PharmacyItemWhereUniqueInput | PharmacyItemWhereUniqueInput[]
    delete?: PharmacyItemWhereUniqueInput | PharmacyItemWhereUniqueInput[]
    connect?: PharmacyItemWhereUniqueInput | PharmacyItemWhereUniqueInput[]
    update?: PharmacyItemUpdateWithWhereUniqueWithoutBrandInput | PharmacyItemUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: PharmacyItemUpdateManyWithWhereWithoutBrandInput | PharmacyItemUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: PharmacyItemScalarWhereInput | PharmacyItemScalarWhereInput[]
  }

  export type PharmacyItemUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<PharmacyItemCreateWithoutBrandInput, PharmacyItemUncheckedCreateWithoutBrandInput> | PharmacyItemCreateWithoutBrandInput[] | PharmacyItemUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: PharmacyItemCreateOrConnectWithoutBrandInput | PharmacyItemCreateOrConnectWithoutBrandInput[]
    upsert?: PharmacyItemUpsertWithWhereUniqueWithoutBrandInput | PharmacyItemUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: PharmacyItemCreateManyBrandInputEnvelope
    set?: PharmacyItemWhereUniqueInput | PharmacyItemWhereUniqueInput[]
    disconnect?: PharmacyItemWhereUniqueInput | PharmacyItemWhereUniqueInput[]
    delete?: PharmacyItemWhereUniqueInput | PharmacyItemWhereUniqueInput[]
    connect?: PharmacyItemWhereUniqueInput | PharmacyItemWhereUniqueInput[]
    update?: PharmacyItemUpdateWithWhereUniqueWithoutBrandInput | PharmacyItemUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: PharmacyItemUpdateManyWithWhereWithoutBrandInput | PharmacyItemUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: PharmacyItemScalarWhereInput | PharmacyItemScalarWhereInput[]
  }

  export type PharmacyItemCreateNestedManyWithoutCategoryInput = {
    create?: XOR<PharmacyItemCreateWithoutCategoryInput, PharmacyItemUncheckedCreateWithoutCategoryInput> | PharmacyItemCreateWithoutCategoryInput[] | PharmacyItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PharmacyItemCreateOrConnectWithoutCategoryInput | PharmacyItemCreateOrConnectWithoutCategoryInput[]
    createMany?: PharmacyItemCreateManyCategoryInputEnvelope
    connect?: PharmacyItemWhereUniqueInput | PharmacyItemWhereUniqueInput[]
  }

  export type PharmacyItemUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<PharmacyItemCreateWithoutCategoryInput, PharmacyItemUncheckedCreateWithoutCategoryInput> | PharmacyItemCreateWithoutCategoryInput[] | PharmacyItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PharmacyItemCreateOrConnectWithoutCategoryInput | PharmacyItemCreateOrConnectWithoutCategoryInput[]
    createMany?: PharmacyItemCreateManyCategoryInputEnvelope
    connect?: PharmacyItemWhereUniqueInput | PharmacyItemWhereUniqueInput[]
  }

  export type PharmacyItemUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<PharmacyItemCreateWithoutCategoryInput, PharmacyItemUncheckedCreateWithoutCategoryInput> | PharmacyItemCreateWithoutCategoryInput[] | PharmacyItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PharmacyItemCreateOrConnectWithoutCategoryInput | PharmacyItemCreateOrConnectWithoutCategoryInput[]
    upsert?: PharmacyItemUpsertWithWhereUniqueWithoutCategoryInput | PharmacyItemUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: PharmacyItemCreateManyCategoryInputEnvelope
    set?: PharmacyItemWhereUniqueInput | PharmacyItemWhereUniqueInput[]
    disconnect?: PharmacyItemWhereUniqueInput | PharmacyItemWhereUniqueInput[]
    delete?: PharmacyItemWhereUniqueInput | PharmacyItemWhereUniqueInput[]
    connect?: PharmacyItemWhereUniqueInput | PharmacyItemWhereUniqueInput[]
    update?: PharmacyItemUpdateWithWhereUniqueWithoutCategoryInput | PharmacyItemUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: PharmacyItemUpdateManyWithWhereWithoutCategoryInput | PharmacyItemUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: PharmacyItemScalarWhereInput | PharmacyItemScalarWhereInput[]
  }

  export type PharmacyItemUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<PharmacyItemCreateWithoutCategoryInput, PharmacyItemUncheckedCreateWithoutCategoryInput> | PharmacyItemCreateWithoutCategoryInput[] | PharmacyItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PharmacyItemCreateOrConnectWithoutCategoryInput | PharmacyItemCreateOrConnectWithoutCategoryInput[]
    upsert?: PharmacyItemUpsertWithWhereUniqueWithoutCategoryInput | PharmacyItemUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: PharmacyItemCreateManyCategoryInputEnvelope
    set?: PharmacyItemWhereUniqueInput | PharmacyItemWhereUniqueInput[]
    disconnect?: PharmacyItemWhereUniqueInput | PharmacyItemWhereUniqueInput[]
    delete?: PharmacyItemWhereUniqueInput | PharmacyItemWhereUniqueInput[]
    connect?: PharmacyItemWhereUniqueInput | PharmacyItemWhereUniqueInput[]
    update?: PharmacyItemUpdateWithWhereUniqueWithoutCategoryInput | PharmacyItemUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: PharmacyItemUpdateManyWithWhereWithoutCategoryInput | PharmacyItemUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: PharmacyItemScalarWhereInput | PharmacyItemScalarWhereInput[]
  }

  export type PharmacyBrandCreateNestedOneWithoutItemsInput = {
    create?: XOR<PharmacyBrandCreateWithoutItemsInput, PharmacyBrandUncheckedCreateWithoutItemsInput>
    connectOrCreate?: PharmacyBrandCreateOrConnectWithoutItemsInput
    connect?: PharmacyBrandWhereUniqueInput
  }

  export type PharmacyItemCategoryCreateNestedOneWithoutItemsInput = {
    create?: XOR<PharmacyItemCategoryCreateWithoutItemsInput, PharmacyItemCategoryUncheckedCreateWithoutItemsInput>
    connectOrCreate?: PharmacyItemCategoryCreateOrConnectWithoutItemsInput
    connect?: PharmacyItemCategoryWhereUniqueInput
  }

  export type EnumPharmacyItemFormFieldUpdateOperationsInput = {
    set?: $Enums.PharmacyItemForm
  }

  export type EnumPharmacyItemRouteFieldUpdateOperationsInput = {
    set?: $Enums.PharmacyItemRoute
  }

  export type PharmacyBrandUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<PharmacyBrandCreateWithoutItemsInput, PharmacyBrandUncheckedCreateWithoutItemsInput>
    connectOrCreate?: PharmacyBrandCreateOrConnectWithoutItemsInput
    upsert?: PharmacyBrandUpsertWithoutItemsInput
    connect?: PharmacyBrandWhereUniqueInput
    update?: XOR<XOR<PharmacyBrandUpdateToOneWithWhereWithoutItemsInput, PharmacyBrandUpdateWithoutItemsInput>, PharmacyBrandUncheckedUpdateWithoutItemsInput>
  }

  export type PharmacyItemCategoryUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<PharmacyItemCategoryCreateWithoutItemsInput, PharmacyItemCategoryUncheckedCreateWithoutItemsInput>
    connectOrCreate?: PharmacyItemCategoryCreateOrConnectWithoutItemsInput
    upsert?: PharmacyItemCategoryUpsertWithoutItemsInput
    connect?: PharmacyItemCategoryWhereUniqueInput
    update?: XOR<XOR<PharmacyItemCategoryUpdateToOneWithWhereWithoutItemsInput, PharmacyItemCategoryUpdateWithoutItemsInput>, PharmacyItemCategoryUncheckedUpdateWithoutItemsInput>
  }

  export type RefreshTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
  }

  export type PatientCreateNestedOneWithoutUserInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput
    connect?: PatientWhereUniqueInput
  }

  export type StaffCreateNestedOneWithoutUserInput = {
    create?: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffCreateOrConnectWithoutUserInput
    connect?: StaffWhereUniqueInput
  }

  export type PartnerCreateNestedOneWithoutUserInput = {
    create?: XOR<PartnerCreateWithoutUserInput, PartnerUncheckedCreateWithoutUserInput>
    connectOrCreate?: PartnerCreateOrConnectWithoutUserInput
    connect?: PartnerWhereUniqueInput
  }

  export type DoctorCreateNestedOneWithoutUserInput = {
    create?: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutUserInput
    connect?: DoctorWhereUniqueInput
  }

  export type RefreshTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
  }

  export type PatientUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput
    connect?: PatientWhereUniqueInput
  }

  export type StaffUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffCreateOrConnectWithoutUserInput
    connect?: StaffWhereUniqueInput
  }

  export type PartnerUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PartnerCreateWithoutUserInput, PartnerUncheckedCreateWithoutUserInput>
    connectOrCreate?: PartnerCreateOrConnectWithoutUserInput
    connect?: PartnerWhereUniqueInput
  }

  export type DoctorUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutUserInput
    connect?: DoctorWhereUniqueInput
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type EnumUserStatusFieldUpdateOperationsInput = {
    set?: $Enums.UserStatus
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableEnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender | null
  }

  export type RefreshTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    upsert?: RefreshTokenUpsertWithWhereUniqueWithoutUserInput | RefreshTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    set?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    disconnect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    delete?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    update?: RefreshTokenUpdateWithWhereUniqueWithoutUserInput | RefreshTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RefreshTokenUpdateManyWithWhereWithoutUserInput | RefreshTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
  }

  export type PatientUpdateOneWithoutUserNestedInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput
    upsert?: PatientUpsertWithoutUserInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutUserInput, PatientUpdateWithoutUserInput>, PatientUncheckedUpdateWithoutUserInput>
  }

  export type StaffUpdateOneWithoutUserNestedInput = {
    create?: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffCreateOrConnectWithoutUserInput
    upsert?: StaffUpsertWithoutUserInput
    disconnect?: StaffWhereInput | boolean
    delete?: StaffWhereInput | boolean
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutUserInput, StaffUpdateWithoutUserInput>, StaffUncheckedUpdateWithoutUserInput>
  }

  export type PartnerUpdateOneWithoutUserNestedInput = {
    create?: XOR<PartnerCreateWithoutUserInput, PartnerUncheckedCreateWithoutUserInput>
    connectOrCreate?: PartnerCreateOrConnectWithoutUserInput
    upsert?: PartnerUpsertWithoutUserInput
    disconnect?: PartnerWhereInput | boolean
    delete?: PartnerWhereInput | boolean
    connect?: PartnerWhereUniqueInput
    update?: XOR<XOR<PartnerUpdateToOneWithWhereWithoutUserInput, PartnerUpdateWithoutUserInput>, PartnerUncheckedUpdateWithoutUserInput>
  }

  export type DoctorUpdateOneWithoutUserNestedInput = {
    create?: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutUserInput
    upsert?: DoctorUpsertWithoutUserInput
    disconnect?: DoctorWhereInput | boolean
    delete?: DoctorWhereInput | boolean
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutUserInput, DoctorUpdateWithoutUserInput>, DoctorUncheckedUpdateWithoutUserInput>
  }

  export type RefreshTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    upsert?: RefreshTokenUpsertWithWhereUniqueWithoutUserInput | RefreshTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    set?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    disconnect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    delete?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    update?: RefreshTokenUpdateWithWhereUniqueWithoutUserInput | RefreshTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RefreshTokenUpdateManyWithWhereWithoutUserInput | RefreshTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
  }

  export type PatientUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput
    upsert?: PatientUpsertWithoutUserInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutUserInput, PatientUpdateWithoutUserInput>, PatientUncheckedUpdateWithoutUserInput>
  }

  export type StaffUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffCreateOrConnectWithoutUserInput
    upsert?: StaffUpsertWithoutUserInput
    disconnect?: StaffWhereInput | boolean
    delete?: StaffWhereInput | boolean
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutUserInput, StaffUpdateWithoutUserInput>, StaffUncheckedUpdateWithoutUserInput>
  }

  export type PartnerUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<PartnerCreateWithoutUserInput, PartnerUncheckedCreateWithoutUserInput>
    connectOrCreate?: PartnerCreateOrConnectWithoutUserInput
    upsert?: PartnerUpsertWithoutUserInput
    disconnect?: PartnerWhereInput | boolean
    delete?: PartnerWhereInput | boolean
    connect?: PartnerWhereUniqueInput
    update?: XOR<XOR<PartnerUpdateToOneWithWhereWithoutUserInput, PartnerUpdateWithoutUserInput>, PartnerUncheckedUpdateWithoutUserInput>
  }

  export type DoctorUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutUserInput
    upsert?: DoctorUpsertWithoutUserInput
    disconnect?: DoctorWhereInput | boolean
    delete?: DoctorWhereInput | boolean
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutUserInput, DoctorUpdateWithoutUserInput>, DoctorUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutRefreshTokensInput = {
    create?: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRefreshTokensNestedInput = {
    create?: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokensInput
    upsert?: UserUpsertWithoutRefreshTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRefreshTokensInput, UserUpdateWithoutRefreshTokensInput>, UserUncheckedUpdateWithoutRefreshTokensInput>
  }

  export type UserCreateNestedOneWithoutPatientProfileInput = {
    create?: XOR<UserCreateWithoutPatientProfileInput, UserUncheckedCreateWithoutPatientProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPatientProfileNestedInput = {
    create?: XOR<UserCreateWithoutPatientProfileInput, UserUncheckedCreateWithoutPatientProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientProfileInput
    upsert?: UserUpsertWithoutPatientProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatientProfileInput, UserUpdateWithoutPatientProfileInput>, UserUncheckedUpdateWithoutPatientProfileInput>
  }

  export type UserCreateNestedOneWithoutStaffProfileInput = {
    create?: XOR<UserCreateWithoutStaffProfileInput, UserUncheckedCreateWithoutStaffProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutStaffProfileInput
    connect?: UserWhereUniqueInput
  }

  export type DoctorCreateNestedOneWithoutStaffInput = {
    create?: XOR<DoctorCreateWithoutStaffInput, DoctorUncheckedCreateWithoutStaffInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutStaffInput
    connect?: DoctorWhereUniqueInput
  }

  export type DoctorUncheckedCreateNestedOneWithoutStaffInput = {
    create?: XOR<DoctorCreateWithoutStaffInput, DoctorUncheckedCreateWithoutStaffInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutStaffInput
    connect?: DoctorWhereUniqueInput
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type UserUpdateOneRequiredWithoutStaffProfileNestedInput = {
    create?: XOR<UserCreateWithoutStaffProfileInput, UserUncheckedCreateWithoutStaffProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutStaffProfileInput
    upsert?: UserUpsertWithoutStaffProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStaffProfileInput, UserUpdateWithoutStaffProfileInput>, UserUncheckedUpdateWithoutStaffProfileInput>
  }

  export type DoctorUpdateOneWithoutStaffNestedInput = {
    create?: XOR<DoctorCreateWithoutStaffInput, DoctorUncheckedCreateWithoutStaffInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutStaffInput
    upsert?: DoctorUpsertWithoutStaffInput
    disconnect?: DoctorWhereInput | boolean
    delete?: DoctorWhereInput | boolean
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutStaffInput, DoctorUpdateWithoutStaffInput>, DoctorUncheckedUpdateWithoutStaffInput>
  }

  export type DoctorUncheckedUpdateOneWithoutStaffNestedInput = {
    create?: XOR<DoctorCreateWithoutStaffInput, DoctorUncheckedCreateWithoutStaffInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutStaffInput
    upsert?: DoctorUpsertWithoutStaffInput
    disconnect?: DoctorWhereInput | boolean
    delete?: DoctorWhereInput | boolean
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutStaffInput, DoctorUpdateWithoutStaffInput>, DoctorUncheckedUpdateWithoutStaffInput>
  }

  export type UserCreateNestedOneWithoutDoctorProfileInput = {
    create?: XOR<UserCreateWithoutDoctorProfileInput, UserUncheckedCreateWithoutDoctorProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutDoctorProfileInput
    connect?: UserWhereUniqueInput
  }

  export type StaffCreateNestedOneWithoutDoctorProfileInput = {
    create?: XOR<StaffCreateWithoutDoctorProfileInput, StaffUncheckedCreateWithoutDoctorProfileInput>
    connectOrCreate?: StaffCreateOrConnectWithoutDoctorProfileInput
    connect?: StaffWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDoctorProfileNestedInput = {
    create?: XOR<UserCreateWithoutDoctorProfileInput, UserUncheckedCreateWithoutDoctorProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutDoctorProfileInput
    upsert?: UserUpsertWithoutDoctorProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDoctorProfileInput, UserUpdateWithoutDoctorProfileInput>, UserUncheckedUpdateWithoutDoctorProfileInput>
  }

  export type StaffUpdateOneRequiredWithoutDoctorProfileNestedInput = {
    create?: XOR<StaffCreateWithoutDoctorProfileInput, StaffUncheckedCreateWithoutDoctorProfileInput>
    connectOrCreate?: StaffCreateOrConnectWithoutDoctorProfileInput
    upsert?: StaffUpsertWithoutDoctorProfileInput
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutDoctorProfileInput, StaffUpdateWithoutDoctorProfileInput>, StaffUncheckedUpdateWithoutDoctorProfileInput>
  }

  export type UserCreateNestedOneWithoutPartnerProfileInput = {
    create?: XOR<UserCreateWithoutPartnerProfileInput, UserUncheckedCreateWithoutPartnerProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutPartnerProfileInput
    connect?: UserWhereUniqueInput
  }

  export type EnumPartnerTypeFieldUpdateOperationsInput = {
    set?: $Enums.PartnerType
  }

  export type UserUpdateOneRequiredWithoutPartnerProfileNestedInput = {
    create?: XOR<UserCreateWithoutPartnerProfileInput, UserUncheckedCreateWithoutPartnerProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutPartnerProfileInput
    upsert?: UserUpsertWithoutPartnerProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPartnerProfileInput, UserUpdateWithoutPartnerProfileInput>, UserUncheckedUpdateWithoutPartnerProfileInput>
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedUuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumAppointmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusFilter<$PrismaModel> | $Enums.AppointmentStatus
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedUuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAppointmentStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumOutpatientEncounterTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.OutpatientEncounterType | EnumOutpatientEncounterTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OutpatientEncounterType[] | ListEnumOutpatientEncounterTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OutpatientEncounterType[] | ListEnumOutpatientEncounterTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOutpatientEncounterTypeFilter<$PrismaModel> | $Enums.OutpatientEncounterType
  }

  export type NestedEnumOutpatientEncounterTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OutpatientEncounterType | EnumOutpatientEncounterTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OutpatientEncounterType[] | ListEnumOutpatientEncounterTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OutpatientEncounterType[] | ListEnumOutpatientEncounterTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOutpatientEncounterTypeWithAggregatesFilter<$PrismaModel> | $Enums.OutpatientEncounterType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOutpatientEncounterTypeFilter<$PrismaModel>
    _max?: NestedEnumOutpatientEncounterTypeFilter<$PrismaModel>
  }

  export type NestedEnumInpatientTriageFilter<$PrismaModel = never> = {
    equals?: $Enums.InpatientTriage | EnumInpatientTriageFieldRefInput<$PrismaModel>
    in?: $Enums.InpatientTriage[] | ListEnumInpatientTriageFieldRefInput<$PrismaModel>
    notIn?: $Enums.InpatientTriage[] | ListEnumInpatientTriageFieldRefInput<$PrismaModel>
    not?: NestedEnumInpatientTriageFilter<$PrismaModel> | $Enums.InpatientTriage
  }

  export type NestedEnumInpatientDispositionFilter<$PrismaModel = never> = {
    equals?: $Enums.InpatientDisposition | EnumInpatientDispositionFieldRefInput<$PrismaModel>
    in?: $Enums.InpatientDisposition[] | ListEnumInpatientDispositionFieldRefInput<$PrismaModel>
    notIn?: $Enums.InpatientDisposition[] | ListEnumInpatientDispositionFieldRefInput<$PrismaModel>
    not?: NestedEnumInpatientDispositionFilter<$PrismaModel> | $Enums.InpatientDisposition
  }

  export type NestedEnumInpatientTriageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InpatientTriage | EnumInpatientTriageFieldRefInput<$PrismaModel>
    in?: $Enums.InpatientTriage[] | ListEnumInpatientTriageFieldRefInput<$PrismaModel>
    notIn?: $Enums.InpatientTriage[] | ListEnumInpatientTriageFieldRefInput<$PrismaModel>
    not?: NestedEnumInpatientTriageWithAggregatesFilter<$PrismaModel> | $Enums.InpatientTriage
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInpatientTriageFilter<$PrismaModel>
    _max?: NestedEnumInpatientTriageFilter<$PrismaModel>
  }

  export type NestedEnumInpatientDispositionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InpatientDisposition | EnumInpatientDispositionFieldRefInput<$PrismaModel>
    in?: $Enums.InpatientDisposition[] | ListEnumInpatientDispositionFieldRefInput<$PrismaModel>
    notIn?: $Enums.InpatientDisposition[] | ListEnumInpatientDispositionFieldRefInput<$PrismaModel>
    not?: NestedEnumInpatientDispositionWithAggregatesFilter<$PrismaModel> | $Enums.InpatientDisposition
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInpatientDispositionFilter<$PrismaModel>
    _max?: NestedEnumInpatientDispositionFilter<$PrismaModel>
  }

  export type NestedEnumInpatientEncounterOrderTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InpatientEncounterOrderType | EnumInpatientEncounterOrderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InpatientEncounterOrderType[] | ListEnumInpatientEncounterOrderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InpatientEncounterOrderType[] | ListEnumInpatientEncounterOrderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInpatientEncounterOrderTypeFilter<$PrismaModel> | $Enums.InpatientEncounterOrderType
  }

  export type NestedEnumInpatientEncounterOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InpatientEncounterOrderStatus | EnumInpatientEncounterOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InpatientEncounterOrderStatus[] | ListEnumInpatientEncounterOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InpatientEncounterOrderStatus[] | ListEnumInpatientEncounterOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInpatientEncounterOrderStatusFilter<$PrismaModel> | $Enums.InpatientEncounterOrderStatus
  }

  export type NestedEnumInpatientEncounterOrderTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InpatientEncounterOrderType | EnumInpatientEncounterOrderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InpatientEncounterOrderType[] | ListEnumInpatientEncounterOrderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InpatientEncounterOrderType[] | ListEnumInpatientEncounterOrderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInpatientEncounterOrderTypeWithAggregatesFilter<$PrismaModel> | $Enums.InpatientEncounterOrderType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInpatientEncounterOrderTypeFilter<$PrismaModel>
    _max?: NestedEnumInpatientEncounterOrderTypeFilter<$PrismaModel>
  }

  export type NestedEnumInpatientEncounterOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InpatientEncounterOrderStatus | EnumInpatientEncounterOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InpatientEncounterOrderStatus[] | ListEnumInpatientEncounterOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InpatientEncounterOrderStatus[] | ListEnumInpatientEncounterOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInpatientEncounterOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.InpatientEncounterOrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInpatientEncounterOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumInpatientEncounterOrderStatusFilter<$PrismaModel>
  }

  export type NestedEnumRoomTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RoomType | EnumRoomTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoomTypeFilter<$PrismaModel> | $Enums.RoomType
  }

  export type NestedEnumRoomStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RoomStatus | EnumRoomStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RoomStatus[] | ListEnumRoomStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoomStatus[] | ListEnumRoomStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRoomStatusFilter<$PrismaModel> | $Enums.RoomStatus
  }

  export type NestedEnumRoomTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoomType | EnumRoomTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoomTypeWithAggregatesFilter<$PrismaModel> | $Enums.RoomType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoomTypeFilter<$PrismaModel>
    _max?: NestedEnumRoomTypeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRoomStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoomStatus | EnumRoomStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RoomStatus[] | ListEnumRoomStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoomStatus[] | ListEnumRoomStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRoomStatusWithAggregatesFilter<$PrismaModel> | $Enums.RoomStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoomStatusFilter<$PrismaModel>
    _max?: NestedEnumRoomStatusFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumSexNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel> | null
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel> | null
    not?: NestedEnumSexNullableFilter<$PrismaModel> | $Enums.Sex | null
  }

  export type NestedEnumMaritalStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MaritalStatus | EnumMaritalStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMaritalStatusNullableFilter<$PrismaModel> | $Enums.MaritalStatus | null
  }

  export type NestedEnumBloodTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.BloodType | EnumBloodTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BloodType[] | ListEnumBloodTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BloodType[] | ListEnumBloodTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBloodTypeNullableFilter<$PrismaModel> | $Enums.BloodType | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumSexNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel> | null
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel> | null
    not?: NestedEnumSexNullableWithAggregatesFilter<$PrismaModel> | $Enums.Sex | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumSexNullableFilter<$PrismaModel>
    _max?: NestedEnumSexNullableFilter<$PrismaModel>
  }

  export type NestedEnumMaritalStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaritalStatus | EnumMaritalStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MaritalStatus[] | ListEnumMaritalStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMaritalStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.MaritalStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMaritalStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumMaritalStatusNullableFilter<$PrismaModel>
  }

  export type NestedEnumBloodTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BloodType | EnumBloodTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BloodType[] | ListEnumBloodTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BloodType[] | ListEnumBloodTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBloodTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.BloodType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBloodTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumBloodTypeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumContactTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ContactType | EnumContactTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContactType[] | ListEnumContactTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContactType[] | ListEnumContactTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumContactTypeFilter<$PrismaModel> | $Enums.ContactType
  }

  export type NestedEnumContactTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContactType | EnumContactTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContactType[] | ListEnumContactTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContactType[] | ListEnumContactTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumContactTypeWithAggregatesFilter<$PrismaModel> | $Enums.ContactType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContactTypeFilter<$PrismaModel>
    _max?: NestedEnumContactTypeFilter<$PrismaModel>
  }

  export type NestedEnumRelationshipFilter<$PrismaModel = never> = {
    equals?: $Enums.Relationship | EnumRelationshipFieldRefInput<$PrismaModel>
    in?: $Enums.Relationship[] | ListEnumRelationshipFieldRefInput<$PrismaModel>
    notIn?: $Enums.Relationship[] | ListEnumRelationshipFieldRefInput<$PrismaModel>
    not?: NestedEnumRelationshipFilter<$PrismaModel> | $Enums.Relationship
  }

  export type NestedEnumRelationshipWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Relationship | EnumRelationshipFieldRefInput<$PrismaModel>
    in?: $Enums.Relationship[] | ListEnumRelationshipFieldRefInput<$PrismaModel>
    notIn?: $Enums.Relationship[] | ListEnumRelationshipFieldRefInput<$PrismaModel>
    not?: NestedEnumRelationshipWithAggregatesFilter<$PrismaModel> | $Enums.Relationship
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRelationshipFilter<$PrismaModel>
    _max?: NestedEnumRelationshipFilter<$PrismaModel>
  }

  export type NestedEnumPharmacyItemFormFilter<$PrismaModel = never> = {
    equals?: $Enums.PharmacyItemForm | EnumPharmacyItemFormFieldRefInput<$PrismaModel>
    in?: $Enums.PharmacyItemForm[] | ListEnumPharmacyItemFormFieldRefInput<$PrismaModel>
    notIn?: $Enums.PharmacyItemForm[] | ListEnumPharmacyItemFormFieldRefInput<$PrismaModel>
    not?: NestedEnumPharmacyItemFormFilter<$PrismaModel> | $Enums.PharmacyItemForm
  }

  export type NestedEnumPharmacyItemRouteFilter<$PrismaModel = never> = {
    equals?: $Enums.PharmacyItemRoute | EnumPharmacyItemRouteFieldRefInput<$PrismaModel>
    in?: $Enums.PharmacyItemRoute[] | ListEnumPharmacyItemRouteFieldRefInput<$PrismaModel>
    notIn?: $Enums.PharmacyItemRoute[] | ListEnumPharmacyItemRouteFieldRefInput<$PrismaModel>
    not?: NestedEnumPharmacyItemRouteFilter<$PrismaModel> | $Enums.PharmacyItemRoute
  }

  export type NestedEnumPharmacyItemFormWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PharmacyItemForm | EnumPharmacyItemFormFieldRefInput<$PrismaModel>
    in?: $Enums.PharmacyItemForm[] | ListEnumPharmacyItemFormFieldRefInput<$PrismaModel>
    notIn?: $Enums.PharmacyItemForm[] | ListEnumPharmacyItemFormFieldRefInput<$PrismaModel>
    not?: NestedEnumPharmacyItemFormWithAggregatesFilter<$PrismaModel> | $Enums.PharmacyItemForm
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPharmacyItemFormFilter<$PrismaModel>
    _max?: NestedEnumPharmacyItemFormFilter<$PrismaModel>
  }

  export type NestedEnumPharmacyItemRouteWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PharmacyItemRoute | EnumPharmacyItemRouteFieldRefInput<$PrismaModel>
    in?: $Enums.PharmacyItemRoute[] | ListEnumPharmacyItemRouteFieldRefInput<$PrismaModel>
    notIn?: $Enums.PharmacyItemRoute[] | ListEnumPharmacyItemRouteFieldRefInput<$PrismaModel>
    not?: NestedEnumPharmacyItemRouteWithAggregatesFilter<$PrismaModel> | $Enums.PharmacyItemRoute
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPharmacyItemRouteFilter<$PrismaModel>
    _max?: NestedEnumPharmacyItemRouteFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedEnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedEnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumPartnerTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PartnerType | EnumPartnerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PartnerType[] | ListEnumPartnerTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PartnerType[] | ListEnumPartnerTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPartnerTypeFilter<$PrismaModel> | $Enums.PartnerType
  }

  export type NestedEnumPartnerTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PartnerType | EnumPartnerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PartnerType[] | ListEnumPartnerTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PartnerType[] | ListEnumPartnerTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPartnerTypeWithAggregatesFilter<$PrismaModel> | $Enums.PartnerType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPartnerTypeFilter<$PrismaModel>
    _max?: NestedEnumPartnerTypeFilter<$PrismaModel>
  }

  export type PatientProfileCreateWithoutAppointmentsInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterCreateNestedManyWithoutPatientProfileInput
    inpatientEncounters?: InpatientEncounterCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterCreateNestedManyWithoutPatientProfileInput
    patientAppointments?: PatientAppointmentCreateNestedManyWithoutPatientInput
    addresses?: AddressCreateNestedManyWithoutPatientProfileInput
    contacts?: ContactCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileUncheckedCreateWithoutAppointmentsInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    inpatientEncounters?: InpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    patientAppointments?: PatientAppointmentUncheckedCreateNestedManyWithoutPatientInput
    addresses?: AddressUncheckedCreateNestedManyWithoutPatientProfileInput
    contacts?: ContactUncheckedCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentUncheckedCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileCreateOrConnectWithoutAppointmentsInput = {
    where: PatientProfileWhereUniqueInput
    create: XOR<PatientProfileCreateWithoutAppointmentsInput, PatientProfileUncheckedCreateWithoutAppointmentsInput>
  }

  export type RoomCreateWithoutAppointmentsInput = {
    id?: string
    type: $Enums.RoomType
    identifier: string
    description?: string | null
    capacity?: number | null
    status: $Enums.RoomStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    building: BuildingCreateNestedOneWithoutRoomsInput
  }

  export type RoomUncheckedCreateWithoutAppointmentsInput = {
    id?: string
    buildingId: string
    type: $Enums.RoomType
    identifier: string
    description?: string | null
    capacity?: number | null
    status: $Enums.RoomStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomCreateOrConnectWithoutAppointmentsInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutAppointmentsInput, RoomUncheckedCreateWithoutAppointmentsInput>
  }

  export type PatientAppointmentCreateWithoutAppointmentInput = {
    id?: string
    doctorId: string
    date: string
    time: string
    status?: $Enums.AppointmentStatus
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientProfileCreateNestedOneWithoutPatientAppointmentsInput
  }

  export type PatientAppointmentUncheckedCreateWithoutAppointmentInput = {
    id?: string
    patientId: string
    doctorId: string
    date: string
    time: string
    status?: $Enums.AppointmentStatus
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientAppointmentCreateOrConnectWithoutAppointmentInput = {
    where: PatientAppointmentWhereUniqueInput
    create: XOR<PatientAppointmentCreateWithoutAppointmentInput, PatientAppointmentUncheckedCreateWithoutAppointmentInput>
  }

  export type PatientProfileUpsertWithoutAppointmentsInput = {
    update: XOR<PatientProfileUpdateWithoutAppointmentsInput, PatientProfileUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<PatientProfileCreateWithoutAppointmentsInput, PatientProfileUncheckedCreateWithoutAppointmentsInput>
    where?: PatientProfileWhereInput
  }

  export type PatientProfileUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: PatientProfileWhereInput
    data: XOR<PatientProfileUpdateWithoutAppointmentsInput, PatientProfileUncheckedUpdateWithoutAppointmentsInput>
  }

  export type PatientProfileUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUpdateManyWithoutPatientProfileNestedInput
    inpatientEncounters?: InpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    patientAppointments?: PatientAppointmentUpdateManyWithoutPatientNestedInput
    addresses?: AddressUpdateManyWithoutPatientProfileNestedInput
    contacts?: ContactUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUpdateOneWithoutPatientProfileNestedInput
  }

  export type PatientProfileUncheckedUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    inpatientEncounters?: InpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    patientAppointments?: PatientAppointmentUncheckedUpdateManyWithoutPatientNestedInput
    addresses?: AddressUncheckedUpdateManyWithoutPatientProfileNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUncheckedUpdateOneWithoutPatientProfileNestedInput
  }

  export type RoomUpsertWithoutAppointmentsInput = {
    update: XOR<RoomUpdateWithoutAppointmentsInput, RoomUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<RoomCreateWithoutAppointmentsInput, RoomUncheckedCreateWithoutAppointmentsInput>
    where?: RoomWhereInput
  }

  export type RoomUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: RoomWhereInput
    data: XOR<RoomUpdateWithoutAppointmentsInput, RoomUncheckedUpdateWithoutAppointmentsInput>
  }

  export type RoomUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    identifier?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumRoomStatusFieldUpdateOperationsInput | $Enums.RoomStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    building?: BuildingUpdateOneRequiredWithoutRoomsNestedInput
  }

  export type RoomUncheckedUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    buildingId?: StringFieldUpdateOperationsInput | string
    type?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    identifier?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumRoomStatusFieldUpdateOperationsInput | $Enums.RoomStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientAppointmentUpsertWithoutAppointmentInput = {
    update: XOR<PatientAppointmentUpdateWithoutAppointmentInput, PatientAppointmentUncheckedUpdateWithoutAppointmentInput>
    create: XOR<PatientAppointmentCreateWithoutAppointmentInput, PatientAppointmentUncheckedCreateWithoutAppointmentInput>
    where?: PatientAppointmentWhereInput
  }

  export type PatientAppointmentUpdateToOneWithWhereWithoutAppointmentInput = {
    where?: PatientAppointmentWhereInput
    data: XOR<PatientAppointmentUpdateWithoutAppointmentInput, PatientAppointmentUncheckedUpdateWithoutAppointmentInput>
  }

  export type PatientAppointmentUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientProfileUpdateOneRequiredWithoutPatientAppointmentsNestedInput
  }

  export type PatientAppointmentUncheckedUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientProfileCreateWithoutPatientAppointmentsInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterCreateNestedManyWithoutPatientProfileInput
    inpatientEncounters?: InpatientEncounterCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    addresses?: AddressCreateNestedManyWithoutPatientProfileInput
    contacts?: ContactCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileUncheckedCreateWithoutPatientAppointmentsInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    inpatientEncounters?: InpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    addresses?: AddressUncheckedCreateNestedManyWithoutPatientProfileInput
    contacts?: ContactUncheckedCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentUncheckedCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileCreateOrConnectWithoutPatientAppointmentsInput = {
    where: PatientProfileWhereUniqueInput
    create: XOR<PatientProfileCreateWithoutPatientAppointmentsInput, PatientProfileUncheckedCreateWithoutPatientAppointmentsInput>
  }

  export type AppointmentCreateWithoutPatientAppointmentInput = {
    id?: string
    doctorId: string
    date: string
    time: string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientProfileCreateNestedOneWithoutAppointmentsInput
    facility?: RoomCreateNestedOneWithoutAppointmentsInput
  }

  export type AppointmentUncheckedCreateWithoutPatientAppointmentInput = {
    id?: string
    patientId: string
    doctorId: string
    facilityId?: string | null
    date: string
    time: string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentCreateOrConnectWithoutPatientAppointmentInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutPatientAppointmentInput, AppointmentUncheckedCreateWithoutPatientAppointmentInput>
  }

  export type PatientProfileUpsertWithoutPatientAppointmentsInput = {
    update: XOR<PatientProfileUpdateWithoutPatientAppointmentsInput, PatientProfileUncheckedUpdateWithoutPatientAppointmentsInput>
    create: XOR<PatientProfileCreateWithoutPatientAppointmentsInput, PatientProfileUncheckedCreateWithoutPatientAppointmentsInput>
    where?: PatientProfileWhereInput
  }

  export type PatientProfileUpdateToOneWithWhereWithoutPatientAppointmentsInput = {
    where?: PatientProfileWhereInput
    data: XOR<PatientProfileUpdateWithoutPatientAppointmentsInput, PatientProfileUncheckedUpdateWithoutPatientAppointmentsInput>
  }

  export type PatientProfileUpdateWithoutPatientAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUpdateManyWithoutPatientProfileNestedInput
    inpatientEncounters?: InpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    addresses?: AddressUpdateManyWithoutPatientProfileNestedInput
    contacts?: ContactUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUpdateOneWithoutPatientProfileNestedInput
  }

  export type PatientProfileUncheckedUpdateWithoutPatientAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    inpatientEncounters?: InpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    addresses?: AddressUncheckedUpdateManyWithoutPatientProfileNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUncheckedUpdateOneWithoutPatientProfileNestedInput
  }

  export type AppointmentUpsertWithoutPatientAppointmentInput = {
    update: XOR<AppointmentUpdateWithoutPatientAppointmentInput, AppointmentUncheckedUpdateWithoutPatientAppointmentInput>
    create: XOR<AppointmentCreateWithoutPatientAppointmentInput, AppointmentUncheckedCreateWithoutPatientAppointmentInput>
    where?: AppointmentWhereInput
  }

  export type AppointmentUpdateToOneWithWhereWithoutPatientAppointmentInput = {
    where?: AppointmentWhereInput
    data: XOR<AppointmentUpdateWithoutPatientAppointmentInput, AppointmentUncheckedUpdateWithoutPatientAppointmentInput>
  }

  export type AppointmentUpdateWithoutPatientAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientProfileUpdateOneRequiredWithoutAppointmentsNestedInput
    facility?: RoomUpdateOneWithoutAppointmentsNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutPatientAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    facilityId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientEncounterCreateWithoutTransactionInput = {
    id?: string
    encounterId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patientProfile: PatientProfileCreateNestedOneWithoutPatientEncountersInput
  }

  export type PatientEncounterUncheckedCreateWithoutTransactionInput = {
    id?: string
    encounterId: string
    patientProfileId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientEncounterCreateOrConnectWithoutTransactionInput = {
    where: PatientEncounterWhereUniqueInput
    create: XOR<PatientEncounterCreateWithoutTransactionInput, PatientEncounterUncheckedCreateWithoutTransactionInput>
  }

  export type TransactionItemCreateWithoutTransactionInput = {
    id?: string
    name: string
    description?: string | null
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionItemUncheckedCreateWithoutTransactionInput = {
    id?: string
    name: string
    description?: string | null
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionItemCreateOrConnectWithoutTransactionInput = {
    where: TransactionItemWhereUniqueInput
    create: XOR<TransactionItemCreateWithoutTransactionInput, TransactionItemUncheckedCreateWithoutTransactionInput>
  }

  export type TransactionItemCreateManyTransactionInputEnvelope = {
    data: TransactionItemCreateManyTransactionInput | TransactionItemCreateManyTransactionInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutTransactionInput = {
    id?: string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    instalments?: PaymentInstalmentCreateNestedManyWithoutPaymentInput
  }

  export type PaymentUncheckedCreateWithoutTransactionInput = {
    id?: string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    instalments?: PaymentInstalmentUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type PaymentCreateOrConnectWithoutTransactionInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutTransactionInput, PaymentUncheckedCreateWithoutTransactionInput>
  }

  export type PaymentCreateManyTransactionInputEnvelope = {
    data: PaymentCreateManyTransactionInput | PaymentCreateManyTransactionInput[]
    skipDuplicates?: boolean
  }

  export type PatientEncounterUpsertWithoutTransactionInput = {
    update: XOR<PatientEncounterUpdateWithoutTransactionInput, PatientEncounterUncheckedUpdateWithoutTransactionInput>
    create: XOR<PatientEncounterCreateWithoutTransactionInput, PatientEncounterUncheckedCreateWithoutTransactionInput>
    where?: PatientEncounterWhereInput
  }

  export type PatientEncounterUpdateToOneWithWhereWithoutTransactionInput = {
    where?: PatientEncounterWhereInput
    data: XOR<PatientEncounterUpdateWithoutTransactionInput, PatientEncounterUncheckedUpdateWithoutTransactionInput>
  }

  export type PatientEncounterUpdateWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    encounterId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientProfile?: PatientProfileUpdateOneRequiredWithoutPatientEncountersNestedInput
  }

  export type PatientEncounterUncheckedUpdateWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    encounterId?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionItemUpsertWithWhereUniqueWithoutTransactionInput = {
    where: TransactionItemWhereUniqueInput
    update: XOR<TransactionItemUpdateWithoutTransactionInput, TransactionItemUncheckedUpdateWithoutTransactionInput>
    create: XOR<TransactionItemCreateWithoutTransactionInput, TransactionItemUncheckedCreateWithoutTransactionInput>
  }

  export type TransactionItemUpdateWithWhereUniqueWithoutTransactionInput = {
    where: TransactionItemWhereUniqueInput
    data: XOR<TransactionItemUpdateWithoutTransactionInput, TransactionItemUncheckedUpdateWithoutTransactionInput>
  }

  export type TransactionItemUpdateManyWithWhereWithoutTransactionInput = {
    where: TransactionItemScalarWhereInput
    data: XOR<TransactionItemUpdateManyMutationInput, TransactionItemUncheckedUpdateManyWithoutTransactionInput>
  }

  export type TransactionItemScalarWhereInput = {
    AND?: TransactionItemScalarWhereInput | TransactionItemScalarWhereInput[]
    OR?: TransactionItemScalarWhereInput[]
    NOT?: TransactionItemScalarWhereInput | TransactionItemScalarWhereInput[]
    id?: UuidFilter<"TransactionItem"> | string
    transactionId?: UuidFilter<"TransactionItem"> | string
    name?: StringFilter<"TransactionItem"> | string
    description?: StringNullableFilter<"TransactionItem"> | string | null
    amount?: IntFilter<"TransactionItem"> | number
    createdAt?: DateTimeFilter<"TransactionItem"> | Date | string
    updatedAt?: DateTimeFilter<"TransactionItem"> | Date | string
  }

  export type PaymentUpsertWithWhereUniqueWithoutTransactionInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutTransactionInput, PaymentUncheckedUpdateWithoutTransactionInput>
    create: XOR<PaymentCreateWithoutTransactionInput, PaymentUncheckedCreateWithoutTransactionInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutTransactionInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutTransactionInput, PaymentUncheckedUpdateWithoutTransactionInput>
  }

  export type PaymentUpdateManyWithWhereWithoutTransactionInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutTransactionInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: UuidFilter<"Payment"> | string
    transactionId?: UuidFilter<"Payment"> | string
    amount?: IntFilter<"Payment"> | number
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
  }

  export type TransactionCreateWithoutItemsInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    encounter: PatientEncounterCreateNestedOneWithoutTransactionInput
    payments?: PaymentCreateNestedManyWithoutTransactionInput
  }

  export type TransactionUncheckedCreateWithoutItemsInput = {
    id?: string
    encounterId: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    payments?: PaymentUncheckedCreateNestedManyWithoutTransactionInput
  }

  export type TransactionCreateOrConnectWithoutItemsInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutItemsInput, TransactionUncheckedCreateWithoutItemsInput>
  }

  export type TransactionUpsertWithoutItemsInput = {
    update: XOR<TransactionUpdateWithoutItemsInput, TransactionUncheckedUpdateWithoutItemsInput>
    create: XOR<TransactionCreateWithoutItemsInput, TransactionUncheckedCreateWithoutItemsInput>
    where?: TransactionWhereInput
  }

  export type TransactionUpdateToOneWithWhereWithoutItemsInput = {
    where?: TransactionWhereInput
    data: XOR<TransactionUpdateWithoutItemsInput, TransactionUncheckedUpdateWithoutItemsInput>
  }

  export type TransactionUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    encounter?: PatientEncounterUpdateOneRequiredWithoutTransactionNestedInput
    payments?: PaymentUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    encounterId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payments?: PaymentUncheckedUpdateManyWithoutTransactionNestedInput
  }

  export type PaymentInstalmentCreateWithoutPlanInput = {
    id?: string
    instalmentNumber: number
    amountDue: number
    amountPaid: number
    createdAt?: Date | string
    updatedAt?: Date | string
    payment: PaymentCreateNestedOneWithoutInstalmentsInput
  }

  export type PaymentInstalmentUncheckedCreateWithoutPlanInput = {
    id?: string
    paymentId: string
    instalmentNumber: number
    amountDue: number
    amountPaid: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentInstalmentCreateOrConnectWithoutPlanInput = {
    where: PaymentInstalmentWhereUniqueInput
    create: XOR<PaymentInstalmentCreateWithoutPlanInput, PaymentInstalmentUncheckedCreateWithoutPlanInput>
  }

  export type PaymentInstalmentCreateManyPlanInputEnvelope = {
    data: PaymentInstalmentCreateManyPlanInput | PaymentInstalmentCreateManyPlanInput[]
    skipDuplicates?: boolean
  }

  export type PaymentInstalmentUpsertWithWhereUniqueWithoutPlanInput = {
    where: PaymentInstalmentWhereUniqueInput
    update: XOR<PaymentInstalmentUpdateWithoutPlanInput, PaymentInstalmentUncheckedUpdateWithoutPlanInput>
    create: XOR<PaymentInstalmentCreateWithoutPlanInput, PaymentInstalmentUncheckedCreateWithoutPlanInput>
  }

  export type PaymentInstalmentUpdateWithWhereUniqueWithoutPlanInput = {
    where: PaymentInstalmentWhereUniqueInput
    data: XOR<PaymentInstalmentUpdateWithoutPlanInput, PaymentInstalmentUncheckedUpdateWithoutPlanInput>
  }

  export type PaymentInstalmentUpdateManyWithWhereWithoutPlanInput = {
    where: PaymentInstalmentScalarWhereInput
    data: XOR<PaymentInstalmentUpdateManyMutationInput, PaymentInstalmentUncheckedUpdateManyWithoutPlanInput>
  }

  export type PaymentInstalmentScalarWhereInput = {
    AND?: PaymentInstalmentScalarWhereInput | PaymentInstalmentScalarWhereInput[]
    OR?: PaymentInstalmentScalarWhereInput[]
    NOT?: PaymentInstalmentScalarWhereInput | PaymentInstalmentScalarWhereInput[]
    id?: UuidFilter<"PaymentInstalment"> | string
    paymentId?: UuidFilter<"PaymentInstalment"> | string
    planId?: UuidFilter<"PaymentInstalment"> | string
    instalmentNumber?: IntFilter<"PaymentInstalment"> | number
    amountDue?: IntFilter<"PaymentInstalment"> | number
    amountPaid?: IntFilter<"PaymentInstalment"> | number
    createdAt?: DateTimeFilter<"PaymentInstalment"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentInstalment"> | Date | string
  }

  export type TransactionCreateWithoutPaymentsInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    encounter: PatientEncounterCreateNestedOneWithoutTransactionInput
    items?: TransactionItemCreateNestedManyWithoutTransactionInput
  }

  export type TransactionUncheckedCreateWithoutPaymentsInput = {
    id?: string
    encounterId: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: TransactionItemUncheckedCreateNestedManyWithoutTransactionInput
  }

  export type TransactionCreateOrConnectWithoutPaymentsInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutPaymentsInput, TransactionUncheckedCreateWithoutPaymentsInput>
  }

  export type PaymentInstalmentCreateWithoutPaymentInput = {
    id?: string
    instalmentNumber: number
    amountDue: number
    amountPaid: number
    createdAt?: Date | string
    updatedAt?: Date | string
    plan: PaymentPlanCreateNestedOneWithoutInstalmentsInput
  }

  export type PaymentInstalmentUncheckedCreateWithoutPaymentInput = {
    id?: string
    planId: string
    instalmentNumber: number
    amountDue: number
    amountPaid: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentInstalmentCreateOrConnectWithoutPaymentInput = {
    where: PaymentInstalmentWhereUniqueInput
    create: XOR<PaymentInstalmentCreateWithoutPaymentInput, PaymentInstalmentUncheckedCreateWithoutPaymentInput>
  }

  export type PaymentInstalmentCreateManyPaymentInputEnvelope = {
    data: PaymentInstalmentCreateManyPaymentInput | PaymentInstalmentCreateManyPaymentInput[]
    skipDuplicates?: boolean
  }

  export type TransactionUpsertWithoutPaymentsInput = {
    update: XOR<TransactionUpdateWithoutPaymentsInput, TransactionUncheckedUpdateWithoutPaymentsInput>
    create: XOR<TransactionCreateWithoutPaymentsInput, TransactionUncheckedCreateWithoutPaymentsInput>
    where?: TransactionWhereInput
  }

  export type TransactionUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: TransactionWhereInput
    data: XOR<TransactionUpdateWithoutPaymentsInput, TransactionUncheckedUpdateWithoutPaymentsInput>
  }

  export type TransactionUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    encounter?: PatientEncounterUpdateOneRequiredWithoutTransactionNestedInput
    items?: TransactionItemUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    encounterId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: TransactionItemUncheckedUpdateManyWithoutTransactionNestedInput
  }

  export type PaymentInstalmentUpsertWithWhereUniqueWithoutPaymentInput = {
    where: PaymentInstalmentWhereUniqueInput
    update: XOR<PaymentInstalmentUpdateWithoutPaymentInput, PaymentInstalmentUncheckedUpdateWithoutPaymentInput>
    create: XOR<PaymentInstalmentCreateWithoutPaymentInput, PaymentInstalmentUncheckedCreateWithoutPaymentInput>
  }

  export type PaymentInstalmentUpdateWithWhereUniqueWithoutPaymentInput = {
    where: PaymentInstalmentWhereUniqueInput
    data: XOR<PaymentInstalmentUpdateWithoutPaymentInput, PaymentInstalmentUncheckedUpdateWithoutPaymentInput>
  }

  export type PaymentInstalmentUpdateManyWithWhereWithoutPaymentInput = {
    where: PaymentInstalmentScalarWhereInput
    data: XOR<PaymentInstalmentUpdateManyMutationInput, PaymentInstalmentUncheckedUpdateManyWithoutPaymentInput>
  }

  export type PaymentCreateWithoutInstalmentsInput = {
    id?: string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transaction: TransactionCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutInstalmentsInput = {
    id?: string
    transactionId: string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutInstalmentsInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutInstalmentsInput, PaymentUncheckedCreateWithoutInstalmentsInput>
  }

  export type PaymentPlanCreateWithoutInstalmentsInput = {
    id?: string
    name: string
    description?: string | null
    cycle: string
    numberOfPayments: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentPlanUncheckedCreateWithoutInstalmentsInput = {
    id?: string
    name: string
    description?: string | null
    cycle: string
    numberOfPayments: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentPlanCreateOrConnectWithoutInstalmentsInput = {
    where: PaymentPlanWhereUniqueInput
    create: XOR<PaymentPlanCreateWithoutInstalmentsInput, PaymentPlanUncheckedCreateWithoutInstalmentsInput>
  }

  export type PaymentUpsertWithoutInstalmentsInput = {
    update: XOR<PaymentUpdateWithoutInstalmentsInput, PaymentUncheckedUpdateWithoutInstalmentsInput>
    create: XOR<PaymentCreateWithoutInstalmentsInput, PaymentUncheckedCreateWithoutInstalmentsInput>
    where?: PaymentWhereInput
  }

  export type PaymentUpdateToOneWithWhereWithoutInstalmentsInput = {
    where?: PaymentWhereInput
    data: XOR<PaymentUpdateWithoutInstalmentsInput, PaymentUncheckedUpdateWithoutInstalmentsInput>
  }

  export type PaymentUpdateWithoutInstalmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transaction?: TransactionUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutInstalmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    transactionId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentPlanUpsertWithoutInstalmentsInput = {
    update: XOR<PaymentPlanUpdateWithoutInstalmentsInput, PaymentPlanUncheckedUpdateWithoutInstalmentsInput>
    create: XOR<PaymentPlanCreateWithoutInstalmentsInput, PaymentPlanUncheckedCreateWithoutInstalmentsInput>
    where?: PaymentPlanWhereInput
  }

  export type PaymentPlanUpdateToOneWithWhereWithoutInstalmentsInput = {
    where?: PaymentPlanWhereInput
    data: XOR<PaymentPlanUpdateWithoutInstalmentsInput, PaymentPlanUncheckedUpdateWithoutInstalmentsInput>
  }

  export type PaymentPlanUpdateWithoutInstalmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cycle?: StringFieldUpdateOperationsInput | string
    numberOfPayments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentPlanUncheckedUpdateWithoutInstalmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cycle?: StringFieldUpdateOperationsInput | string
    numberOfPayments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicScheduleCreateWithoutClinicInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClinicScheduleUncheckedCreateWithoutClinicInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClinicScheduleCreateOrConnectWithoutClinicInput = {
    where: ClinicScheduleWhereUniqueInput
    create: XOR<ClinicScheduleCreateWithoutClinicInput, ClinicScheduleUncheckedCreateWithoutClinicInput>
  }

  export type ClinicScheduleCreateManyClinicInputEnvelope = {
    data: ClinicScheduleCreateManyClinicInput | ClinicScheduleCreateManyClinicInput[]
    skipDuplicates?: boolean
  }

  export type ClinicScheduleUpsertWithWhereUniqueWithoutClinicInput = {
    where: ClinicScheduleWhereUniqueInput
    update: XOR<ClinicScheduleUpdateWithoutClinicInput, ClinicScheduleUncheckedUpdateWithoutClinicInput>
    create: XOR<ClinicScheduleCreateWithoutClinicInput, ClinicScheduleUncheckedCreateWithoutClinicInput>
  }

  export type ClinicScheduleUpdateWithWhereUniqueWithoutClinicInput = {
    where: ClinicScheduleWhereUniqueInput
    data: XOR<ClinicScheduleUpdateWithoutClinicInput, ClinicScheduleUncheckedUpdateWithoutClinicInput>
  }

  export type ClinicScheduleUpdateManyWithWhereWithoutClinicInput = {
    where: ClinicScheduleScalarWhereInput
    data: XOR<ClinicScheduleUpdateManyMutationInput, ClinicScheduleUncheckedUpdateManyWithoutClinicInput>
  }

  export type ClinicScheduleScalarWhereInput = {
    AND?: ClinicScheduleScalarWhereInput | ClinicScheduleScalarWhereInput[]
    OR?: ClinicScheduleScalarWhereInput[]
    NOT?: ClinicScheduleScalarWhereInput | ClinicScheduleScalarWhereInput[]
    id?: UuidFilter<"ClinicSchedule"> | string
    clinicId?: UuidFilter<"ClinicSchedule"> | string
    createdAt?: DateTimeFilter<"ClinicSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"ClinicSchedule"> | Date | string
  }

  export type ClinicCreateWithoutSchedulesInput = {
    id?: string
    roomId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClinicUncheckedCreateWithoutSchedulesInput = {
    id?: string
    roomId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClinicCreateOrConnectWithoutSchedulesInput = {
    where: ClinicWhereUniqueInput
    create: XOR<ClinicCreateWithoutSchedulesInput, ClinicUncheckedCreateWithoutSchedulesInput>
  }

  export type ClinicUpsertWithoutSchedulesInput = {
    update: XOR<ClinicUpdateWithoutSchedulesInput, ClinicUncheckedUpdateWithoutSchedulesInput>
    create: XOR<ClinicCreateWithoutSchedulesInput, ClinicUncheckedCreateWithoutSchedulesInput>
    where?: ClinicWhereInput
  }

  export type ClinicUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: ClinicWhereInput
    data: XOR<ClinicUpdateWithoutSchedulesInput, ClinicUncheckedUpdateWithoutSchedulesInput>
  }

  export type ClinicUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicUncheckedUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientProfileCreateWithoutPatientEncountersInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    inpatientEncounters?: InpatientEncounterCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    patientAppointments?: PatientAppointmentCreateNestedManyWithoutPatientInput
    addresses?: AddressCreateNestedManyWithoutPatientProfileInput
    contacts?: ContactCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileUncheckedCreateWithoutPatientEncountersInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    inpatientEncounters?: InpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    patientAppointments?: PatientAppointmentUncheckedCreateNestedManyWithoutPatientInput
    addresses?: AddressUncheckedCreateNestedManyWithoutPatientProfileInput
    contacts?: ContactUncheckedCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentUncheckedCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileCreateOrConnectWithoutPatientEncountersInput = {
    where: PatientProfileWhereUniqueInput
    create: XOR<PatientProfileCreateWithoutPatientEncountersInput, PatientProfileUncheckedCreateWithoutPatientEncountersInput>
  }

  export type TransactionCreateWithoutEncounterInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: TransactionItemCreateNestedManyWithoutTransactionInput
    payments?: PaymentCreateNestedManyWithoutTransactionInput
  }

  export type TransactionUncheckedCreateWithoutEncounterInput = {
    id?: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: TransactionItemUncheckedCreateNestedManyWithoutTransactionInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTransactionInput
  }

  export type TransactionCreateOrConnectWithoutEncounterInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutEncounterInput, TransactionUncheckedCreateWithoutEncounterInput>
  }

  export type PatientProfileUpsertWithoutPatientEncountersInput = {
    update: XOR<PatientProfileUpdateWithoutPatientEncountersInput, PatientProfileUncheckedUpdateWithoutPatientEncountersInput>
    create: XOR<PatientProfileCreateWithoutPatientEncountersInput, PatientProfileUncheckedCreateWithoutPatientEncountersInput>
    where?: PatientProfileWhereInput
  }

  export type PatientProfileUpdateToOneWithWhereWithoutPatientEncountersInput = {
    where?: PatientProfileWhereInput
    data: XOR<PatientProfileUpdateWithoutPatientEncountersInput, PatientProfileUncheckedUpdateWithoutPatientEncountersInput>
  }

  export type PatientProfileUpdateWithoutPatientEncountersInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inpatientEncounters?: InpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    patientAppointments?: PatientAppointmentUpdateManyWithoutPatientNestedInput
    addresses?: AddressUpdateManyWithoutPatientProfileNestedInput
    contacts?: ContactUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUpdateOneWithoutPatientProfileNestedInput
  }

  export type PatientProfileUncheckedUpdateWithoutPatientEncountersInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inpatientEncounters?: InpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    patientAppointments?: PatientAppointmentUncheckedUpdateManyWithoutPatientNestedInput
    addresses?: AddressUncheckedUpdateManyWithoutPatientProfileNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUncheckedUpdateOneWithoutPatientProfileNestedInput
  }

  export type TransactionUpsertWithoutEncounterInput = {
    update: XOR<TransactionUpdateWithoutEncounterInput, TransactionUncheckedUpdateWithoutEncounterInput>
    create: XOR<TransactionCreateWithoutEncounterInput, TransactionUncheckedCreateWithoutEncounterInput>
    where?: TransactionWhereInput
  }

  export type TransactionUpdateToOneWithWhereWithoutEncounterInput = {
    where?: TransactionWhereInput
    data: XOR<TransactionUpdateWithoutEncounterInput, TransactionUncheckedUpdateWithoutEncounterInput>
  }

  export type TransactionUpdateWithoutEncounterInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: TransactionItemUpdateManyWithoutTransactionNestedInput
    payments?: PaymentUpdateManyWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateWithoutEncounterInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: TransactionItemUncheckedUpdateManyWithoutTransactionNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTransactionNestedInput
  }

  export type PatientProfileCreateWithoutOutpatientEncountersInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterCreateNestedManyWithoutPatientProfileInput
    inpatientEncounters?: InpatientEncounterCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    patientAppointments?: PatientAppointmentCreateNestedManyWithoutPatientInput
    addresses?: AddressCreateNestedManyWithoutPatientProfileInput
    contacts?: ContactCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileUncheckedCreateWithoutOutpatientEncountersInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    inpatientEncounters?: InpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    patientAppointments?: PatientAppointmentUncheckedCreateNestedManyWithoutPatientInput
    addresses?: AddressUncheckedCreateNestedManyWithoutPatientProfileInput
    contacts?: ContactUncheckedCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentUncheckedCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileCreateOrConnectWithoutOutpatientEncountersInput = {
    where: PatientProfileWhereUniqueInput
    create: XOR<PatientProfileCreateWithoutOutpatientEncountersInput, PatientProfileUncheckedCreateWithoutOutpatientEncountersInput>
  }

  export type PatientProfileUpsertWithoutOutpatientEncountersInput = {
    update: XOR<PatientProfileUpdateWithoutOutpatientEncountersInput, PatientProfileUncheckedUpdateWithoutOutpatientEncountersInput>
    create: XOR<PatientProfileCreateWithoutOutpatientEncountersInput, PatientProfileUncheckedCreateWithoutOutpatientEncountersInput>
    where?: PatientProfileWhereInput
  }

  export type PatientProfileUpdateToOneWithWhereWithoutOutpatientEncountersInput = {
    where?: PatientProfileWhereInput
    data: XOR<PatientProfileUpdateWithoutOutpatientEncountersInput, PatientProfileUncheckedUpdateWithoutOutpatientEncountersInput>
  }

  export type PatientProfileUpdateWithoutOutpatientEncountersInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUpdateManyWithoutPatientProfileNestedInput
    inpatientEncounters?: InpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    patientAppointments?: PatientAppointmentUpdateManyWithoutPatientNestedInput
    addresses?: AddressUpdateManyWithoutPatientProfileNestedInput
    contacts?: ContactUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUpdateOneWithoutPatientProfileNestedInput
  }

  export type PatientProfileUncheckedUpdateWithoutOutpatientEncountersInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    inpatientEncounters?: InpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    patientAppointments?: PatientAppointmentUncheckedUpdateManyWithoutPatientNestedInput
    addresses?: AddressUncheckedUpdateManyWithoutPatientProfileNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUncheckedUpdateOneWithoutPatientProfileNestedInput
  }

  export type PatientProfileCreateWithoutInpatientEncountersInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    patientAppointments?: PatientAppointmentCreateNestedManyWithoutPatientInput
    addresses?: AddressCreateNestedManyWithoutPatientProfileInput
    contacts?: ContactCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileUncheckedCreateWithoutInpatientEncountersInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    patientAppointments?: PatientAppointmentUncheckedCreateNestedManyWithoutPatientInput
    addresses?: AddressUncheckedCreateNestedManyWithoutPatientProfileInput
    contacts?: ContactUncheckedCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentUncheckedCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileCreateOrConnectWithoutInpatientEncountersInput = {
    where: PatientProfileWhereUniqueInput
    create: XOR<PatientProfileCreateWithoutInpatientEncountersInput, PatientProfileUncheckedCreateWithoutInpatientEncountersInput>
  }

  export type InpatientEncounterChartCreateWithoutEncounterInput = {
    id?: string
    staffId: string
    chart: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InpatientEncounterChartUncheckedCreateWithoutEncounterInput = {
    id?: string
    staffId: string
    chart: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InpatientEncounterChartCreateOrConnectWithoutEncounterInput = {
    where: InpatientEncounterChartWhereUniqueInput
    create: XOR<InpatientEncounterChartCreateWithoutEncounterInput, InpatientEncounterChartUncheckedCreateWithoutEncounterInput>
  }

  export type InpatientEncounterChartCreateManyEncounterInputEnvelope = {
    data: InpatientEncounterChartCreateManyEncounterInput | InpatientEncounterChartCreateManyEncounterInput[]
    skipDuplicates?: boolean
  }

  export type InpatientEncounterOrderCreateWithoutEncounterInput = {
    id?: string
    type: $Enums.InpatientEncounterOrderType
    order: string
    status: $Enums.InpatientEncounterOrderStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InpatientEncounterOrderUncheckedCreateWithoutEncounterInput = {
    id?: string
    type: $Enums.InpatientEncounterOrderType
    order: string
    status: $Enums.InpatientEncounterOrderStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InpatientEncounterOrderCreateOrConnectWithoutEncounterInput = {
    where: InpatientEncounterOrderWhereUniqueInput
    create: XOR<InpatientEncounterOrderCreateWithoutEncounterInput, InpatientEncounterOrderUncheckedCreateWithoutEncounterInput>
  }

  export type InpatientEncounterOrderCreateManyEncounterInputEnvelope = {
    data: InpatientEncounterOrderCreateManyEncounterInput | InpatientEncounterOrderCreateManyEncounterInput[]
    skipDuplicates?: boolean
  }

  export type MedicalRecordRequestCreateWithoutInpatientEncounterInput = {
    id?: string
    type: string
    status: string
    fileUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patientProfile: PatientProfileCreateNestedOneWithoutMedicalRecordRequestsInput
  }

  export type MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput = {
    id?: string
    patientProfileId: string
    type: string
    status: string
    fileUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalRecordRequestCreateOrConnectWithoutInpatientEncounterInput = {
    where: MedicalRecordRequestWhereUniqueInput
    create: XOR<MedicalRecordRequestCreateWithoutInpatientEncounterInput, MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput>
  }

  export type MedicalRecordRequestCreateManyInpatientEncounterInputEnvelope = {
    data: MedicalRecordRequestCreateManyInpatientEncounterInput | MedicalRecordRequestCreateManyInpatientEncounterInput[]
    skipDuplicates?: boolean
  }

  export type PatientProfileUpsertWithoutInpatientEncountersInput = {
    update: XOR<PatientProfileUpdateWithoutInpatientEncountersInput, PatientProfileUncheckedUpdateWithoutInpatientEncountersInput>
    create: XOR<PatientProfileCreateWithoutInpatientEncountersInput, PatientProfileUncheckedCreateWithoutInpatientEncountersInput>
    where?: PatientProfileWhereInput
  }

  export type PatientProfileUpdateToOneWithWhereWithoutInpatientEncountersInput = {
    where?: PatientProfileWhereInput
    data: XOR<PatientProfileUpdateWithoutInpatientEncountersInput, PatientProfileUncheckedUpdateWithoutInpatientEncountersInput>
  }

  export type PatientProfileUpdateWithoutInpatientEncountersInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    patientAppointments?: PatientAppointmentUpdateManyWithoutPatientNestedInput
    addresses?: AddressUpdateManyWithoutPatientProfileNestedInput
    contacts?: ContactUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUpdateOneWithoutPatientProfileNestedInput
  }

  export type PatientProfileUncheckedUpdateWithoutInpatientEncountersInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    patientAppointments?: PatientAppointmentUncheckedUpdateManyWithoutPatientNestedInput
    addresses?: AddressUncheckedUpdateManyWithoutPatientProfileNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUncheckedUpdateOneWithoutPatientProfileNestedInput
  }

  export type InpatientEncounterChartUpsertWithWhereUniqueWithoutEncounterInput = {
    where: InpatientEncounterChartWhereUniqueInput
    update: XOR<InpatientEncounterChartUpdateWithoutEncounterInput, InpatientEncounterChartUncheckedUpdateWithoutEncounterInput>
    create: XOR<InpatientEncounterChartCreateWithoutEncounterInput, InpatientEncounterChartUncheckedCreateWithoutEncounterInput>
  }

  export type InpatientEncounterChartUpdateWithWhereUniqueWithoutEncounterInput = {
    where: InpatientEncounterChartWhereUniqueInput
    data: XOR<InpatientEncounterChartUpdateWithoutEncounterInput, InpatientEncounterChartUncheckedUpdateWithoutEncounterInput>
  }

  export type InpatientEncounterChartUpdateManyWithWhereWithoutEncounterInput = {
    where: InpatientEncounterChartScalarWhereInput
    data: XOR<InpatientEncounterChartUpdateManyMutationInput, InpatientEncounterChartUncheckedUpdateManyWithoutEncounterInput>
  }

  export type InpatientEncounterChartScalarWhereInput = {
    AND?: InpatientEncounterChartScalarWhereInput | InpatientEncounterChartScalarWhereInput[]
    OR?: InpatientEncounterChartScalarWhereInput[]
    NOT?: InpatientEncounterChartScalarWhereInput | InpatientEncounterChartScalarWhereInput[]
    id?: UuidFilter<"InpatientEncounterChart"> | string
    encounterId?: UuidFilter<"InpatientEncounterChart"> | string
    staffId?: UuidFilter<"InpatientEncounterChart"> | string
    chart?: StringFilter<"InpatientEncounterChart"> | string
    createdAt?: DateTimeFilter<"InpatientEncounterChart"> | Date | string
    updatedAt?: DateTimeFilter<"InpatientEncounterChart"> | Date | string
  }

  export type InpatientEncounterOrderUpsertWithWhereUniqueWithoutEncounterInput = {
    where: InpatientEncounterOrderWhereUniqueInput
    update: XOR<InpatientEncounterOrderUpdateWithoutEncounterInput, InpatientEncounterOrderUncheckedUpdateWithoutEncounterInput>
    create: XOR<InpatientEncounterOrderCreateWithoutEncounterInput, InpatientEncounterOrderUncheckedCreateWithoutEncounterInput>
  }

  export type InpatientEncounterOrderUpdateWithWhereUniqueWithoutEncounterInput = {
    where: InpatientEncounterOrderWhereUniqueInput
    data: XOR<InpatientEncounterOrderUpdateWithoutEncounterInput, InpatientEncounterOrderUncheckedUpdateWithoutEncounterInput>
  }

  export type InpatientEncounterOrderUpdateManyWithWhereWithoutEncounterInput = {
    where: InpatientEncounterOrderScalarWhereInput
    data: XOR<InpatientEncounterOrderUpdateManyMutationInput, InpatientEncounterOrderUncheckedUpdateManyWithoutEncounterInput>
  }

  export type InpatientEncounterOrderScalarWhereInput = {
    AND?: InpatientEncounterOrderScalarWhereInput | InpatientEncounterOrderScalarWhereInput[]
    OR?: InpatientEncounterOrderScalarWhereInput[]
    NOT?: InpatientEncounterOrderScalarWhereInput | InpatientEncounterOrderScalarWhereInput[]
    id?: UuidFilter<"InpatientEncounterOrder"> | string
    encounterId?: UuidFilter<"InpatientEncounterOrder"> | string
    type?: EnumInpatientEncounterOrderTypeFilter<"InpatientEncounterOrder"> | $Enums.InpatientEncounterOrderType
    order?: StringFilter<"InpatientEncounterOrder"> | string
    status?: EnumInpatientEncounterOrderStatusFilter<"InpatientEncounterOrder"> | $Enums.InpatientEncounterOrderStatus
    createdAt?: DateTimeFilter<"InpatientEncounterOrder"> | Date | string
    updatedAt?: DateTimeFilter<"InpatientEncounterOrder"> | Date | string
  }

  export type MedicalRecordRequestUpsertWithWhereUniqueWithoutInpatientEncounterInput = {
    where: MedicalRecordRequestWhereUniqueInput
    update: XOR<MedicalRecordRequestUpdateWithoutInpatientEncounterInput, MedicalRecordRequestUncheckedUpdateWithoutInpatientEncounterInput>
    create: XOR<MedicalRecordRequestCreateWithoutInpatientEncounterInput, MedicalRecordRequestUncheckedCreateWithoutInpatientEncounterInput>
  }

  export type MedicalRecordRequestUpdateWithWhereUniqueWithoutInpatientEncounterInput = {
    where: MedicalRecordRequestWhereUniqueInput
    data: XOR<MedicalRecordRequestUpdateWithoutInpatientEncounterInput, MedicalRecordRequestUncheckedUpdateWithoutInpatientEncounterInput>
  }

  export type MedicalRecordRequestUpdateManyWithWhereWithoutInpatientEncounterInput = {
    where: MedicalRecordRequestScalarWhereInput
    data: XOR<MedicalRecordRequestUpdateManyMutationInput, MedicalRecordRequestUncheckedUpdateManyWithoutInpatientEncounterInput>
  }

  export type MedicalRecordRequestScalarWhereInput = {
    AND?: MedicalRecordRequestScalarWhereInput | MedicalRecordRequestScalarWhereInput[]
    OR?: MedicalRecordRequestScalarWhereInput[]
    NOT?: MedicalRecordRequestScalarWhereInput | MedicalRecordRequestScalarWhereInput[]
    id?: UuidFilter<"MedicalRecordRequest"> | string
    patientProfileId?: UuidFilter<"MedicalRecordRequest"> | string
    inpatientEncounterId?: UuidFilter<"MedicalRecordRequest"> | string
    type?: StringFilter<"MedicalRecordRequest"> | string
    status?: StringFilter<"MedicalRecordRequest"> | string
    fileUrl?: StringFilter<"MedicalRecordRequest"> | string
    createdAt?: DateTimeFilter<"MedicalRecordRequest"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalRecordRequest"> | Date | string
  }

  export type InpatientEncounterCreateWithoutChartsInput = {
    id?: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    triage: $Enums.InpatientTriage
    disposition?: $Enums.InpatientDisposition
    dispositionDate?: string | null
    dispositionTime?: string | null
    dispositionNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientProfile: PatientProfileCreateNestedOneWithoutInpatientEncountersInput
    orders?: InpatientEncounterOrderCreateNestedManyWithoutEncounterInput
    medicalRecordRequest?: MedicalRecordRequestCreateNestedManyWithoutInpatientEncounterInput
  }

  export type InpatientEncounterUncheckedCreateWithoutChartsInput = {
    id?: string
    patientProfileId: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    triage: $Enums.InpatientTriage
    disposition?: $Enums.InpatientDisposition
    dispositionDate?: string | null
    dispositionTime?: string | null
    dispositionNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: InpatientEncounterOrderUncheckedCreateNestedManyWithoutEncounterInput
    medicalRecordRequest?: MedicalRecordRequestUncheckedCreateNestedManyWithoutInpatientEncounterInput
  }

  export type InpatientEncounterCreateOrConnectWithoutChartsInput = {
    where: InpatientEncounterWhereUniqueInput
    create: XOR<InpatientEncounterCreateWithoutChartsInput, InpatientEncounterUncheckedCreateWithoutChartsInput>
  }

  export type InpatientEncounterUpsertWithoutChartsInput = {
    update: XOR<InpatientEncounterUpdateWithoutChartsInput, InpatientEncounterUncheckedUpdateWithoutChartsInput>
    create: XOR<InpatientEncounterCreateWithoutChartsInput, InpatientEncounterUncheckedCreateWithoutChartsInput>
    where?: InpatientEncounterWhereInput
  }

  export type InpatientEncounterUpdateToOneWithWhereWithoutChartsInput = {
    where?: InpatientEncounterWhereInput
    data: XOR<InpatientEncounterUpdateWithoutChartsInput, InpatientEncounterUncheckedUpdateWithoutChartsInput>
  }

  export type InpatientEncounterUpdateWithoutChartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: StringFieldUpdateOperationsInput | string
    doctorDiagnosis?: StringFieldUpdateOperationsInput | string
    triage?: EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
    disposition?: EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
    dispositionDate?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionTime?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientProfile?: PatientProfileUpdateOneRequiredWithoutInpatientEncountersNestedInput
    orders?: InpatientEncounterOrderUpdateManyWithoutEncounterNestedInput
    medicalRecordRequest?: MedicalRecordRequestUpdateManyWithoutInpatientEncounterNestedInput
  }

  export type InpatientEncounterUncheckedUpdateWithoutChartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: StringFieldUpdateOperationsInput | string
    doctorDiagnosis?: StringFieldUpdateOperationsInput | string
    triage?: EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
    disposition?: EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
    dispositionDate?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionTime?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: InpatientEncounterOrderUncheckedUpdateManyWithoutEncounterNestedInput
    medicalRecordRequest?: MedicalRecordRequestUncheckedUpdateManyWithoutInpatientEncounterNestedInput
  }

  export type InpatientEncounterCreateWithoutOrdersInput = {
    id?: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    triage: $Enums.InpatientTriage
    disposition?: $Enums.InpatientDisposition
    dispositionDate?: string | null
    dispositionTime?: string | null
    dispositionNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientProfile: PatientProfileCreateNestedOneWithoutInpatientEncountersInput
    charts?: InpatientEncounterChartCreateNestedManyWithoutEncounterInput
    medicalRecordRequest?: MedicalRecordRequestCreateNestedManyWithoutInpatientEncounterInput
  }

  export type InpatientEncounterUncheckedCreateWithoutOrdersInput = {
    id?: string
    patientProfileId: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    triage: $Enums.InpatientTriage
    disposition?: $Enums.InpatientDisposition
    dispositionDate?: string | null
    dispositionTime?: string | null
    dispositionNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    charts?: InpatientEncounterChartUncheckedCreateNestedManyWithoutEncounterInput
    medicalRecordRequest?: MedicalRecordRequestUncheckedCreateNestedManyWithoutInpatientEncounterInput
  }

  export type InpatientEncounterCreateOrConnectWithoutOrdersInput = {
    where: InpatientEncounterWhereUniqueInput
    create: XOR<InpatientEncounterCreateWithoutOrdersInput, InpatientEncounterUncheckedCreateWithoutOrdersInput>
  }

  export type InpatientEncounterUpsertWithoutOrdersInput = {
    update: XOR<InpatientEncounterUpdateWithoutOrdersInput, InpatientEncounterUncheckedUpdateWithoutOrdersInput>
    create: XOR<InpatientEncounterCreateWithoutOrdersInput, InpatientEncounterUncheckedCreateWithoutOrdersInput>
    where?: InpatientEncounterWhereInput
  }

  export type InpatientEncounterUpdateToOneWithWhereWithoutOrdersInput = {
    where?: InpatientEncounterWhereInput
    data: XOR<InpatientEncounterUpdateWithoutOrdersInput, InpatientEncounterUncheckedUpdateWithoutOrdersInput>
  }

  export type InpatientEncounterUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: StringFieldUpdateOperationsInput | string
    doctorDiagnosis?: StringFieldUpdateOperationsInput | string
    triage?: EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
    disposition?: EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
    dispositionDate?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionTime?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientProfile?: PatientProfileUpdateOneRequiredWithoutInpatientEncountersNestedInput
    charts?: InpatientEncounterChartUpdateManyWithoutEncounterNestedInput
    medicalRecordRequest?: MedicalRecordRequestUpdateManyWithoutInpatientEncounterNestedInput
  }

  export type InpatientEncounterUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: StringFieldUpdateOperationsInput | string
    doctorDiagnosis?: StringFieldUpdateOperationsInput | string
    triage?: EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
    disposition?: EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
    dispositionDate?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionTime?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    charts?: InpatientEncounterChartUncheckedUpdateManyWithoutEncounterNestedInput
    medicalRecordRequest?: MedicalRecordRequestUncheckedUpdateManyWithoutInpatientEncounterNestedInput
  }

  export type RoomCreateWithoutBuildingInput = {
    id?: string
    type: $Enums.RoomType
    identifier: string
    description?: string | null
    capacity?: number | null
    status: $Enums.RoomStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutFacilityInput
  }

  export type RoomUncheckedCreateWithoutBuildingInput = {
    id?: string
    type: $Enums.RoomType
    identifier: string
    description?: string | null
    capacity?: number | null
    status: $Enums.RoomStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutFacilityInput
  }

  export type RoomCreateOrConnectWithoutBuildingInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutBuildingInput, RoomUncheckedCreateWithoutBuildingInput>
  }

  export type RoomCreateManyBuildingInputEnvelope = {
    data: RoomCreateManyBuildingInput | RoomCreateManyBuildingInput[]
    skipDuplicates?: boolean
  }

  export type RoomUpsertWithWhereUniqueWithoutBuildingInput = {
    where: RoomWhereUniqueInput
    update: XOR<RoomUpdateWithoutBuildingInput, RoomUncheckedUpdateWithoutBuildingInput>
    create: XOR<RoomCreateWithoutBuildingInput, RoomUncheckedCreateWithoutBuildingInput>
  }

  export type RoomUpdateWithWhereUniqueWithoutBuildingInput = {
    where: RoomWhereUniqueInput
    data: XOR<RoomUpdateWithoutBuildingInput, RoomUncheckedUpdateWithoutBuildingInput>
  }

  export type RoomUpdateManyWithWhereWithoutBuildingInput = {
    where: RoomScalarWhereInput
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyWithoutBuildingInput>
  }

  export type RoomScalarWhereInput = {
    AND?: RoomScalarWhereInput | RoomScalarWhereInput[]
    OR?: RoomScalarWhereInput[]
    NOT?: RoomScalarWhereInput | RoomScalarWhereInput[]
    id?: UuidFilter<"Room"> | string
    buildingId?: UuidFilter<"Room"> | string
    type?: EnumRoomTypeFilter<"Room"> | $Enums.RoomType
    identifier?: StringFilter<"Room"> | string
    description?: StringNullableFilter<"Room"> | string | null
    capacity?: IntNullableFilter<"Room"> | number | null
    status?: EnumRoomStatusFilter<"Room"> | $Enums.RoomStatus
    createdAt?: DateTimeFilter<"Room"> | Date | string
    updatedAt?: DateTimeFilter<"Room"> | Date | string
  }

  export type BuildingCreateWithoutRoomsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BuildingUncheckedCreateWithoutRoomsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BuildingCreateOrConnectWithoutRoomsInput = {
    where: BuildingWhereUniqueInput
    create: XOR<BuildingCreateWithoutRoomsInput, BuildingUncheckedCreateWithoutRoomsInput>
  }

  export type AppointmentCreateWithoutFacilityInput = {
    id?: string
    doctorId: string
    date: string
    time: string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientProfileCreateNestedOneWithoutAppointmentsInput
    patientAppointment?: PatientAppointmentCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutFacilityInput = {
    id?: string
    patientId: string
    doctorId: string
    date: string
    time: string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    patientAppointment?: PatientAppointmentUncheckedCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutFacilityInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutFacilityInput, AppointmentUncheckedCreateWithoutFacilityInput>
  }

  export type AppointmentCreateManyFacilityInputEnvelope = {
    data: AppointmentCreateManyFacilityInput | AppointmentCreateManyFacilityInput[]
    skipDuplicates?: boolean
  }

  export type BuildingUpsertWithoutRoomsInput = {
    update: XOR<BuildingUpdateWithoutRoomsInput, BuildingUncheckedUpdateWithoutRoomsInput>
    create: XOR<BuildingCreateWithoutRoomsInput, BuildingUncheckedCreateWithoutRoomsInput>
    where?: BuildingWhereInput
  }

  export type BuildingUpdateToOneWithWhereWithoutRoomsInput = {
    where?: BuildingWhereInput
    data: XOR<BuildingUpdateWithoutRoomsInput, BuildingUncheckedUpdateWithoutRoomsInput>
  }

  export type BuildingUpdateWithoutRoomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildingUncheckedUpdateWithoutRoomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUpsertWithWhereUniqueWithoutFacilityInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutFacilityInput, AppointmentUncheckedUpdateWithoutFacilityInput>
    create: XOR<AppointmentCreateWithoutFacilityInput, AppointmentUncheckedCreateWithoutFacilityInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutFacilityInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutFacilityInput, AppointmentUncheckedUpdateWithoutFacilityInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutFacilityInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutFacilityInput>
  }

  export type AppointmentScalarWhereInput = {
    AND?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    OR?: AppointmentScalarWhereInput[]
    NOT?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    id?: UuidFilter<"Appointment"> | string
    patientId?: UuidFilter<"Appointment"> | string
    doctorId?: UuidFilter<"Appointment"> | string
    facilityId?: UuidNullableFilter<"Appointment"> | string | null
    date?: StringFilter<"Appointment"> | string
    time?: StringFilter<"Appointment"> | string
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
  }

  export type InsuranceClaimCreateWithoutProviderInput = {
    id?: string
    status: string
    message?: string | null
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: InsuranceClaimItemCreateNestedManyWithoutClaimInput
  }

  export type InsuranceClaimUncheckedCreateWithoutProviderInput = {
    id?: string
    status: string
    message?: string | null
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: InsuranceClaimItemUncheckedCreateNestedManyWithoutClaimInput
  }

  export type InsuranceClaimCreateOrConnectWithoutProviderInput = {
    where: InsuranceClaimWhereUniqueInput
    create: XOR<InsuranceClaimCreateWithoutProviderInput, InsuranceClaimUncheckedCreateWithoutProviderInput>
  }

  export type InsuranceClaimCreateManyProviderInputEnvelope = {
    data: InsuranceClaimCreateManyProviderInput | InsuranceClaimCreateManyProviderInput[]
    skipDuplicates?: boolean
  }

  export type InsuranceClaimUpsertWithWhereUniqueWithoutProviderInput = {
    where: InsuranceClaimWhereUniqueInput
    update: XOR<InsuranceClaimUpdateWithoutProviderInput, InsuranceClaimUncheckedUpdateWithoutProviderInput>
    create: XOR<InsuranceClaimCreateWithoutProviderInput, InsuranceClaimUncheckedCreateWithoutProviderInput>
  }

  export type InsuranceClaimUpdateWithWhereUniqueWithoutProviderInput = {
    where: InsuranceClaimWhereUniqueInput
    data: XOR<InsuranceClaimUpdateWithoutProviderInput, InsuranceClaimUncheckedUpdateWithoutProviderInput>
  }

  export type InsuranceClaimUpdateManyWithWhereWithoutProviderInput = {
    where: InsuranceClaimScalarWhereInput
    data: XOR<InsuranceClaimUpdateManyMutationInput, InsuranceClaimUncheckedUpdateManyWithoutProviderInput>
  }

  export type InsuranceClaimScalarWhereInput = {
    AND?: InsuranceClaimScalarWhereInput | InsuranceClaimScalarWhereInput[]
    OR?: InsuranceClaimScalarWhereInput[]
    NOT?: InsuranceClaimScalarWhereInput | InsuranceClaimScalarWhereInput[]
    id?: UuidFilter<"InsuranceClaim"> | string
    providerId?: UuidFilter<"InsuranceClaim"> | string
    status?: StringFilter<"InsuranceClaim"> | string
    message?: StringNullableFilter<"InsuranceClaim"> | string | null
    amount?: IntFilter<"InsuranceClaim"> | number
    createdAt?: DateTimeFilter<"InsuranceClaim"> | Date | string
    updatedAt?: DateTimeFilter<"InsuranceClaim"> | Date | string
  }

  export type InsuranceProviderCreateWithoutClaimsInput = {
    id?: string
    name: string
    description?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InsuranceProviderUncheckedCreateWithoutClaimsInput = {
    id?: string
    name: string
    description?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InsuranceProviderCreateOrConnectWithoutClaimsInput = {
    where: InsuranceProviderWhereUniqueInput
    create: XOR<InsuranceProviderCreateWithoutClaimsInput, InsuranceProviderUncheckedCreateWithoutClaimsInput>
  }

  export type InsuranceClaimItemCreateWithoutClaimInput = {
    id?: string
    name: string
    description?: string | null
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InsuranceClaimItemUncheckedCreateWithoutClaimInput = {
    id?: string
    name: string
    description?: string | null
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InsuranceClaimItemCreateOrConnectWithoutClaimInput = {
    where: InsuranceClaimItemWhereUniqueInput
    create: XOR<InsuranceClaimItemCreateWithoutClaimInput, InsuranceClaimItemUncheckedCreateWithoutClaimInput>
  }

  export type InsuranceClaimItemCreateManyClaimInputEnvelope = {
    data: InsuranceClaimItemCreateManyClaimInput | InsuranceClaimItemCreateManyClaimInput[]
    skipDuplicates?: boolean
  }

  export type InsuranceProviderUpsertWithoutClaimsInput = {
    update: XOR<InsuranceProviderUpdateWithoutClaimsInput, InsuranceProviderUncheckedUpdateWithoutClaimsInput>
    create: XOR<InsuranceProviderCreateWithoutClaimsInput, InsuranceProviderUncheckedCreateWithoutClaimsInput>
    where?: InsuranceProviderWhereInput
  }

  export type InsuranceProviderUpdateToOneWithWhereWithoutClaimsInput = {
    where?: InsuranceProviderWhereInput
    data: XOR<InsuranceProviderUpdateWithoutClaimsInput, InsuranceProviderUncheckedUpdateWithoutClaimsInput>
  }

  export type InsuranceProviderUpdateWithoutClaimsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsuranceProviderUncheckedUpdateWithoutClaimsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsuranceClaimItemUpsertWithWhereUniqueWithoutClaimInput = {
    where: InsuranceClaimItemWhereUniqueInput
    update: XOR<InsuranceClaimItemUpdateWithoutClaimInput, InsuranceClaimItemUncheckedUpdateWithoutClaimInput>
    create: XOR<InsuranceClaimItemCreateWithoutClaimInput, InsuranceClaimItemUncheckedCreateWithoutClaimInput>
  }

  export type InsuranceClaimItemUpdateWithWhereUniqueWithoutClaimInput = {
    where: InsuranceClaimItemWhereUniqueInput
    data: XOR<InsuranceClaimItemUpdateWithoutClaimInput, InsuranceClaimItemUncheckedUpdateWithoutClaimInput>
  }

  export type InsuranceClaimItemUpdateManyWithWhereWithoutClaimInput = {
    where: InsuranceClaimItemScalarWhereInput
    data: XOR<InsuranceClaimItemUpdateManyMutationInput, InsuranceClaimItemUncheckedUpdateManyWithoutClaimInput>
  }

  export type InsuranceClaimItemScalarWhereInput = {
    AND?: InsuranceClaimItemScalarWhereInput | InsuranceClaimItemScalarWhereInput[]
    OR?: InsuranceClaimItemScalarWhereInput[]
    NOT?: InsuranceClaimItemScalarWhereInput | InsuranceClaimItemScalarWhereInput[]
    id?: UuidFilter<"InsuranceClaimItem"> | string
    claimId?: UuidFilter<"InsuranceClaimItem"> | string
    name?: StringFilter<"InsuranceClaimItem"> | string
    description?: StringNullableFilter<"InsuranceClaimItem"> | string | null
    amount?: IntFilter<"InsuranceClaimItem"> | number
    createdAt?: DateTimeFilter<"InsuranceClaimItem"> | Date | string
    updatedAt?: DateTimeFilter<"InsuranceClaimItem"> | Date | string
  }

  export type InsuranceClaimCreateWithoutItemsInput = {
    id?: string
    status: string
    message?: string | null
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    provider: InsuranceProviderCreateNestedOneWithoutClaimsInput
  }

  export type InsuranceClaimUncheckedCreateWithoutItemsInput = {
    id?: string
    providerId: string
    status: string
    message?: string | null
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InsuranceClaimCreateOrConnectWithoutItemsInput = {
    where: InsuranceClaimWhereUniqueInput
    create: XOR<InsuranceClaimCreateWithoutItemsInput, InsuranceClaimUncheckedCreateWithoutItemsInput>
  }

  export type InsuranceClaimUpsertWithoutItemsInput = {
    update: XOR<InsuranceClaimUpdateWithoutItemsInput, InsuranceClaimUncheckedUpdateWithoutItemsInput>
    create: XOR<InsuranceClaimCreateWithoutItemsInput, InsuranceClaimUncheckedCreateWithoutItemsInput>
    where?: InsuranceClaimWhereInput
  }

  export type InsuranceClaimUpdateToOneWithWhereWithoutItemsInput = {
    where?: InsuranceClaimWhereInput
    data: XOR<InsuranceClaimUpdateWithoutItemsInput, InsuranceClaimUncheckedUpdateWithoutItemsInput>
  }

  export type InsuranceClaimUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: InsuranceProviderUpdateOneRequiredWithoutClaimsNestedInput
  }

  export type InsuranceClaimUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientEncounterCreateWithoutPatientProfileInput = {
    id?: string
    encounterId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    transaction?: TransactionCreateNestedOneWithoutEncounterInput
  }

  export type PatientEncounterUncheckedCreateWithoutPatientProfileInput = {
    id?: string
    encounterId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    transaction?: TransactionUncheckedCreateNestedOneWithoutEncounterInput
  }

  export type PatientEncounterCreateOrConnectWithoutPatientProfileInput = {
    where: PatientEncounterWhereUniqueInput
    create: XOR<PatientEncounterCreateWithoutPatientProfileInput, PatientEncounterUncheckedCreateWithoutPatientProfileInput>
  }

  export type PatientEncounterCreateManyPatientProfileInputEnvelope = {
    data: PatientEncounterCreateManyPatientProfileInput | PatientEncounterCreateManyPatientProfileInput[]
    skipDuplicates?: boolean
  }

  export type InpatientEncounterCreateWithoutPatientProfileInput = {
    id?: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    triage: $Enums.InpatientTriage
    disposition?: $Enums.InpatientDisposition
    dispositionDate?: string | null
    dispositionTime?: string | null
    dispositionNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    charts?: InpatientEncounterChartCreateNestedManyWithoutEncounterInput
    orders?: InpatientEncounterOrderCreateNestedManyWithoutEncounterInput
    medicalRecordRequest?: MedicalRecordRequestCreateNestedManyWithoutInpatientEncounterInput
  }

  export type InpatientEncounterUncheckedCreateWithoutPatientProfileInput = {
    id?: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    triage: $Enums.InpatientTriage
    disposition?: $Enums.InpatientDisposition
    dispositionDate?: string | null
    dispositionTime?: string | null
    dispositionNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    charts?: InpatientEncounterChartUncheckedCreateNestedManyWithoutEncounterInput
    orders?: InpatientEncounterOrderUncheckedCreateNestedManyWithoutEncounterInput
    medicalRecordRequest?: MedicalRecordRequestUncheckedCreateNestedManyWithoutInpatientEncounterInput
  }

  export type InpatientEncounterCreateOrConnectWithoutPatientProfileInput = {
    where: InpatientEncounterWhereUniqueInput
    create: XOR<InpatientEncounterCreateWithoutPatientProfileInput, InpatientEncounterUncheckedCreateWithoutPatientProfileInput>
  }

  export type InpatientEncounterCreateManyPatientProfileInputEnvelope = {
    data: InpatientEncounterCreateManyPatientProfileInput | InpatientEncounterCreateManyPatientProfileInput[]
    skipDuplicates?: boolean
  }

  export type OutpatientEncounterCreateWithoutPatientProfileInput = {
    id?: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    type: $Enums.OutpatientEncounterType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OutpatientEncounterUncheckedCreateWithoutPatientProfileInput = {
    id?: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    type: $Enums.OutpatientEncounterType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OutpatientEncounterCreateOrConnectWithoutPatientProfileInput = {
    where: OutpatientEncounterWhereUniqueInput
    create: XOR<OutpatientEncounterCreateWithoutPatientProfileInput, OutpatientEncounterUncheckedCreateWithoutPatientProfileInput>
  }

  export type OutpatientEncounterCreateManyPatientProfileInputEnvelope = {
    data: OutpatientEncounterCreateManyPatientProfileInput | OutpatientEncounterCreateManyPatientProfileInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutPatientInput = {
    id?: string
    doctorId: string
    date: string
    time: string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    facility?: RoomCreateNestedOneWithoutAppointmentsInput
    patientAppointment?: PatientAppointmentCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutPatientInput = {
    id?: string
    doctorId: string
    facilityId?: string | null
    date: string
    time: string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    patientAppointment?: PatientAppointmentUncheckedCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput>
  }

  export type AppointmentCreateManyPatientInputEnvelope = {
    data: AppointmentCreateManyPatientInput | AppointmentCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type PatientAppointmentCreateWithoutPatientInput = {
    id?: string
    doctorId: string
    date: string
    time: string
    status?: $Enums.AppointmentStatus
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointment?: AppointmentCreateNestedOneWithoutPatientAppointmentInput
  }

  export type PatientAppointmentUncheckedCreateWithoutPatientInput = {
    id?: string
    doctorId: string
    date: string
    time: string
    status?: $Enums.AppointmentStatus
    name?: string | null
    appointmentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientAppointmentCreateOrConnectWithoutPatientInput = {
    where: PatientAppointmentWhereUniqueInput
    create: XOR<PatientAppointmentCreateWithoutPatientInput, PatientAppointmentUncheckedCreateWithoutPatientInput>
  }

  export type PatientAppointmentCreateManyPatientInputEnvelope = {
    data: PatientAppointmentCreateManyPatientInput | PatientAppointmentCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type AddressCreateWithoutPatientProfileInput = {
    id?: string
    label: string
    country: string
    state: string
    zipCode: string
    city: string
    address: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressUncheckedCreateWithoutPatientProfileInput = {
    id?: string
    label: string
    country: string
    state: string
    zipCode: string
    city: string
    address: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressCreateOrConnectWithoutPatientProfileInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutPatientProfileInput, AddressUncheckedCreateWithoutPatientProfileInput>
  }

  export type AddressCreateManyPatientProfileInputEnvelope = {
    data: AddressCreateManyPatientProfileInput | AddressCreateManyPatientProfileInput[]
    skipDuplicates?: boolean
  }

  export type ContactCreateWithoutPatientProfileInput = {
    id?: string
    type: $Enums.ContactType
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContactUncheckedCreateWithoutPatientProfileInput = {
    id?: string
    type: $Enums.ContactType
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContactCreateOrConnectWithoutPatientProfileInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutPatientProfileInput, ContactUncheckedCreateWithoutPatientProfileInput>
  }

  export type ContactCreateManyPatientProfileInputEnvelope = {
    data: ContactCreateManyPatientProfileInput | ContactCreateManyPatientProfileInput[]
    skipDuplicates?: boolean
  }

  export type EmploymentCreateWithoutPatientProfileInput = {
    id?: string
    employer: string
    contactPerson?: string | null
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmploymentUncheckedCreateWithoutPatientProfileInput = {
    id?: string
    employer: string
    contactPerson?: string | null
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmploymentCreateOrConnectWithoutPatientProfileInput = {
    where: EmploymentWhereUniqueInput
    create: XOR<EmploymentCreateWithoutPatientProfileInput, EmploymentUncheckedCreateWithoutPatientProfileInput>
  }

  export type EmploymentCreateManyPatientProfileInputEnvelope = {
    data: EmploymentCreateManyPatientProfileInput | EmploymentCreateManyPatientProfileInput[]
    skipDuplicates?: boolean
  }

  export type EmergencyContactCreateWithoutPatientProfileInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    relationship: $Enums.Relationship
    phone?: string | null
    email?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmergencyContactUncheckedCreateWithoutPatientProfileInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    relationship: $Enums.Relationship
    phone?: string | null
    email?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmergencyContactCreateOrConnectWithoutPatientProfileInput = {
    where: EmergencyContactWhereUniqueInput
    create: XOR<EmergencyContactCreateWithoutPatientProfileInput, EmergencyContactUncheckedCreateWithoutPatientProfileInput>
  }

  export type EmergencyContactCreateManyPatientProfileInputEnvelope = {
    data: EmergencyContactCreateManyPatientProfileInput | EmergencyContactCreateManyPatientProfileInput[]
    skipDuplicates?: boolean
  }

  export type MedicalRecordRequestCreateWithoutPatientProfileInput = {
    id?: string
    type: string
    status: string
    fileUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    inpatientEncounter: InpatientEncounterCreateNestedOneWithoutMedicalRecordRequestInput
  }

  export type MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput = {
    id?: string
    inpatientEncounterId: string
    type: string
    status: string
    fileUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalRecordRequestCreateOrConnectWithoutPatientProfileInput = {
    where: MedicalRecordRequestWhereUniqueInput
    create: XOR<MedicalRecordRequestCreateWithoutPatientProfileInput, MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput>
  }

  export type MedicalRecordRequestCreateManyPatientProfileInputEnvelope = {
    data: MedicalRecordRequestCreateManyPatientProfileInput | MedicalRecordRequestCreateManyPatientProfileInput[]
    skipDuplicates?: boolean
  }

  export type ConsentCreateWithoutPatientProfileInput = {
    id?: string
    documentUrl: string
    signature: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsentUncheckedCreateWithoutPatientProfileInput = {
    id?: string
    documentUrl: string
    signature: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsentCreateOrConnectWithoutPatientProfileInput = {
    where: ConsentWhereUniqueInput
    create: XOR<ConsentCreateWithoutPatientProfileInput, ConsentUncheckedCreateWithoutPatientProfileInput>
  }

  export type PatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput = {
    where: PatientEncounterWhereUniqueInput
    update: XOR<PatientEncounterUpdateWithoutPatientProfileInput, PatientEncounterUncheckedUpdateWithoutPatientProfileInput>
    create: XOR<PatientEncounterCreateWithoutPatientProfileInput, PatientEncounterUncheckedCreateWithoutPatientProfileInput>
  }

  export type PatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput = {
    where: PatientEncounterWhereUniqueInput
    data: XOR<PatientEncounterUpdateWithoutPatientProfileInput, PatientEncounterUncheckedUpdateWithoutPatientProfileInput>
  }

  export type PatientEncounterUpdateManyWithWhereWithoutPatientProfileInput = {
    where: PatientEncounterScalarWhereInput
    data: XOR<PatientEncounterUpdateManyMutationInput, PatientEncounterUncheckedUpdateManyWithoutPatientProfileInput>
  }

  export type PatientEncounterScalarWhereInput = {
    AND?: PatientEncounterScalarWhereInput | PatientEncounterScalarWhereInput[]
    OR?: PatientEncounterScalarWhereInput[]
    NOT?: PatientEncounterScalarWhereInput | PatientEncounterScalarWhereInput[]
    id?: UuidFilter<"PatientEncounter"> | string
    encounterId?: UuidFilter<"PatientEncounter"> | string
    patientProfileId?: UuidFilter<"PatientEncounter"> | string
    createdAt?: DateTimeFilter<"PatientEncounter"> | Date | string
    updatedAt?: DateTimeFilter<"PatientEncounter"> | Date | string
  }

  export type InpatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput = {
    where: InpatientEncounterWhereUniqueInput
    update: XOR<InpatientEncounterUpdateWithoutPatientProfileInput, InpatientEncounterUncheckedUpdateWithoutPatientProfileInput>
    create: XOR<InpatientEncounterCreateWithoutPatientProfileInput, InpatientEncounterUncheckedCreateWithoutPatientProfileInput>
  }

  export type InpatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput = {
    where: InpatientEncounterWhereUniqueInput
    data: XOR<InpatientEncounterUpdateWithoutPatientProfileInput, InpatientEncounterUncheckedUpdateWithoutPatientProfileInput>
  }

  export type InpatientEncounterUpdateManyWithWhereWithoutPatientProfileInput = {
    where: InpatientEncounterScalarWhereInput
    data: XOR<InpatientEncounterUpdateManyMutationInput, InpatientEncounterUncheckedUpdateManyWithoutPatientProfileInput>
  }

  export type InpatientEncounterScalarWhereInput = {
    AND?: InpatientEncounterScalarWhereInput | InpatientEncounterScalarWhereInput[]
    OR?: InpatientEncounterScalarWhereInput[]
    NOT?: InpatientEncounterScalarWhereInput | InpatientEncounterScalarWhereInput[]
    id?: UuidFilter<"InpatientEncounter"> | string
    patientProfileId?: UuidFilter<"InpatientEncounter"> | string
    date?: StringFilter<"InpatientEncounter"> | string
    time?: StringFilter<"InpatientEncounter"> | string
    chiefComplaint?: StringFilter<"InpatientEncounter"> | string
    doctorDiagnosis?: StringFilter<"InpatientEncounter"> | string
    triage?: EnumInpatientTriageFilter<"InpatientEncounter"> | $Enums.InpatientTriage
    disposition?: EnumInpatientDispositionFilter<"InpatientEncounter"> | $Enums.InpatientDisposition
    dispositionDate?: StringNullableFilter<"InpatientEncounter"> | string | null
    dispositionTime?: StringNullableFilter<"InpatientEncounter"> | string | null
    dispositionNote?: StringNullableFilter<"InpatientEncounter"> | string | null
    createdAt?: DateTimeFilter<"InpatientEncounter"> | Date | string
    updatedAt?: DateTimeFilter<"InpatientEncounter"> | Date | string
  }

  export type OutpatientEncounterUpsertWithWhereUniqueWithoutPatientProfileInput = {
    where: OutpatientEncounterWhereUniqueInput
    update: XOR<OutpatientEncounterUpdateWithoutPatientProfileInput, OutpatientEncounterUncheckedUpdateWithoutPatientProfileInput>
    create: XOR<OutpatientEncounterCreateWithoutPatientProfileInput, OutpatientEncounterUncheckedCreateWithoutPatientProfileInput>
  }

  export type OutpatientEncounterUpdateWithWhereUniqueWithoutPatientProfileInput = {
    where: OutpatientEncounterWhereUniqueInput
    data: XOR<OutpatientEncounterUpdateWithoutPatientProfileInput, OutpatientEncounterUncheckedUpdateWithoutPatientProfileInput>
  }

  export type OutpatientEncounterUpdateManyWithWhereWithoutPatientProfileInput = {
    where: OutpatientEncounterScalarWhereInput
    data: XOR<OutpatientEncounterUpdateManyMutationInput, OutpatientEncounterUncheckedUpdateManyWithoutPatientProfileInput>
  }

  export type OutpatientEncounterScalarWhereInput = {
    AND?: OutpatientEncounterScalarWhereInput | OutpatientEncounterScalarWhereInput[]
    OR?: OutpatientEncounterScalarWhereInput[]
    NOT?: OutpatientEncounterScalarWhereInput | OutpatientEncounterScalarWhereInput[]
    id?: UuidFilter<"OutpatientEncounter"> | string
    patientProfileId?: UuidFilter<"OutpatientEncounter"> | string
    date?: StringFilter<"OutpatientEncounter"> | string
    time?: StringFilter<"OutpatientEncounter"> | string
    chiefComplaint?: StringFilter<"OutpatientEncounter"> | string
    doctorDiagnosis?: StringFilter<"OutpatientEncounter"> | string
    type?: EnumOutpatientEncounterTypeFilter<"OutpatientEncounter"> | $Enums.OutpatientEncounterType
    createdAt?: DateTimeFilter<"OutpatientEncounter"> | Date | string
    updatedAt?: DateTimeFilter<"OutpatientEncounter"> | Date | string
  }

  export type AppointmentUpsertWithWhereUniqueWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutPatientInput, AppointmentUncheckedUpdateWithoutPatientInput>
    create: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutPatientInput, AppointmentUncheckedUpdateWithoutPatientInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutPatientInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutPatientInput>
  }

  export type PatientAppointmentUpsertWithWhereUniqueWithoutPatientInput = {
    where: PatientAppointmentWhereUniqueInput
    update: XOR<PatientAppointmentUpdateWithoutPatientInput, PatientAppointmentUncheckedUpdateWithoutPatientInput>
    create: XOR<PatientAppointmentCreateWithoutPatientInput, PatientAppointmentUncheckedCreateWithoutPatientInput>
  }

  export type PatientAppointmentUpdateWithWhereUniqueWithoutPatientInput = {
    where: PatientAppointmentWhereUniqueInput
    data: XOR<PatientAppointmentUpdateWithoutPatientInput, PatientAppointmentUncheckedUpdateWithoutPatientInput>
  }

  export type PatientAppointmentUpdateManyWithWhereWithoutPatientInput = {
    where: PatientAppointmentScalarWhereInput
    data: XOR<PatientAppointmentUpdateManyMutationInput, PatientAppointmentUncheckedUpdateManyWithoutPatientInput>
  }

  export type PatientAppointmentScalarWhereInput = {
    AND?: PatientAppointmentScalarWhereInput | PatientAppointmentScalarWhereInput[]
    OR?: PatientAppointmentScalarWhereInput[]
    NOT?: PatientAppointmentScalarWhereInput | PatientAppointmentScalarWhereInput[]
    id?: UuidFilter<"PatientAppointment"> | string
    patientId?: UuidFilter<"PatientAppointment"> | string
    doctorId?: StringFilter<"PatientAppointment"> | string
    date?: StringFilter<"PatientAppointment"> | string
    time?: StringFilter<"PatientAppointment"> | string
    status?: EnumAppointmentStatusFilter<"PatientAppointment"> | $Enums.AppointmentStatus
    name?: StringNullableFilter<"PatientAppointment"> | string | null
    appointmentId?: UuidNullableFilter<"PatientAppointment"> | string | null
    createdAt?: DateTimeFilter<"PatientAppointment"> | Date | string
    updatedAt?: DateTimeFilter<"PatientAppointment"> | Date | string
  }

  export type AddressUpsertWithWhereUniqueWithoutPatientProfileInput = {
    where: AddressWhereUniqueInput
    update: XOR<AddressUpdateWithoutPatientProfileInput, AddressUncheckedUpdateWithoutPatientProfileInput>
    create: XOR<AddressCreateWithoutPatientProfileInput, AddressUncheckedCreateWithoutPatientProfileInput>
  }

  export type AddressUpdateWithWhereUniqueWithoutPatientProfileInput = {
    where: AddressWhereUniqueInput
    data: XOR<AddressUpdateWithoutPatientProfileInput, AddressUncheckedUpdateWithoutPatientProfileInput>
  }

  export type AddressUpdateManyWithWhereWithoutPatientProfileInput = {
    where: AddressScalarWhereInput
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyWithoutPatientProfileInput>
  }

  export type AddressScalarWhereInput = {
    AND?: AddressScalarWhereInput | AddressScalarWhereInput[]
    OR?: AddressScalarWhereInput[]
    NOT?: AddressScalarWhereInput | AddressScalarWhereInput[]
    id?: UuidFilter<"Address"> | string
    patientProfileId?: UuidFilter<"Address"> | string
    label?: StringFilter<"Address"> | string
    country?: StringFilter<"Address"> | string
    state?: StringFilter<"Address"> | string
    zipCode?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    address?: StringFilter<"Address"> | string
    createdAt?: DateTimeFilter<"Address"> | Date | string
    updatedAt?: DateTimeFilter<"Address"> | Date | string
  }

  export type ContactUpsertWithWhereUniqueWithoutPatientProfileInput = {
    where: ContactWhereUniqueInput
    update: XOR<ContactUpdateWithoutPatientProfileInput, ContactUncheckedUpdateWithoutPatientProfileInput>
    create: XOR<ContactCreateWithoutPatientProfileInput, ContactUncheckedCreateWithoutPatientProfileInput>
  }

  export type ContactUpdateWithWhereUniqueWithoutPatientProfileInput = {
    where: ContactWhereUniqueInput
    data: XOR<ContactUpdateWithoutPatientProfileInput, ContactUncheckedUpdateWithoutPatientProfileInput>
  }

  export type ContactUpdateManyWithWhereWithoutPatientProfileInput = {
    where: ContactScalarWhereInput
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyWithoutPatientProfileInput>
  }

  export type ContactScalarWhereInput = {
    AND?: ContactScalarWhereInput | ContactScalarWhereInput[]
    OR?: ContactScalarWhereInput[]
    NOT?: ContactScalarWhereInput | ContactScalarWhereInput[]
    id?: UuidFilter<"Contact"> | string
    patientProfileId?: UuidFilter<"Contact"> | string
    type?: EnumContactTypeFilter<"Contact"> | $Enums.ContactType
    value?: StringFilter<"Contact"> | string
    createdAt?: DateTimeFilter<"Contact"> | Date | string
    updatedAt?: DateTimeFilter<"Contact"> | Date | string
  }

  export type EmploymentUpsertWithWhereUniqueWithoutPatientProfileInput = {
    where: EmploymentWhereUniqueInput
    update: XOR<EmploymentUpdateWithoutPatientProfileInput, EmploymentUncheckedUpdateWithoutPatientProfileInput>
    create: XOR<EmploymentCreateWithoutPatientProfileInput, EmploymentUncheckedCreateWithoutPatientProfileInput>
  }

  export type EmploymentUpdateWithWhereUniqueWithoutPatientProfileInput = {
    where: EmploymentWhereUniqueInput
    data: XOR<EmploymentUpdateWithoutPatientProfileInput, EmploymentUncheckedUpdateWithoutPatientProfileInput>
  }

  export type EmploymentUpdateManyWithWhereWithoutPatientProfileInput = {
    where: EmploymentScalarWhereInput
    data: XOR<EmploymentUpdateManyMutationInput, EmploymentUncheckedUpdateManyWithoutPatientProfileInput>
  }

  export type EmploymentScalarWhereInput = {
    AND?: EmploymentScalarWhereInput | EmploymentScalarWhereInput[]
    OR?: EmploymentScalarWhereInput[]
    NOT?: EmploymentScalarWhereInput | EmploymentScalarWhereInput[]
    id?: UuidFilter<"Employment"> | string
    patientProfileId?: UuidFilter<"Employment"> | string
    employer?: StringFilter<"Employment"> | string
    contactPerson?: StringNullableFilter<"Employment"> | string | null
    address?: StringNullableFilter<"Employment"> | string | null
    phone?: StringNullableFilter<"Employment"> | string | null
    email?: StringNullableFilter<"Employment"> | string | null
    website?: StringNullableFilter<"Employment"> | string | null
    createdAt?: DateTimeFilter<"Employment"> | Date | string
    updatedAt?: DateTimeFilter<"Employment"> | Date | string
  }

  export type EmergencyContactUpsertWithWhereUniqueWithoutPatientProfileInput = {
    where: EmergencyContactWhereUniqueInput
    update: XOR<EmergencyContactUpdateWithoutPatientProfileInput, EmergencyContactUncheckedUpdateWithoutPatientProfileInput>
    create: XOR<EmergencyContactCreateWithoutPatientProfileInput, EmergencyContactUncheckedCreateWithoutPatientProfileInput>
  }

  export type EmergencyContactUpdateWithWhereUniqueWithoutPatientProfileInput = {
    where: EmergencyContactWhereUniqueInput
    data: XOR<EmergencyContactUpdateWithoutPatientProfileInput, EmergencyContactUncheckedUpdateWithoutPatientProfileInput>
  }

  export type EmergencyContactUpdateManyWithWhereWithoutPatientProfileInput = {
    where: EmergencyContactScalarWhereInput
    data: XOR<EmergencyContactUpdateManyMutationInput, EmergencyContactUncheckedUpdateManyWithoutPatientProfileInput>
  }

  export type EmergencyContactScalarWhereInput = {
    AND?: EmergencyContactScalarWhereInput | EmergencyContactScalarWhereInput[]
    OR?: EmergencyContactScalarWhereInput[]
    NOT?: EmergencyContactScalarWhereInput | EmergencyContactScalarWhereInput[]
    id?: UuidFilter<"EmergencyContact"> | string
    patientProfileId?: UuidFilter<"EmergencyContact"> | string
    lastName?: StringFilter<"EmergencyContact"> | string
    firstName?: StringFilter<"EmergencyContact"> | string
    middleName?: StringNullableFilter<"EmergencyContact"> | string | null
    suffix?: StringNullableFilter<"EmergencyContact"> | string | null
    relationship?: EnumRelationshipFilter<"EmergencyContact"> | $Enums.Relationship
    phone?: StringNullableFilter<"EmergencyContact"> | string | null
    email?: StringNullableFilter<"EmergencyContact"> | string | null
    address?: StringNullableFilter<"EmergencyContact"> | string | null
    createdAt?: DateTimeFilter<"EmergencyContact"> | Date | string
    updatedAt?: DateTimeFilter<"EmergencyContact"> | Date | string
  }

  export type MedicalRecordRequestUpsertWithWhereUniqueWithoutPatientProfileInput = {
    where: MedicalRecordRequestWhereUniqueInput
    update: XOR<MedicalRecordRequestUpdateWithoutPatientProfileInput, MedicalRecordRequestUncheckedUpdateWithoutPatientProfileInput>
    create: XOR<MedicalRecordRequestCreateWithoutPatientProfileInput, MedicalRecordRequestUncheckedCreateWithoutPatientProfileInput>
  }

  export type MedicalRecordRequestUpdateWithWhereUniqueWithoutPatientProfileInput = {
    where: MedicalRecordRequestWhereUniqueInput
    data: XOR<MedicalRecordRequestUpdateWithoutPatientProfileInput, MedicalRecordRequestUncheckedUpdateWithoutPatientProfileInput>
  }

  export type MedicalRecordRequestUpdateManyWithWhereWithoutPatientProfileInput = {
    where: MedicalRecordRequestScalarWhereInput
    data: XOR<MedicalRecordRequestUpdateManyMutationInput, MedicalRecordRequestUncheckedUpdateManyWithoutPatientProfileInput>
  }

  export type ConsentUpsertWithoutPatientProfileInput = {
    update: XOR<ConsentUpdateWithoutPatientProfileInput, ConsentUncheckedUpdateWithoutPatientProfileInput>
    create: XOR<ConsentCreateWithoutPatientProfileInput, ConsentUncheckedCreateWithoutPatientProfileInput>
    where?: ConsentWhereInput
  }

  export type ConsentUpdateToOneWithWhereWithoutPatientProfileInput = {
    where?: ConsentWhereInput
    data: XOR<ConsentUpdateWithoutPatientProfileInput, ConsentUncheckedUpdateWithoutPatientProfileInput>
  }

  export type ConsentUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentUrl?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsentUncheckedUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentUrl?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientProfileCreateWithoutAddressesInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterCreateNestedManyWithoutPatientProfileInput
    inpatientEncounters?: InpatientEncounterCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    patientAppointments?: PatientAppointmentCreateNestedManyWithoutPatientInput
    contacts?: ContactCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileUncheckedCreateWithoutAddressesInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    inpatientEncounters?: InpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    patientAppointments?: PatientAppointmentUncheckedCreateNestedManyWithoutPatientInput
    contacts?: ContactUncheckedCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentUncheckedCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileCreateOrConnectWithoutAddressesInput = {
    where: PatientProfileWhereUniqueInput
    create: XOR<PatientProfileCreateWithoutAddressesInput, PatientProfileUncheckedCreateWithoutAddressesInput>
  }

  export type PatientProfileUpsertWithoutAddressesInput = {
    update: XOR<PatientProfileUpdateWithoutAddressesInput, PatientProfileUncheckedUpdateWithoutAddressesInput>
    create: XOR<PatientProfileCreateWithoutAddressesInput, PatientProfileUncheckedCreateWithoutAddressesInput>
    where?: PatientProfileWhereInput
  }

  export type PatientProfileUpdateToOneWithWhereWithoutAddressesInput = {
    where?: PatientProfileWhereInput
    data: XOR<PatientProfileUpdateWithoutAddressesInput, PatientProfileUncheckedUpdateWithoutAddressesInput>
  }

  export type PatientProfileUpdateWithoutAddressesInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUpdateManyWithoutPatientProfileNestedInput
    inpatientEncounters?: InpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    patientAppointments?: PatientAppointmentUpdateManyWithoutPatientNestedInput
    contacts?: ContactUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUpdateOneWithoutPatientProfileNestedInput
  }

  export type PatientProfileUncheckedUpdateWithoutAddressesInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    inpatientEncounters?: InpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    patientAppointments?: PatientAppointmentUncheckedUpdateManyWithoutPatientNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUncheckedUpdateOneWithoutPatientProfileNestedInput
  }

  export type PatientProfileCreateWithoutContactsInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterCreateNestedManyWithoutPatientProfileInput
    inpatientEncounters?: InpatientEncounterCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    patientAppointments?: PatientAppointmentCreateNestedManyWithoutPatientInput
    addresses?: AddressCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileUncheckedCreateWithoutContactsInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    inpatientEncounters?: InpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    patientAppointments?: PatientAppointmentUncheckedCreateNestedManyWithoutPatientInput
    addresses?: AddressUncheckedCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentUncheckedCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileCreateOrConnectWithoutContactsInput = {
    where: PatientProfileWhereUniqueInput
    create: XOR<PatientProfileCreateWithoutContactsInput, PatientProfileUncheckedCreateWithoutContactsInput>
  }

  export type PatientProfileUpsertWithoutContactsInput = {
    update: XOR<PatientProfileUpdateWithoutContactsInput, PatientProfileUncheckedUpdateWithoutContactsInput>
    create: XOR<PatientProfileCreateWithoutContactsInput, PatientProfileUncheckedCreateWithoutContactsInput>
    where?: PatientProfileWhereInput
  }

  export type PatientProfileUpdateToOneWithWhereWithoutContactsInput = {
    where?: PatientProfileWhereInput
    data: XOR<PatientProfileUpdateWithoutContactsInput, PatientProfileUncheckedUpdateWithoutContactsInput>
  }

  export type PatientProfileUpdateWithoutContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUpdateManyWithoutPatientProfileNestedInput
    inpatientEncounters?: InpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    patientAppointments?: PatientAppointmentUpdateManyWithoutPatientNestedInput
    addresses?: AddressUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUpdateOneWithoutPatientProfileNestedInput
  }

  export type PatientProfileUncheckedUpdateWithoutContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    inpatientEncounters?: InpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    patientAppointments?: PatientAppointmentUncheckedUpdateManyWithoutPatientNestedInput
    addresses?: AddressUncheckedUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUncheckedUpdateOneWithoutPatientProfileNestedInput
  }

  export type PatientProfileCreateWithoutEmploymentsInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterCreateNestedManyWithoutPatientProfileInput
    inpatientEncounters?: InpatientEncounterCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    patientAppointments?: PatientAppointmentCreateNestedManyWithoutPatientInput
    addresses?: AddressCreateNestedManyWithoutPatientProfileInput
    contacts?: ContactCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileUncheckedCreateWithoutEmploymentsInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    inpatientEncounters?: InpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    patientAppointments?: PatientAppointmentUncheckedCreateNestedManyWithoutPatientInput
    addresses?: AddressUncheckedCreateNestedManyWithoutPatientProfileInput
    contacts?: ContactUncheckedCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentUncheckedCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileCreateOrConnectWithoutEmploymentsInput = {
    where: PatientProfileWhereUniqueInput
    create: XOR<PatientProfileCreateWithoutEmploymentsInput, PatientProfileUncheckedCreateWithoutEmploymentsInput>
  }

  export type PatientProfileUpsertWithoutEmploymentsInput = {
    update: XOR<PatientProfileUpdateWithoutEmploymentsInput, PatientProfileUncheckedUpdateWithoutEmploymentsInput>
    create: XOR<PatientProfileCreateWithoutEmploymentsInput, PatientProfileUncheckedCreateWithoutEmploymentsInput>
    where?: PatientProfileWhereInput
  }

  export type PatientProfileUpdateToOneWithWhereWithoutEmploymentsInput = {
    where?: PatientProfileWhereInput
    data: XOR<PatientProfileUpdateWithoutEmploymentsInput, PatientProfileUncheckedUpdateWithoutEmploymentsInput>
  }

  export type PatientProfileUpdateWithoutEmploymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUpdateManyWithoutPatientProfileNestedInput
    inpatientEncounters?: InpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    patientAppointments?: PatientAppointmentUpdateManyWithoutPatientNestedInput
    addresses?: AddressUpdateManyWithoutPatientProfileNestedInput
    contacts?: ContactUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUpdateOneWithoutPatientProfileNestedInput
  }

  export type PatientProfileUncheckedUpdateWithoutEmploymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    inpatientEncounters?: InpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    patientAppointments?: PatientAppointmentUncheckedUpdateManyWithoutPatientNestedInput
    addresses?: AddressUncheckedUpdateManyWithoutPatientProfileNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUncheckedUpdateOneWithoutPatientProfileNestedInput
  }

  export type PatientProfileCreateWithoutEmergencyContactsInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterCreateNestedManyWithoutPatientProfileInput
    inpatientEncounters?: InpatientEncounterCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    patientAppointments?: PatientAppointmentCreateNestedManyWithoutPatientInput
    addresses?: AddressCreateNestedManyWithoutPatientProfileInput
    contacts?: ContactCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileUncheckedCreateWithoutEmergencyContactsInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    inpatientEncounters?: InpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    patientAppointments?: PatientAppointmentUncheckedCreateNestedManyWithoutPatientInput
    addresses?: AddressUncheckedCreateNestedManyWithoutPatientProfileInput
    contacts?: ContactUncheckedCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentUncheckedCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileCreateOrConnectWithoutEmergencyContactsInput = {
    where: PatientProfileWhereUniqueInput
    create: XOR<PatientProfileCreateWithoutEmergencyContactsInput, PatientProfileUncheckedCreateWithoutEmergencyContactsInput>
  }

  export type PatientProfileUpsertWithoutEmergencyContactsInput = {
    update: XOR<PatientProfileUpdateWithoutEmergencyContactsInput, PatientProfileUncheckedUpdateWithoutEmergencyContactsInput>
    create: XOR<PatientProfileCreateWithoutEmergencyContactsInput, PatientProfileUncheckedCreateWithoutEmergencyContactsInput>
    where?: PatientProfileWhereInput
  }

  export type PatientProfileUpdateToOneWithWhereWithoutEmergencyContactsInput = {
    where?: PatientProfileWhereInput
    data: XOR<PatientProfileUpdateWithoutEmergencyContactsInput, PatientProfileUncheckedUpdateWithoutEmergencyContactsInput>
  }

  export type PatientProfileUpdateWithoutEmergencyContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUpdateManyWithoutPatientProfileNestedInput
    inpatientEncounters?: InpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    patientAppointments?: PatientAppointmentUpdateManyWithoutPatientNestedInput
    addresses?: AddressUpdateManyWithoutPatientProfileNestedInput
    contacts?: ContactUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUpdateOneWithoutPatientProfileNestedInput
  }

  export type PatientProfileUncheckedUpdateWithoutEmergencyContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    inpatientEncounters?: InpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    patientAppointments?: PatientAppointmentUncheckedUpdateManyWithoutPatientNestedInput
    addresses?: AddressUncheckedUpdateManyWithoutPatientProfileNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUncheckedUpdateOneWithoutPatientProfileNestedInput
  }

  export type PatientProfileCreateWithoutConsentInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterCreateNestedManyWithoutPatientProfileInput
    inpatientEncounters?: InpatientEncounterCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    patientAppointments?: PatientAppointmentCreateNestedManyWithoutPatientInput
    addresses?: AddressCreateNestedManyWithoutPatientProfileInput
    contacts?: ContactCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestCreateNestedManyWithoutPatientProfileInput
  }

  export type PatientProfileUncheckedCreateWithoutConsentInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    inpatientEncounters?: InpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    patientAppointments?: PatientAppointmentUncheckedCreateNestedManyWithoutPatientInput
    addresses?: AddressUncheckedCreateNestedManyWithoutPatientProfileInput
    contacts?: ContactUncheckedCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutPatientProfileInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedCreateNestedManyWithoutPatientProfileInput
  }

  export type PatientProfileCreateOrConnectWithoutConsentInput = {
    where: PatientProfileWhereUniqueInput
    create: XOR<PatientProfileCreateWithoutConsentInput, PatientProfileUncheckedCreateWithoutConsentInput>
  }

  export type PatientProfileUpsertWithoutConsentInput = {
    update: XOR<PatientProfileUpdateWithoutConsentInput, PatientProfileUncheckedUpdateWithoutConsentInput>
    create: XOR<PatientProfileCreateWithoutConsentInput, PatientProfileUncheckedCreateWithoutConsentInput>
    where?: PatientProfileWhereInput
  }

  export type PatientProfileUpdateToOneWithWhereWithoutConsentInput = {
    where?: PatientProfileWhereInput
    data: XOR<PatientProfileUpdateWithoutConsentInput, PatientProfileUncheckedUpdateWithoutConsentInput>
  }

  export type PatientProfileUpdateWithoutConsentInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUpdateManyWithoutPatientProfileNestedInput
    inpatientEncounters?: InpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    patientAppointments?: PatientAppointmentUpdateManyWithoutPatientNestedInput
    addresses?: AddressUpdateManyWithoutPatientProfileNestedInput
    contacts?: ContactUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUpdateManyWithoutPatientProfileNestedInput
  }

  export type PatientProfileUncheckedUpdateWithoutConsentInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    inpatientEncounters?: InpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    patientAppointments?: PatientAppointmentUncheckedUpdateManyWithoutPatientNestedInput
    addresses?: AddressUncheckedUpdateManyWithoutPatientProfileNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    medicalRecordRequests?: MedicalRecordRequestUncheckedUpdateManyWithoutPatientProfileNestedInput
  }

  export type PatientProfileCreateWithoutMedicalRecordRequestsInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterCreateNestedManyWithoutPatientProfileInput
    inpatientEncounters?: InpatientEncounterCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    patientAppointments?: PatientAppointmentCreateNestedManyWithoutPatientInput
    addresses?: AddressCreateNestedManyWithoutPatientProfileInput
    contacts?: ContactCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileUncheckedCreateWithoutMedicalRecordRequestsInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    birthdate?: string | null
    birthplace?: string | null
    sex?: $Enums.Sex | null
    maritalStatus?: $Enums.MaritalStatus | null
    nationality?: string | null
    religion?: string | null
    bloodType?: $Enums.BloodType | null
    archived?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientEncounters?: PatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    inpatientEncounters?: InpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    outpatientEncounters?: OutpatientEncounterUncheckedCreateNestedManyWithoutPatientProfileInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    patientAppointments?: PatientAppointmentUncheckedCreateNestedManyWithoutPatientInput
    addresses?: AddressUncheckedCreateNestedManyWithoutPatientProfileInput
    contacts?: ContactUncheckedCreateNestedManyWithoutPatientProfileInput
    employments?: EmploymentUncheckedCreateNestedManyWithoutPatientProfileInput
    emergencyContacts?: EmergencyContactUncheckedCreateNestedManyWithoutPatientProfileInput
    consent?: ConsentUncheckedCreateNestedOneWithoutPatientProfileInput
  }

  export type PatientProfileCreateOrConnectWithoutMedicalRecordRequestsInput = {
    where: PatientProfileWhereUniqueInput
    create: XOR<PatientProfileCreateWithoutMedicalRecordRequestsInput, PatientProfileUncheckedCreateWithoutMedicalRecordRequestsInput>
  }

  export type InpatientEncounterCreateWithoutMedicalRecordRequestInput = {
    id?: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    triage: $Enums.InpatientTriage
    disposition?: $Enums.InpatientDisposition
    dispositionDate?: string | null
    dispositionTime?: string | null
    dispositionNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientProfile: PatientProfileCreateNestedOneWithoutInpatientEncountersInput
    charts?: InpatientEncounterChartCreateNestedManyWithoutEncounterInput
    orders?: InpatientEncounterOrderCreateNestedManyWithoutEncounterInput
  }

  export type InpatientEncounterUncheckedCreateWithoutMedicalRecordRequestInput = {
    id?: string
    patientProfileId: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    triage: $Enums.InpatientTriage
    disposition?: $Enums.InpatientDisposition
    dispositionDate?: string | null
    dispositionTime?: string | null
    dispositionNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    charts?: InpatientEncounterChartUncheckedCreateNestedManyWithoutEncounterInput
    orders?: InpatientEncounterOrderUncheckedCreateNestedManyWithoutEncounterInput
  }

  export type InpatientEncounterCreateOrConnectWithoutMedicalRecordRequestInput = {
    where: InpatientEncounterWhereUniqueInput
    create: XOR<InpatientEncounterCreateWithoutMedicalRecordRequestInput, InpatientEncounterUncheckedCreateWithoutMedicalRecordRequestInput>
  }

  export type PatientProfileUpsertWithoutMedicalRecordRequestsInput = {
    update: XOR<PatientProfileUpdateWithoutMedicalRecordRequestsInput, PatientProfileUncheckedUpdateWithoutMedicalRecordRequestsInput>
    create: XOR<PatientProfileCreateWithoutMedicalRecordRequestsInput, PatientProfileUncheckedCreateWithoutMedicalRecordRequestsInput>
    where?: PatientProfileWhereInput
  }

  export type PatientProfileUpdateToOneWithWhereWithoutMedicalRecordRequestsInput = {
    where?: PatientProfileWhereInput
    data: XOR<PatientProfileUpdateWithoutMedicalRecordRequestsInput, PatientProfileUncheckedUpdateWithoutMedicalRecordRequestsInput>
  }

  export type PatientProfileUpdateWithoutMedicalRecordRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUpdateManyWithoutPatientProfileNestedInput
    inpatientEncounters?: InpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    patientAppointments?: PatientAppointmentUpdateManyWithoutPatientNestedInput
    addresses?: AddressUpdateManyWithoutPatientProfileNestedInput
    contacts?: ContactUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUpdateOneWithoutPatientProfileNestedInput
  }

  export type PatientProfileUncheckedUpdateWithoutMedicalRecordRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    birthplace?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableEnumSexFieldUpdateOperationsInput | $Enums.Sex | null
    maritalStatus?: NullableEnumMaritalStatusFieldUpdateOperationsInput | $Enums.MaritalStatus | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientEncounters?: PatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    inpatientEncounters?: InpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    outpatientEncounters?: OutpatientEncounterUncheckedUpdateManyWithoutPatientProfileNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    patientAppointments?: PatientAppointmentUncheckedUpdateManyWithoutPatientNestedInput
    addresses?: AddressUncheckedUpdateManyWithoutPatientProfileNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    employments?: EmploymentUncheckedUpdateManyWithoutPatientProfileNestedInput
    emergencyContacts?: EmergencyContactUncheckedUpdateManyWithoutPatientProfileNestedInput
    consent?: ConsentUncheckedUpdateOneWithoutPatientProfileNestedInput
  }

  export type InpatientEncounterUpsertWithoutMedicalRecordRequestInput = {
    update: XOR<InpatientEncounterUpdateWithoutMedicalRecordRequestInput, InpatientEncounterUncheckedUpdateWithoutMedicalRecordRequestInput>
    create: XOR<InpatientEncounterCreateWithoutMedicalRecordRequestInput, InpatientEncounterUncheckedCreateWithoutMedicalRecordRequestInput>
    where?: InpatientEncounterWhereInput
  }

  export type InpatientEncounterUpdateToOneWithWhereWithoutMedicalRecordRequestInput = {
    where?: InpatientEncounterWhereInput
    data: XOR<InpatientEncounterUpdateWithoutMedicalRecordRequestInput, InpatientEncounterUncheckedUpdateWithoutMedicalRecordRequestInput>
  }

  export type InpatientEncounterUpdateWithoutMedicalRecordRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: StringFieldUpdateOperationsInput | string
    doctorDiagnosis?: StringFieldUpdateOperationsInput | string
    triage?: EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
    disposition?: EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
    dispositionDate?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionTime?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientProfile?: PatientProfileUpdateOneRequiredWithoutInpatientEncountersNestedInput
    charts?: InpatientEncounterChartUpdateManyWithoutEncounterNestedInput
    orders?: InpatientEncounterOrderUpdateManyWithoutEncounterNestedInput
  }

  export type InpatientEncounterUncheckedUpdateWithoutMedicalRecordRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: StringFieldUpdateOperationsInput | string
    doctorDiagnosis?: StringFieldUpdateOperationsInput | string
    triage?: EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
    disposition?: EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
    dispositionDate?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionTime?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    charts?: InpatientEncounterChartUncheckedUpdateManyWithoutEncounterNestedInput
    orders?: InpatientEncounterOrderUncheckedUpdateManyWithoutEncounterNestedInput
  }

  export type PharmacyItemCreateWithoutBrandInput = {
    id?: string
    name: string
    form: $Enums.PharmacyItemForm
    route: $Enums.PharmacyItemRoute
    strength: string
    stock: number
    unit: string
    sku?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category: PharmacyItemCategoryCreateNestedOneWithoutItemsInput
  }

  export type PharmacyItemUncheckedCreateWithoutBrandInput = {
    id?: string
    categoryId: string
    name: string
    form: $Enums.PharmacyItemForm
    route: $Enums.PharmacyItemRoute
    strength: string
    stock: number
    unit: string
    sku?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PharmacyItemCreateOrConnectWithoutBrandInput = {
    where: PharmacyItemWhereUniqueInput
    create: XOR<PharmacyItemCreateWithoutBrandInput, PharmacyItemUncheckedCreateWithoutBrandInput>
  }

  export type PharmacyItemCreateManyBrandInputEnvelope = {
    data: PharmacyItemCreateManyBrandInput | PharmacyItemCreateManyBrandInput[]
    skipDuplicates?: boolean
  }

  export type PharmacyItemUpsertWithWhereUniqueWithoutBrandInput = {
    where: PharmacyItemWhereUniqueInput
    update: XOR<PharmacyItemUpdateWithoutBrandInput, PharmacyItemUncheckedUpdateWithoutBrandInput>
    create: XOR<PharmacyItemCreateWithoutBrandInput, PharmacyItemUncheckedCreateWithoutBrandInput>
  }

  export type PharmacyItemUpdateWithWhereUniqueWithoutBrandInput = {
    where: PharmacyItemWhereUniqueInput
    data: XOR<PharmacyItemUpdateWithoutBrandInput, PharmacyItemUncheckedUpdateWithoutBrandInput>
  }

  export type PharmacyItemUpdateManyWithWhereWithoutBrandInput = {
    where: PharmacyItemScalarWhereInput
    data: XOR<PharmacyItemUpdateManyMutationInput, PharmacyItemUncheckedUpdateManyWithoutBrandInput>
  }

  export type PharmacyItemScalarWhereInput = {
    AND?: PharmacyItemScalarWhereInput | PharmacyItemScalarWhereInput[]
    OR?: PharmacyItemScalarWhereInput[]
    NOT?: PharmacyItemScalarWhereInput | PharmacyItemScalarWhereInput[]
    id?: UuidFilter<"PharmacyItem"> | string
    brandId?: UuidFilter<"PharmacyItem"> | string
    categoryId?: UuidFilter<"PharmacyItem"> | string
    name?: StringFilter<"PharmacyItem"> | string
    form?: EnumPharmacyItemFormFilter<"PharmacyItem"> | $Enums.PharmacyItemForm
    route?: EnumPharmacyItemRouteFilter<"PharmacyItem"> | $Enums.PharmacyItemRoute
    strength?: StringFilter<"PharmacyItem"> | string
    stock?: IntFilter<"PharmacyItem"> | number
    unit?: StringFilter<"PharmacyItem"> | string
    sku?: StringNullableFilter<"PharmacyItem"> | string | null
    createdAt?: DateTimeFilter<"PharmacyItem"> | Date | string
    updatedAt?: DateTimeFilter<"PharmacyItem"> | Date | string
  }

  export type PharmacyItemCreateWithoutCategoryInput = {
    id?: string
    name: string
    form: $Enums.PharmacyItemForm
    route: $Enums.PharmacyItemRoute
    strength: string
    stock: number
    unit: string
    sku?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    brand: PharmacyBrandCreateNestedOneWithoutItemsInput
  }

  export type PharmacyItemUncheckedCreateWithoutCategoryInput = {
    id?: string
    brandId: string
    name: string
    form: $Enums.PharmacyItemForm
    route: $Enums.PharmacyItemRoute
    strength: string
    stock: number
    unit: string
    sku?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PharmacyItemCreateOrConnectWithoutCategoryInput = {
    where: PharmacyItemWhereUniqueInput
    create: XOR<PharmacyItemCreateWithoutCategoryInput, PharmacyItemUncheckedCreateWithoutCategoryInput>
  }

  export type PharmacyItemCreateManyCategoryInputEnvelope = {
    data: PharmacyItemCreateManyCategoryInput | PharmacyItemCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type PharmacyItemUpsertWithWhereUniqueWithoutCategoryInput = {
    where: PharmacyItemWhereUniqueInput
    update: XOR<PharmacyItemUpdateWithoutCategoryInput, PharmacyItemUncheckedUpdateWithoutCategoryInput>
    create: XOR<PharmacyItemCreateWithoutCategoryInput, PharmacyItemUncheckedCreateWithoutCategoryInput>
  }

  export type PharmacyItemUpdateWithWhereUniqueWithoutCategoryInput = {
    where: PharmacyItemWhereUniqueInput
    data: XOR<PharmacyItemUpdateWithoutCategoryInput, PharmacyItemUncheckedUpdateWithoutCategoryInput>
  }

  export type PharmacyItemUpdateManyWithWhereWithoutCategoryInput = {
    where: PharmacyItemScalarWhereInput
    data: XOR<PharmacyItemUpdateManyMutationInput, PharmacyItemUncheckedUpdateManyWithoutCategoryInput>
  }

  export type PharmacyBrandCreateWithoutItemsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PharmacyBrandUncheckedCreateWithoutItemsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PharmacyBrandCreateOrConnectWithoutItemsInput = {
    where: PharmacyBrandWhereUniqueInput
    create: XOR<PharmacyBrandCreateWithoutItemsInput, PharmacyBrandUncheckedCreateWithoutItemsInput>
  }

  export type PharmacyItemCategoryCreateWithoutItemsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PharmacyItemCategoryUncheckedCreateWithoutItemsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PharmacyItemCategoryCreateOrConnectWithoutItemsInput = {
    where: PharmacyItemCategoryWhereUniqueInput
    create: XOR<PharmacyItemCategoryCreateWithoutItemsInput, PharmacyItemCategoryUncheckedCreateWithoutItemsInput>
  }

  export type PharmacyBrandUpsertWithoutItemsInput = {
    update: XOR<PharmacyBrandUpdateWithoutItemsInput, PharmacyBrandUncheckedUpdateWithoutItemsInput>
    create: XOR<PharmacyBrandCreateWithoutItemsInput, PharmacyBrandUncheckedCreateWithoutItemsInput>
    where?: PharmacyBrandWhereInput
  }

  export type PharmacyBrandUpdateToOneWithWhereWithoutItemsInput = {
    where?: PharmacyBrandWhereInput
    data: XOR<PharmacyBrandUpdateWithoutItemsInput, PharmacyBrandUncheckedUpdateWithoutItemsInput>
  }

  export type PharmacyBrandUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PharmacyBrandUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PharmacyItemCategoryUpsertWithoutItemsInput = {
    update: XOR<PharmacyItemCategoryUpdateWithoutItemsInput, PharmacyItemCategoryUncheckedUpdateWithoutItemsInput>
    create: XOR<PharmacyItemCategoryCreateWithoutItemsInput, PharmacyItemCategoryUncheckedCreateWithoutItemsInput>
    where?: PharmacyItemCategoryWhereInput
  }

  export type PharmacyItemCategoryUpdateToOneWithWhereWithoutItemsInput = {
    where?: PharmacyItemCategoryWhereInput
    data: XOR<PharmacyItemCategoryUpdateWithoutItemsInput, PharmacyItemCategoryUncheckedUpdateWithoutItemsInput>
  }

  export type PharmacyItemCategoryUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PharmacyItemCategoryUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    isRevoked?: boolean
  }

  export type RefreshTokenUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    isRevoked?: boolean
  }

  export type RefreshTokenCreateOrConnectWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
  }

  export type RefreshTokenCreateManyUserInputEnvelope = {
    data: RefreshTokenCreateManyUserInput | RefreshTokenCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PatientCreateWithoutUserInput = {
    id?: string
    patientNumber: string
    bloodType?: $Enums.BloodType | null
    allergies?: string | null
    medicalHistory?: string | null
    emergencyContact?: string | null
    emergencyPhone?: string | null
    insuranceProvider?: string | null
    insuranceNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientUncheckedCreateWithoutUserInput = {
    id?: string
    patientNumber: string
    bloodType?: $Enums.BloodType | null
    allergies?: string | null
    medicalHistory?: string | null
    emergencyContact?: string | null
    emergencyPhone?: string | null
    insuranceProvider?: string | null
    insuranceNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientCreateOrConnectWithoutUserInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
  }

  export type StaffCreateWithoutUserInput = {
    id?: string
    staffNumber: string
    department?: string | null
    position?: string | null
    specialization?: string | null
    licenseNumber?: string | null
    hiredDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorProfile?: DoctorCreateNestedOneWithoutStaffInput
  }

  export type StaffUncheckedCreateWithoutUserInput = {
    id?: string
    staffNumber: string
    department?: string | null
    position?: string | null
    specialization?: string | null
    licenseNumber?: string | null
    hiredDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorProfile?: DoctorUncheckedCreateNestedOneWithoutStaffInput
  }

  export type StaffCreateOrConnectWithoutUserInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
  }

  export type PartnerCreateWithoutUserInput = {
    id?: string
    institutionName: string
    institutionType: $Enums.PartnerType
    licenseNumber?: string | null
    website?: string | null
    contactPerson?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartnerUncheckedCreateWithoutUserInput = {
    id?: string
    institutionName: string
    institutionType: $Enums.PartnerType
    licenseNumber?: string | null
    website?: string | null
    contactPerson?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartnerCreateOrConnectWithoutUserInput = {
    where: PartnerWhereUniqueInput
    create: XOR<PartnerCreateWithoutUserInput, PartnerUncheckedCreateWithoutUserInput>
  }

  export type DoctorCreateWithoutUserInput = {
    id?: string
    doctorNumber: string
    medicalLicense: string
    specialization: string
    subSpecialization?: string | null
    boardCertification?: string | null
    yearsOfExperience?: number | null
    education?: string | null
    hospitalAffiliation?: string | null
    consultationFee?: Decimal | DecimalJsLike | number | string | null
    isAvailable?: boolean
    workingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    staff: StaffCreateNestedOneWithoutDoctorProfileInput
  }

  export type DoctorUncheckedCreateWithoutUserInput = {
    id?: string
    staffId: string
    doctorNumber: string
    medicalLicense: string
    specialization: string
    subSpecialization?: string | null
    boardCertification?: string | null
    yearsOfExperience?: number | null
    education?: string | null
    hospitalAffiliation?: string | null
    consultationFee?: Decimal | DecimalJsLike | number | string | null
    isAvailable?: boolean
    workingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorCreateOrConnectWithoutUserInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput>
  }

  export type RefreshTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    update: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
  }

  export type RefreshTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    data: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
  }

  export type RefreshTokenUpdateManyWithWhereWithoutUserInput = {
    where: RefreshTokenScalarWhereInput
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyWithoutUserInput>
  }

  export type RefreshTokenScalarWhereInput = {
    AND?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
    OR?: RefreshTokenScalarWhereInput[]
    NOT?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
    id?: StringFilter<"RefreshToken"> | string
    token?: StringFilter<"RefreshToken"> | string
    userId?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    isRevoked?: BoolFilter<"RefreshToken"> | boolean
  }

  export type PatientUpsertWithoutUserInput = {
    update: XOR<PatientUpdateWithoutUserInput, PatientUncheckedUpdateWithoutUserInput>
    create: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutUserInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutUserInput, PatientUncheckedUpdateWithoutUserInput>
  }

  export type PatientUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientNumber?: StringFieldUpdateOperationsInput | string
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceProvider?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientNumber?: StringFieldUpdateOperationsInput | string
    bloodType?: NullableEnumBloodTypeFieldUpdateOperationsInput | $Enums.BloodType | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceProvider?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffUpsertWithoutUserInput = {
    update: XOR<StaffUpdateWithoutUserInput, StaffUncheckedUpdateWithoutUserInput>
    create: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutUserInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutUserInput, StaffUncheckedUpdateWithoutUserInput>
  }

  export type StaffUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffNumber?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    hiredDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorProfile?: DoctorUpdateOneWithoutStaffNestedInput
  }

  export type StaffUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffNumber?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    hiredDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorProfile?: DoctorUncheckedUpdateOneWithoutStaffNestedInput
  }

  export type PartnerUpsertWithoutUserInput = {
    update: XOR<PartnerUpdateWithoutUserInput, PartnerUncheckedUpdateWithoutUserInput>
    create: XOR<PartnerCreateWithoutUserInput, PartnerUncheckedCreateWithoutUserInput>
    where?: PartnerWhereInput
  }

  export type PartnerUpdateToOneWithWhereWithoutUserInput = {
    where?: PartnerWhereInput
    data: XOR<PartnerUpdateWithoutUserInput, PartnerUncheckedUpdateWithoutUserInput>
  }

  export type PartnerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionName?: StringFieldUpdateOperationsInput | string
    institutionType?: EnumPartnerTypeFieldUpdateOperationsInput | $Enums.PartnerType
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartnerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionName?: StringFieldUpdateOperationsInput | string
    institutionType?: EnumPartnerTypeFieldUpdateOperationsInput | $Enums.PartnerType
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorUpsertWithoutUserInput = {
    update: XOR<DoctorUpdateWithoutUserInput, DoctorUncheckedUpdateWithoutUserInput>
    create: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutUserInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutUserInput, DoctorUncheckedUpdateWithoutUserInput>
  }

  export type DoctorUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorNumber?: StringFieldUpdateOperationsInput | string
    medicalLicense?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    subSpecialization?: NullableStringFieldUpdateOperationsInput | string | null
    boardCertification?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    consultationFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    workingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUpdateOneRequiredWithoutDoctorProfileNestedInput
  }

  export type DoctorUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    doctorNumber?: StringFieldUpdateOperationsInput | string
    medicalLicense?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    subSpecialization?: NullableStringFieldUpdateOperationsInput | string | null
    boardCertification?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    consultationFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    workingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutRefreshTokensInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    status?: $Enums.UserStatus
    isEmailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    avatar?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    province?: string | null
    zipCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdBy?: string | null
    updatedBy?: string | null
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    staffProfile?: StaffCreateNestedOneWithoutUserInput
    partnerProfile?: PartnerCreateNestedOneWithoutUserInput
    doctorProfile?: DoctorCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRefreshTokensInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    status?: $Enums.UserStatus
    isEmailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    avatar?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    province?: string | null
    zipCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdBy?: string | null
    updatedBy?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    staffProfile?: StaffUncheckedCreateNestedOneWithoutUserInput
    partnerProfile?: PartnerUncheckedCreateNestedOneWithoutUserInput
    doctorProfile?: DoctorUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRefreshTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
  }

  export type UserUpsertWithoutRefreshTokensInput = {
    update: XOR<UserUpdateWithoutRefreshTokensInput, UserUncheckedUpdateWithoutRefreshTokensInput>
    create: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRefreshTokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRefreshTokensInput, UserUncheckedUpdateWithoutRefreshTokensInput>
  }

  export type UserUpdateWithoutRefreshTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    staffProfile?: StaffUpdateOneWithoutUserNestedInput
    partnerProfile?: PartnerUpdateOneWithoutUserNestedInput
    doctorProfile?: DoctorUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRefreshTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    staffProfile?: StaffUncheckedUpdateOneWithoutUserNestedInput
    partnerProfile?: PartnerUncheckedUpdateOneWithoutUserNestedInput
    doctorProfile?: DoctorUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutPatientProfileInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    status?: $Enums.UserStatus
    isEmailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    avatar?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    province?: string | null
    zipCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdBy?: string | null
    updatedBy?: string | null
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    staffProfile?: StaffCreateNestedOneWithoutUserInput
    partnerProfile?: PartnerCreateNestedOneWithoutUserInput
    doctorProfile?: DoctorCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPatientProfileInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    status?: $Enums.UserStatus
    isEmailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    avatar?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    province?: string | null
    zipCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdBy?: string | null
    updatedBy?: string | null
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    staffProfile?: StaffUncheckedCreateNestedOneWithoutUserInput
    partnerProfile?: PartnerUncheckedCreateNestedOneWithoutUserInput
    doctorProfile?: DoctorUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPatientProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatientProfileInput, UserUncheckedCreateWithoutPatientProfileInput>
  }

  export type UserUpsertWithoutPatientProfileInput = {
    update: XOR<UserUpdateWithoutPatientProfileInput, UserUncheckedUpdateWithoutPatientProfileInput>
    create: XOR<UserCreateWithoutPatientProfileInput, UserUncheckedCreateWithoutPatientProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPatientProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPatientProfileInput, UserUncheckedUpdateWithoutPatientProfileInput>
  }

  export type UserUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    staffProfile?: StaffUpdateOneWithoutUserNestedInput
    partnerProfile?: PartnerUpdateOneWithoutUserNestedInput
    doctorProfile?: DoctorUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    staffProfile?: StaffUncheckedUpdateOneWithoutUserNestedInput
    partnerProfile?: PartnerUncheckedUpdateOneWithoutUserNestedInput
    doctorProfile?: DoctorUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutStaffProfileInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    status?: $Enums.UserStatus
    isEmailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    avatar?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    province?: string | null
    zipCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdBy?: string | null
    updatedBy?: string | null
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    partnerProfile?: PartnerCreateNestedOneWithoutUserInput
    doctorProfile?: DoctorCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStaffProfileInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    status?: $Enums.UserStatus
    isEmailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    avatar?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    province?: string | null
    zipCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdBy?: string | null
    updatedBy?: string | null
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    partnerProfile?: PartnerUncheckedCreateNestedOneWithoutUserInput
    doctorProfile?: DoctorUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStaffProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStaffProfileInput, UserUncheckedCreateWithoutStaffProfileInput>
  }

  export type DoctorCreateWithoutStaffInput = {
    id?: string
    doctorNumber: string
    medicalLicense: string
    specialization: string
    subSpecialization?: string | null
    boardCertification?: string | null
    yearsOfExperience?: number | null
    education?: string | null
    hospitalAffiliation?: string | null
    consultationFee?: Decimal | DecimalJsLike | number | string | null
    isAvailable?: boolean
    workingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDoctorProfileInput
  }

  export type DoctorUncheckedCreateWithoutStaffInput = {
    id?: string
    userId: string
    doctorNumber: string
    medicalLicense: string
    specialization: string
    subSpecialization?: string | null
    boardCertification?: string | null
    yearsOfExperience?: number | null
    education?: string | null
    hospitalAffiliation?: string | null
    consultationFee?: Decimal | DecimalJsLike | number | string | null
    isAvailable?: boolean
    workingHours?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorCreateOrConnectWithoutStaffInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutStaffInput, DoctorUncheckedCreateWithoutStaffInput>
  }

  export type UserUpsertWithoutStaffProfileInput = {
    update: XOR<UserUpdateWithoutStaffProfileInput, UserUncheckedUpdateWithoutStaffProfileInput>
    create: XOR<UserCreateWithoutStaffProfileInput, UserUncheckedCreateWithoutStaffProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStaffProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStaffProfileInput, UserUncheckedUpdateWithoutStaffProfileInput>
  }

  export type UserUpdateWithoutStaffProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    partnerProfile?: PartnerUpdateOneWithoutUserNestedInput
    doctorProfile?: DoctorUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStaffProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    partnerProfile?: PartnerUncheckedUpdateOneWithoutUserNestedInput
    doctorProfile?: DoctorUncheckedUpdateOneWithoutUserNestedInput
  }

  export type DoctorUpsertWithoutStaffInput = {
    update: XOR<DoctorUpdateWithoutStaffInput, DoctorUncheckedUpdateWithoutStaffInput>
    create: XOR<DoctorCreateWithoutStaffInput, DoctorUncheckedCreateWithoutStaffInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutStaffInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutStaffInput, DoctorUncheckedUpdateWithoutStaffInput>
  }

  export type DoctorUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorNumber?: StringFieldUpdateOperationsInput | string
    medicalLicense?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    subSpecialization?: NullableStringFieldUpdateOperationsInput | string | null
    boardCertification?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    consultationFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    workingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDoctorProfileNestedInput
  }

  export type DoctorUncheckedUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    doctorNumber?: StringFieldUpdateOperationsInput | string
    medicalLicense?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    subSpecialization?: NullableStringFieldUpdateOperationsInput | string | null
    boardCertification?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: NullableIntFieldUpdateOperationsInput | number | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalAffiliation?: NullableStringFieldUpdateOperationsInput | string | null
    consultationFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    workingHours?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutDoctorProfileInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    status?: $Enums.UserStatus
    isEmailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    avatar?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    province?: string | null
    zipCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdBy?: string | null
    updatedBy?: string | null
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    staffProfile?: StaffCreateNestedOneWithoutUserInput
    partnerProfile?: PartnerCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDoctorProfileInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    status?: $Enums.UserStatus
    isEmailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    avatar?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    province?: string | null
    zipCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdBy?: string | null
    updatedBy?: string | null
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    staffProfile?: StaffUncheckedCreateNestedOneWithoutUserInput
    partnerProfile?: PartnerUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDoctorProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDoctorProfileInput, UserUncheckedCreateWithoutDoctorProfileInput>
  }

  export type StaffCreateWithoutDoctorProfileInput = {
    id?: string
    staffNumber: string
    department?: string | null
    position?: string | null
    specialization?: string | null
    licenseNumber?: string | null
    hiredDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffProfileInput
  }

  export type StaffUncheckedCreateWithoutDoctorProfileInput = {
    id?: string
    userId: string
    staffNumber: string
    department?: string | null
    position?: string | null
    specialization?: string | null
    licenseNumber?: string | null
    hiredDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffCreateOrConnectWithoutDoctorProfileInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutDoctorProfileInput, StaffUncheckedCreateWithoutDoctorProfileInput>
  }

  export type UserUpsertWithoutDoctorProfileInput = {
    update: XOR<UserUpdateWithoutDoctorProfileInput, UserUncheckedUpdateWithoutDoctorProfileInput>
    create: XOR<UserCreateWithoutDoctorProfileInput, UserUncheckedCreateWithoutDoctorProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDoctorProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDoctorProfileInput, UserUncheckedUpdateWithoutDoctorProfileInput>
  }

  export type UserUpdateWithoutDoctorProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    staffProfile?: StaffUpdateOneWithoutUserNestedInput
    partnerProfile?: PartnerUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDoctorProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    staffProfile?: StaffUncheckedUpdateOneWithoutUserNestedInput
    partnerProfile?: PartnerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type StaffUpsertWithoutDoctorProfileInput = {
    update: XOR<StaffUpdateWithoutDoctorProfileInput, StaffUncheckedUpdateWithoutDoctorProfileInput>
    create: XOR<StaffCreateWithoutDoctorProfileInput, StaffUncheckedCreateWithoutDoctorProfileInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutDoctorProfileInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutDoctorProfileInput, StaffUncheckedUpdateWithoutDoctorProfileInput>
  }

  export type StaffUpdateWithoutDoctorProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffNumber?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    hiredDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffProfileNestedInput
  }

  export type StaffUncheckedUpdateWithoutDoctorProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    staffNumber?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    licenseNumber?: NullableStringFieldUpdateOperationsInput | string | null
    hiredDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutPartnerProfileInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    status?: $Enums.UserStatus
    isEmailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    avatar?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    province?: string | null
    zipCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdBy?: string | null
    updatedBy?: string | null
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    staffProfile?: StaffCreateNestedOneWithoutUserInput
    doctorProfile?: DoctorCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPartnerProfileInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    phone?: string | null
    role?: $Enums.UserRole
    status?: $Enums.UserStatus
    isEmailVerified?: boolean
    emailVerifiedAt?: Date | string | null
    avatar?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    province?: string | null
    zipCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdBy?: string | null
    updatedBy?: string | null
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    staffProfile?: StaffUncheckedCreateNestedOneWithoutUserInput
    doctorProfile?: DoctorUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPartnerProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPartnerProfileInput, UserUncheckedCreateWithoutPartnerProfileInput>
  }

  export type UserUpsertWithoutPartnerProfileInput = {
    update: XOR<UserUpdateWithoutPartnerProfileInput, UserUncheckedUpdateWithoutPartnerProfileInput>
    create: XOR<UserCreateWithoutPartnerProfileInput, UserUncheckedCreateWithoutPartnerProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPartnerProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPartnerProfileInput, UserUncheckedUpdateWithoutPartnerProfileInput>
  }

  export type UserUpdateWithoutPartnerProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    staffProfile?: StaffUpdateOneWithoutUserNestedInput
    doctorProfile?: DoctorUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPartnerProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    staffProfile?: StaffUncheckedUpdateOneWithoutUserNestedInput
    doctorProfile?: DoctorUncheckedUpdateOneWithoutUserNestedInput
  }

  export type TransactionItemCreateManyTransactionInput = {
    id?: string
    name: string
    description?: string | null
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateManyTransactionInput = {
    id?: string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionItemUpdateWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionItemUncheckedUpdateWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionItemUncheckedUpdateManyWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUpdateWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instalments?: PaymentInstalmentUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instalments?: PaymentInstalmentUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateManyWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentInstalmentCreateManyPlanInput = {
    id?: string
    paymentId: string
    instalmentNumber: number
    amountDue: number
    amountPaid: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentInstalmentUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    instalmentNumber?: IntFieldUpdateOperationsInput | number
    amountDue?: IntFieldUpdateOperationsInput | number
    amountPaid?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment?: PaymentUpdateOneRequiredWithoutInstalmentsNestedInput
  }

  export type PaymentInstalmentUncheckedUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    instalmentNumber?: IntFieldUpdateOperationsInput | number
    amountDue?: IntFieldUpdateOperationsInput | number
    amountPaid?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentInstalmentUncheckedUpdateManyWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    instalmentNumber?: IntFieldUpdateOperationsInput | number
    amountDue?: IntFieldUpdateOperationsInput | number
    amountPaid?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentInstalmentCreateManyPaymentInput = {
    id?: string
    planId: string
    instalmentNumber: number
    amountDue: number
    amountPaid: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentInstalmentUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    instalmentNumber?: IntFieldUpdateOperationsInput | number
    amountDue?: IntFieldUpdateOperationsInput | number
    amountPaid?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plan?: PaymentPlanUpdateOneRequiredWithoutInstalmentsNestedInput
  }

  export type PaymentInstalmentUncheckedUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    instalmentNumber?: IntFieldUpdateOperationsInput | number
    amountDue?: IntFieldUpdateOperationsInput | number
    amountPaid?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentInstalmentUncheckedUpdateManyWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    instalmentNumber?: IntFieldUpdateOperationsInput | number
    amountDue?: IntFieldUpdateOperationsInput | number
    amountPaid?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicScheduleCreateManyClinicInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClinicScheduleUpdateWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicScheduleUncheckedUpdateWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicScheduleUncheckedUpdateManyWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InpatientEncounterChartCreateManyEncounterInput = {
    id?: string
    staffId: string
    chart: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InpatientEncounterOrderCreateManyEncounterInput = {
    id?: string
    type: $Enums.InpatientEncounterOrderType
    order: string
    status: $Enums.InpatientEncounterOrderStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalRecordRequestCreateManyInpatientEncounterInput = {
    id?: string
    patientProfileId: string
    type: string
    status: string
    fileUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InpatientEncounterChartUpdateWithoutEncounterInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    chart?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InpatientEncounterChartUncheckedUpdateWithoutEncounterInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    chart?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InpatientEncounterChartUncheckedUpdateManyWithoutEncounterInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    chart?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InpatientEncounterOrderUpdateWithoutEncounterInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumInpatientEncounterOrderTypeFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderType
    order?: StringFieldUpdateOperationsInput | string
    status?: EnumInpatientEncounterOrderStatusFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InpatientEncounterOrderUncheckedUpdateWithoutEncounterInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumInpatientEncounterOrderTypeFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderType
    order?: StringFieldUpdateOperationsInput | string
    status?: EnumInpatientEncounterOrderStatusFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InpatientEncounterOrderUncheckedUpdateManyWithoutEncounterInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumInpatientEncounterOrderTypeFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderType
    order?: StringFieldUpdateOperationsInput | string
    status?: EnumInpatientEncounterOrderStatusFieldUpdateOperationsInput | $Enums.InpatientEncounterOrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalRecordRequestUpdateWithoutInpatientEncounterInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientProfile?: PatientProfileUpdateOneRequiredWithoutMedicalRecordRequestsNestedInput
  }

  export type MedicalRecordRequestUncheckedUpdateWithoutInpatientEncounterInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalRecordRequestUncheckedUpdateManyWithoutInpatientEncounterInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientProfileId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomCreateManyBuildingInput = {
    id?: string
    type: $Enums.RoomType
    identifier: string
    description?: string | null
    capacity?: number | null
    status: $Enums.RoomStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomUpdateWithoutBuildingInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    identifier?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumRoomStatusFieldUpdateOperationsInput | $Enums.RoomStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutFacilityNestedInput
  }

  export type RoomUncheckedUpdateWithoutBuildingInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    identifier?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumRoomStatusFieldUpdateOperationsInput | $Enums.RoomStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutFacilityNestedInput
  }

  export type RoomUncheckedUpdateManyWithoutBuildingInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    identifier?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumRoomStatusFieldUpdateOperationsInput | $Enums.RoomStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentCreateManyFacilityInput = {
    id?: string
    patientId: string
    doctorId: string
    date: string
    time: string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentUpdateWithoutFacilityInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientProfileUpdateOneRequiredWithoutAppointmentsNestedInput
    patientAppointment?: PatientAppointmentUpdateOneWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutFacilityInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientAppointment?: PatientAppointmentUncheckedUpdateOneWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutFacilityInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsuranceClaimCreateManyProviderInput = {
    id?: string
    status: string
    message?: string | null
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InsuranceClaimUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: InsuranceClaimItemUpdateManyWithoutClaimNestedInput
  }

  export type InsuranceClaimUncheckedUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: InsuranceClaimItemUncheckedUpdateManyWithoutClaimNestedInput
  }

  export type InsuranceClaimUncheckedUpdateManyWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsuranceClaimItemCreateManyClaimInput = {
    id?: string
    name: string
    description?: string | null
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InsuranceClaimItemUpdateWithoutClaimInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsuranceClaimItemUncheckedUpdateWithoutClaimInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsuranceClaimItemUncheckedUpdateManyWithoutClaimInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientEncounterCreateManyPatientProfileInput = {
    id?: string
    encounterId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InpatientEncounterCreateManyPatientProfileInput = {
    id?: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    triage: $Enums.InpatientTriage
    disposition?: $Enums.InpatientDisposition
    dispositionDate?: string | null
    dispositionTime?: string | null
    dispositionNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OutpatientEncounterCreateManyPatientProfileInput = {
    id?: string
    date: string
    time: string
    chiefComplaint: string
    doctorDiagnosis: string
    type: $Enums.OutpatientEncounterType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentCreateManyPatientInput = {
    id?: string
    doctorId: string
    facilityId?: string | null
    date: string
    time: string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientAppointmentCreateManyPatientInput = {
    id?: string
    doctorId: string
    date: string
    time: string
    status?: $Enums.AppointmentStatus
    name?: string | null
    appointmentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressCreateManyPatientProfileInput = {
    id?: string
    label: string
    country: string
    state: string
    zipCode: string
    city: string
    address: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContactCreateManyPatientProfileInput = {
    id?: string
    type: $Enums.ContactType
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmploymentCreateManyPatientProfileInput = {
    id?: string
    employer: string
    contactPerson?: string | null
    address?: string | null
    phone?: string | null
    email?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmergencyContactCreateManyPatientProfileInput = {
    id?: string
    lastName: string
    firstName: string
    middleName?: string | null
    suffix?: string | null
    relationship: $Enums.Relationship
    phone?: string | null
    email?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalRecordRequestCreateManyPatientProfileInput = {
    id?: string
    inpatientEncounterId: string
    type: string
    status: string
    fileUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientEncounterUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    encounterId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transaction?: TransactionUpdateOneWithoutEncounterNestedInput
  }

  export type PatientEncounterUncheckedUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    encounterId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transaction?: TransactionUncheckedUpdateOneWithoutEncounterNestedInput
  }

  export type PatientEncounterUncheckedUpdateManyWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    encounterId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InpatientEncounterUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: StringFieldUpdateOperationsInput | string
    doctorDiagnosis?: StringFieldUpdateOperationsInput | string
    triage?: EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
    disposition?: EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
    dispositionDate?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionTime?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    charts?: InpatientEncounterChartUpdateManyWithoutEncounterNestedInput
    orders?: InpatientEncounterOrderUpdateManyWithoutEncounterNestedInput
    medicalRecordRequest?: MedicalRecordRequestUpdateManyWithoutInpatientEncounterNestedInput
  }

  export type InpatientEncounterUncheckedUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: StringFieldUpdateOperationsInput | string
    doctorDiagnosis?: StringFieldUpdateOperationsInput | string
    triage?: EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
    disposition?: EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
    dispositionDate?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionTime?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    charts?: InpatientEncounterChartUncheckedUpdateManyWithoutEncounterNestedInput
    orders?: InpatientEncounterOrderUncheckedUpdateManyWithoutEncounterNestedInput
    medicalRecordRequest?: MedicalRecordRequestUncheckedUpdateManyWithoutInpatientEncounterNestedInput
  }

  export type InpatientEncounterUncheckedUpdateManyWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: StringFieldUpdateOperationsInput | string
    doctorDiagnosis?: StringFieldUpdateOperationsInput | string
    triage?: EnumInpatientTriageFieldUpdateOperationsInput | $Enums.InpatientTriage
    disposition?: EnumInpatientDispositionFieldUpdateOperationsInput | $Enums.InpatientDisposition
    dispositionDate?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionTime?: NullableStringFieldUpdateOperationsInput | string | null
    dispositionNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OutpatientEncounterUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: StringFieldUpdateOperationsInput | string
    doctorDiagnosis?: StringFieldUpdateOperationsInput | string
    type?: EnumOutpatientEncounterTypeFieldUpdateOperationsInput | $Enums.OutpatientEncounterType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OutpatientEncounterUncheckedUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: StringFieldUpdateOperationsInput | string
    doctorDiagnosis?: StringFieldUpdateOperationsInput | string
    type?: EnumOutpatientEncounterTypeFieldUpdateOperationsInput | $Enums.OutpatientEncounterType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OutpatientEncounterUncheckedUpdateManyWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: StringFieldUpdateOperationsInput | string
    doctorDiagnosis?: StringFieldUpdateOperationsInput | string
    type?: EnumOutpatientEncounterTypeFieldUpdateOperationsInput | $Enums.OutpatientEncounterType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    facility?: RoomUpdateOneWithoutAppointmentsNestedInput
    patientAppointment?: PatientAppointmentUpdateOneWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    facilityId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientAppointment?: PatientAppointmentUncheckedUpdateOneWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    facilityId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientAppointmentUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment?: AppointmentUpdateOneWithoutPatientAppointmentNestedInput
  }

  export type PatientAppointmentUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    name?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientAppointmentUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    name?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateManyWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zipCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumContactTypeFieldUpdateOperationsInput | $Enums.ContactType
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUncheckedUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumContactTypeFieldUpdateOperationsInput | $Enums.ContactType
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUncheckedUpdateManyWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumContactTypeFieldUpdateOperationsInput | $Enums.ContactType
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmploymentUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    employer?: StringFieldUpdateOperationsInput | string
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmploymentUncheckedUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    employer?: StringFieldUpdateOperationsInput | string
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmploymentUncheckedUpdateManyWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    employer?: StringFieldUpdateOperationsInput | string
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmergencyContactUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    relationship?: EnumRelationshipFieldUpdateOperationsInput | $Enums.Relationship
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmergencyContactUncheckedUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    relationship?: EnumRelationshipFieldUpdateOperationsInput | $Enums.Relationship
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmergencyContactUncheckedUpdateManyWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    relationship?: EnumRelationshipFieldUpdateOperationsInput | $Enums.Relationship
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalRecordRequestUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inpatientEncounter?: InpatientEncounterUpdateOneRequiredWithoutMedicalRecordRequestNestedInput
  }

  export type MedicalRecordRequestUncheckedUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    inpatientEncounterId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalRecordRequestUncheckedUpdateManyWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    inpatientEncounterId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PharmacyItemCreateManyBrandInput = {
    id?: string
    categoryId: string
    name: string
    form: $Enums.PharmacyItemForm
    route: $Enums.PharmacyItemRoute
    strength: string
    stock: number
    unit: string
    sku?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PharmacyItemUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    form?: EnumPharmacyItemFormFieldUpdateOperationsInput | $Enums.PharmacyItemForm
    route?: EnumPharmacyItemRouteFieldUpdateOperationsInput | $Enums.PharmacyItemRoute
    strength?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: PharmacyItemCategoryUpdateOneRequiredWithoutItemsNestedInput
  }

  export type PharmacyItemUncheckedUpdateWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    form?: EnumPharmacyItemFormFieldUpdateOperationsInput | $Enums.PharmacyItemForm
    route?: EnumPharmacyItemRouteFieldUpdateOperationsInput | $Enums.PharmacyItemRoute
    strength?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PharmacyItemUncheckedUpdateManyWithoutBrandInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    form?: EnumPharmacyItemFormFieldUpdateOperationsInput | $Enums.PharmacyItemForm
    route?: EnumPharmacyItemRouteFieldUpdateOperationsInput | $Enums.PharmacyItemRoute
    strength?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PharmacyItemCreateManyCategoryInput = {
    id?: string
    brandId: string
    name: string
    form: $Enums.PharmacyItemForm
    route: $Enums.PharmacyItemRoute
    strength: string
    stock: number
    unit: string
    sku?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PharmacyItemUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    form?: EnumPharmacyItemFormFieldUpdateOperationsInput | $Enums.PharmacyItemForm
    route?: EnumPharmacyItemRouteFieldUpdateOperationsInput | $Enums.PharmacyItemRoute
    strength?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    brand?: PharmacyBrandUpdateOneRequiredWithoutItemsNestedInput
  }

  export type PharmacyItemUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    form?: EnumPharmacyItemFormFieldUpdateOperationsInput | $Enums.PharmacyItemForm
    route?: EnumPharmacyItemRouteFieldUpdateOperationsInput | $Enums.PharmacyItemRoute
    strength?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PharmacyItemUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    form?: EnumPharmacyItemFormFieldUpdateOperationsInput | $Enums.PharmacyItemForm
    route?: EnumPharmacyItemRouteFieldUpdateOperationsInput | $Enums.PharmacyItemRoute
    strength?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    sku?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenCreateManyUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    isRevoked?: boolean
  }

  export type RefreshTokenUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RefreshTokenUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RefreshTokenUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}